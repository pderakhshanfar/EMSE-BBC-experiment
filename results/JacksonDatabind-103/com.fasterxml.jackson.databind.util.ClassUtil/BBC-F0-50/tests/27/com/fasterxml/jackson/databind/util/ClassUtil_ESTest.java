/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 06:54:35 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.MathContext;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockException mockException0 = new MockException();
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, true);
      Class<?> class2 = ClassUtil.classOf(class1);
      ClassUtil.verifyMustOverride(class2, class2, "ws3e6o%\"F&@I$G=-%'");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassUtil.backticked("org.hibernate.proxy.com.fasterxml.jackson.databind.JsonDeserializer");
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.backticked("WRITE_DATES_WITH_ZONE_ID");
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findConstructor(class1, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      Class<Module> class3 = Module.class;
      SimpleType simpleType1 = SimpleType.constructUnsafe(class3);
      ClassUtil.rawClass(simpleType0);
      simpleType1.toCanonical();
      Class<MapType> class4 = MapType.class;
      ClassUtil.isProxyType(class4);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<AccessPattern> class5 = AccessPattern.class;
      // Undeclared exception!
      try { 
        simpleType0.withContentType(simpleType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Simple types have no content types; cannot call withContentType()
         //
         verifyException("com.fasterxml.jackson.databind.type.SimpleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isLocalType(class0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-5));
      Class<ObjectNode> class1 = ObjectNode.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class1, false);
      TypeBindings typeBindings0 = TypeBindings.create(class0, list0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(class1);
      ClassUtil.rawClass(javaType0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.wrapperType(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findClassAnnotations(class1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getOuterClass(class0);
      Random.setNextRandom(14);
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      SimpleType.constructUnsafe(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.getOuterClass(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.quotedOr((Object) null, "");
      ClassUtil.primitiveType(class0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      MockFile mockFile0 = new MockFile("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      jsonFactory2.createGenerator((File) mockFile0, jsonEncoding0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "JSON");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // JSON
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_STRING: JSON
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.emptyIterator();
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Class<RuntimeException> class0 = RuntimeException.class;
          ClassUtil.isJacksonStdImpl(class0);
          TypeFactory typeFactory0 = TypeFactory.defaultInstance();
          TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
          ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
          ArrayType arrayType1 = arrayType0.withContentTypeHandler((Object) null);
          ClassUtil.rawClass(arrayType1);
          BufferRecycler bufferRecycler0 = new BufferRecycler();
          IOContext iOContext0 = new IOContext(bufferRecycler0, arrayType0, false);
          ObjectMapper objectMapper0 = new ObjectMapper();
          JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
          ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<Double>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.allOf(class0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.allOf(class0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      Class<Void> class1 = Void.class;
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes(javaType0, class1, true);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)105;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Character character0 = Character.valueOf('~');
      ClassUtil.quotedOr(character0, "s1]TAg3H6f}G0J");
      System.setCurrentTimeMillis(0L);
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.getClassDescription(class0);
      Class<Object> class2 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class0, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      JsonLocation jsonLocation0 = new JsonLocation(list0, 0L, 0L, 0, 0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, (String) null, jsonLocation0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "sY)$QYxu,9~a)huO", 0, intArray0, jsonMappingException0);
      batchUpdateException0.getNextException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("sY)$QYxu,9~a)huO", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLNonTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      SimpleType.constructUnsafe(class0);
      Class<SimpleModule> class1 = SimpleModule.class;
      SimpleModule simpleModule0 = ClassUtil.createInstance(class1, false);
      Class<SimpleModule> class2 = SimpleModule.class;
      ClassUtil.hasClass(simpleModule0, class2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = ", problem: ";
      String string1 = "java.lang.Character";
      MockIOException mockIOException0 = new MockIOException("java.lang.Character");
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isProxyType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      Class<Long> class3 = Long.class;
      ClassUtil.isJacksonStdImpl(class3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.allOf(class0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.hasClass(class0, class0);
      MockError mockError0 = new MockError("com.fasterxml.jackson.core.util.ByteArrayBuilder");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("p");
      mockIOException0.fillInStackTrace();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("!", "'iiE+IjKLV", 15);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver", (Map<String, ClientInfoStatus>) null, sQLTransactionRollbackException0);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("x-D[qEk2C", "x-D[qEk2C", 15, (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLTransactionRollbackException0.initCause(sQLClientInfoException1);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0, "net.sf.cglib.proxy.java.lang.RuntimeException");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isConcrete(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "hoLBMctfQ))39y|", "hoLBMctfQ))39y|");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.JsonMappingException` from String \"hoLBMctfQ))39y|\": hoLBMctfQ))39y|
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockException mockException0 = new MockException();
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Module> class0 = Module.class;
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Module>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      ClassUtil.findEnumType(enumMap0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("$,");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockRuntimeException0, (Object) enumMap0, (-2651));
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // $, (through reference chain: java.util.EnumMap[?])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      Character character0 = Character.valueOf('n');
      ClassUtil.getClassDescription(character0);
      Short short0 = new Short((short)96);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.hasClass(short0, class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)21;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 16, objectMapper1, bufferedOutputStream0, byteArray0, 2, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`java.lang.Character`", "`java.lang.Character`");
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) filterOutputStream0, (Exception) sQLTransactionRollbackException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException: java.sql.SQLTransactionRollbackException: `java.lang.Character`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockError mockError0 = new MockError("r");
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializerFactoryConfig0, false);
      PipedReader pipedReader0 = new PipedReader(451);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'a';
      charArray0[2] = 'c';
      charArray0[3] = 'V';
      charArray0[4] = '6';
      charArray0[5] = 'd';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1016), pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 50, 33, false);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      Class<Integer> class1 = Integer.class;
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, "?nFDF5zM^O6.<");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_EMBEDDED_OBJECT: ?nFDF5zM^O6.<
         //  at [Source: (com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Module> class0 = Module.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.getCause();
      String string0 = "Gb1fXiyq:{^..jpD@*W";
      mockError0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "Gb1fXiyq:{^..jpD@*W");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ClassUtil.canBeABeanType(class0);
      Character character0 = Character.valueOf('.');
      ClassUtil.classOf(character0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<Short> class1 = Short.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-970));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.classOf(accessPattern0);
      coreXMLDeserializers_Std0.getValueType();
      // Undeclared exception!
      try { 
        ArrayType.construct((JavaType) null, (TypeBindings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-49);
      MockError mockError0 = new MockError();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("xfT}8i$QsScznBY", mockError0);
      MockIOException mockIOException0 = new MockIOException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.canBeABeanType(class0);
      Object object0 = ClassUtil.defaultValue(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.hasClass(object0, class1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)98;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Double double0 = new Double(178.738163456545);
      ClassUtil.quotedOr(double0, "java.lang.Float");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.canBeABeanType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.nameOf(class1);
      ClassUtil.nullOrToString(class1);
      ClassUtil.getGenericInterfaces(class2);
      Class<Byte> class3 = Byte.class;
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("MzVq/T i)EZ", ">n=^3L}`@?gy~QmrNGN");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(">n=^3L}`@?gy~QmrNGN", sQLInvalidAuthorizationSpecException0);
      sQLTransientConnectionException0.getStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLInvalidAuthorizationSpecException0, "Lqj/N%");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      enumMap0.put(accessPattern0, jsonMappingException0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getDeclaredFields(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-49);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (-1653959476));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      ClassUtil.findConstructor(class0, true);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isConcrete(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.findEnumType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(mockRuntimeException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "P] <LtxHV", "P] <LtxHV", 634);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("P] <LtxHV", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", 634);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("5/1aKsvZ+&Y?\"{P", "RG9a\"F@Nifc?3", "P] <LtxHV", 2927);
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLSyntaxErrorException0.setStackTrace(stackTraceElementArray0);
      mockRuntimeException0.toString();
      mockRuntimeException0.initCause(sQLSyntaxErrorException0);
      mockRuntimeException0.getLocalizedMessage();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isJacksonStdImpl(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("net.sf.cglib.proxy.java.lang.Object", "net.sf.cglib.proxy.java.lang.Object", (-4));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "local/anonymous");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ps>*O;s#g?;tD_S5f");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte) (-64);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.Character");
      ClassUtil.classNameOf("org.hibernate.proxy.java.lang.Character");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nonNullString("org.hibernate.proxy.java.lang.Object");
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.hasClass(list0, class0);
      ClassUtil.findSuperTypes(class0, class0, list0);
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isBogusClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.findClassAnnotations(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class2);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.nameOf(class1);
      Class<InputStream> class2 = InputStream.class;
      ClassUtil.isJacksonStdImpl(class2);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-638502591);
      intArray0[2] = 1203;
      intArray0[3] = (-3072);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`com.fasterxml.jackson.databind.type.CollectionType`", "L", intArray0);
      ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      Class<Short> class1 = Short.TYPE;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getClassMethods(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isCollectionMapOrArray(class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.emptyIterator();
      ClassUtil.isNonStaticInnerClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      List<JavaType> list0 = new LinkedList<JavaType>();
      Class<Float> class1 = Float.TYPE;
      ClassUtil.primitiveType(class1);
      ClassUtil.quotedOr(simpleType0, "Operation should not be attempted on ");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getClassMethods(class1);
      Class<Object> class2 = Object.class;
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findRawSuperTypes(class2, class3, true);
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.createInstance(class4, true);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"%s\"");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("]<twj\"lX", "\"%s\"", hashMap0, sQLTransientConnectionException0);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLTransientConnectionException0);
      ClassUtil.throwIfError(sQLClientInfoException1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1, 1);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);
      Class<HashMap> class1 = HashMap.class;
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      // Undeclared exception!
      try { 
        typeFactory2.constructMapType(class1, class2, class2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier Mock for TypeModifier, hashCode: 237545705 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1515549223) return null for type [simple type, class java.lang.Enum]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getGenericSuperclass(class1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ClassUtil.throwIfRTE(sQLRecoverableException0);
      ClassUtil.isJacksonStdImpl((Object) "");
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L&]_<q@ndg/jkP`~~H");
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(33);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ClassUtil.findEnumType((Enum<?>) clientInfoStatus0);
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis((-1L));
      ClassUtil.getClassDescription((Object) null);
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, (String) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing type id when trying to resolve subtype of null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getClassDescription((Object) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "enum");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, false);
      Double double0 = new Double(0.0);
      ClassUtil.nullOrToString(double0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.nameOf(class1);
      ClassUtil.getGenericInterfaces(class0);
      Class<Error> class2 = Error.class;
      ClassUtil.nameOf(class2);
      System.setCurrentTimeMillis((-2526L));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockError mockError0 = new MockError("Cannot figure out type for EnumSet (odd JDK platform?)", (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fasterxml.jackson.databind.DatabindContext", "Cannot figure out type for EnumSet (odd JDK platform?)", 226, mockError0);
      SQLWarning sQLWarning0 = new SQLWarning("Cannot figure out type for EnumSet (odd JDK platform?)", "UhvpC#f&iwS", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0, "com.fasterxml.jackson.databind.DatabindContext");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.getClassMethods(class1);
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(13);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)100;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, byteArrayOutputStream0, byteArray0, (byte)96, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("I<GH_&", "I<GH_&", 729);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("NUMBER_FLOAT", "I<GH_&", (byte)53, sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: NUMBER_FLOAT
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getConstructors(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Missing creator property '%s' (index %d); `DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES` enabled", "org.hibernate.proxy.java.lang.Double", sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLIntegrityConstraintViolationException0);
      ClassUtil.throwIfIOE(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("6K&WHbO!0");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "9sd?sfl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal(10, mathContext0);
      bigDecimal0.toEngineeringString();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "org.hibernate.proxy.java.lang.Double");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.String` from number 10: org.hibernate.proxy.java.lang.Double
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isProxyType(class0);
      Class<SimpleModule> class1 = SimpleModule.class;
      ClassUtil.getClassMethods(class1);
      Double double0 = new Double((-1791.32052));
      ClassUtil.hasClass(double0, class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
      boolean boolean0 = new Boolean(false);
      ClassUtil.getClassDescription(class0);
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedWriter0, "Default constructor for ", jsonLocation0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.java.lang.reflect.AccessibleObject", "C' J}<?mu!lgbL", jsonMappingException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLNonTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("C' J}<?mu!lgbL", "]Ek", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0, "C' J}<?mu!lgbL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // C' J}<?mu!lgbL
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLFeatureNotSupportedException0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockThrowable mockThrowable0 = new MockThrowable();
      mockRuntimeException0.initCause(mockThrowable0);
      ClassUtil.getRootCause(mockRuntimeException0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Class<SimpleModule> class0 = SimpleModule.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperTypes(class1, class0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.getRootCause(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isLocalType(class0, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.nameOf(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)105;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.findSuperClasses(class0, class0, true);
      Class<Float> class1 = Float.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`java.lang.Long`");
      ClassUtil.isCollectionMapOrArray(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperClasses(class2, class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findEnumType(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<ObjectNode> class0 = ObjectNode.class;
      ClassUtil.isConcrete(class0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Byte> class1 = Byte.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<String> class3 = String.class;
      ClassUtil.getPackageName(class3);
      Class<Float> class4 = Float.class;
      ClassUtil.getPackageName(class4);
      Class<PlaceholderForType> class5 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes(class0, class5, false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.backticked((String) null);
      Float float0 = new Float((-1.0));
      ClassUtil.getClassDescription(float0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.hasClass(placeholderForType0, class1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil classUtil0 = new ClassUtil();
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.getDeclaredFields(class2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-393805500));
      Class<Boolean> class3 = Boolean.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class3, (JavaType) placeholderForType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) arrayType0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedList> class4 = LinkedList.class;
      Class<Object> class5 = Object.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class4, class5);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CollectionType collectionType2 = collectionType1.withContentValueHandler(" is not a primitive type");
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, collectionType2, "D:H^%z471|tYjp^FCd");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.type.CollectionType (of class com.fasterxml.jackson.databind.type.PlaceholderForType) must override method 'D:H^%z471|tYjp^FCd'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      Byte byte0 = new Byte((byte) (-123));
      Byte byte1 = new Byte((byte) (-89));
      Byte byte2 = new Byte((byte) (-32));
      ClassUtil.nonNull(byte2, (Byte) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.hasClass(list0, class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      Class<Module> class1 = Module.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.backticked((String) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1520);
      // Undeclared exception!
      try { 
        placeholderForType0.withContentTypeHandler(class3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-20));
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) placeholderForType0);
      StringBuilder stringBuilder0 = new StringBuilder();
      CollectionLikeType collectionLikeType1 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      StringBuilder stringBuilder1 = collectionLikeType1.getGenericSignature(stringBuilder0);
      PlaceholderForType placeholderForType1 = new PlaceholderForType((-20));
      StringBuilder stringBuilder2 = placeholderForType1.getGenericSignature(stringBuilder1);
      collectionLikeType0.getErasedSignature(stringBuilder2);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType1, (Class<?>) class0, true);
      SQLWarning sQLWarning0 = new SQLWarning();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = new Character('V');
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)82;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, bufferedOutputStream0, byteArray0, (-1718), false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      MockError mockError0 = new MockError("HMl1s#[7<a@i~pZ{s0|");
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(mockError0);
      Class<Long> class0 = Long.class;
      ObjectReader objectReader2 = objectReader1.withView(class0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader3 = objectReader2.withoutFeatures(deserializationFeatureArray0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      ObjectReader objectReader4 = objectReader3.without(formatFeature0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[7];
      objectReaderArray0[0] = objectReader4;
      objectReaderArray0[1] = objectReader3;
      objectReaderArray0[2] = objectReader1;
      objectReaderArray0[3] = objectReader1;
      objectReaderArray0[4] = objectReader2;
      objectReaderArray0[5] = objectReader4;
      objectReaderArray0[6] = objectReader1;
      ObjectReader objectReader5 = objectReader4.withFormatDetection(objectReaderArray0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectReader5);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("HMl1s#[7<a@i~pZ{s0|", ")ci>68|b6L8]LT ", (-3212));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException: HMl1s#[7<a@i~pZ{s0|
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.backticked("+7)Q");
      Float float0 = new Float(0.0);
      ClassUtil.nonNull((Float) null, float0);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getExceptionTypes();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotations();
      constructor0.getDeclaredAnnotation(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.nameOf(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("&E.E8I0Ew/<X_A,}5", "+7)Q", 92);
      SQLTransientException sQLTransientException1 = new SQLTransientException("net.sf.cglib.proxy.java.lang.String", sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // &E.E8I0Ew/<X_A,}5
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "?c!_n(+ml{d");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(": latter is not a subtype of former", jsonMappingException1);
      jsonMappingException_Reference0.toString();
      File file0 = MockFile.createTempFile("?c!_n(+ml{d", "QZK_(!ap2[tQtrWxD8.");
      sQLRecoverableException0.printStackTrace();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ": latter is not a subtype of former");
      sQLTimeoutException0.printStackTrace(printStream0);
      ClassUtil.isJacksonStdImpl((Object) null);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): (was java.sql.SQLRecoverableException) (through reference chain: UNKNOWN[0])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findEnumType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.backticked("jE^-bWR!=4E[Is");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1520);
      // Undeclared exception!
      try { 
        placeholderForType0.withContentTypeHandler((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassUtil.backticked("");
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<String> class1 = String.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class2);
      Class<Float> class3 = Float.class;
      ClassUtil.findSuperTypes(class3, class0);
      ClassUtil.hasClass(class2, class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("u:", "primitive", (-794));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ClassUtil.throwIfRTE(sQLRecoverableException0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.findEnumType((Enum<?>) clientInfoStatus0);
      ClassUtil.nonNullString((String) null);
      ClassUtil.nonNull((Byte) null, (Byte) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassUtil.nonNullString("");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "entrySet");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.isJacksonStdImpl(class0);
      Class<SimpleType> class2 = SimpleType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.throwIfError((Throwable) null);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.hasEnclosingMethod(class1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getConstructors(class0);
      ClassUtil.backticked("Y_C");
      ClassUtil.getClassDescription(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findConstructor(class1, false);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Short> class0 = Short.class;
      ClassUtil.isLocalType(class0, true);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.classNameOf((Object) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("WRITE_DATES_WITH_ZONE_ID", "WRITE_DATES_WITH_ZONE_ID", (-480));
      Class<Character> class0 = Character.class;
      ClassUtil.nameOf(class0);
      ClassUtil.classNameOf((Object) null);
      Byte byte0 = new Byte((byte)60);
      ClassUtil.nonNull((Byte) null, byte0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "entrySet");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.getRootCause(mockRuntimeException0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (List<JavaType>) null);
      Class<Character> class2 = Character.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2304);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[0]);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(referenceType0, referenceType0, referenceType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) referenceType0, (JavaType) mapLikeType0);
      MapType mapType1 = mapType0.withContentTypeHandler("entrySet");
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType2 = mapType1.withKeyType(javaType0);
      MapType mapType3 = mapType2.withKeyTypeHandler(class0);
      MapType mapType4 = mapType3.withKeyValueHandler(typeBindings0);
      ClassUtil.nonNull(mapType4, mapType4);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.isJacksonStdImpl(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("WRITE_DATES_WITH_ZONE_ID", "WRITE_DATES_WITH_ZONE_ID", (-480));
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.emptyIterator();
      ClassUtil.nullOrToString((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ClassUtil.throwIfRTE(sQLRecoverableException0);
      ClassUtil.isJacksonStdImpl((Object) "");
      Class<Float> class0 = Float.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isBogusClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("non-static member class", "{?dlMlP&", "non-static member class", 2);
      stackTraceElementArray0[0] = stackTraceElement0;
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findEnumType(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "RnA4x|#&g:=O9?'");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("MRQclCApG&`", jsonMappingException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("RnA4x|#&g:=O9?'", "[recursive type; ", sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "non-static member class");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) placeholderForType0);
      StringBuilder stringBuilder0 = new StringBuilder();
      CollectionLikeType collectionLikeType1 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      StringBuilder stringBuilder1 = collectionLikeType1.getGenericSignature(stringBuilder0);
      PlaceholderForType placeholderForType1 = new PlaceholderForType(2);
      StringBuilder stringBuilder2 = placeholderForType1.getGenericSignature(stringBuilder1);
      collectionLikeType0.getErasedSignature(stringBuilder2);
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
      Class<Character> class2 = Character.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.rawClass(placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<CollectionType> class1 = CollectionType.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.hasClass((Object) null, (Class<?>) null);
      ClassUtil.findClassAnnotations(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.throwIfRTE((Throwable) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      simpleAbstractTypeResolver0.resolveAbstractType((DeserializationConfig) null, (BeanDescription) basicBeanDescription0);
      String string0 = "Invalid numeric value: ";
      defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "Invalid numeric value: ");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "Invalid numeric value: ", (Throwable) null);
      Class<PlaceholderForType>[] classArray0 = (Class<PlaceholderForType>[]) Array.newInstance(Class.class, 4);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      classArray0[0] = class0;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      classArray0[1] = class1;
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      classArray0[2] = class2;
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      classArray0[3] = class3;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      sQLTransientConnectionException0.printStackTrace();
      ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.findEnumType((Enum<?>) clientInfoStatus0);
      ClassUtil.nameOf(class1);
      ClassUtil.classNameOf(constructor0);
      ClassUtil.nonNull((Byte) null, (Byte) null);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = new Boolean(" R8>@_6n");
      Class<Short> class0 = Short.TYPE;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "array");
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.nameOf(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.findRawSuperTypes(class1, class1, false);
      ClassUtil.classNameOf("array");
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<RuntimeException>[] classArray0 = (Class<RuntimeException>[]) Array.newInstance(Class.class, 4);
      Class<RuntimeException> class2 = RuntimeException.class;
      classArray0[0] = class2;
      Class<RuntimeException> class3 = RuntimeException.class;
      classArray0[1] = class3;
      Class<RuntimeException> class4 = RuntimeException.class;
      classArray0[2] = class4;
      Class<RuntimeException> class5 = RuntimeException.class;
      classArray0[3] = class5;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findEnumType(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "MRQclCApG&`");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("[recursive type; ", jsonMappingException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[recursive type; ", "[recursive type; ", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "[recursive type; ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [recursive type; 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.emptyIterator();
      ClassUtil.nullOrToString((Object) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.classOf(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.getClassMethods(class1);
      Class<Long> class3 = Long.class;
      boolean boolean0 = false;
      Class<Long> class4 = Long.class;
      try { 
        ClassUtil.createInstance(class4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getClassMethods(class0);
      Class<Long> class1 = Long.TYPE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Fw[8dmY::,;sV9");
      ClassUtil.getPackageName(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, false);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("WRITE_DATES_WITH_ZONE_ID", "WRITE_DATES_WITH_ZONE_ID", (-480));
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WRITE_DATES_WITH_ZONE_ID
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte)53;
      Byte byte1 = new Byte((byte)53);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.hasClass(byte1, class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericExceptionTypes();
      constructor0.getParameterTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Short> class1 = Short.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      classUtil_Ctor0.getParamCount();
      Class<Void> class2 = Void.class;
      ClassUtil.findSuperTypes(class2, class1, list0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.nameOf(class0);
      ClassUtil.getDeclaringClass(class0);
      Iterator<ReferenceType> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.classOf(iterator0);
      Class<Void> class1 = Void.class;
      ClassUtil.getClassMethods(class1);
      Class<Long> class2 = Long.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      Class<Float> class1 = Float.class;
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("WRITE_DATES_WITH_ZONE_ID", "WRITE_DATES_WITH_ZONE_ID", (-480));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(collectionLikeType0, ">FQq E'g\"tJ'KHw(");
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-56);
      longArray0[1] = (-3931L);
      longArray0[2] = (long) (-56);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(" R8>@_6n", "serialVersionUID", (-56), longArray0, jsonMappingException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonFactory0.enable(jsonGenerator_Feature0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [collection-like type; class java.lang.Object, contains [simple type, class java.lang.Object]]: >FQq E'g\"tJ'KHw(
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      ClassUtil.isJacksonStdImpl((Object) classUtil_Ctor0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("java.lang.Double", clientInfoStatus0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("elementType");
      sQLTransientConnectionException0.printStackTrace();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("java.lang.Double", "java.lang.Double", 6000, hashMap0, sQLTransientConnectionException0);
      ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.findEnumType((Enum<?>) clientInfoStatus0);
      Class<Float> class2 = Float.class;
      ClassUtil.nameOf(class2);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0, "`java.lang.Float`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `java.lang.Float`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getClassMethods(class0);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.getPackageName(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      Boolean boolean0 = new Boolean(" R8>@_6n");
      Class<Short> class1 = Short.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.isLocalType(class1, false);
      ClassUtil.getDeclaredFields(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Long> class3 = Long.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getClassDescription(class0);
      Character character0 = new Character('v');
      ClassUtil.quotedOr((Object) null, "`java.lang.String`");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Fus`OuG7");
      Throwable throwable0 = ClassUtil.getRootCause(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(throwable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClassUtil.backticked("ZERO_LENGTH_ENUM_ARRAY");
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isJacksonStdImpl(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ZERO_LENGTH_ENUM_ARRAY", ";T`Py`p", (-1365));
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<String> class0 = String.class;
      Long long0 = new Long((-1L));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-789));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -789
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Long long0 = new Long(0L);
      ClassUtil.getClassDescription(long0);
      Class<Byte> class0 = Byte.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`java.lang.Long`");
      ClassUtil.nameOf(class0);
      Class<String> class1 = String.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getConstructors(class2);
      Class<Long> class3 = Long.class;
      ClassUtil.getClassMethods(class3);
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredFields(class4);
      Class<IOException> class5 = IOException.class;
      ClassUtil.getConstructors(class5);
      Class<RuntimeException> class6 = RuntimeException.class;
      ClassUtil.findSuperTypes((JavaType) null, class6, false);
      Class<Character> class7 = Character.class;
      ClassUtil.getEnclosingClass(class7);
      ClassUtil.isJacksonStdImpl((Object) class4);
      ClassUtil.getClassDescription(class5);
      ClassUtil.quotedOr(class4, "`java.io.IOException`");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`java.lang.Byte`");
      Throwable throwable0 = ClassUtil.getRootCause(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(throwable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("G05)APz", "'7UvUFe.}YX%si0HF", 98);
      MockThrowable mockThrowable0 = new MockThrowable("G05)APz", sQLTimeoutException0);
      ClassUtil.throwRootCauseIfIOE(mockThrowable0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      collectionType0.toString();
      mockThrowable0.fillInStackTrace();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.getConstructors(class0);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, false);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.getEnclosingClass(class3);
      ClassUtil.isJacksonStdImpl((Object) "'7UvUFe.}YX%si0HF");
      ClassUtil.getClassDescription(collectionLikeType0);
      ClassUtil.quotedOr(mockThrowable0, "G05)APz");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`com.fasterxml.jackson.databind.type.CollectionLikeType`");
      ClassUtil.getRootCause(mockRuntimeException0);
      ClassUtil.throwIfRTE(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findConstructor(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(collectionLikeType0, ">FQq E'g\"tJ'KHw(");
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-56);
      longArray0[1] = (-3931L);
      longArray0[2] = (long) (-56);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(" R8>@_6n", "serialVersionUID", (-56), longArray0, jsonMappingException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getDeclaredAnnotations();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotation(class2);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class3);
      constructor0.getAnnotatedReceiverType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getParameterTypes();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      FileSystemHandling.shouldAllThrowIOExceptions();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.isCollectionMapOrArray(class4);
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.nameOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil classUtil0 = new ClassUtil();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<Float> class2 = Float.class;
      ClassUtil.isLocalType(class2, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      String string0 = "y!wg@S%";
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "y!wg@S%", 0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        BasicBeanDescription.forDeserialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getRootCause(sQLTransactionRollbackException0);
      ClassUtil.canBeABeanType(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Error> class1 = Error.class;
      ClassUtil.findSuperTypes(class0, class1);
      SQLDataException sQLDataException0 = new SQLDataException("hK/{@CVN");
      MockIOException mockIOException0 = new MockIOException(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonParser jsonParser0 = jsonFactory1.createParser("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "Class ", (Throwable) mockIOException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Class 
         //  at [Source: (String)\"JSON\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Unexpected end-of-String in base64 content", "iXAQD.", (-794));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_SETTERS;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE;
      mapperFeatureArray0[4] = mapperFeature4;
      ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      ObjectReader objectReader0 = objectMapper1.readerFor((JavaType) mapLikeType0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("vals", false);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 4, objectReader0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: Unexpected end-of-String in base64 content
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetter();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 2);
      Class<Double> class1 = Double.class;
      classArray0[0] = class1;
      Class<Double> class2 = Double.class;
      classArray0[1] = class2;
      basicBeanDescription0.findAnyGetter();
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) long0);
      assertFalse(boolean0);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      Class<Object> class4 = Object.class;
      Class<?> class5 = ClassUtil.getDeclaringClass(class4);
      assertNull(class5);
      
      Class<Double> class6 = Double.class;
      boolean boolean1 = ClassUtil.isProxyType(class6);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<ArrayType> class7 = ArrayType.class;
      try { 
        ClassUtil.createInstance(class7, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<String> class2 = String.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      Class<NoClass> class4 = NoClass.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class4);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 7498;
      intArray0[2] = (-1);
      intArray0[3] = 1677;
      intArray0[4] = (-4510);
      intArray0[5] = 711;
      intArray0[6] = 4885;
      intArray0[7] = 1;
      SQLWarning sQLWarning0 = new SQLWarning("'U]/F{_fC*/ gE", " is not a primitive type", 0);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning: 'U]/F{_fC*/ gE", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(" is not a primitive type", sQLWarning0.getSQLState());
      assertEquals("'U]/F{_fC*/ gE", sQLWarning0.getMessage());
      
      MockThrowable mockThrowable0 = new MockThrowable((String) null, sQLWarning0);
      assertNotNull(mockThrowable0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, intArray0, mockThrowable0);
      assertNotNull(batchUpdateException0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 7498, (-1), 1677, (-4510), 711, 4885, 1}, intArray0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.SQLWarning: 'U]/F{_fC*/ gE", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(" is not a primitive type", sQLWarning0.getSQLState());
      assertEquals("'U]/F{_fC*/ gE", sQLWarning0.getMessage());
      
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, batchUpdateException0);
      assertNotNull(sQLDataException0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 7498, (-1), 1677, (-4510), 711, 4885, 1}, intArray0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals("java.sql.SQLWarning: 'U]/F{_fC*/ gE", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(" is not a primitive type", sQLWarning0.getSQLState());
      assertEquals("'U]/F{_fC*/ gE", sQLWarning0.getMessage());
      
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.throwIfError(sQLDataException0);
      assertNotNull(sQLDataException1);
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 7498, (-1), 1677, (-4510), 711, 4885, 1}, intArray0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLWarning: 'U]/F{_fC*/ gE", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(" is not a primitive type", sQLWarning0.getSQLState());
      assertEquals("'U]/F{_fC*/ gE", sQLWarning0.getMessage());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(28, methodArray0.length);
      
      String string0 = ClassUtil.nonNullString("vals");
      assertNotNull(string0);
      assertEquals("vals", string0);
      
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Class<?> class2 = classUtil_Ctor0.getDeclaringClass();
      assertNotNull(class2);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Void> class0 = Void.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Short> class0 = Short.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      
      Class<Float> class2 = Float.class;
      String string0 = ClassUtil.isLocalType(class2, true);
      assertNull(string0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(", problem: ");
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(2, typeArray0.length);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class2);
      assertNull(annotation0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      Class<Annotation> class3 = Annotation.class;
      Annotation[] annotationArray1 = constructor0.getDeclaredAnnotationsByType(class3);
      assertNotNull(annotationArray1);
      assertFalse(annotationArray1.equals((Object)annotationArray0));
      assertSame(class3, class2);
      assertNotSame(annotationArray1, annotationArray0);
      assertEquals(0, annotationArray1.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReceiverType();
      assertNotNull(annotatedType0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray2);
      assertEquals(0, annotationArray2.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      Annotation[][] annotationArray3 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray3);
      assertSame(annotationArray3, annotationArray2);
      assertEquals(0, annotationArray3.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      Annotation[][] annotationArray4 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray4);
      assertSame(annotationArray4, annotationArray3);
      assertSame(annotationArray4, annotationArray2);
      assertEquals(0, annotationArray4.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      Annotation[] annotationArray5 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray5);
      assertFalse(annotationArray5.equals((Object)annotationArray1));
      assertNotSame(annotationArray5, annotationArray1);
      assertSame(annotationArray5, annotationArray0);
      assertEquals(0, annotationArray5.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      
      Class<AccessibleObject> class4 = AccessibleObject.class;
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class4);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Boolean`", string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " R8>@_6n");
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Short> class1 = Short.class;
      boolean boolean2 = ClassUtil.isProxyType(class1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(1, fieldArray0.length);
      
      boolean boolean3 = ClassUtil.isCollectionMapOrArray(class0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("enable", "enable");
      assertNotNull(sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("enable", sQLNonTransientException0.getSQLState());
      assertEquals("enable", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: enable", sQLNonTransientException0.toString());
      
      SQLNonTransientException sQLNonTransientException1 = (SQLNonTransientException)sQLNonTransientException0.fillInStackTrace();
      assertNotNull(sQLNonTransientException1);
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException1, sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("enable", sQLNonTransientException0.getSQLState());
      assertEquals("enable", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: enable", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: enable", sQLNonTransientException1.toString());
      assertEquals("enable", sQLNonTransientException1.getMessage());
      assertEquals("enable", sQLNonTransientException1.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("u2+R,n]lXXXp", "~4Xav[J(Lq~S^=_Zt", sQLNonTransientException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("enable", sQLNonTransientException0.getSQLState());
      assertEquals("enable", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: enable", sQLNonTransientException0.toString());
      assertEquals("u2+R,n]lXXXp", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: u2+R,n]lXXXp", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("~4Xav[J(Lq~S^=_Zt", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLNonTransientException sQLNonTransientException2 = (SQLNonTransientException)ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLNonTransientException2);
      assertSame(sQLNonTransientException0, sQLNonTransientException2);
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException2, sQLNonTransientException0);
      assertSame(sQLNonTransientException2, sQLNonTransientException1);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("enable", sQLNonTransientException0.getSQLState());
      assertEquals("enable", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException: enable", sQLNonTransientException0.toString());
      assertEquals("u2+R,n]lXXXp", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: u2+R,n]lXXXp", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("~4Xav[J(Lq~S^=_Zt", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLNonTransientException2.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: enable", sQLNonTransientException2.toString());
      assertEquals("enable", sQLNonTransientException2.getMessage());
      assertEquals("enable", sQLNonTransientException2.getSQLState());
      
      Class<ArrayType> class2 = ArrayType.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, "enable", (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.String (of class com.fasterxml.jackson.databind.type.ArrayType) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("9y!{|m");
      assertNotNull(sQLTransientException0);
      assertEquals("9y!{|m", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientException0);
      assertNotNull(mockThrowable0);
      
      SQLTransientException sQLTransientException1 = (SQLTransientException)ClassUtil.throwRootCauseIfIOE(mockThrowable0);
      assertNotNull(sQLTransientException1);
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
      assertEquals("9y!{|m", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLTransientException: 9y!{|m", mockThrowable0.toString());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", sQLTransientException1.toString());
      assertEquals("9y!{|m", sQLTransientException1.getMessage());
      assertNull(sQLTransientException1.getSQLState());
      assertEquals(0, sQLTransientException1.getErrorCode());
      
      SQLTransientException sQLTransientException2 = (SQLTransientException)sQLTransientException0.fillInStackTrace();
      assertNotNull(sQLTransientException2);
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException0, sQLTransientException2);
      assertSame(sQLTransientException2, sQLTransientException1);
      assertSame(sQLTransientException2, sQLTransientException0);
      assertEquals("9y!{|m", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("9y!{|m", sQLTransientException2.getMessage());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", sQLTransientException2.toString());
      assertNull(sQLTransientException2.getSQLState());
      assertEquals(0, sQLTransientException2.getErrorCode());
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        mockThrowable0.initCause(sQLTransientException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLTransientException: 9y!{|m
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = ClassUtil.hasClass(list0, class0);
      assertFalse(boolean0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Constructor<CollectionType> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("G05)APz", "'7UvUFe.}YX%si0HF", 98);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: G05)APz", sQLTimeoutException0.toString());
      assertEquals(98, sQLTimeoutException0.getErrorCode());
      assertEquals("G05)APz", sQLTimeoutException0.getMessage());
      assertEquals("'7UvUFe.}YX%si0HF", sQLTimeoutException0.getSQLState());
      
      MockThrowable mockThrowable0 = new MockThrowable("G05)APz", sQLTimeoutException0);
      assertNotNull(mockThrowable0);
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)ClassUtil.throwRootCauseIfIOE(mockThrowable0);
      assertNotNull(sQLTimeoutException1);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: G05)APz", sQLTimeoutException0.toString());
      assertEquals(98, sQLTimeoutException0.getErrorCode());
      assertEquals("G05)APz", sQLTimeoutException0.getMessage());
      assertEquals("'7UvUFe.}YX%si0HF", sQLTimeoutException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: G05)APz", mockThrowable0.toString());
      assertEquals("G05)APz", mockThrowable0.getMessage());
      assertEquals(98, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: G05)APz", sQLTimeoutException1.toString());
      assertEquals("G05)APz", sQLTimeoutException1.getMessage());
      assertEquals("'7UvUFe.}YX%si0HF", sQLTimeoutException1.getSQLState());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      assertNotNull(collectionType0);
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      assertNotNull(collectionLikeType0);
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertEquals(1, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      
      String string0 = collectionType0.toString();
      assertNotNull(string0);
      assertEquals("[collection type; class java.util.LinkedList, contains [simple type, class java.lang.Object]]", string0);
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      
      MockThrowable mockThrowable1 = (MockThrowable)mockThrowable0.fillInStackTrace();
      assertNotNull(mockThrowable1);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(mockThrowable0, mockThrowable1);
      assertSame(mockThrowable1, mockThrowable0);
      assertEquals("java.sql.SQLTimeoutException: G05)APz", sQLTimeoutException0.toString());
      assertEquals(98, sQLTimeoutException0.getErrorCode());
      assertEquals("G05)APz", sQLTimeoutException0.getMessage());
      assertEquals("'7UvUFe.}YX%si0HF", sQLTimeoutException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: G05)APz", mockThrowable0.toString());
      assertEquals("G05)APz", mockThrowable0.getMessage());
      assertEquals("G05)APz", mockThrowable1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: G05)APz", mockThrowable1.toString());
      
      Class<IOException> class1 = IOException.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, false);
      assertNotNull(list0);
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertEquals(1, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertEquals(10, list0.size());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockThrowable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // G05)APz
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = ClassUtil.backticked("");
      assertNotNull(string0);
      assertEquals("``", string0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      Class<String> class1 = String.class;
      String string1 = ClassUtil.nameOf(class1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`java.lang.String`", string1);
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class2);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("Yl[1PbMc:y#", (String) null);
      assertNotNull(sQLTransientException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Yl[1PbMc:y#", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("Yl[1PbMc:y#", sQLTransientException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(" is not a primitive type", "eC\"G|!", 502, sQLTransientException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Yl[1PbMc:y#", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("Yl[1PbMc:y#", sQLTransientException0.getMessage());
      assertEquals("eC\"G|!", sQLRecoverableException0.getSQLState());
      assertEquals(502, sQLRecoverableException0.getErrorCode());
      assertEquals(" is not a primitive type", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException:  is not a primitive type", sQLRecoverableException0.toString());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`java.lang.String`", "", sQLRecoverableException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Yl[1PbMc:y#", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("Yl[1PbMc:y#", sQLTransientException0.getMessage());
      assertEquals("eC\"G|!", sQLRecoverableException0.getSQLState());
      assertEquals(502, sQLRecoverableException0.getErrorCode());
      assertEquals(" is not a primitive type", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException:  is not a primitive type", sQLRecoverableException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: `java.lang.String`", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("`java.lang.String`", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLException sQLException0 = new SQLException("`java.lang.String`", sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Yl[1PbMc:y#", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("Yl[1PbMc:y#", sQLTransientException0.getMessage());
      assertEquals("eC\"G|!", sQLRecoverableException0.getSQLState());
      assertEquals(502, sQLRecoverableException0.getErrorCode());
      assertEquals(" is not a primitive type", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException:  is not a primitive type", sQLRecoverableException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: `java.lang.String`", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("`java.lang.String`", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLException: `java.lang.String`", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("`java.lang.String`", sQLException0.getMessage());
      
      Throwable[] throwableArray0 = sQLException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Yl[1PbMc:y#", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("Yl[1PbMc:y#", sQLTransientException0.getMessage());
      assertEquals("eC\"G|!", sQLRecoverableException0.getSQLState());
      assertEquals(502, sQLRecoverableException0.getErrorCode());
      assertEquals(" is not a primitive type", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException:  is not a primitive type", sQLRecoverableException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: `java.lang.String`", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("`java.lang.String`", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLException: `java.lang.String`", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("`java.lang.String`", sQLException0.getMessage());
      
      SQLException sQLException1 = (SQLException)ClassUtil.throwIfIOE(sQLException0);
      assertNotNull(sQLException1);
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Yl[1PbMc:y#", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("Yl[1PbMc:y#", sQLTransientException0.getMessage());
      assertEquals("eC\"G|!", sQLRecoverableException0.getSQLState());
      assertEquals(502, sQLRecoverableException0.getErrorCode());
      assertEquals(" is not a primitive type", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException:  is not a primitive type", sQLRecoverableException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: `java.lang.String`", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("`java.lang.String`", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLException: `java.lang.String`", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("`java.lang.String`", sQLException0.getMessage());
      assertNull(sQLException1.getSQLState());
      assertEquals(0, sQLException1.getErrorCode());
      assertEquals("`java.lang.String`", sQLException1.getMessage());
      assertEquals("java.sql.SQLException: `java.lang.String`", sQLException1.toString());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      
      Class<Short> class1 = Short.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, false);
      assertNotNull(list0);
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<Integer> class2 = Integer.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNotNull(class3);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("int", class3.toString());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(52, methodArray0.length);
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(77, methodArray0.length);
      
      Class<Long> class1 = Long.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertEquals("long", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12000);
      assertNotNull(placeholderForType0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Short> class2 = Short.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class2, (JavaType) placeholderForType0);
      assertNotNull(collectionLikeType0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = collectionLikeType0.getGenericSignature(stringBuilder0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals("Ljava/lang/Short<$12001>;", stringBuilder0.toString());
      assertEquals("Ljava/lang/Short<$12001>;", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = placeholderForType0.getGenericSignature(stringBuilder0);
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals("Ljava/lang/Short<$12001>;$12001", stringBuilder0.toString());
      assertEquals("Ljava/lang/Short<$12001>;$12001", stringBuilder2.toString());
      
      boolean boolean0 = true;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class2, true);
      assertNotNull(list0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNotNull(class3);
      assertEquals("short", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isPrimitive());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      assertNotNull(short1);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)0, (short)short1);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, short1, false);
      assertNotNull(iOContext0);
      assertTrue(short1.equals((Object)short0));
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MapperFeature mapperFeature0 = MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-566));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(77, methodArray0.length);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      MockError mockError0 = new MockError("");
      assertNotNull(mockError0);
      
      String string0 = ClassUtil.nullOrToString(mockError0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
      
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor1.toString());
      assertEquals(4, constructor1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind.annotation", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTransactionRollbackException", sQLTimeoutException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      assertNotNull(sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTransactionRollbackException", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertNull(sQLTransactionRollbackException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<CollectionType> class2 = CollectionType.class;
      Constructor<CollectionType> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("' missing from _propsInOrder");
      assertNotNull(string0);
      assertEquals("' missing from _propsInOrder", string0);
      
      Class<Double> class0 = Double.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      String string1 = "Y_C";
      String string2 = ClassUtil.backticked("Y_C");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("`Y_C`", string2);
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "' missing from _propsInOrder");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ClassUtil.throwIfRTE(sQLRecoverableException0);
      ClassUtil.isJacksonStdImpl((Object) "");
      Class<Float> class0 = Float.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isBogusClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("non-static member class", "{?dlMlP&", "non-static member class", 2);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("]2]\"Ru", "]2]\"Ru", ", problem: ", 92);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("]2]\"Ru", "C7;ETS/\"PLq", "", 1);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "{?dlMlP&", "2GPE>U", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("2GPE>U", "]2]\"Ru", "2GPE>U", 2);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("]2]\"Ru", "", "{?dlMlP&", 1);
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapLikeType0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls1);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultSetterInfo(jsonSetter_Value0);
      simpleType0.getInterfaces();
      objectMapper0.reader();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, objectMapper3, (Writer) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getOuterClass(class0);
      Long long0 = new Long(0L);
      ClassUtil.getClassDescription(long0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = "entrySet";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "entrySet");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Integer) must override method 'entrySet'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<String> class0 = String.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 128);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      coreXMLDeserializers_Std0.getKnownPropertyNames();
      String string0 = ClassUtil.quotedOr(accessPattern0, "qVrmph&,-b{ c%s+y?S");
      assertEquals("\"ALWAYS_NULL\"", string0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals(1, class1.getModifiers());
      
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      Class<ReferenceType> class3 = ReferenceType.class;
      boolean boolean0 = ClassUtil.hasClass(classUtil_Ctor0, class3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "?c!_n(+ml{d");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(": latter is not a subtype of former", jsonMappingException1);
      File file0 = MockFile.createTempFile("?c!_n(+ml{d", "QZK_(!ap2[tQtrWxD8.");
      sQLRecoverableException0.printStackTrace();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ": latter is not a subtype of former");
      sQLTimeoutException0.printStackTrace(printStream0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): (was java.sql.SQLRecoverableException) (through reference chain: UNKNOWN[0])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      MockException mockException0 = new MockException();
      Throwable throwable0 = mockException0.fillInStackTrace();
      MockFile mockFile0 = new MockFile("H~", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('(');
      mockException0.printStackTrace((PrintStream) mockPrintStream0);
      mockException0.initCause(throwable0);
      mockException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockException0, "entrySet");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // entrySet
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.emptyIterator();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
      Class<Float> class2 = Float.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
