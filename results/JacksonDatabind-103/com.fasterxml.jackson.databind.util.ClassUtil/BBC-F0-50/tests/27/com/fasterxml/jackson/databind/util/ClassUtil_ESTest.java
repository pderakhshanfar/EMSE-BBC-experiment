/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 05:23:01 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("$3s{It99/+o8IpiX2");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("vL8J!}h2NZZ;*Lr", "vL8J!}h2NZZ;*Lr", (-2051), sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.setNextException(sQLSyntaxErrorException0);
      DataTruncation dataTruncation0 = new DataTruncation(2, true, false, 2, 2, sQLNonTransientConnectionException0);
      ClassUtil.throwRootCauseIfIOE(dataTruncation0);
      ClassUtil.nonNullString("vL8J!}h2NZZ;*Lr");
      Class<Object> class1 = Object.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ReferenceType> enumMap0 = new EnumMap<AccessPattern, ReferenceType>(class0);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassUtil.backticked("org.hibernate.proxy.java.lang.String");
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      ClassUtil.primitiveType(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      typeBindings0.findBoundType("java.lang.Double");
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) null, jsonToken0, "unknown");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_INT: unknown
         //  at [Source: (char[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("k(@FET[A.FG6e", "k(@FET[A.FG6e");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("`jt:KQig^8", "y=pF8-", "y=pF8-", 43);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("java.lang.Double", "k(@FET[A.FG6e", "java.lang.Double", (byte)8);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("y=pF8-", "Cannot construct instance of %s (no Creators, like default construct, exist): %s", "k(@FET[A.FG6e", (-4));
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLInvalidAuthorizationSpecException0.setStackTrace(stackTraceElementArray0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLClientInfoException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ReferenceType> enumMap0 = new EnumMap<AccessPattern, ReferenceType>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Module>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, false);
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((Writer) mockPrintWriter0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.", batchUpdateException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) dataOutputStream0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getDeclaredMethods(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("|n0#[{,!Vs7hr4t", "|n0#[{,!Vs7hr4t", (-1));
      MockError mockError0 = new MockError("N;'}OKAtP,]F", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "eWFQNLGI\"QDaAx");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isConcrete(class0);
      TypeFactory.defaultInstance();
      ClassUtil.backticked((String) null);
      ClassUtil.backticked("[null]");
      ClassUtil.emptyIterator();
      String string0 = "Cannot deserialize Proxy class ";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("`[null]`", "Cannot deserialize Proxy class ");
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[null]", sQLWarning0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("[null]", sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "java.lang.Void");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = ", problem: ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", problem: ");
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short) (-1226));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      int int0 = (-5);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, false);
      OutputStream outputStream0 = null;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-5), objectMapper2, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      MockIOException mockIOException0 = new MockIOException();
      uTF8JsonGenerator0.writeRawValue(", problem: ");
      mockIOException0.getCause();
      mockIOException0.getLocalizedMessage();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.nameOf(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      Character character0 = new Character('|');
      ArrayType arrayType1 = arrayType0.withValueHandler(character0);
      ClassUtil.rawClass(arrayType1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      enumSet0.clone();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      enumSet0.clone();
      ClassUtil.findEnumType(enumSet0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(151);
      ClassUtil.classNameOf(placeholderForType0);
      Class<Character> class1 = Character.class;
      ClassUtil.findClassAnnotations(class1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Module> class0 = Module.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isJacksonStdImpl(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1);
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      ClassUtil.findEnumType(enumSet1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hMQJVa7Wee9 9+RPF2");
      Class<Object> class0 = Object.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Object> class2 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      deserializationFeatureArray0[0] = deserializationFeature1;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType");
      Class<Double> class1 = Double.class;
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      ObjectMapper objectMapper4 = objectMapper3.configure(jsonParser_Feature0, true);
      ObjectMapper objectMapper5 = objectMapper4.copy();
      ObjectReader objectReader0 = objectMapper5.reader();
      objectReader0.forType(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.isConcrete(class2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getClassMethods(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      ObjectReader objectReader1 = objectReader0.forType(class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader2 = objectReader1.with((InjectableValues) injectableValues_Std0);
      Version version0 = objectReader2.version();
      SimpleModule simpleModule0 = new SimpleModule("java.util.LinkedLis", version0);
      ClassUtil.classNameOf(simpleModule0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2);
      coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " (from class ");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.hibernate.proxy.", "java.io.FilterInputS", 6);
      MockException mockException0 = new MockException(" (from class ", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  (from class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("lw5nw Z");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("lw5nw Z", mockIOException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, JsonMappingException> enumMap0 = new EnumMap<ClientInfoStatus, JsonMappingException>(class1);
      EnumMap<ClientInfoStatus, JsonMappingException> enumMap1 = new EnumMap<ClientInfoStatus, JsonMappingException>(enumMap0);
      EnumMap<ClientInfoStatus, JsonMappingException> enumMap2 = new EnumMap<ClientInfoStatus, JsonMappingException>(enumMap1);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      BiFunction<ClientInfoStatus, JsonMappingException, JsonMappingException> biFunction0 = (BiFunction<ClientInfoStatus, JsonMappingException, JsonMappingException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.appendFourBytes(87);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Fk/`", "java.lang.Object", (-1657472572), (Throwable) null);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "java.lang.Object", (Throwable) null);
      BiFunction<Object, Object, JsonMappingException> biFunction1 = (BiFunction<Object, Object, JsonMappingException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      enumMap2.merge(clientInfoStatus1, jsonMappingException0, biFunction1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientConnectionException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException(byteArrayBuilder0, "java.lang.Object", sQLFeatureNotSupportedException0);
      enumMap0.put(clientInfoStatus0, jsonMappingException1);
      enumMap2.computeIfPresent(clientInfoStatus0, biFunction0);
      ClassUtil.findEnumType(enumMap2);
      Integer integer0 = new Integer((-2));
      ClassUtil.classNameOf(integer0);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ReferenceType> enumMap0 = new EnumMap<AccessPattern, ReferenceType>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(accessPattern0);
      referenceType0.getErasedSignature();
      ReferenceType referenceType2 = referenceType1.withContentValueHandler(class0);
      ReferenceType referenceType3 = referenceType2.withTypeHandler(simpleType0);
      enumMap0.put(accessPattern0, referenceType3);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, JsonMappingException> enumMap0 = new EnumMap<ClientInfoStatus, JsonMappingException>(class0);
      EnumMap<ClientInfoStatus, JsonMappingException> enumMap1 = enumMap0.clone();
      EnumMap<ClientInfoStatus, JsonMappingException> enumMap2 = new EnumMap<ClientInfoStatus, JsonMappingException>(enumMap1);
      EnumMap<ClientInfoStatus, JsonMappingException> enumMap3 = enumMap2.clone();
      enumMap0.clone();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      ClassUtil.findEnumType(enumMap3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, JsonMappingException> enumMap0 = new EnumMap<ClientInfoStatus, JsonMappingException>(class1);
      EnumMap<ClientInfoStatus, JsonMappingException> enumMap1 = new EnumMap<ClientInfoStatus, JsonMappingException>(enumMap0);
      EnumMap<ClientInfoStatus, JsonMappingException> enumMap2 = new EnumMap<ClientInfoStatus, JsonMappingException>(enumMap1);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      BiFunction<ClientInfoStatus, JsonMappingException, JsonMappingException> biFunction0 = (BiFunction<ClientInfoStatus, JsonMappingException, JsonMappingException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.appendFourBytes(96);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Fk/`", "java.lang.Object", (-1657472572), (Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "java.lang.Object", sQLFeatureNotSupportedException0);
      enumMap0.put(clientInfoStatus1, jsonMappingException0);
      enumMap2.computeIfPresent(clientInfoStatus0, biFunction0);
      ClassUtil.findEnumType(enumMap2);
      Integer integer0 = new Integer((-2));
      ClassUtil.classNameOf(integer0);
      ClassUtil.emptyIterator();
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      BiFunction<Object, IOException, JsonMappingException> biFunction1 = (BiFunction<Object, IOException, JsonMappingException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      enumMap1.merge(clientInfoStatus2, jsonMappingException0, biFunction1);
      Class<InputStream> class2 = InputStream.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.nonNullString("Fk/`");
      ClassUtil.findEnumType(enumMap2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ObjectReader objectReader1 = objectReader0.forType(class1);
      ObjectReader objectReader2 = objectReader1.withoutAttribute((Object) null);
      objectReader2.withView(class0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(1734, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.SimpleType", 1734, (-829), 1734, 96, 248, (-617225170), 3, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 1734
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      int int0 = 0;
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<JsonMappingException> class1 = JsonMappingException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectReader objectReader1 = objectReader0.with(jsonNodeFactory0);
      // Undeclared exception!
      try { 
        objectReader1.withoutFeatures((JsonParser.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-2619));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.hasClass(accessPattern0, class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockError mockError0 = new MockError();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.hibernate.proxy.java.lang.Error", " has no default (no arg) constructor", (-891), mockError0);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockError0, "[null]");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath(throwable0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class0, false);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Object> class0 = Object.class;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-19);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 673);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, list0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      TimeZone timeZone0 = TimeZone.getDefault();
      ObjectReader objectReader1 = objectReader0.with(timeZone0);
      ObjectReader objectReader2 = objectReader1.withoutRootName();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectReader objectReader3 = objectReader2.withFeatures(jsonParser_FeatureArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)97;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectReader3, (OutputStream) null, byteArray0, 207, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[recursive type; ", "IYKkt&jw0(#.&", 23);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("java.lang.Character", sQLInvalidAuthorizationSpecException0);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("[recursive type; ", ")O", sQLNonTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientException1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) bufferedOutputStream0, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException: java.sql.SQLNonTransientException: [recursive type; 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, false);
      Class<Byte> class1 = Byte.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
      ClassUtil.getOuterClass(class1);
      ClassUtil.quotedOr((Object) null, "");
      ClassUtil.nameOf(class1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) simpleType0;
      simpleType0.withStaticTyping();
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      PropertyName propertyName0 = PropertyName.construct("org.hibernate.proxy.java.lang.annotation.Annotation");
      ObjectIdGenerator<Void> objectIdGenerator0 = (ObjectIdGenerator<Void>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(arrayType0, propertyName0, objectIdGenerator0, false);
      ObjectIdWriter objectIdWriter1 = objectIdWriter0.withAlwaysAsId(false);
      ObjectIdWriter objectIdWriter2 = objectIdWriter1.withSerializer((JsonSerializer<?>) null);
      ArrayType arrayType1 = (ArrayType)objectIdWriter2.idType;
      ClassUtil.findSuperTypes((JavaType) arrayType1, (Class<?>) class0, false);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Module> class0 = Module.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<NullNode> class0 = NullNode.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Error> class1 = Error.class;
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.isNonStaticInnerClass(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<CollectionType> class1 = CollectionType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.");
      ClassUtil.nullOrToString(jsonMappingException0);
      Class<SimpleModule> class2 = SimpleModule.class;
      ClassUtil.isJacksonStdImpl(class2);
      System.setCurrentTimeMillis(534L);
      ClassUtil.getConstructors(class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.BeanDeserializerFactory`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
      ClassUtil.getOuterClass(class0);
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<MapLikeType> class1 = MapLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class0, class1, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      MockError mockError0 = new MockError("Overflow: numeric value (%s) out of range of Integer (%d - %d)");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "com.fasterxml.jackson.core.type.ResolvedType");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findSuperTypes(class0, class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)96;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)96;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Long> class0 = Long.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.backticked("org.hibernate.proxy.int");
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, true);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Character> class1 = Character.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<FilterInputStream> class1 = FilterInputStream.class;
      ClassUtil.isBogusClass(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("\"FSq8<Oh!");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("\"FSq8<Oh!", "\"FSq8<Oh!", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "\"FSq8<Oh!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, mapLikeType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, mapLikeType0);
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) beanProperty_Std1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanProperty$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<NoClass>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      Class<IOException> class1 = IOException.class;
      collectionLikeType0.equals(class1);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
      Class<Void> class2 = Void.class;
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findClassAnnotations(class0);
      Class<IOException> class1 = IOException.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JsonSetter.Value(valueNulls=%s,contentNulls=%s)");
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.toString();
      resolvedRecursiveType0.toString();
      resolvedRecursiveType0.isReferenceType();
      resolvedRecursiveType0.toCanonical();
      ClassUtil.classNameOf(resolvedRecursiveType0);
      ClassUtil.getClassMethods(class1);
      Class<Byte> class2 = Byte.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<Short> class3 = Short.class;
      ClassUtil.isNonStaticInnerClass(class3);
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      Class<SimpleType> class5 = SimpleType.class;
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class5, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.type.SimpleType with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getPackageName(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = new Character('=');
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("java.lang", "java.lang");
      MockError mockError0 = new MockError("java.lang", sQLTransientConnectionException0);
      ClassUtil.nonNull((Error) null, (Error) mockError0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockError mockError0 = new MockError();
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      Class<String> class1 = String.class;
      Class<String> class2 = String.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class2, (List<JavaType>) stack0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) collectionType0;
      javaTypeArray0[1] = (JavaType) collectionType0;
      javaTypeArray0[2] = (JavaType) collectionType0;
      javaTypeArray0[3] = (JavaType) collectionType0;
      javaTypeArray0[4] = (JavaType) collectionType0;
      javaTypeArray0[5] = (JavaType) collectionType0;
      javaTypeArray0[6] = (JavaType) collectionType0;
      javaTypeArray0[7] = (JavaType) collectionType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionType0, javaTypeArray0, javaTypeArray0[3]);
      JavaType javaType0 = referenceType0.getAnchorType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaTypeArray0[0]);
      MockThrowable mockThrowable0 = new MockThrowable();
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class0, true);
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isProxyType(class0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("i?$pT9]X9=4G8E4", "org.hibernate.proxy.short");
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("i?$pT9]X9=4G8E4", "org.hibernate.proxy.short", 86, intArray0, sQLRecoverableException0);
      sQLRecoverableException0.initCause(batchUpdateException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2778));
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockError mockError0 = new MockError();
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      collectionType0.toString();
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
      ClassUtil.getOuterClass(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.findSuperClasses(class0, class0, false);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<SimpleType> class1 = SimpleType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      Long long0 = new Long((-1394L));
      ClassUtil.nullOrToString(long0);
      ClassUtil.findSuperTypes(class1, class0, list0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(1472.418622388258);
      linkedList0.add(double0);
      Double double1 = new Double(0.0);
      linkedList0.add(double1);
      Double double2 = new Double((-2009.5098));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      linkedList0.add((Double) null);
      linkedList0.add(double2);
      ClassUtil.nonNull(linkedList0, linkedList0);
      ClassUtil.emptyIterator();
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isProxyType(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.isBogusClass(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.hasClass(class0, class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class2, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Nulls nulls0 = Nulls.DEFAULT;
      Nulls nulls1 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0, nulls1);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-25);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper1, mockPrintStream0, byteArray0, (byte)9, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", map0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "", 0, map1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLClientInfoException2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException: org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getParameterAnnotations();
      Class<?> class1 = ClassUtil.classOf(constructor0);
      constructor0.getAnnotations();
      Boolean boolean0 = Boolean.valueOf(false);
      ClassUtil.nonNull(boolean0, boolean0);
      ClassUtil.getPackageName(class0);
      ClassUtil.getDeclaringClass(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isProxyType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StackTraceElement stackTraceElement0 = new StackTraceElement("kb!v.", "kb!v.", "kb!v.", 1);
      stackTraceElementArray0[0] = stackTraceElement0;
      int int0 = (-89);
      StackTraceElement stackTraceElement1 = new StackTraceElement("kb!v.", "kb!v.", "kb!v.", (-89));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Cannot figure out type for EnumSet (odd JDK platform?)", "vt,E;VE>3/K&", "vt,E;VE>3/K&", (-89));
      stackTraceElementArray0[2] = stackTraceElement2;
      int int1 = 768;
      StackTraceElement stackTraceElement3 = new StackTraceElement("vt,E;VE>3/K&", "vt,E;VE>3/K&", "vt,E;VE>3/K&", 768);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("kb!v.", "vt,E;VE>3/K&", "java.lang.RuntimeEx", 2);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("vt,E;VE>3/K&", "vt,E;VE>3/K&", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType", 1);
      stackTraceElementArray0[5] = stackTraceElement5;
      mockRuntimeException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("kb!v.", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "<>aB>*&cC&?kaCH4Sh";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<>aB>*&cC&?kaCH4Sh");
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(2229L);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.emptyIterator();
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getDeclaredFields(class1);
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.canBeABeanType(class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.getDeclaredFields(class3);
      Class<Byte> class4 = Byte.class;
      ClassUtil.isBogusClass(class4);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.nonNull((Error) null, (Error) null);
      ClassUtil.isConcrete(class0);
      Float float0 = new Float((-1252.96F));
      Float float1 = new Float((double) (-1252.96F));
      ClassUtil.nonNull(float0, float1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Short short0 = new Short((short) (-794));
      ClassUtil.nullOrToString(short0);
      Class<Float> class0 = Float.class;
      ClassUtil.getEnclosingClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-649), objectMapper0, (OutputStream) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "java.lang.Short@0000000001");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.Short@0000000001
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isBogusClass(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      ClassUtil.classOf((Object) null);
      Class<CollectionType> class1 = CollectionType.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, constructor0, "zV6_");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.reflect.Constructor (of class com.fasterxml.jackson.databind.type.CollectionType) must override method 'zV6_'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<CollectionLikeType> class0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<RuntimeException> class0 = RuntimeException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", class0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.RuntimeException` from String \"org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType\": org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, false);
      Class<IOException> class1 = IOException.class;
      ClassUtil.hasClass((Object) null, class1);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      ClassUtil.classOf(classUtil_Ctor0);
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.com.fasterxml.jackson.databind.module.SimpleModule");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: org.hibernate.proxy.com.fasterxml.jackson.databind.module.SimpleModule
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLDataException0);
      batchUpdateException0.getStackTrace();
      MockError mockError0 = new MockError("net.sf.cglib.proxy.java.lang.Short", sQLDataException0);
      ClassUtil.nonNull((Error) mockError0, (Error) mockError0);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getConstructors(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaringClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, false);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isLocalType(class2, false);
      Class<NoClass> class3 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getConstructors(class1);
      String string0 = "XV<QG{?ej";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("XV<QG{?ej", "XV<QG{?ej");
      sQLRecoverableException0.getStackTrace();
      sQLRecoverableException0.getStackTrace();
      String string1 = "7CVQCp2";
      String string2 = "net.sf.cglib.proxy.java.lang.Double";
      int int0 = (-6);
      String string3 = "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType";
      String string4 = "com.fasterxml.jackson.core.io.JsonEOFException";
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getClassMethods(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getGenericInterfaces(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(collectionLikeType0, "elementType");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [collection-like type; class java.lang.Object, contains [simple type, class java.lang.Object]]: elementType
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      Class<Character> class1 = Character.class;
      Class<?> class2 = ClassUtil.primitiveType(class0);
      Class<Object> class3 = Object.class;
      ClassUtil.isBogusClass(class3);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getPackageName(class2);
      ClassUtil.getClassDescription(class1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getClassMethods(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil classUtil0 = new ClassUtil();
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Unexpected close marker '%s': expected '%c' (for %s starting at %s)", sQLWarning0);
      RuntimeException runtimeException0 = ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      ClassUtil.getClassDescription(runtimeException0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isLocalType(class0, false);
      Long long0 = new Long(0L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Double double0 = new Double(0L);
      Class<?> class1 = ClassUtil.classOf(class0);
      ClassUtil.verifyMustOverride(class1, class1, "BIG_DECIMAL");
      Class<Short> class2 = Short.class;
      ClassUtil.primitiveType(class2);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockError mockError0 = new MockError("");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      MockRuntimeException mockRuntimeException1 = (MockRuntimeException)ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      MockError mockError1 = new MockError("SSML!b+Ry29L&PnL", mockRuntimeException1);
      ClassUtil.nonNull((Error) mockError0, (Error) mockError0);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.createInstance(class0, true);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("#fO'9~&ED*oeg\"m3", "#fO'9~&ED*oeg\"m3");
      sQLTransactionRollbackException0.getSuppressed();
      ClassUtil.throwIfError(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-4200));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("serializer", "serializer");
      ClassUtil.throwIfError(sQLTransactionRollbackException0);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      mockThrowable0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hMQJVa7Wee9 9+RPF2");
      Class<Object> class0 = Object.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.classNameOf(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.nullOrToString(class0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassUtil.nonNullString("' missing from _propsInOrder");
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("' missing from _propsInOrder", clientInfoStatus0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("' missing from _propsInOrder");
      sQLTransientConnectionException0.printStackTrace();
      int[] intArray0 = new int[6];
      intArray0[0] = 1379;
      intArray0[1] = 1379;
      intArray0[2] = 1379;
      intArray0[3] = 1578;
      intArray0[4] = (-1654975209);
      intArray0[5] = 1379;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(batchUpdateException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "' missing from _propsInOrder", 1379, hashMap0, sQLTransientConnectionException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<Object> class2 = Object.class;
      ClassUtil.isLocalType(class2, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("ZK*jSS!q#:~?X2f");
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nonNullString((String) null);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.getConstructors(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Character> class2 = Character.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassUtil.backticked("cn3");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers1 = new StdKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers1);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Integer> class1 = Integer.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.classNameOf(class0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLDataException sQLDataException0 = new SQLDataException("60#37", "60#37", sQLRecoverableException0);
      sQLDataException0.spliterator();
      sQLRecoverableException0.setNextException(sQLDataException0);
      ClassUtil.throwIfError(sQLRecoverableException0);
      ClassUtil.classNameOf(class0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      Class<Error> class1 = Error.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Error is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findConstructor(class0, true);
      MockIOException mockIOException0 = new MockIOException();
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassUtil.nonNullString("' missing from _propsInOrder");
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("' missing from _propsInOrder", clientInfoStatus0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("' missing from _propsInOrder");
      sQLTransientConnectionException0.printStackTrace();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "' missing from _propsInOrder", 1379, hashMap0, sQLTransientConnectionException0);
      ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      Class<String> class1 = String.class;
      Constructor<String> constructor2 = ClassUtil.findConstructor(class1, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, constructor2, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)96;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 8, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 196, (byte)96, true);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) uTF8StreamJsonParser0, (Class<?>) class2, jsonToken0, "]t_Z'tiDW)");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ek+6g$\"k5\"y", "ek+6g$\"k5\"y", jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0, "ek+6g$\"k5\"y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ek+6g$\"k5\"y
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("W1C>u", (String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", 1, sQLNonTransientConnectionException0);
      ClassUtil.getRootCause(sQLSyntaxErrorException0);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
      Class<Void> class1 = Void.class;
      ClassUtil.getOuterClass(class1);
      Class<Object> class2 = Object.class;
      Object object0 = ClassUtil.createInstance(class2, true);
      ClassUtil.nullOrToString(object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StackTraceElement stackTraceElement0 = new StackTraceElement("java.lang.reflect.Ac", "ZprX5]HaybwBk~1:AU", "org.hibernate.proxy.java.lang.Character", (-1459));
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isProxyType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.findSuperClasses(class1, class1, false);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.rawClass((JavaType) null);
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getGenericSuperclass(class2);
      SQLTransientException sQLTransientException0 = new SQLTransientException("java.lang.Double", "java.lang.Double");
      sQLTransientException0.getLocalizedMessage();
      SQLWarning sQLWarning0 = new SQLWarning("net.sf.cglib.proxy.", "net.sf.cglib.proxy.", (-1164), sQLTransientException0);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLWarning0);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.findClassAnnotations(class3);
      Class<Annotation> class4 = Annotation.class;
      ClassUtil.findSuperTypes((JavaType) null, class4, false);
      ClassUtil.throwRootCauseIfIOE(throwable0);
      Class<NoClass> class5 = NoClass.class;
      ClassUtil.getDeclaredMethods(class5);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("includeAs cannot be null", "includeAs cannot be null", 98);
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.java.lang.Double", "'7UvUFe.}YX%si0HF", 2064);
      MockThrowable mockThrowable0 = new MockThrowable("' missing from _propsInOrder", sQLTransientException0);
      ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      collectionType0.toString();
      MockThrowable mockThrowable1 = new MockThrowable();
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(collectionLikeType0, (String) null, "'7UvUFe.}YX%si0HF");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not resolve type id 'null' as a subtype of [collection-like type; class java.util.LinkedList, contains [collection type; class java.util.LinkedList, contains [simple type, class java.lang.Object]]]: '7UvUFe.}YX%si0HF
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ClassUtil.backticked("");
      Boolean boolean0 = new Boolean("``");
      Class<String> class0 = String.class;
      ClassUtil.nameOf(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class1);
      TypeFactory.defaultInstance();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl1.weirdKeyException(class0, "write a raw (unencoded) value", "com.fasterxml.jackson.databind.exc.IgnoredPropertyException");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      Class<SimpleType> class2 = SimpleType.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl2.wrongTokenException(jsonParser0, class2, jsonToken0, "\"%s\"");
      Integer integer0 = new Integer(914);
      Class<Void> class3 = Void.class;
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl1.weirdNumberException(integer0, class3, "entrySet");
      ClassUtil.nonNull(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ClassUtil.nonNullString("");
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = false;
      ClassUtil.findConstructor(class0, false);
      Class<Double> class1 = Double.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClassUtil.backticked("");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<String> class1 = String.class;
      ClassUtil.nameOf(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.backticked("serialVersionUID");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1665), objectMapper0, (Writer) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) writerBasedJsonGenerator0, ".V8)q+c\"RoYIn");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): .V8)q+c\"RoYIn
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[5];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      DataTruncation dataTruncation0 = new DataTruncation((-764), true, true, (-541), 0);
      dataTruncation0.getNextWarning();
      SQLTransientException sQLTransientException0 = new SQLTransientException("'O}~#_+#ai%3-KE", "java.lang.Short", (-595), (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("serialVersionUID", intArray0, sQLTransientException0);
      batchUpdateException0.getLargeUpdateCounts();
      batchUpdateException0.getStackTrace();
      batchUpdateException0.getStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      ClassUtil.throwIfIOE((Throwable) null);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nameOf((Class<?>) null);
      Class<Object> class1 = Object.class;
      ClassUtil.findClassAnnotations(class1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("qR9", "java.lang.reflect.Ac");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("java.lang.reflect.Ac", " is not a primitive type", 502, sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" is not a primitive type", "NULL", sQLRecoverableException0);
      SQLException sQLException0 = new SQLException((String) null, sQLTransientException0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.hibernate.proxy.java.lang.Double", "eC\"G|!", "org.hibernate.proxy.java.lang.reflect.AccessibleObject", 1864);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      sQLTransientException0.getSuppressed();
      ClassUtil.throwIfIOE(sQLTransientException0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ClassUtil.backticked("");
      Boolean boolean0 = new Boolean("``");
      boolean boolean1 = false;
      Class<Void> class0 = Void.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isLocalType(class0, false);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getDeclaringClass(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getConstructors(class2);
      Class<Character> class3 = Character.class;
      ClassUtil.isNonStaticInnerClass(class3);
      Class<Double> class4 = Double.class;
      ClassUtil.findSuperTypes(class4, class4);
      ClassUtil.getPackageName(class1);
      Class<CollectionLikeType> class5 = CollectionLikeType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getDeclaredMethods(class5);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class6 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class6);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      Double double0 = new Double(0.0);
      MapLikeType mapLikeType0 = mapType0.withValueHandler(double0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(mapLikeType0);
      ClassUtil.rawClass(referenceType1);
      mapLikeType0.findTypeParameters(class6);
      Class<AccessPattern> class7 = AccessPattern.class;
      ClassUtil.findEnumType(class7);
      ClassUtil.rawClass(mapLikeType0);
      Class<AccessPattern> class8 = AccessPattern.class;
      Class<ArrayType> class9 = ArrayType.class;
      ClassUtil.findSuperTypes(class8, class9);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.backticked("`java.lang.Byte`");
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Double> class0 = Double.class;
      String string0 = "keyType";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "keyType");
      ClassUtil.getConstructors(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("keyType", "keyType", 27, batchUpdateException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ClassUtil.backticked("net.sf.cglib.proxy.");
      Class<RuntimeException> class0 = RuntimeException.class;
      Boolean boolean0 = new Boolean("%Cot9");
      Class<Double> class1 = Double.class;
      ClassUtil.nameOf(class1);
      ClassUtil.findClassAnnotations(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(":?B%nE~{", "D`!:Uqis4*i+");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(">:,#Mq#abIiFNV\"rCW", "`java.lang.Double`", 502, sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("\"%s\"", ">:,#Mq#abIiFNV\"rCW", sQLTransientException0);
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.ser.std.CollectionSerializer", sQLRecoverableException0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("uKB", "java.lang.Double", ">:,#Mq#abIiFNV\"rCW", (-1713));
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      sQLIntegrityConstraintViolationException0.getSuppressed();
      ClassUtil.throwIfIOE(sQLRecoverableException0);
      Class<Short> class2 = Short.class;
      ClassUtil.isProxyType(class2);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("D`!:Uqis4*i+", "`java.lang.Double`", sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      Long long0 = new Long((-1909L));
      ClassUtil.isJacksonStdImpl(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.ser.std.NullSerializer");
      ClassUtil.isObjectOrPrimitive(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "org.hibernate.proxy.java.lang.Character");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Boolean boolean0 = new Boolean(", problem: ");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("net.sf.cglib.proxy.", "iC\"'{v^", "Sv^&>0or|9e", 1402);
      assertEquals("iC\"'{v^", stackTraceElement0.getMethodName());
      assertEquals("net.sf.cglib.proxy.", stackTraceElement0.getClassName());
      assertEquals("net.sf.cglib.proxy..iC\"'{v^(Sv^&>0or|9e:1402)", stackTraceElement0.toString());
      assertEquals(1402, stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("Sv^&>0or|9e", stackTraceElement0.getFileName());
      assertNotNull(stackTraceElement0);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      String string0 = ClassUtil.canBeABeanType(class2);
      assertNotNull(string0);
      assertEquals("enum", string0);
      
      String string1 = ClassUtil.quotedOr(", problem: ", "C2h`i>w})60");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\", problem: \"", string1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Constructor<MapType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      int[] intArray0 = new int[7];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(7, intArray0.length);
      
      StackTraceElement[] stackTraceElementArray0 = batchUpdateException0.getStackTrace();
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(stackTraceElementArray0);
      assertEquals(7, intArray0.length);
      assertEquals(13, stackTraceElementArray0.length);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("B|fT7*W*{`wBx", batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: B|fT7*W*{`wBx", sQLRecoverableException0.toString());
      assertEquals("B|fT7*W*{`wBx", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(sQLRecoverableException0);
      assertEquals(7, intArray0.length);
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)ClassUtil.throwIfIOE(batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(batchUpdateException0, batchUpdateException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      assertNotNull(batchUpdateException1);
      assertEquals(7, intArray0.length);
      
      Class<IOException> class1 = IOException.class;
      String string0 = ClassUtil.canBeABeanType(class1);
      assertNull(string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 8;
      intArray0[1] = 176;
      intArray0[2] = (-541);
      intArray0[3] = 8;
      int int0 = (-764);
      intArray0[4] = (-764);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("java.lang.Double", intArray0, sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.lang.Double", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.lang.Double", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {8, 176, (-541), 8, (-764)}, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(5, intArray0.length);
      
      long[] longArray0 = batchUpdateException0.getLargeUpdateCounts();
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.lang.Double", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.lang.Double", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {8, 176, (-541), 8, (-764)}, intArray0);
      assertArrayEquals(new long[] {8L, 176L, (-541L), 8L, (-764L)}, longArray0);
      assertNotNull(longArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, longArray0.length);
      
      StackTraceElement[] stackTraceElementArray0 = batchUpdateException0.getStackTrace();
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.lang.Double", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.lang.Double", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {8, 176, (-541), 8, (-764)}, intArray0);
      assertNotNull(stackTraceElementArray0);
      assertEquals(5, intArray0.length);
      assertEquals(13, stackTraceElementArray0.length);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StackTraceElement[] stackTraceElementArray1 = batchUpdateException0.getStackTrace();
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.lang.Double", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.lang.Double", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {8, 176, (-541), 8, (-764)}, intArray0);
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      assertNotNull(stackTraceElementArray1);
      assertEquals(5, intArray0.length);
      assertEquals(13, stackTraceElementArray1.length);
      
      sQLRecoverableException0.forEach(consumer0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)ClassUtil.throwIfIOE(batchUpdateException0);
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.lang.Double", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.lang.Double", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: java.lang.Double", batchUpdateException1.toString());
      assertEquals("java.lang.Double", batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertArrayEquals(new int[] {8, 176, (-541), 8, (-764)}, intArray0);
      assertSame(batchUpdateException0, batchUpdateException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      assertNotNull(batchUpdateException1);
      assertEquals(5, intArray0.length);
      
      Class<NoClass> class0 = NoClass.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("b4^B-Sqdi@ Lw^}u", mockThrowable0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("b4^B-Sqdi@ Lw^}u", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: b4^B-Sqdi@ Lw^}u", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Throwable throwable0 = mockThrowable0.initCause(sQLInvalidAuthorizationSpecException0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals("b4^B-Sqdi@ Lw^}u", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: b4^B-Sqdi@ Lw^}u", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
      assertNull(throwable0.getMessage());
      assertSame(mockThrowable0, throwable0);
      assertSame(throwable0, mockThrowable0);
      assertNotNull(throwable0);
      
      Class<Long> class0 = Long.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1657472572));
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      Collection<Object> collection0 = coreXMLDeserializers_Std0.getKnownPropertyNames();
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertNull(collection0);
      
      String string0 = ClassUtil.quotedOr((Object) null, "b4^B-Sqdi@ Lw^}u");
      assertNotNull(string0);
      assertEquals("b4^B-Sqdi@ Lw^}u", string0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      Constructor<AccessPattern> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(beanProperty_Bogus0);
      
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getAnnotation(class3);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNull(annotation0);
      
      Class<MapType> class4 = MapType.class;
      boolean boolean0 = ClassUtil.hasClass(coreXMLDeserializers_Std0, class4);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(boolean0);
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "1ZK4t%7U");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<Void> class2 = Void.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class2, false);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class0, class1, list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertNotNull(list1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Class<Double> class1 = Double.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class1);
      assertFalse(boolean0);
      
      Class<?> class2 = ClassUtil.wrapperType(class0);
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class2.isAnnotation());
      assertEquals(17, class2.getModifiers());
      assertEquals("class java.lang.Integer", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertNotNull(class2);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class2.isAnnotation());
      assertEquals(17, class2.getModifiers());
      assertEquals("class java.lang.Integer", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertNotNull(methodArray0);
      assertEquals(52, methodArray0.length);
      
      String string0 = ClassUtil.quotedOr(class0, "");
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(string0);
      assertEquals("\"int\"", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "pca.(py4k.QT:j\\E8gW";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pca.(py4k.QT:jE8gW");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class<IOException> class0 = IOException.class;
      boolean boolean3 = ClassUtil.isJacksonStdImpl(class0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      assertNotNull(typeResolutionContext_Basic0);
      
      JavaType javaType0 = null;
      try { 
        typeFactory0.findClass("pca.(py4k.QT:jE8gW");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // pca.(py4k.QT:jE8gW
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("enum", clientInfoStatus0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("FALSE");
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: FALSE", sQLTransientConnectionException0.toString());
      assertEquals("FALSE", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      sQLTransientConnectionException0.printStackTrace();
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: FALSE", sQLTransientConnectionException0.toString());
      assertEquals("FALSE", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("FALSE", "elementType", 6000, hashMap0, sQLTransientConnectionException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: FALSE", sQLTransientConnectionException0.toString());
      assertEquals("FALSE", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("elementType", sQLClientInfoException0.getSQLState());
      assertEquals(6000, sQLClientInfoException0.getErrorCode());
      assertEquals("FALSE", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: FALSE", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: FALSE", sQLTransientConnectionException0.toString());
      assertEquals("FALSE", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("elementType", sQLClientInfoException0.getSQLState());
      assertEquals(6000, sQLClientInfoException0.getErrorCode());
      assertEquals("FALSE", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: FALSE", sQLClientInfoException0.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: FALSE", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals("FALSE", sQLTransientConnectionException1.getMessage());
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertNotNull(sQLTransientConnectionException1);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType((Enum<?>) clientInfoStatus0);
      assertFalse(class2.isPrimitive());
      assertEquals(16401, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.sql.ClientInfoStatus", class2.toString());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<String> class1 = String.class;
      Class<Character> class2 = Character.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, true);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Long> class3 = Long.class;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
      
      Class<Character> class5 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      Class<Long> class0 = Long.TYPE;
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(object0);
      assertEquals(0L, object0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotNull(iOContext1);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(boolean0);
      
      Double double0 = new Double(2);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      Class<?> class1 = ClassUtil.classOf(double0);
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Double", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Class<Character> class2 = Character.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      Class<MapType> class4 = MapType.class;
      Constructor<MapType> constructor0 = ClassUtil.findConstructor(class4, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class0, class1, list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertNotNull(list1);
      
      Class<ArrayType> class2 = ArrayType.class;
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      List<Class<?>> list2 = ClassUtil.findSuperTypes(class2, class3);
      assertEquals(6, list2.size());
      assertFalse(list2.isEmpty());
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertSame(class3, class1);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("' missing from _propsInOrder");
      assertNotNull(string0);
      assertEquals("' missing from _propsInOrder", string0);
      
      Class<Double> class0 = Double.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("double", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNull(class3);
      
      String string1 = ClassUtil.getPackageName(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) long0);
      assertFalse(boolean0);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      Class<NoClass> class4 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class4, true);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertNotNull(constructor0);
      
      Class<Annotation> class5 = Annotation.class;
      boolean boolean1 = constructor0.isAnnotationPresent(class5);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = constructor0.toGenericString();
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertNotNull(string1);
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", string1);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertEquals(0, int0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor1.toString());
      assertTrue(constructor1.isAccessible());
      assertEquals(2, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertNotNull(constructor1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(1, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      
      Class<ArrayType> class0 = ArrayType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, accessPattern0);
      
      Collection<Object> collection0 = coreXMLDeserializers_Std0.getKnownPropertyNames();
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNull(collection0);
      
      String string0 = ClassUtil.quotedOr((Object) null, "JSON");
      assertNotNull(string0);
      assertEquals("JSON", string0);
      
      Class<Character> class1 = Character.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      Constructor<AccessPattern> constructor0 = ClassUtil.findConstructor(class3, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
      
      Class<Long> class4 = Long.class;
      boolean boolean0 = ClassUtil.hasClass(jsonFactory1, class4);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Double> class1 = Double.class;
      String string0 = ClassUtil.backticked((String) null);
      assertNotNull(string0);
      assertEquals("[null]", string0);
      
      String string1 = ClassUtil.getClassDescription(class1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`java.lang.Double`", string1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "entrySet");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2778));
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNotNull(bufferRecycler1);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotNull(iOContext1);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1657472572), true);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals((-1657472572), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals((-1657472572), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals((-1657472572), uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNotSame(bufferRecycler0, bufferRecycler1);
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertNotNull(uTF8JsonGenerator1);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "WRITE_DATES_WITH_ZONE_ID", (-2778));
      assertEquals((-2778), sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("WRITE_DATES_WITH_ZONE_ID", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) byteArrayBuilder0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2376);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, accessPattern0);
      
      Class<Object> class1 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std1 = new CoreXMLDeserializers.Std(class1, (-7));
      assertFalse(coreXMLDeserializers_Std1.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std1.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std1.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std1.equals((Object)coreXMLDeserializers_Std0));
      assertNotNull(coreXMLDeserializers_Std1);
      
      Collection<Object> collection0 = new Vector<Object>();
      assertNotNull(collection0);
      assertFalse(collection0.contains((-7)));
      
      Boolean boolean1 = new Boolean("^ oNcq");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      String string0 = ClassUtil.backticked("qVrmph&,-b{ c%s+y?S");
      assertNotNull(string0);
      assertEquals("`qVrmph&,-b{ c%s+y?S`", string0);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class0);
      assertSame(class0, class1);
      assertNull(class2);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      Constructor<AccessPattern> constructor0 = ClassUtil.findConstructor(class3, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Short> class0 = Short.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      assertNotNull(mockPrintStream0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(dataOutputStream0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.fasterxml.jackson.databind.util.ClassUtil", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: com.fasterxml.jackson.databind.util.ClassUtil", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("short", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertEquals("short", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      MockError mockError0 = new MockError(mockThrowable0);
      assertNotNull(mockError0);
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      boolean boolean1 = ClassUtil.isConcrete(class2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Iterator<Error> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)60;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)6, (byte)71, (byte)1, (byte)97, (byte)60}, byteArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.hibernate.proxy.", "org.hibernate.proxy.", (-3));
      assertEquals("java.sql.SQLRecoverableException: org.hibernate.proxy.", sQLRecoverableException0.toString());
      assertEquals("org.hibernate.proxy.", sQLRecoverableException0.getMessage());
      assertEquals((-3), sQLRecoverableException0.getErrorCode());
      assertEquals("org.hibernate.proxy.", sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.", "java.lang.Double");
      assertEquals("java.sql.SQLException: org.hibernate.proxy.", sQLException0.toString());
      assertEquals("org.hibernate.proxy.", sQLException0.getMessage());
      assertEquals("java.lang.Double", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      sQLException0.printStackTrace();
      assertEquals("java.sql.SQLException: org.hibernate.proxy.", sQLException0.toString());
      assertEquals("org.hibernate.proxy.", sQLException0.getMessage());
      assertEquals("java.lang.Double", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      
      sQLRecoverableException0.addSuppressed(sQLException0);
      assertEquals("java.sql.SQLRecoverableException: org.hibernate.proxy.", sQLRecoverableException0.toString());
      assertEquals("org.hibernate.proxy.", sQLRecoverableException0.getMessage());
      assertEquals((-3), sQLRecoverableException0.getErrorCode());
      assertEquals("org.hibernate.proxy.", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLException: org.hibernate.proxy.", sQLException0.toString());
      assertEquals("org.hibernate.proxy.", sQLException0.getMessage());
      assertEquals("java.lang.Double", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)ClassUtil.throwIfError(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: org.hibernate.proxy.", sQLRecoverableException0.toString());
      assertEquals("org.hibernate.proxy.", sQLRecoverableException0.getMessage());
      assertEquals((-3), sQLRecoverableException0.getErrorCode());
      assertEquals("org.hibernate.proxy.", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: org.hibernate.proxy.", sQLRecoverableException1.toString());
      assertEquals((-3), sQLRecoverableException1.getErrorCode());
      assertEquals("org.hibernate.proxy.", sQLRecoverableException1.getMessage());
      assertEquals("org.hibernate.proxy.", sQLRecoverableException1.getSQLState());
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNotNull(sQLRecoverableException1);
      
      Class<Object> class0 = Object.class;
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Object> class1 = Object.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      assertSame(class1, class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "entrySet");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Double> class0 = Double.class;
      boolean boolean2 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class<?> class1 = ClassUtil.classOf(class0);
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Class", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<String> class2 = String.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      Class<MapType> class4 = MapType.class;
      Constructor<MapType> constructor0 = ClassUtil.findConstructor(class4, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Short> class0 = Short.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Character> class1 = Character.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Object> class2 = Object.class;
      String string0 = ClassUtil.isLocalType(class2, true);
      assertNull(string0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("ZK*jSS!q#:~?X2f");
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertNotNull(javaType0);
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isArrayType());
      assertNotNull(collectionLikeType0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.missingTypeIdException(collectionLikeType0, "vyNmaA\fm$G<Oo;Mn");
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(invalidTypeIdException0.getTypeId());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(invalidTypeIdException0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 763;
      longArray0[1] = (long) 763;
      longArray0[2] = (long) 763;
      longArray0[3] = 0L;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Cannot define Creator property \"%s\" as `@JsonUnwrapped`: combination not yet supported", "org.hibernate.proxy.java.lang.Character", 763, longArray0, invalidTypeIdException0);
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(invalidTypeIdException0.getTypeId());
      assertEquals("org.hibernate.proxy.java.lang.Character", batchUpdateException0.getSQLState());
      assertEquals(763, batchUpdateException0.getErrorCode());
      assertEquals("Cannot define Creator property \"%s\" as `@JsonUnwrapped`: combination not yet supported", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: Cannot define Creator property \"%s\" as `@JsonUnwrapped`: combination not yet supported", batchUpdateException0.toString());
      assertArrayEquals(new long[] {763L, 763L, 763L, 0L}, longArray0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(batchUpdateException0);
      assertEquals(4, longArray0.length);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotNull(jsonFactory3);
      
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<String> class0 = String.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 12);
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNotNull(coreXMLDeserializers_Std0);
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, accessPattern0);
      
      Collection<Object> collection0 = coreXMLDeserializers_Std0.getKnownPropertyNames();
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNull(collection0);
      
      String string0 = ClassUtil.quotedOr(accessPattern0, "qVrmph&,-b{ c%s+y?S");
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertNotNull(string0);
      assertEquals("\"ALWAYS_NULL\"", string0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertNotNull(javaType0);
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isContainerType());
      assertNotNull(collectionLikeType0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.missingTypeIdException(collectionLikeType0, "KP8a*Q8B");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isContainerType());
      assertNull(invalidTypeIdException0.getTypeId());
      assertNotNull(invalidTypeIdException0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-4581);
      longArray0[1] = (long) 12;
      longArray0[2] = (long) (-4581);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("; failed to set access: ", ")", 12, longArray0, invalidTypeIdException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isContainerType());
      assertNull(invalidTypeIdException0.getTypeId());
      assertEquals(12, batchUpdateException0.getErrorCode());
      assertEquals(")", batchUpdateException0.getSQLState());
      assertEquals("; failed to set access: ", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ; failed to set access: ", batchUpdateException0.toString());
      assertArrayEquals(new long[] {(-4581L), 12L, (-4581L)}, longArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(3, longArray0.length);
      
      Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertTrue(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isContainerType());
      assertNull(invalidTypeIdException0.getTypeId());
      assertEquals(12, batchUpdateException0.getErrorCode());
      assertEquals(")", batchUpdateException0.getSQLState());
      assertEquals("; failed to set access: ", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ; failed to set access: ", batchUpdateException0.toString());
      assertArrayEquals(new long[] {(-4581L), 12L, (-4581L)}, longArray0);
      assertNotNull(throwableArray0);
      assertEquals(3, longArray0.length);
      assertEquals(0, throwableArray0.length);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotNull(jsonFactory3);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Constructor<MapType> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "w!|*|", "w!|*|");
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = ClassUtil.nonNull(jsonMappingException0, jsonMappingException0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2869);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = true;
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      assertNotNull(mockPrintStream0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(dataOutputStream0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory1.createGenerator((OutputStream) dataOutputStream0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.fasterxml.jackson.databind.util.ClassUtil", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: com.fasterxml.jackson.databind.util.ClassUtil", sQLClientInfoException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException: com.fasterxml.jackson.databind.util.ClassUtil
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(boolean0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Double> class1 = Double.class;
      String string0 = ClassUtil.backticked((String) null);
      assertNotNull(string0);
      assertEquals("[null]", string0);
      
      String string1 = ClassUtil.getClassDescription(class1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`java.lang.Double`", string1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetter();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 2);
      Class<Double> class1 = Double.class;
      classArray0[0] = class1;
      Class<Double> class2 = Double.class;
      classArray0[1] = class2;
      AnnotatedMember annotatedMember0 = basicBeanDescription0.findAnyGetter();
      assertNull(annotatedMember0);
      
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) long0);
      assertFalse(boolean0);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      Class<Object> class4 = Object.class;
      Class<?> class5 = ClassUtil.getDeclaringClass(class4);
      assertNull(class5);
      
      Class<Double> class6 = Double.class;
      boolean boolean1 = ClassUtil.isProxyType(class6);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<ArrayType> class7 = ArrayType.class;
      try { 
        ClassUtil.createInstance(class7, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<String> class2 = String.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      Class<NoClass> class4 = NoClass.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class4);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 7498;
      intArray0[2] = (-1);
      intArray0[3] = 1677;
      intArray0[4] = (-4510);
      intArray0[5] = 711;
      intArray0[6] = 4885;
      intArray0[7] = 1;
      SQLWarning sQLWarning0 = new SQLWarning("'U]/F{_fC*/ gE", " is not a primitive type", 0);
      assertEquals("'U]/F{_fC*/ gE", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: 'U]/F{_fC*/ gE", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(" is not a primitive type", sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      MockThrowable mockThrowable0 = new MockThrowable((String) null, sQLWarning0);
      assertNotNull(mockThrowable0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, intArray0, mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("'U]/F{_fC*/ gE", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: 'U]/F{_fC*/ gE", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(" is not a primitive type", sQLWarning0.getSQLState());
      assertArrayEquals(new int[] {0, 7498, (-1), 1677, (-4510), 711, 4885, 1}, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(8, intArray0.length);
      
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, batchUpdateException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals("'U]/F{_fC*/ gE", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: 'U]/F{_fC*/ gE", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(" is not a primitive type", sQLWarning0.getSQLState());
      assertArrayEquals(new int[] {0, 7498, (-1), 1677, (-4510), 711, 4885, 1}, intArray0);
      assertNotNull(sQLDataException0);
      assertEquals(8, intArray0.length);
      
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.throwIfError(sQLDataException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertNull(sQLDataException1.getSQLState());
      assertNull(sQLDataException1.getMessage());
      assertEquals("'U]/F{_fC*/ gE", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: 'U]/F{_fC*/ gE", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(" is not a primitive type", sQLWarning0.getSQLState());
      assertArrayEquals(new int[] {0, 7498, (-1), 1677, (-4510), 711, 4885, 1}, intArray0);
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertNotNull(sQLDataException1);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(28, methodArray0.length);
      
      String string0 = ClassUtil.nonNullString("vals");
      assertNotNull(string0);
      assertEquals("vals", string0);
      
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      Class<?> class2 = classUtil_Ctor0.getDeclaringClass();
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(class2.isSynthetic());
      assertEquals(17, class2.getModifiers());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Void> class0 = Void.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertNotNull(list0);
      
      Class<Float> class2 = Float.class;
      String string0 = ClassUtil.isLocalType(class2, true);
      assertNull(string0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(", problem: ");
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(2, typeArray0.length);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(constructor0);
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class2);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNull(annotation0);
      
      Class<Annotation> class3 = Annotation.class;
      Annotation[] annotationArray1 = constructor0.getDeclaredAnnotationsByType(class3);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(annotationArray1.equals((Object)annotationArray0));
      assertSame(class3, class2);
      assertNotSame(annotationArray1, annotationArray0);
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReceiverType();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(annotatedType0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(annotationArray2);
      assertEquals(0, annotationArray2.length);
      
      Annotation[][] annotationArray3 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertSame(annotationArray3, annotationArray2);
      assertNotNull(annotationArray3);
      assertEquals(0, annotationArray3.length);
      
      Annotation[][] annotationArray4 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertSame(annotationArray4, annotationArray3);
      assertSame(annotationArray4, annotationArray2);
      assertNotNull(annotationArray4);
      assertEquals(0, annotationArray4.length);
      
      Annotation[] annotationArray5 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(annotationArray5.equals((Object)annotationArray1));
      assertSame(annotationArray5, annotationArray0);
      assertNotSame(annotationArray5, annotationArray1);
      assertNotNull(annotationArray5);
      assertEquals(0, annotationArray5.length);
      
      Class<AccessibleObject> class4 = AccessibleObject.class;
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class4);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Boolean`", string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("9y!{|m");
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("9y!{|m", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientException0);
      assertNotNull(mockThrowable0);
      
      SQLTransientException sQLTransientException1 = (SQLTransientException)ClassUtil.throwRootCauseIfIOE(mockThrowable0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("9y!{|m", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLTransientException: 9y!{|m", mockThrowable0.toString());
      assertNull(sQLTransientException1.getSQLState());
      assertEquals("9y!{|m", sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", sQLTransientException1.toString());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
      assertNotNull(sQLTransientException1);
      
      SQLTransientException sQLTransientException2 = (SQLTransientException)sQLTransientException0.fillInStackTrace();
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("9y!{|m", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals(0, sQLTransientException2.getErrorCode());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", sQLTransientException2.toString());
      assertNull(sQLTransientException2.getSQLState());
      assertEquals("9y!{|m", sQLTransientException2.getMessage());
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException0, sQLTransientException2);
      assertSame(sQLTransientException2, sQLTransientException0);
      assertSame(sQLTransientException2, sQLTransientException1);
      assertNotNull(sQLTransientException2);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        mockThrowable0.initCause(sQLTransientException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLTransientException: 9y!{|m
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("9y!{|m");
      assertEquals("9y!{|m", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      MockThrowable mockThrowable0 = new MockThrowable(sQLTransientException0);
      assertNotNull(mockThrowable0);
      
      SQLTransientException sQLTransientException1 = (SQLTransientException)ClassUtil.throwRootCauseIfIOE(mockThrowable0);
      assertEquals("9y!{|m", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLTransientException: 9y!{|m", mockThrowable0.toString());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", mockThrowable0.getMessage());
      assertNull(sQLTransientException1.getSQLState());
      assertEquals("9y!{|m", sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", sQLTransientException1.toString());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
      assertNotNull(sQLTransientException1);
      
      SQLTransientException sQLTransientException2 = (SQLTransientException)sQLTransientException0.fillInStackTrace();
      assertEquals("9y!{|m", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("9y!{|m", sQLTransientException2.getMessage());
      assertNull(sQLTransientException2.getSQLState());
      assertEquals(0, sQLTransientException2.getErrorCode());
      assertEquals("java.sql.SQLTransientException: 9y!{|m", sQLTransientException2.toString());
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException0, sQLTransientException2);
      assertSame(sQLTransientException2, sQLTransientException1);
      assertSame(sQLTransientException2, sQLTransientException0);
      assertNotNull(sQLTransientException2);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        mockThrowable0.initCause(sQLTransientException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLTransientException: 9y!{|m
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = ClassUtil.hasClass(list0, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Constructor<CollectionType> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("G05)APz", "'7UvUFe.}YX%si0HF", 98);
      assertEquals("G05)APz", sQLTimeoutException0.getMessage());
      assertEquals("'7UvUFe.}YX%si0HF", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: G05)APz", sQLTimeoutException0.toString());
      assertEquals(98, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      MockThrowable mockThrowable0 = new MockThrowable("G05)APz", sQLTimeoutException0);
      assertNotNull(mockThrowable0);
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)ClassUtil.throwRootCauseIfIOE(mockThrowable0);
      assertEquals("G05)APz", sQLTimeoutException0.getMessage());
      assertEquals("'7UvUFe.}YX%si0HF", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: G05)APz", sQLTimeoutException0.toString());
      assertEquals(98, sQLTimeoutException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: G05)APz", mockThrowable0.toString());
      assertEquals("G05)APz", mockThrowable0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: G05)APz", sQLTimeoutException1.toString());
      assertEquals("G05)APz", sQLTimeoutException1.getMessage());
      assertEquals("'7UvUFe.}YX%si0HF", sQLTimeoutException1.getSQLState());
      assertEquals(98, sQLTimeoutException1.getErrorCode());
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      assertNotNull(sQLTimeoutException1);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(1, collectionType0.containedTypeCount());
      assertNotNull(collectionType0);
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isArrayType());
      assertEquals(1, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertNotNull(collectionLikeType0);
      
      String string0 = collectionType0.toString();
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(1, collectionType0.containedTypeCount());
      assertNotNull(string0);
      assertEquals("[collection type; class java.util.LinkedList, contains [simple type, class java.lang.Object]]", string0);
      
      MockThrowable mockThrowable1 = (MockThrowable)mockThrowable0.fillInStackTrace();
      assertEquals("G05)APz", sQLTimeoutException0.getMessage());
      assertEquals("'7UvUFe.}YX%si0HF", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: G05)APz", sQLTimeoutException0.toString());
      assertEquals(98, sQLTimeoutException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: G05)APz", mockThrowable0.toString());
      assertEquals("G05)APz", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: G05)APz", mockThrowable1.toString());
      assertEquals("G05)APz", mockThrowable1.getMessage());
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(mockThrowable0, mockThrowable1);
      assertSame(mockThrowable1, mockThrowable0);
      assertNotNull(mockThrowable1);
      
      Class<IOException> class1 = IOException.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, false);
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isArrayType());
      assertEquals(1, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertEquals(10, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockThrowable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // G05)APz
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = ClassUtil.backticked("");
      assertNotNull(string0);
      assertEquals("``", string0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      Class<String> class1 = String.class;
      String string1 = ClassUtil.nameOf(class1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`java.lang.String`", string1);
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class2);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("Yl[1PbMc:y#", (String) null);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: Yl[1PbMc:y#", sQLTransientException0.toString());
      assertEquals("Yl[1PbMc:y#", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(" is not a primitive type", "eC\"G|!", 502, sQLTransientException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: Yl[1PbMc:y#", sQLTransientException0.toString());
      assertEquals("Yl[1PbMc:y#", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals(502, sQLRecoverableException0.getErrorCode());
      assertEquals(" is not a primitive type", sQLRecoverableException0.getMessage());
      assertEquals("eC\"G|!", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException:  is not a primitive type", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`java.lang.String`", "", sQLRecoverableException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: Yl[1PbMc:y#", sQLTransientException0.toString());
      assertEquals("Yl[1PbMc:y#", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals(502, sQLRecoverableException0.getErrorCode());
      assertEquals(" is not a primitive type", sQLRecoverableException0.getMessage());
      assertEquals("eC\"G|!", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException:  is not a primitive type", sQLRecoverableException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("`java.lang.String`", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: `java.lang.String`", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLException sQLException0 = new SQLException("`java.lang.String`", sQLIntegrityConstraintViolationException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: Yl[1PbMc:y#", sQLTransientException0.toString());
      assertEquals("Yl[1PbMc:y#", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals(502, sQLRecoverableException0.getErrorCode());
      assertEquals(" is not a primitive type", sQLRecoverableException0.getMessage());
      assertEquals("eC\"G|!", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException:  is not a primitive type", sQLRecoverableException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("`java.lang.String`", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: `java.lang.String`", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLException: `java.lang.String`", sQLException0.toString());
      assertEquals("`java.lang.String`", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      Throwable[] throwableArray0 = sQLException0.getSuppressed();
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: Yl[1PbMc:y#", sQLTransientException0.toString());
      assertEquals("Yl[1PbMc:y#", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals(502, sQLRecoverableException0.getErrorCode());
      assertEquals(" is not a primitive type", sQLRecoverableException0.getMessage());
      assertEquals("eC\"G|!", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException:  is not a primitive type", sQLRecoverableException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("`java.lang.String`", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: `java.lang.String`", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLException: `java.lang.String`", sQLException0.toString());
      assertEquals("`java.lang.String`", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      
      SQLException sQLException1 = (SQLException)ClassUtil.throwIfIOE(sQLException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: Yl[1PbMc:y#", sQLTransientException0.toString());
      assertEquals("Yl[1PbMc:y#", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals(502, sQLRecoverableException0.getErrorCode());
      assertEquals(" is not a primitive type", sQLRecoverableException0.getMessage());
      assertEquals("eC\"G|!", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException:  is not a primitive type", sQLRecoverableException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("`java.lang.String`", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: `java.lang.String`", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLException: `java.lang.String`", sQLException0.toString());
      assertEquals("`java.lang.String`", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException1.getSQLState());
      assertEquals("java.sql.SQLException: `java.lang.String`", sQLException1.toString());
      assertEquals("`java.lang.String`", sQLException1.getMessage());
      assertEquals(0, sQLException1.getErrorCode());
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      assertNotNull(sQLException1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<Byte> class2 = Byte.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Class<Object> class4 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class4, false);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertNotNull(constructor1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(52, methodArray0.length);
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertNotNull(list0);
      
      Class<Character> class2 = Character.class;
      boolean boolean0 = ClassUtil.isProxyType(class2);
      assertFalse(boolean0);
      
      Class<NoClass> class3 = NoClass.class;
      Class<?> class4 = ClassUtil.getDeclaringClass(class3);
      assertNull(class4);
      
      Class<Double> class5 = Double.class;
      List<Class<?>> list1 = ClassUtil.findSuperClasses(class3, class5, false);
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      Class<Long> class6 = Long.class;
      boolean boolean1 = ClassUtil.isConcrete(class6);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<AccessibleObject> class7 = AccessibleObject.class;
      Class<?> class8 = ClassUtil.getOuterClass(class7);
      assertNull(class8);
      
      Class<Character> class9 = Character.class;
      Class<?> class10 = ClassUtil.primitiveType(class9);
      assertFalse(class10.isInterface());
      assertTrue(class10.isPrimitive());
      assertFalse(class10.isEnum());
      assertFalse(class10.isSynthetic());
      assertEquals(1041, class10.getModifiers());
      assertFalse(class10.isAnnotation());
      assertFalse(class10.isArray());
      assertEquals("char", class10.toString());
      assertSame(class9, class2);
      assertNotNull(class10);
      
      boolean boolean2 = ClassUtil.isBogusClass(class3);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<?> class11 = ClassUtil.getOuterClass(class5);
      assertNull(class11);
      
      Class<Object> class12 = Object.class;
      Class<?> class13 = ClassUtil.getDeclaringClass(class12);
      assertNull(class13);
      
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(77, methodArray0.length);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MockError mockError0 = new MockError("");
      assertNotNull(mockError0);
      
      String string0 = ClassUtil.nullOrToString(mockError0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
      
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      assertFalse(constructor0.isVarArgs());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertFalse(constructor0.isVarArgs());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor1.toString());
      assertEquals(4, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertNotNull(constructor1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind.annotation", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTransactionRollbackException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLTransactionRollbackException", sQLTimeoutException0.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertNull(sQLTransactionRollbackException1.getMessage());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException1.toString());
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertNotNull(sQLTransactionRollbackException1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<CollectionType> class2 = CollectionType.class;
      Constructor<CollectionType> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("' missing from _propsInOrder");
      assertNotNull(string0);
      assertEquals("' missing from _propsInOrder", string0);
      
      Class<Double> class0 = Double.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      String string1 = "Y_C";
      String string2 = ClassUtil.backticked("Y_C");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("`Y_C`", string2);
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "' missing from _propsInOrder");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ClassUtil.throwIfRTE(sQLRecoverableException0);
      ClassUtil.isJacksonStdImpl((Object) "");
      Class<Float> class0 = Float.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isBogusClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("non-static member class", "{?dlMlP&", "non-static member class", 2);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("]2]\"Ru", "]2]\"Ru", ", problem: ", 16);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("]2]\"Ru", "C7;ETS/\"PLq", "", 1);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "{?dlMlP&", "2GPE>U", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("2GPE>U", "]2]\"Ru", "2GPE>U", 2);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("]2]\"Ru", "", "{?dlMlP&", 1);
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapLikeType0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls1);
      ObjectMapper objectMapper3 = objectMapper2.setDefaultSetterInfo(jsonSetter_Value0);
      simpleType0.getInterfaces();
      objectMapper0.reader();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, objectMapper3, (Writer) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getOuterClass(class0);
      Long long0 = new Long(0L);
      ClassUtil.getClassDescription(long0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = "entrySet";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "entrySet");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Integer) must override method 'entrySet'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<String> class0 = String.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 12);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      coreXMLDeserializers_Std0.getKnownPropertyNames();
      String string0 = ClassUtil.quotedOr(accessPattern0, "qVrmph&,-b{ c%s+y?S");
      assertEquals("\"ALWAYS_NULL\"", string0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      Class<ReferenceType> class3 = ReferenceType.class;
      boolean boolean0 = ClassUtil.hasClass(classUtil_Ctor0, class3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "?c!_n(+ml{d");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(": latter is not a subtype of former", jsonMappingException1);
      File file0 = MockFile.createTempFile("?c!_n(+ml{d", "QZK_(!ap2[tQtrWxD8.");
      sQLRecoverableException0.printStackTrace();
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ": latter is not a subtype of former");
      sQLTimeoutException0.printStackTrace(printStream0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): (was java.sql.SQLRecoverableException) (through reference chain: UNKNOWN[0])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      MockException mockException0 = new MockException();
      Throwable throwable0 = mockException0.fillInStackTrace();
      MockFile mockFile0 = new MockFile("H~", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream0.print('(');
      mockException0.printStackTrace((PrintStream) mockPrintStream0);
      mockException0.initCause(throwable0);
      mockException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockException0, "entrySet");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // entrySet
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.emptyIterator();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
      Class<Float> class2 = Float.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
