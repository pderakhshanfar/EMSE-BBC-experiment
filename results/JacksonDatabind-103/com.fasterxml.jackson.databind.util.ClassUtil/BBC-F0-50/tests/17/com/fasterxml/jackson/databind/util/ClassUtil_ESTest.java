/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 01:50:45 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.emptyIterator();
      ClassUtil.backticked("r`BQY98UZUUD&p/A1'w");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      String string0 = null;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, (String) null, "r`BQY98UZUUD&p/A1'w");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.io.InputStream` from String [N/A]: r`BQY98UZUUD&p/A1'w
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.defaultValue(class0);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.getClassDescription(class1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isConcrete(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class1);
      EnumMap<ClientInfoStatus, Integer> enumMap1 = enumMap0.clone();
      Integer integer0 = new Integer((-1746375819));
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      enumMap1.put(clientInfoStatus0, integer0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      enumMap1.put(clientInfoStatus1, (Integer) null);
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN;
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      enumMap0.compute(clientInfoStatus2, biFunction0);
      EnumMap<ClientInfoStatus, Integer> enumMap2 = new EnumMap<ClientInfoStatus, Integer>(enumMap1);
      ClassUtil.findEnumType(enumMap1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class0);
      EnumMap<ClientInfoStatus, Integer> enumMap1 = enumMap0.clone();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      Integer integer0 = new Integer((-1800));
      enumMap1.put(clientInfoStatus0, integer0);
      EnumMap<ClientInfoStatus, Integer> enumMap2 = new EnumMap<ClientInfoStatus, Integer>(enumMap1);
      ClassUtil.findEnumType(enumMap1);
      Class<Integer> class1 = Integer.class;
      Class<InputStream> class2 = InputStream.class;
      ClassUtil.findSuperTypes(class1, class2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Error> class0 = Error.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.isConcrete(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class1);
      EnumMap<ClientInfoStatus, Integer> enumMap1 = enumMap0.clone();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      Integer integer0 = new Integer((-1746375819));
      enumMap1.put(clientInfoStatus0, integer0);
      EnumMap<ClientInfoStatus, Integer> enumMap2 = enumMap1.clone();
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      enumMap1.put(clientInfoStatus1, integer0);
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_INVALID;
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      enumMap2.compute(clientInfoStatus2, biFunction0);
      EnumMap<ClientInfoStatus, Integer> enumMap3 = new EnumMap<ClientInfoStatus, Integer>(enumMap2);
      ClassUtil.findEnumType(enumMap3);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.getEnclosingClass(class3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class0);
      EnumMap<ClientInfoStatus, Integer> enumMap1 = enumMap0.clone();
      EnumMap<ClientInfoStatus, Integer> enumMap2 = new EnumMap<ClientInfoStatus, Integer>(enumMap1);
      ClassUtil.findEnumType(enumMap1);
      Class<Integer> class1 = Integer.class;
      Class<InputStream> class2 = InputStream.class;
      ClassUtil.findSuperTypes(class1, class2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<IOException> class2 = IOException.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "enum");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findSuperClasses(class2, class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      Class<Float> class4 = Float.class;
      ClassUtil.findRawSuperTypes(class3, class4, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A{~k?$_iuw_+]B");
      ClassUtil.getClassDescription(class4);
      ClassUtil.getDeclaringClass(class4);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("`java.lang.Float`");
      MockError mockError0 = new MockError(sQLTimeoutException0);
      mockError0.getCause();
      sQLTimeoutException0.getSuppressed();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("`java.lang.Float`", "rH/$2'sem`", "`java.lang.Float`", (-1979));
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      mockError0.setStackTrace(stackTraceElementArray0);
      mockError0.addSuppressed(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "`java.lang.Float`");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // java.sql.SQLTimeoutException: `java.lang.Float`
         //
         verifyException("`java.lang.Float`", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<POJONode> class1 = POJONode.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nonNullString("Failed to instantiate class ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      MockFile mockFile0 = new MockFile((String) null, "Cannot figure out type for EnumMap (odd JDK platform?)");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 2640);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1536, objectMapper1, bufferedOutputStream0, byteArray0, 1461, true);
      uTF8JsonGenerator0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      SQLException sQLException0 = new SQLException((String) null, (String) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "1DlR-+t", sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Of}2g)I}/n\"n>PY_J");
      ClassUtil.backticked("net.sf.cglib.proxy.");
      ClassUtil.isJacksonStdImpl(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`net.sf.cglib.proxy.`");
      String string0 = "?Dmf'T";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "?Dmf'T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-708825413));
      IOContext iOContext0 = new IOContext(bufferRecycler0, placeholderForType0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)65;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2403), byteArrayInputStream0, objectMapper0, (ByteQuadsCanonicalizer) null, byteArray0, (byte)65, (-1746375819), false);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) uTF8StreamJsonParser0, (Class<?>) class0, jsonToken0, "java.lang.String");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_ARRAY: java.lang.String
         //  at [Source: (com.fasterxml.jackson.databind.type.PlaceholderForType); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-111);
      String string0 = "java.lang.Double";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Double");
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<String> class1 = String.class;
      ClassUtil.isNonStaticInnerClass(class1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Class ");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.lang.Double", sQLTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      String string1 = "com.fasterxml.jackson.databind.util.ClassUtil$Ctor";
      StackTraceElement stackTraceElement0 = new StackTraceElement("#temporary-name", "#temporary-name", "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", (byte)0);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      sQLTransientConnectionException0.initCause(sQLIntegrityConstraintViolationException0);
      StackTraceElement[] stackTraceElementArray1 = new StackTraceElement[0];
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray1);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isLocalType(class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-9));
      ObjectReader objectReader0 = objectMapper1.readerFor((JavaType) placeholderForType0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectReader0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 96, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      MockIOException mockIOException0 = new MockIOException((String) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      objectReader0.withHandler(deserializationProblemHandler0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "(3kpe#aalG7 I");
      Short short0 = Short.valueOf((short) (-4));
      jsonMappingException0.prependPath((Object) short0, (-6));
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) byteArrayBuilder0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (3kpe#aalG7 I (through reference chain: java.lang.Short[?])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet.range(accessPattern0, accessPattern0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("V!/#Y1Q{RI54Im#MIc#");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings1);
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler((Object) null);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findSuperTypes(javaType0, class2, false);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getOuterClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLIntegrityConstraintViolationException0);
      SQLException sQLException0 = new SQLException("RF*W_8)6W4cIBg", sQLTimeoutException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLException0);
      MockError mockError0 = new MockError(sQLException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "=W;!W0zsCjG&io`*t");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Boolean> class1 = Boolean.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.reflect.A");
      ClassUtil.getGenericInterfaces(class1);
      POJONode pOJONode0 = new POJONode(list0);
      pOJONode0.isTextual();
      ClassUtil.quotedOr(pOJONode0, "org.hibernate.proxy.");
      ClassUtil.backticked("com.fasterxml.jackson.core.io.MergedStream");
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      Class<Boolean> class3 = Boolean.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class2, class3, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ObjectMapper objectMapper1 = new ObjectMapper();
      JsonFactory jsonFactory2 = new JsonFactory(objectMapper1);
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory1);
      objectMapper2.copy();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper3 = objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      ObjectMapper objectMapper4 = objectMapper3.disable(jsonParser_FeatureArray0);
      objectMapper4.readerForUpdating(jsonParser_Feature6);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Class<Short> class1 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.hasEnclosingMethod(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.classOf(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class3 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class3);
      Class<AccessPattern> class4 = AccessPattern.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapType0, typeBindings0);
      List<JavaType> list0 = arrayType0.getInterfaces();
      TypeBindings typeBindings1 = TypeBindings.create(class4, list0);
      Class<Byte> class5 = Byte.class;
      typeBindings0.withUnboundVariable("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      typeBindings1.asKey(class5);
      Long long0 = new Long(964L);
      ArrayType arrayType1 = ArrayType.construct((JavaType) mapType0, typeBindings1, (Object) long0, (Object) class3);
      ArrayType arrayType2 = arrayType1.withStaticTyping();
      ClassUtil.rawClass(arrayType2);
      ClassUtil.primitiveType(class5);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.String");
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.findEnumType(class0);
      Class<IOException> class1 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, class1, true);
      String string0 = "EZJHp4,$4V?7x";
      ClassUtil.backticked("EZJHp4,$4V?7x");
      ClassUtil.getConstructors(class0);
      Class<Byte> class2 = Byte.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.getClassDescription(list0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonFactory2.disable(jsonGenerator_Feature0);
      String string1 = ")Y\"GH^p$w~rI1R&G#C";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("^h_d*`Eiee{{r", ")Y\"GH^p$w~rI1R&G#C");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // )Y\"GH^p$w~rI1R&G#C
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.isCollectionMapOrArray(class2);
      Class<TypeIdResolver> class3 = TypeIdResolver.class;
      ClassUtil.isConcrete(class3);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(iOContext0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectReader0, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.nonNullString("R8S` 2?=jB>");
      ClassUtil.hasEnclosingMethod(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<CreatorProperty> class2 = CreatorProperty.class;
      ClassUtil.findSuperTypes(class1, class2);
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class1);
      Class<NoClass> class3 = NoClass.class;
      Class<Annotation> class4 = Annotation.class;
      ClassUtil.findSuperTypes(class3, class4, list0);
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule("Invalid numeric value: ", version0);
      Class<TypeIdResolver>[] classArray0 = (Class<TypeIdResolver>[]) Array.newInstance(Class.class, 3);
      Class<TypeIdResolver> class5 = TypeIdResolver.class;
      classArray0[0] = class5;
      Class<TypeIdResolver> class6 = TypeIdResolver.class;
      classArray0[1] = class6;
      Class<TypeIdResolver> class7 = TypeIdResolver.class;
      classArray0[2] = class7;
      SimpleModule simpleModule1 = simpleModule0.registerSubtypes(classArray0);
      SimpleModule simpleModule2 = simpleModule1.setSerializerModifier((BeanSerializerModifier) null);
      ClassUtil.classNameOf(simpleModule2);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Error> class0 = Error.class;
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "0S*2lZ=hb*7", sQLException0);
      Throwable throwable0 = sQLException0.fillInStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException("*D3keT=JiA)Ri;", "", throwable0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "*D3keT=JiA)Ri;", sQLDataException0);
      MockFile mockFile0 = new MockFile("\";1aF:", "*D3keT=JiA)Ri;");
      MockFile mockFile1 = new MockFile("*D3keT=JiA)Ri;", "*D3keT=JiA)Ri;");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      SQLDataException sQLDataException1 = new SQLDataException("*D3keT=JiA)Ri;", "", sQLTransientException0);
      ClassUtil.nullOrToString((Object) null);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      enumSet0.stream();
      ClassUtil.findEnumType(enumSet0);
      Class<MapType> class0 = MapType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      PriorityQueue<CollectionLikeType> priorityQueue0 = new PriorityQueue<CollectionLikeType>();
      enumSet0.retainAll(priorityQueue0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.nonNullString("net.sf.cglib.proxy.java.io.IOException");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.findEnumType((Enum<?>) jsonEncoding0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassUtil.backticked("#x;GZ%LR5TX`v/wN");
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getOuterClass(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findEnumType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Module>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isNonStaticInnerClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = 'U';
      jsonFactory1.createParser(charArray0);
      charArray0[2] = 'I';
      charArray0[3] = '#';
      charArray0[4] = 'k';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, (-1165), (-1165));
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) null, jsonToken0, "JSON");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_STRING: JSON
         //  at [Source: (char[])\"7UI#k\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.canBeABeanType(class0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      List<Class<?>> list0 = new Stack<Class<CollectionType>>();
      Class<Module> class1 = Module.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, sQLClientInfoException0);
      sQLClientInfoException0.initCause(sQLNonTransientException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getOuterClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      MockFile mockFile0 = new MockFile("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((File) mockFile0, jsonEncoding0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      SQLException sQLException0 = new SQLException("JSON", "ADO", 5324);
      Throwable throwable0 = ClassUtil.getRootCause(sQLException0);
      Long long0 = new Long((-1389L));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath(throwable0, (Object) long0, 96);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON (through reference chain: java.lang.Long[96])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      ClassUtil.rawClass(collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.createInstance(class1, true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      ObjectReader objectReader2 = objectReader1.withFeatures(jsonParser_FeatureArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectReader2, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 694, true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("JSON");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) byteArrayBuilder0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, javaType0);
      MapType mapType1 = mapType0.withKeyType(referenceType0);
      MapType mapType2 = mapType1.withContentTypeHandler(class0);
      MapLikeType mapLikeType0 = mapType2.withKeyType(mapType0);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", (-310));
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Multiple 'any-setter' fields defined (%s vs %s)", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Short> class0 = Short.class;
      MockThrowable mockThrowable0 = new MockThrowable("*I1DIBGa;Dc.q+", (Throwable) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("]3I", "Cannot resolve PropertyFilter with id '", 3569, mockThrowable0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("7", sQLRecoverableException0);
      ClassUtil.quotedOr(mockRuntimeException0, "7");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("*I1DIBGa;Dc.q+");
      ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "8r86");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8r86
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassUtil.nonNullString("#!Sr?nlK~}S");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "W|,P+Z+!^NW5}90(\\,/";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "W|,P+Z+!^NW5}90(,/");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.isProxyType(class0);
      Class<InputStream> class1 = InputStream.class;
      ClassUtil.nameOf(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0, sQLWarning0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("i[", map0);
      JsonFactory jsonFactory0 = new JsonFactory();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) filterOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Void> class0 = Void.class;
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "[J();7r3Ym]|3S");
      MockError mockError0 = new MockError(sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.findSuperClasses((Class<?>) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getPackageName(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getDeclaredFields(class2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getPackageName(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.primitiveType(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findConstructor(class2, false);
      Class<Object> class3 = Object.class;
      ClassUtil.findEnumType(class3);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<Float> class1 = Float.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Class<MapType> class3 = MapType.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Byte> class4 = Byte.class;
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        TypeBindings.create(class4, javaType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Byte with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("cQJ", (String) null, (-694), hashMap0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("cQJ", sQLClientInfoException0);
      Short short0 = new Short((short)993);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockRuntimeException0, (Object) short0, "cQJ");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): cQJ (through reference chain: java.lang.Short[\"cQJ\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.findSuperTypes(class0, class0, list0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRuntimeException mockRuntimeException1 = (MockRuntimeException)ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.throwIfError(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException1, "?[7^6#3qg3I: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.getGenericInterfaces(class1);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("; failed to set access: ");
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("; failed to set access: ");
      ClassUtil.throwIfIOE(sQLTransientException0);
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isLocalType(class0, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      JavaType javaType0 = typeFactory0.constructType((Type) class0, typeBindings0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(javaType0, class2, true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null);
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<Byte> class0 = Byte.TYPE;
      TypeFactory.unknownType();
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes((JavaType) null, class1, true);
      Class<Float> class2 = Float.class;
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperClasses(class2, class3, true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class1 = Integer.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      Class<ArrayType> class3 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class2, class3);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(javaType0);
      Class<Object> class4 = Object.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType1, (Class<?>) class4, false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassUtil.nonNullString("Hg*O+JpATSUX,M");
      Class<CreatorProperty> class0 = CreatorProperty.class;
      Class<MapType> class1 = MapType.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ClassUtil.getRootCause(sQLTransientConnectionException0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class2, true);
      ClassUtil.nameOf(class2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer");
      sQLInvalidAuthorizationSpecException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockRuntimeException mockRuntimeException1 = (MockRuntimeException)ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      Class<Short> class0 = Short.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.isConcrete((Member) constructor0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ClassUtil.canBeABeanType(class0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) printStream0, jsonEncoding0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(";^A2A7TI~55z  XsU");
      MockIOException mockIOException0 = new MockIOException("local/anonymous", sQLTransientConnectionException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) printStream0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.copy();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      mapperFeatureArray0[1] = mapperFeature1;
      ObjectMapper objectMapper2 = objectMapper1.disable(mapperFeatureArray0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonGenerator_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.isProxyType(class0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.backticked((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getOuterClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getOuterClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      beanDeserializerFactory1.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-9m2dORwTji(7@^4a~W", true);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("JSON", (Throwable) null);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.hasClass(sQLTransactionRollbackException0, class1);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
      Object object0 = new Object();
      CollectionType collectionType1 = collectionType0.withTypeHandler(object0);
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = Boolean.valueOf("y:rDc}");
      Boolean boolean2 = ClassUtil.nonNull(boolean0, boolean1);
      CollectionType collectionType2 = collectionType1.withContentTypeHandler(boolean2);
      CollectionType collectionType3 = collectionType2.withContentValueHandler(boolean1);
      ClassUtil.isJacksonStdImpl((Object) collectionType3);
      ClassUtil.findRawSuperTypes(class0, class1, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("y:rDc}");
      DataTruncation dataTruncation0 = new DataTruncation(32768, true, false, 32768, 32768, sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) dataTruncation0, "y:rDc}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // y:rDc}
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimpleModule simpleModule0 = new SimpleModule();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.getOuterClass(class0);
      System.setCurrentTimeMillis(2858L);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("elementType", ")", (-1017), jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.annotation.NoClass` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("serialVersionUID", true);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLIntegrityConstraintViolationException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float0 = new Float((float) 0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, false);
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      objectMapper0.reader(jsonNodeFactory0);
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "serialVersionUID");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockError mockError0 = new MockError();
      ClassUtil.nameOf((Named) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.nonNull((RuntimeException) null, (RuntimeException) null);
      Class<Byte> class0 = Byte.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getClassDescription(class0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<Long> class2 = Long.TYPE;
      ClassUtil.isConcrete(class2);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.getGenericInterfaces(class3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Object> class0 = Object.class;
      ClassUtil.hasClass((Object) null, class0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, (Throwable) null);
      ClassUtil.nonNull((RuntimeException) null, (RuntimeException) mockRuntimeException0);
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParamCount();
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.backticked("gPv3V");
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.isConcrete((Member) constructor0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Double> class0 = Double.class;
      ClassUtil.findConstructor(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<Void> class0 = Void.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.hasClass(class0, class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Rnb9FIMQ=Xg#<S{Z6@", "}o^dRBfW&#u", (-924));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Rnb9FIMQ=Xg#<S{Z6@", (String) null, 15, sQLIntegrityConstraintViolationException0);
      SQLException sQLException0 = new SQLException((String) null, sQLNonTransientConnectionException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLException0);
      ClassUtil.getRootCause(mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isBogusClass(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-2757));
      coreXMLDeserializers_Std0.getValueType();
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.nonNull((RuntimeException) null, (RuntimeException) null);
      Class<Byte> class0 = Byte.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ClassUtil.findSuperTypes(javaType0, class0, false);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "0S*2lZ=hb*7", sQLException0);
      sQLException0.fillInStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException("Xoi!dnp1[", "", sQLDataException0);
      sQLTransientException0.getStackTrace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "\";1aF:", sQLTransientException0);
      MockFile mockFile0 = new MockFile("", "0S*2lZ=hb*7");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLException0.forEach(consumer0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "\";1aF:");
      sQLDataException0.printStackTrace(printWriter0);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Long> class0 = Long.class;
      ClassUtil.findSuperTypes(javaType0, class0, false);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.classOf("F");
      Class<Long> class1 = Long.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.findClassAnnotations(class0);
      System.setCurrentTimeMillis(1919L);
      ClassUtil.nameOf((Named) null);
      ClassUtil.hasClass(class0, class1);
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<AccessPattern>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Double> class0 = Double.class;
      ClassUtil.findConstructor(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockError mockError0 = new MockError();
      MockError mockError1 = new MockError("SvFB8+f", mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MapType> class0 = MapType.class;
      ClassUtil.findEnumType(class0);
      MockError mockError0 = new MockError();
      mockError0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "ZERO_LENGTH_ENUM_ARRAY");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(",D3Kt?N,[u", ",D3Kt?N,[u");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<MapType> class1 = MapType.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class1, class2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException("gM8", "gM8", (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("net.sf.cglib.proxy.long", "gM8", (-1241), sQLTransientException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("]>XJ$3n$)9");
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("gM8", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockFileOutputStream0, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: gM8
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.hasClass(class0, class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isJacksonStdImpl((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.primitiveType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.nameOf(class1);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotatedExceptionTypes();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.getConstructors(class3);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.classOf("F");
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.findClassAnnotations(class0);
      System.setCurrentTimeMillis(399L);
      ClassUtil.nameOf((Named) null);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findEnumType(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getOuterClass(class2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getPackageName(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class3);
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.findClassAnnotations(class4);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Long> class0 = Long.class;
      ClassUtil.getOuterClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.ser.std.BooleanSerializer", (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) sQLTransactionRollbackException0, 17);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.ser.std.BooleanSerializer (through reference chain: java.sql.SQLTransactionRollbackException[17])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      Class<?> class1 = ClassUtil.classOf("F");
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.classOf("F");
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.findClassAnnotations(class0);
      System.setCurrentTimeMillis(399L);
      ClassUtil.nameOf((Named) null);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, true);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findConstructor(class0, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<RuntimeException> class1 = RuntimeException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      simpleType0.isTypeOrSubTypeOf(class1);
      defaultSerializerProvider_Impl0.invalidTypeIdException(simpleType0, "java.lang.String", "java.lang.String");
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.classNameOf((Object) null);
      ClassUtil.quotedOr("[null]", "(xeCT6PadX321#,U");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.hasEnclosingMethod(class0);
      JavaType javaType0 = TypeFactory.unknownType();
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      Class<Byte> class1 = Byte.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getEnclosingClass(class0);
      Long long0 = new Long(0L);
      ClassUtil.isJacksonStdImpl((Object) long0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getPackageName(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class3);
      Class<NoClass> class4 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<ResolvedRecursiveType> class5 = ResolvedRecursiveType.class;
      ClassUtil.getConstructors(class5);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getEnclosingClass(class0);
      Class<Object> class1 = Object.class;
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.isBogusClass((Class<?>) null);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.getOuterClass(class3);
      Class<RuntimeException> class4 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException("|vUURjvWYry", "\";1aF:", sQLException0);
      Throwable throwable0 = sQLDataException0.fillInStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException("Xoi!dnp1[", "\";1aF:", throwable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(" (", "k=2U?=b)u}dvzQJ");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "com.fasterxml.jackson.databind.util.ClassUtil", sQLInvalidAuthorizationSpecException0);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.util.ClassUtil", " (");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      mockPrintWriter0.append((CharSequence) "com.fasterxml.jackson.databind.util.ClassUtil");
      sQLDataException0.printStackTrace((PrintWriter) mockPrintWriter0);
      MockIOException mockIOException0 = new MockIOException(sQLDataException0);
      mockIOException0.toString();
      ClassUtil.getClassDescription(sQLFeatureNotSupportedException0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class0 = NoClass.class;
      List<Class<?>> list0 = new LinkedList<Class<MapType>>();
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isBogusClass(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isLocalType(class0, true);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.createInstance(class1, true);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Object> class2 = Object.class;
      ClassUtil.getConstructors(class2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getGenericInterfaces(class0);
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.findClassAnnotations(class1);
      System.setCurrentTimeMillis(0L);
      Class<MapType> class2 = MapType.class;
      ClassUtil.getOuterClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isLocalType(class0, true);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.createInstance(class1, true);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ClassUtil.backticked("#x;GZ%LR5TX`v/wN");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      mockPrintWriter0.println(591L);
      mockPrintWriter0.append('O');
      sQLTransientConnectionException0.printStackTrace((PrintWriter) mockPrintWriter0);
      Class<Object> class0 = Object.class;
      ClassUtil.hasClass("`#x;GZ%LR5TX`v/wN`", class0);
      ClassUtil.findSuperClasses(class0, class0, false);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<Byte> class1 = Byte.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.backticked((String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<String> class1 = String.class;
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.getConstructors(class1);
      Class<NoClass> class3 = NoClass.class;
      try { 
        ClassUtil.createInstance(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.getOuterClass(class0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findEnumType(class2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)107;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "array");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.hasEnclosingMethod(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<RuntimeException> class1 = RuntimeException.class;
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      ClassUtil.isConcrete(class1);
      ClassUtil.throwIfIOE(throwable0);
      ClassUtil.canBeABeanType(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.nameOf(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.getConstructors(class1);
      ClassUtil.isBogusClass((Class<?>) null);
      MockError mockError0 = new MockError((String) null);
      ClassUtil.throwRootCauseIfIOE(mockError0);
      ClassUtil.getPackageName(class1);
      ClassUtil.backticked("com.fasterxml.jackson.databind.deser.CreatorProperty");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.canBeABeanType(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.isLocalType(class1, true);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      String string0 = "F";
      Class<?> class1 = ClassUtil.classOf("F");
      boolean boolean0 = true;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class2);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "F", (Throwable) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteArrayBuilder byteArrayBuilder0 = null;
      try {
        byteArrayBuilder0 = new ByteArrayBuilder((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<ArrayType> class1 = ArrayType.class;
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isConcrete(class2);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.isJacksonStdImpl((Object) class1);
      System.setCurrentTimeMillis(0L);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findClassAnnotations(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      System.setCurrentTimeMillis(2045L);
      Class<POJONode> class1 = POJONode.class;
      ClassUtil.getPackageName(class1);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.emptyIterator();
      ClassUtil.getDeclaredMethods(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getDeclaredAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaringClass(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "");
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ClassUtil.classNameOf(referenceType0);
      ClassUtil.emptyIterator();
      ClassUtil.getOuterClass(class1);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "";
      Class<POJONode> class0 = POJONode.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.backticked("org.hibernate.proxy.java.io.IOException");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.java.io.IOException");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~oQ\"\"DG");
      sQLTransientConnectionException0.getSuppressed();
      mockPrintWriter0.println("`org.hibernate.proxy.java.io.IOException`");
      mockPrintWriter0.append('S');
      sQLTransientConnectionException0.printStackTrace((PrintWriter) mockPrintWriter0);
      ClassUtil.getRootCause(sQLTransientConnectionException0);
      ClassUtil.hasClass("~oQ\"\"DG", class0);
      ClassUtil.backticked("`org.hibernate.proxy.java.io.IOException`");
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Double> class0 = Double.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, true);
      Class<Character> class2 = Character.class;
      ClassUtil.getDeclaredMethods(class2);
      StringWriter stringWriter0 = new StringWriter(1583);
      ClassUtil.nullOrToString(list0);
      stringWriter0.append((CharSequence) "java.util.ArrayList@0000000002");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = new Character('f');
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-1244651605), (ObjectCodec) null, stringWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getEnclosingClass(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ClassUtil.quotedOr((Object) null, "org.hibernate.proxy.long");
      Throwable throwable0 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fasterxml.jackson.databind.deser.DeserializerFactory", "NULL", (Throwable) null);
      // Undeclared exception!
      try { 
        sQLSyntaxErrorException0.setStackTrace((StackTraceElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      RuntimeException runtimeException0 = null;
      ClassUtil.nonNull((RuntimeException) null, (RuntimeException) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, (-683), objectReader1, byteArrayBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaringClass(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getGenericInterfaces(class0);
      Class<Integer> class1 = Integer.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "long");
      ClassUtil.classNameOf(class0);
      ClassUtil.emptyIterator();
      Class<Integer> class2 = Integer.class;
      ClassUtil.getOuterClass(class2);
      DataTruncation dataTruncation0 = new DataTruncation((-1310), true, true, (-1310), 0, jsonMappingException0);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.classOf("com.fasterxml.jackson.databind.type");
      Class<Object> class2 = Object.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<NoClass> class3 = NoClass.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.findConstructor(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1719);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("serialVersionUID", "serialVersionUID", intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      sQLSyntaxErrorException0.setNextException(batchUpdateException0);
      ClassUtil.getRootCause(batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("serialVersionUID", (String) null, batchUpdateException0);
      sQLSyntaxErrorException1.getSuppressed();
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException1);
      ClassUtil.canBeABeanType(class0);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class3);
      ClassUtil.throwIfError(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      SQLException sQLException0 = new SQLException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "", sQLException0);
      sQLDataException0.fillInStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException("&", "com.fasterxml.jackson.core.base.GeneratorBase", sQLException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("0S*2lZ=hb*7", "&", sQLDataException0);
      MockFile mockFile0 = new MockFile((String) null, "org.hibernate.proxy.java.lang.reflect.AccessibleObject");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      mockPrintWriter0.append((CharSequence) "org.hibernate.proxy.java.lang.reflect.AccessibleObject");
      sQLDataException0.printStackTrace((PrintWriter) mockPrintWriter0);
      MockIOException mockIOException0 = new MockIOException(sQLException0);
      mockIOException0.toString();
      ClassUtil.getClassDescription((Object) null);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class1, class0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Float float0 = new Float((-2004.5247832455));
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      ClassUtil.getClassDescription((Object) null);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.PlaceholderForType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nonNullString("](@uWj//RT+qVVWQ4Z@");
      Class<SimpleType> class1 = SimpleType.class;
      boolean boolean0 = false;
      ClassUtil.findConstructor(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil classUtil0 = new ClassUtil();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ClassUtil.quotedOr(sQLClientInfoException0, "NULL");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("\"java.sql.SQLClientInfoException\"", "\"java.sql.SQLClientInfoException\"", (Throwable) null);
      // Undeclared exception!
      try { 
        sQLSyntaxErrorException0.setStackTrace((StackTraceElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.backticked("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Float> class1 = Float.class;
      ClassUtil.findSuperTypes(class1, class0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getPackageName(class1);
      Class<Float> class2 = Float.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<String> class3 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.getConstructors(class4);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Boolean is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.backticked("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      JsonGeneratorDelegate jsonGeneratorDelegate1 = new JsonGeneratorDelegate(jsonGeneratorDelegate0);
      String string0 = ",D3Kt?N,[u";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(",D3Kt?N,[u", ",D3Kt?N,[u");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate1, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      int int0 = (-1276);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TypeReference<SimpleType> typeReference0 = (TypeReference<SimpleType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.forType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Float float0 = new Float(0.0);
      ClassUtil.nullOrToString(float0);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isConcrete(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.createInstance(class0, true);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<String> class1 = String.class;
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.getConstructors(class1);
      Class<CollectionType> class4 = CollectionType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      Integer integer0 = new Integer(96);
      ClassUtil.classNameOf(integer0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ZV5eoS", "ZV5eoS", 2867);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLTimeoutException0);
      batchUpdateException0.spliterator();
      sQLTimeoutException0.getStackTrace();
      MockError mockError0 = new MockError("ZV5eoS", batchUpdateException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("ZERO_LENGTH_ENUM_ARRAY", "T}sP@$", "c$SKTf[4+>Q|N_B.K", 2867);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("ZV5eoS", "ZERO_LENGTH_ENUM_ARRAY", ")m9zM8a", 2867);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("ZERO_LENGTH_ENUM_ARRAY", "*lW0S0oLs[", "ZERO_LENGTH_ENUM_ARRAY", (-1257));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("entrySet", "WRITE_EMPTY_JSON_ARRAYS", "ZERO_LENGTH_ENUM_ARRAY", 2867);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "", "c$SKTf[4+>Q|N_B.K", 2867);
      stackTraceElementArray0[4] = stackTraceElement4;
      mockError0.setStackTrace(stackTraceElementArray0);
      SQLDataException sQLDataException0 = new SQLDataException("ZV5eoS", mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "ZV5eoS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZV5eoS
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nonNullString("](@uWj//RT+qVVWQ4Z@");
      Class<Float> class1 = Float.class;
      ClassUtil.getConstructors(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findConstructor(class2, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(simpleType0, "](@uWj//RT+qVVWQ4Z@", "w{q4L,g(BGH.");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '](@uWj//RT+qVVWQ4Z@' as a subtype of [simple type, class com.fasterxml.jackson.databind.type.CollectionLikeType]: w{q4L,g(BGH.
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getGenericInterfaces(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findClassAnnotations(class1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      ClassUtil.nonNull((RuntimeException) null, (RuntimeException) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Float float0 = new Float(0.0);
      ClassUtil.nullOrToString(float0);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isConcrete(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<String> class1 = String.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.isLocalType(class1, false);
      Class<Byte> class2 = Byte.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      Class<Double> class4 = Double.class;
      ClassUtil.findRawSuperTypes(class3, class4, true);
      ClassUtil.getDeclaredMethods(class1);
      Class<JsonMappingException> class5 = JsonMappingException.class;
      ClassUtil.isBogusClass(class5);
      ClassUtil.getOuterClass(class0);
      Class<AccessibleObject> class6 = AccessibleObject.class;
      ClassUtil.isBogusClass(class6);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Byte is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = "serialVersionUID";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "serialVersionUID");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.String) must override method 'serialVersionUID'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.defaultValue(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Double double0 = new Double(1765.0);
      Class<?> class0 = ClassUtil.classOf(double0);
      ClassUtil.classOf((Object) null);
      ClassUtil.getOuterClass(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("aEYJ5rlT\"\"OU-~wT!", "}q8;+@H%VV,vrU");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("inl@z'A:", sQLIntegrityConstraintViolationException0);
      ClassUtil.throwIfIOE(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getEnclosingClass(class0);
      JsonGenerator jsonGenerator0 = null;
      JsonMappingException.from((JsonGenerator) null, "-^}';]t,+K,7.:2Su");
      Class<Character> class1 = Character.class;
      boolean boolean0 = true;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.getSuppressed();
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLIntegrityConstraintViolationException0);
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      ClassUtil.classOf("\":x=j }#R[}2t");
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<NoClass> class2 = NoClass.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      Class<Integer> class0 = Integer.class;
      ClassUtil.hasClass(float0, class0);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isJacksonStdImpl((Object) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientConnectionException0, "[null]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [null]
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isProxyType(class1);
      SQLDataException sQLDataException0 = new SQLDataException("vals");
      SQLDataException sQLDataException1 = new SQLDataException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Split surrogate on writeRaw() input (last character): first character 0x%4x", "Cannot access ", (-4878), sQLDataException1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Split surrogate on writeRaw() input (last character): first character 0x%4x", "vals", sQLRecoverableException0);
      sQLTransientConnectionException0.getLocalizedMessage();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      sQLDataException0.setNextException(sQLTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("': ", "keyType", "^3*XS=S s0Z-Eq*o", 580);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("XY|8}", "XY|8}", (String) null, 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLDataException1.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0, "vals");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vals
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.hasEnclosingMethod(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Double> class1 = Double.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Long> class2 = Long.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      Class<ReferenceType> class4 = ReferenceType.class;
      ClassUtil.findSuperTypes(class4, class1);
      ClassUtil.canBeABeanType(class3);
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.isProxyType(class3);
      int[] intArray0 = new int[9];
      intArray0[0] = 2823;
      intArray0[1] = 2823;
      intArray0[2] = 2823;
      intArray0[3] = 2823;
      intArray0[4] = 2823;
      intArray0[5] = 2823;
      intArray0[6] = (-1843);
      intArray0[7] = 2823;
      intArray0[8] = 2823;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("primitive", ";d<pD0g", 2823, intArray0);
      ClassUtil.throwIfRTE(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.backticked("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ClassUtil.backticked("");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("f");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~oQ\"\"DG");
      PrintWriter printWriter0 = mockPrintWriter0.append('S');
      sQLTransientConnectionException0.printStackTrace(printWriter0);
      ClassUtil.getRootCause(sQLTransientConnectionException0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasClass("``", class0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Integer integer0 = null;
      ClassUtil.nonNull((Integer) null, (Integer) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      String string0 = "serialVersionUID";
      int[] intArray0 = new int[1];
      intArray0[0] = (-1719);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("serialVersionUID", "serialVersionUID", intArray0);
      batchUpdateException0.getLargeUpdateCounts();
      batchUpdateException0.spliterator();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isConcrete(class0);
      ClassUtil.primitiveType(class0);
      Float float0 = new Float((-485.58307F));
      Float float1 = new Float(2233.5234F);
      ClassUtil.nonNull(float0, float1);
      Object object0 = new Object();
      ClassUtil.getClassDescription(object0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class1);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`java.lang.Object`", intArray0);
      ClassUtil.throwIfIOE(batchUpdateException0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isLocalType(class2, true);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `java.lang.Object`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil classUtil0 = new ClassUtil();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLDataException sQLDataException0 = new SQLDataException("NULL", "NULL", (-2702), sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException: NULL
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<SimpleType>[] classArray0 = (Class<SimpleType>[]) Array.newInstance(Class.class, 5);
      Class<SimpleType> class2 = SimpleType.class;
      classArray0[0] = class2;
      Class<SimpleType> class3 = SimpleType.class;
      classArray0[1] = class3;
      Class<SimpleType> class4 = SimpleType.class;
      classArray0[2] = class4;
      Class<SimpleType> class5 = SimpleType.class;
      classArray0[3] = class5;
      Class<SimpleType> class6 = SimpleType.class;
      classArray0[4] = class6;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaredFields(class1);
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      ClassUtil.nullOrToString(short1);
      String string0 = "elementType";
      Boolean boolean0 = new Boolean("elementType");
      ClassUtil.nonNull(boolean0, boolean0);
      Class<Double> class2 = Double.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }
}
