/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 06:50:51 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isJacksonStdImpl(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Module> class1 = Module.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactoryConfig0, class1);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.Module` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isLocalType(class1, true);
      Class<InputStream> class2 = InputStream.class;
      ClassUtil.primitiveType(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isLocalType(class3, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonFactory jsonFactory1 = new JsonFactory();
      BufferRecycler bufferRecycler1 = jsonFactory1._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 971, objectMapper1, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(0, (-1652333975));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[]", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern", 1);
      MockIOException mockIOException0 = new MockIOException("#a~O", sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): #a~O
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("java.lang.Byte", "P", sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLDataException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      ClassUtil.hasEnclosingMethod(class0);
      MockError mockError0 = new MockError();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("", "net.sf.cglib.proxy.java.sql.ClientInfoStatus");
      File file0 = MockFile.createTempFile("net.sf.cglib.proxy.java.sql.ClientInfoStatus", "", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockThrowable mockThrowable0 = new MockThrowable();
      mockError0.addSuppressed(mockThrowable0);
      mockFile0.getCanonicalFile();
      Locale locale0 = Locale.JAPAN;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "", (Object[]) methodArray0);
      mockError0.printStackTrace(printStream0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "Cannot figure out type for EnumSet (odd JDK platform?)");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      jsonMappingException_Reference0.toString();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.sql.SQLTransientConnectionException) (through reference chain: UNKNOWN[\"Cannot figure out type for EnumSet (odd JDK platform?)\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Ts", "Ts");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Ts", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.deser.SettableBeanProperty", 796, sQLWarning0);
      sQLWarning0.setNextException(sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Ts", sQLWarning0);
      sQLNonTransientConnectionException0.getSuppressed();
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
      Class<Character> class0 = Character.class;
      ClassUtil.hasEnclosingMethod(class0);
      Byte byte0 = new Byte((byte)1);
      ClassUtil.classNameOf(byte0);
      Class<Object> class1 = Object.class;
      ClassUtil.isProxyType(class1);
      System.setCurrentTimeMillis((-1260L));
      ClassUtil.primitiveType(class0);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isProxyType(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "*.eyry*");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // *.eyry*
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      ClassUtil.isConcrete((Member) constructor0);
      Class<SimpleType> class2 = SimpleType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0]);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler((Object) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("y =M25%n");
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withContentValueHandler(mockRuntimeException0);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType2, (Class<?>) class2, false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)4;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)30;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectReader0, (OutputStream) null, byteArray0, 1505, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet.range(accessPattern0, accessPattern0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isConcrete(class0);
      Class<?> class1 = ClassUtil.classOf(accessPattern0);
      ClassUtil.getDeclaredFields(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isLocalType(class2, true);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern1);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.getPackageName(class0);
      ClassUtil.findEnumType((Enum<?>) accessPattern1);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isBogusClass(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("u'Rw>jn!pYXMW", hashMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("u'Rw>jn!pYXMW", sQLClientInfoException0);
      MockError mockError0 = new MockError(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      List<Class<?>> list0 = new Stack<Class<AccessPattern>>();
      ClassUtil.isLocalType(class0, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class1);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Double double0 = new Double(1963.8013259556078);
      enumMap0.put(accessPattern0, double0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.isLocalType(class1, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class2);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      BufferRecycler bufferRecycler0 = null;
      try { 
        Short.valueOf("_Rtb~", 14);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_Rtb~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<AccessibleObject>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedReturnType();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isProxyType(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "M,;A.", (Throwable) sQLWarning0);
      MockError mockError0 = new MockError("M,;A.", jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      Class<Double> class0 = Double.class;
      ClassUtil.getClassMethods(class0);
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 10);
      jsonFactory0.setRootValueSeparator("Pc/");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) bufferedOutputStream0, jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, true);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON", "JSON", 10);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern1, accessPattern2);
      enumSet0.clone();
      ClassUtil.findEnumType(enumSet0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isBogusClass(class0);
      Class<InputStream> class1 = InputStream.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Float> class0 = Float.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.nonNullString("com.fasterxml.jacks");
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1);
      EnumSet<AccessPattern> enumSet1 = EnumSet.copyOf(enumSet0);
      EnumSet<AccessPattern> enumSet2 = EnumSet.copyOf(enumSet1);
      enumSet2.clone();
      ClassUtil.findEnumType(enumSet2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<InputStream> class2 = InputStream.class;
      ClassUtil.isNonStaticInnerClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class org.evosuite.shaded.org.mockito.codegen.Enum$MockitoMock$640723402 is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockError mockError0 = new MockError("b[6_>x&%eo?n6@p");
      PipedInputStream pipedInputStream0 = new PipedInputStream(57343);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      pipedOutputStream0.close();
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "b[6_>x&%eo?n6@p");
      mockError0.printStackTrace(printStream0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "b[6_>x&%eo?n6@p");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      ClassUtil.primitiveType(class0);
      ClassUtil.nonNullString("k6.y>Rk@G");
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Character character0 = Character.valueOf('_');
      ClassUtil.nonNull((Character) null, character0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Double double0 = new Double(2.147483647E9);
      Double double1 = new Double(2.147483647E9);
      ClassUtil.nonNull(double0, double1);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "local/anonymous";
      String string1 = null;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("local/anonymous", (Class<?>) null, (String) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("local/anonymous");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type [null] from String \"local/anonymous\": null (through reference chain: java.lang.String[?])
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.primitiveType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(", problem: ");
      mockRuntimeException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, ", problem: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassUtil.emptyIterator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader1);
      Class<LinkedList> class0 = LinkedList.class;
      Class<ArrayType> class1 = ArrayType.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getEnclosingClass(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class1, class1, list0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getConstructors(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassUtil.backticked("com.fasterxml.jackson.databind.util.ClassUtil");
      Class<String> class0 = String.class;
      ClassUtil.getDeclaringClass(class0);
      boolean boolean0 = true;
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("r_Zcn(");
      sQLNonTransientConnectionException0.printStackTrace();
      sQLNonTransientConnectionException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: r_Zcn(
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(|Ti\"piK_o{|9eoSw");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.throwIfError((Throwable) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<RuntimeException> class1 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class1, true);
      RuntimeException runtimeException1 = (RuntimeException)ClassUtil.throwIfError(runtimeException0);
      ClassUtil.isProxyType(class1);
      ClassUtil.isNonStaticInnerClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) runtimeException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      MockError mockError0 = new MockError("A4=t_9$V=axX%6]; C");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<String>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<TextNode> class0 = TextNode.class;
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassUtil.nonNull((TextNode) null, (TextNode) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((Writer) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "JSON", "java.lang.RuntimeEx");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'JSON' as a subtype of null: java.lang.RuntimeEx
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Byte> class1 = Byte.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.getClassDescription(class1);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "`java.lang.Object`");
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getDeclaredFields(class1);
      Class<Float> class2 = Float.class;
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.copy();
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException(".<");
      Throwable throwable0 = ClassUtil.getRootCause(sQLTransientException0);
      ClassUtil.throwIfError(throwable0);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericInterfaces(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(class0);
      ArrayType arrayType2 = arrayType1.withStaticTyping();
      Double double0 = new Double(0.0);
      ArrayType arrayType3 = arrayType2.withTypeHandler(double0);
      boolean boolean0 = false;
      ClassUtil.findSuperTypes((JavaType) arrayType3, (Class<?>) class0, false);
      Class<NoClass> class1 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isJacksonStdImpl((Object) classUtil0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "net.sf.cglib.proxy.java.lang.String");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_OBJECT: net.sf.cglib.proxy.java.lang.String
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<AccessPattern> class0 = AccessPattern.class;
      objectMapper0.readerFor(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.PlaceholderForType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Float float0 = Float.valueOf(0.0F);
      ClassUtil.isJacksonStdImpl((Object) float0);
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperClasses(class1, class0, false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Float> class0 = Float.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isProxyType(class0);
      Class<Object> class1 = Object.class;
      boolean boolean0 = false;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.getDeclaredMethods(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getDeclaredFields(class2);
      Class<SettableBeanProperty> class3 = SettableBeanProperty.class;
      ClassUtil.getDeclaringClass(class3);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
      objectMapper0.readerFor(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Error> class1 = Error.class;
      ClassUtil.isLocalType(class1, true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ClassUtil.nonNullString("java.lang.Integer");
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ClassUtil.nonNullString("java.lang.Integer");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.lang.Integer", (Throwable) null);
      Throwable throwable0 = ClassUtil.getRootCause(mockRuntimeException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.lang.Integer", throwable0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLIntegrityConstraintViolationException0);
      ClassUtil.throwRootCauseIfIOE(mockThrowable0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      System.setCurrentTimeMillis(0L);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "Illegal character point (0x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassUtil.nonNull((TextNode) null, (TextNode) null);
      Class<Short> class0 = Short.class;
      ClassUtil.isBogusClass(class0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerFor(class0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("e/", "^ebM\") *y^g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getDeclaredFields(class0);
      String string0 = "*28:2Mp";
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      MockIOException mockIOException0 = new MockIOException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType", "*28:2Mp", mockIOException0);
      SQLWarning sQLWarning0 = new SQLWarning("*28:2Mp", sQLTimeoutException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*28:2Mp");
      mockIOException0.getMessage();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "*28:2Mp", (Throwable) sQLWarning0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("*28:2Mp", jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Character character0 = new Character('U');
      ClassUtil.isJacksonStdImpl((Object) character0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findConstructor(class0, true);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.createInstance(class1, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findEnumType(class2);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, true);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory4 = jsonFactory3.setOutputDecorator(outputDecorator0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((OutputStream) filterOutputStream0, jsonEncoding0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSON", "+z$|.}VhLGRw~");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockFileOutputStream0, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isConcrete(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.primitiveType(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      MockIOException mockIOException0 = new MockIOException("JSON");
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k#O?L )WOyurpT");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("k#O?L )WOyurpT");
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      classUtil_Ctor0.getParameterAnnotations();
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) printStream0, jsonEncoding0);
      DataTruncation dataTruncation0 = new DataTruncation((-131072), true, true, (-131072), (-721483190));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.DataTruncation: Data truncation
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.util.ClassUtil", sQLTimeoutException0);
      Long long0 = new Long(0L);
      Class<Long> class0 = Long.class;
      ClassUtil.hasClass(long0, class0);
      ClassUtil.quotedOr(mockError0, "EH_");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.nameOf(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findEnumType(class1);
      Class<String> class2 = String.class;
      ClassUtil.findRawSuperTypes(class0, class2, false);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getConstructors(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      TypeFactory.defaultInstance();
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      Class<Character> class0 = Character.class;
      Class<NoClass> class1 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.findSuperTypes(class1, class0, list0);
      ClassUtil.nonNullString("p");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.classNameOf((Object) null);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getGenericSuperclass(class2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class3 = String.class;
      ClassUtil.isProxyType(class3);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[null]", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 128);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) bufferedOutputStream1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ClassUtil.backticked("*");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getPackageName(class0);
      boolean boolean0 = new Boolean((String) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Void> class1 = Void.TYPE;
      ClassUtil.isBogusClass(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ClassUtil.backticked("META-INF/maven/");
      ClassUtil.backticked("META-INF/maven/");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<TextNode> class0 = TextNode.class;
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperTypes(class0, class1);
      Float float0 = new Float((-1.0F));
      ClassUtil.getClassDescription(float0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2335, (-1623));
      typeFactory0.withCache(lRUMap0);
      ClassUtil.nonNull((TextNode) null, (TextNode) null);
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getConstructors(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      TypeFactory.defaultInstance();
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      ClassUtil.nonNullString("2TPj2e'(");
      ClassUtil.backticked("2TPj2e'(");
      ClassUtil.nameOf((Class<?>) null);
      Double double0 = new Double((-1180.0320146864));
      ClassUtil.nonNull(double0, (Double) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      DataTruncation dataTruncation0 = new DataTruncation(1631, true, false, (-1), 7);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, dataTruncation0);
      DataTruncation dataTruncation1 = new DataTruncation(1, false, false, (-1654975209), 1533, dataTruncation0);
      dataTruncation1.addSuppressed(mockRuntimeException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class0, (String) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.JsonMappingException` from String [N/A]: null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DataTruncation dataTruncation0 = new DataTruncation((-1100), true, true, (-1100), 100);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Hr'^j1}a=l(8a;i", dataTruncation0);
      dataTruncation0.addSuppressed(mockRuntimeException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      File file0 = MockFile.createTempFile("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", "V-Yh))ni(_fVwc`");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator(file0, jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=g{Y[UIUO13sNR");
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.getClassMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.isProxyType(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<Module> class1 = Module.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.findSuperTypes((JavaType) null, class1, false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLDataException sQLDataException0 = new SQLDataException(sQLWarning0);
      MockError mockError0 = new MockError((String) null, sQLDataException0);
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil.quotedOr((Object) null, (String) null);
      ClassUtil.isLocalType(class1, false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.classNameOf((Object) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[null]");
      StackTraceElement[] stackTraceElementArray0 = sQLIntegrityConstraintViolationException0.getStackTrace();
      DataTruncation dataTruncation0 = new DataTruncation(2729, true, false, (-819), 2129);
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: [null]
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.toGenericString();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.nullOrToString((Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "java.lang.Boolean");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.Boolean
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      DataTruncation dataTruncation0 = new DataTruncation(528, true, true, 84, 2129);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("HLxG^\u000Bk/!cA1ugc", dataTruncation0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) mockRuntimeException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findConstructor(class0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("p7+re~~", (Throwable) null);
      sQLTransientConnectionException0.spliterator();
      sQLTransientConnectionException0.fillInStackTrace();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.nameOf(class2);
      ClassUtil.getClassMethods(class0);
      ClassUtil.findEnumType(class1);
      Class<Error> class3 = Error.class;
      ClassUtil.hasEnclosingMethod(class3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.backticked("size");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<Short> class0 = Short.class;
      ClassUtil.nameOf(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isCollectionMapOrArray(class0);
      TypeFactory.defaultInstance();
      Class<IOException> class1 = IOException.class;
      ClassUtil.nameOf(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.findEnumType(class0);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.hasEnclosingMethod(class3);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.isLocalType(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.hasEnclosingMethod(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.findEnumType(class0);
      Class<Float> class1 = Float.TYPE;
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("net.sf.cglib.proxy.java.lang.Object", "net.sf.cglib.proxy.java.lang.Object", 840);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("net.sf.cglib.proxy.java.lang.Object", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLFeatureNotSupportedException1);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0, "net.sf.cglib.proxy.java.lang.Object");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Annotation> class1 = Annotation.class;
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      constructor0.isAnnotationPresent(class1);
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      SQLDataException sQLDataException0 = new SQLDataException("`E(z0HJ~\"TP", "`E(z0HJ~\"TP");
      sQLDataException0.printStackTrace();
      MockError mockError0 = new MockError(sQLDataException0);
      ClassUtil.classNameOf("`E(z0HJ~\"TP");
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getConstructors(class3);
      ClassUtil.throwIfRTE(mockError0);
      classUtil_Ctor0.getDeclaringClass();
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.isBogusClass(class4);
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.getConstructors(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.classNameOf("Non-generic Map class %s did not resolve to something with key type %s but %s ");
      ClassUtil.getClassMethods(class1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`java.lang.String`");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      sQLNonTransientException0.initCause(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLNonTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.isLocalType(class0, true);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<Error> class3 = Error.class;
      ClassUtil.getDeclaringClass(class3);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<CollectionType> class1 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.getClassDescription(list0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.findSuperClasses((Class<?>) null, class1, true);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.classNameOf(class0);
      ClassUtil.isObjectOrPrimitive(class1);
      Short short0 = new Short((short) (-2078));
      Class<?> class2 = ClassUtil.classOf(short0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassUtil.backticked("!Z1Z[c");
      ClassUtil.getClassMethods(class2);
      ClassUtil.getDeclaredFields(class1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("%^njYI'~_#~QU0c", "`!Z1Z[c`", (-1674));
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException("ka", "org.hibernate.proxy.java.lang.Object", (-1674), sQLTransientConnectionException0);
      sQLTransientConnectionException1.getStackTrace();
      sQLTransientConnectionException1.fillInStackTrace();
      ClassUtil.throwIfIOE(sQLTransientConnectionException1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // %^njYI'~_#~QU0c
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("X2JY 0R", (String) null, 840);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0, "$UOK NWU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // $UOK NWU
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class3);
      Class<Long> class4 = Long.class;
      ClassUtil.findConstructor(class4, false);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isJacksonStdImpl((Object) classUtil0);
      Class<Integer> class0 = Integer.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.findConstructor(class0, false);
      ClassUtil.isLocalType(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      ClassUtil.backticked("entrySet");
      ClassUtil.nonNullString("entrySet");
      ClassUtil.backticked((String) null);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.getOuterClass(class2);
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getDeclaredAnnotations();
      constructor0.getDeclaredAnnotations();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      constructor0.getDeclaredAnnotations();
      constructor0.setAccessible(true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("2ZU% ]kuBZu,iA{Q");
      SQLException sQLException0 = new SQLException("i:&Z;4;H0?P>}\"h3PqJ", "2ZU% ]kuBZu,iA{Q", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      MockError mockError0 = new MockError("2ZU% ]kuBZu,iA{Q", sQLDataException0);
      ClassUtil.hasClass((Object) null, class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class2, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException("local/Bnonymoos", "l[E[_", 8, (Throwable) null);
      MockException mockException0 = new MockException((Throwable) null);
      MockException mockException1 = new MockException((String) null, (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) runtimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = true;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<CollectionType> class1 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.getClassDescription(list0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[7];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "p<7trev1");
      SQLException sQLException0 = new SQLException("`java.util.ArrayList`", jsonMappingException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(deserializationContext0, "Cannot coerce String \"%s\" %s (enable `%s.%s` to allow)", (Throwable) sQLTransientException0);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce String \"%s\" %s (enable `%s.%s` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClassUtil.backticked("&+|");
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<Error> class1 = Error.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct(class1, typeBindings0, javaType0, javaTypeArray0, javaType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(javaType0);
      ReferenceType referenceType2 = referenceType1.withContentValueHandler("&+|");
      ReferenceType referenceType3 = (ReferenceType)referenceType2.withValueHandler((Object) null);
      ReferenceType referenceType4 = (ReferenceType)referenceType3.withStaticTyping();
      ClassUtil.nullOrToString(referenceType4);
      Class<Object> class2 = Object.class;
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.getDeclaringClass(class2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.createInstance(class1, true);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.getGenericSuperclass(class3);
      ClassUtil.hasEnclosingMethod(class2);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.findClassAnnotations(class4);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.emptyIterator();
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isBogusClass(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Long> class1 = Long.class;
      Class<MapType> class2 = MapType.class;
      ClassUtil.nameOf(class2);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.getClassMethods(class3);
      ClassUtil.findEnumType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("size", "(@JsonValue serializer for method ", (-919));
      sQLRecoverableException0.printStackTrace();
      sQLRecoverableException0.getStackTrace();
      ClassUtil.getConstructors(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      MockThrowable mockThrowable0 = new MockThrowable();
      MockException mockException0 = new MockException("F:|#", mockThrowable0);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.getGenericSuperclass(class3);
      ClassUtil.hasEnclosingMethod(class0);
      Class<Object> class4 = Object.class;
      ClassUtil.findClassAnnotations(class4);
      Class<NoClass> class5 = NoClass.class;
      ClassUtil.isConcrete(class5);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("size", "(@JsonValue serializer for method ", (-919));
      sQLRecoverableException0.printStackTrace();
      sQLRecoverableException0.getStackTrace();
      ClassUtil.getConstructors(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.classNameOf("Non-generic Map class %s did not resolve to something with key type %s but %s ");
      Class<IOException> class3 = IOException.class;
      ClassUtil.getPackageName(class3);
      ClassUtil.isConcrete((Member) constructor0);
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      ClassUtil.backticked("\"%s\"");
      Class<IOException> class0 = IOException.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.nameOf(class2);
      ClassUtil.getClassMethods(class2);
      ClassUtil.findEnumType(class0);
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.nameOf(class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ClassUtil.nonNullString("j7`|9VBVhI)ghk\"M<");
      ClassUtil.backticked((String) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("PS9U8DY-$\"", "IcsJSE8$7H", (-2939));
      Class<Boolean> class0 = Boolean.class;
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.findClassAnnotations(class0);
      Class<Object> class3 = Object.class;
      ClassUtil.getEnclosingClass(class3);
      Class<CreatorProperty> class4 = CreatorProperty.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class4, "j7`|9VBVhI)ghk\"M<", "j7`|9VBVhI)ghk\"M<");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.String (of class com.fasterxml.jackson.databind.deser.CreatorProperty) must override method 'j7`|9VBVhI)ghk\"M<'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.hasClass((Object) null, class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class1, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException("keyUniverse", "local/anonymous", 1104, runtimeException0);
      MockException mockException0 = new MockException(runtimeException0);
      MockException mockException1 = new MockException((String) null, runtimeException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("local/anonymous", (String) null, runtimeException0);
      sQLRecoverableException0.getStackTrace();
      ClassUtil.getRootCause(sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyUniverse
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Hp|6fh'r");
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.deser.impl.CreatorCandidate", "l[E[_", sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLException0);
      MockError mockError0 = new MockError("M", sQLDataException0);
      ClassUtil.hasClass(mockError0, class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class1, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException("local/anonymous", "Hp|6fh'r", 8, sQLException0);
      MockException mockException0 = new MockException(runtimeException0);
      MockException mockException1 = new MockException("keyType", sQLException0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<IOException> class3 = IOException.class;
      Class<Double> class4 = Double.class;
      ClassUtil.hasEnclosingMethod(class4);
      ClassUtil.findClassAnnotations(class3);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<Character> class0 = Character.class;
      sQLDataException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      Class<NoClass> class1 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.nonNullString("y\")J+^O0%`C-z");
      Class<IOException> class1 = IOException.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getGenericSuperclass(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      Class<IOException> class3 = IOException.class;
      ClassUtil.getOuterClass(class3);
      Class<Long> class4 = Long.class;
      ClassUtil.findConstructor(class4, false);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ClassUtil.nonNullString("j7`|9VBVhI)ghk\"M<");
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, false);
      SQLTransientException sQLTransientException0 = new SQLTransientException("keyUniverse", "entrySet", 0, (Throwable) null);
      MockException mockException0 = new MockException((Throwable) null);
      MockException mockException1 = new MockException("keyType", mockException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(runtimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findEnumType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      SQLTransientException sQLTransientException0 = new SQLTransientException("keyUniverse", "keyUniverse", 1104, (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isBogusClass((Class<?>) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ClassUtil.nonNullString((String) null);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      ClassUtil.backticked("entrySet");
      ClassUtil.throwIfIOE((Throwable) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, (Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("`entrySet`", "entrySet", (-3), (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`entrySet`");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0, "=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // =
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.nonNullString("y\")J+^O0%`C-z");
      Class<IOException> class1 = IOException.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      ClassUtil.backticked("AS_EMPTY");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("y\")J+^O0%`C-z");
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
      ClassUtil.getGenericInterfaces(class0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      sQLTimeoutException0.getStackTrace();
      Class<MapType> class3 = MapType.class;
      ClassUtil.getDeclaredFields(class3);
      ClassUtil.isConcrete(class2);
      ClassUtil.backticked("");
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.isLocalType(class4, false);
      Class<PlaceholderForType> class5 = PlaceholderForType.class;
      ClassUtil.canBeABeanType(class5);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException0, "y\")J+^O0%`C-z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // y\")J+^O0%`C-z
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.createInstance(class0, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException("keyUniverse", "keyUniverse", 1104, (Throwable) null);
      MockException mockException0 = new MockException((Throwable) null);
      MockException mockException1 = new MockException("keyUniverse", mockException0);
      ClassUtil.throwIfRTE(mockException1);
      Class<Object> class1 = Object.class;
      ClassUtil.getGenericSuperclass(class1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.quotedOr("~2Udn}`=eU-N", "~2Udn}`=eU-N");
      Class<Double> class1 = Double.TYPE;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_dmtj(Q R#uXw^~S nR");
      ClassUtil.backticked("_dmtj(Q R#uXw^~S nR");
      ClassUtil.backticked("ZERO_LENGTH_ENUM_ARRAY");
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.nameOf(class0);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.findEnumType(class0);
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isCollectionMapOrArray(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class2);
      TypeReference<JsonMappingException> typeReference0 = (TypeReference<JsonMappingException>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      collectionType0.containedTypeOrUnknown(0);
      // Undeclared exception!
      try { 
        typeFactory0.constructType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ow-H|;!");
      SQLDataException sQLDataException0 = new SQLDataException(sQLTimeoutException0);
      MockError mockError0 = new MockError("ow-H|;!", sQLDataException0);
      ClassUtil.hasClass(mockError0, class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isConcrete(class0);
      Float float0 = new Float(0.0);
      ClassUtil.classOf(float0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findConstructor(class0, true);
      Class<CollectionType> class1 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.getClassDescription(list0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class0, class2, true);
      ClassUtil.canBeABeanType(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.isConcrete(class3);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.nonNullString("y\")J+^O0%`C-z");
      Class<IOException> class1 = IOException.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.backticked("y\")J+^O0%`C-z");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLTimeoutException0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      sQLTimeoutException0.getStackTrace();
      ClassUtil.getDeclaredFields(class3);
      Class<Float> class4 = Float.class;
      ClassUtil.isConcrete(class4);
      ClassUtil.backticked("`y\")J+^O0%`C-z`");
      ClassUtil.isLocalType(class1, true);
      ClassUtil.canBeABeanType(class4);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, "y\")J+^O0%`C-z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // y\")J+^O0%`C-z
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring");
      ClassUtil.classNameOf("com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring");
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaredFields(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.findClassAnnotations(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      DeserializationConfig deserializationConfig0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Short> class2 = Short.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class2);
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forCreation((DeserializationConfig) null, collectionLikeType0, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getDeclaredAnnotations();
      constructor0.getDeclaredAnnotations();
      constructor0.setAccessible(true);
      constructor0.getParameterAnnotations();
      constructor0.getAnnotatedParameterTypes();
      constructor0.getAnnotatedReceiverType();
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      IOException iOException0 = constructor0.newInstance(annotationArray0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getExceptionTypes();
      classUtil_Ctor0.getConstructor();
      ClassUtil.findEnumType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<Long> class2 = Long.class;
      Class<Annotation> class3 = Annotation.class;
      constructor0.isAnnotationPresent(class3);
      ClassUtil.isNonStaticInnerClass(class2);
      Class<IOException> class4 = IOException.class;
      classUtil_Ctor0.getParamCount();
      ClassUtil.isObjectOrPrimitive(class4);
      ClassUtil.classNameOf(classUtil_Ctor0);
      Class<Object> class5 = Object.class;
      ClassUtil.getConstructors(class5);
      ClassUtil.throwIfRTE(iOException0);
      classUtil_Ctor0.getDeclaringClass();
      Class<Boolean> class6 = Boolean.class;
      ClassUtil.isBogusClass(class6);
      Class<Double> class7 = Double.class;
      ClassUtil.findSuperClasses(class7, class3, true);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TextNode.valueOf("primitive");
      Class<Object> class0 = Object.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.getOuterClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, false);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.quotedOr("~2Udn}`=eU-N", "~2Udn}`=eU-N");
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isJacksonStdImpl((Object) classUtil0);
      File file0 = MockFile.createTempFile("|~o-c72^\"FARsx", "|~o-c72^\"FARsx");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.deser.BeanDeserializerFactory", (String) null, 0);
      sQLRecoverableException0.getSuppressed();
      sQLRecoverableException0.getStackTrace();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory");
      Class<Error> class0 = Error.class;
      ClassUtil.getConstructors(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.classNameOf(classUtil_Ctor0);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.getConstructors(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.instantiateBean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findSuperTypes(class0, class0);
      Short short0 = new Short((short)0);
      Short short1 = new Short((short)0);
      ClassUtil.nonNull(short0, short1);
      Class<String> class1 = String.class;
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, double0, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Double (of class java.lang.String) must override method ''
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Float> class0 = Float.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isLocalType(class0, true);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class1, class0);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.getConstructors(class1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException1, "gk`-6fOf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // gk`-6fOf
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isJacksonStdImpl((Object) classUtil0);
      Class<Integer> class0 = Integer.class;
      File file0 = MockFile.createTempFile("|~o-c72^\"FARsx", "|~o-c72^\"FARsx");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      mockFileReader0.skip(0L);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.findConstructor(class0, false);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<?> class1 = ClassUtil.classOf(class0);
      ClassUtil.classOf((Object) null);
      ClassUtil.isLocalType(class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.getGenericInterfaces(class1);
      String string0 = "ZERO_LENGTH_ENUM_ARRAY";
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("ZERO_LENGTH_ENUM_ARRAY", "ZERO_LENGTH_ENUM_ARRAY", mockThrowable0);
      PrintStream printStream0 = null;
      // Undeclared exception!
      try { 
        sQLFeatureNotSupportedException0.printStackTrace((PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      String string0 = "";
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      boolean boolean0 = true;
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(collectionLikeType0, propertyName0, objectIdGenerators_StringIdGenerator0, true);
      CollectionLikeType collectionLikeType1 = (CollectionLikeType)objectIdWriter0.idType;
      collectionLikeType0.equals(propertyName0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "", collectionLikeType1);
      propertyName0.internSimpleName();
      virtualAnnotatedMember0.fixAccess(false);
      objectIdWriter0.withAlwaysAsId(false);
      PropertyName.construct("");
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = null;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getPackageName(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(122);
      placeholderForType0.actualType();
      ClassUtil.rawClass(placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      String string0 = "A#";
      PropertyName propertyName0 = new PropertyName("A#");
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, (ObjectIdGenerator<?>) null, false);
      JsonSerializer<String> jsonSerializer0 = (JsonSerializer<String>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter1 = objectIdWriter0.withSerializer(jsonSerializer0);
      SimpleType simpleType0 = (SimpleType)objectIdWriter1.idType;
      ClassUtil.rawClass(simpleType0);
      Class<Double> class0 = Double.class;
      objectIdWriter1.withSerializer((JsonSerializer<?>) null);
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Error> class1 = Error.class;
      ClassUtil.primitiveType(class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findSuperClasses(class0, class0, true);
      TextNode textNode0 = new TextNode("*q}L:");
      textNode0.doubleValue();
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ClassUtil.nonNull("&+|", "&+|");
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<Error> class1 = Error.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct(class1, typeBindings0, javaType0, javaTypeArray0, javaType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(javaType0);
      ReferenceType referenceType2 = referenceType1.withContentValueHandler("&+|");
      ReferenceType referenceType3 = (ReferenceType)referenceType2.withValueHandler((Object) null);
      ReferenceType referenceType4 = (ReferenceType)referenceType3.withStaticTyping();
      ClassUtil.nullOrToString(referenceType4);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      Class<Module> class1 = Module.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.emptyIterator();
      ClassUtil.isProxyType(class0);
      Class<String> class2 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.isConcrete(class0);
      ClassUtil.nullOrToString(class0);
      BeanDeserializerBase beanDeserializerBase0 = null;
      LinkedList<SettableBeanProperty> linkedList0 = null;
      try {
        linkedList0 = new LinkedList<SettableBeanProperty>((Collection<? extends SettableBeanProperty>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.classNameOf((Object) null);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<String> class3 = String.class;
      ClassUtil.isProxyType(class3);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[null]", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 128);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) bufferedOutputStream1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getClassMethods(class0);
      Throwable throwable0 = null;
      ClassUtil.throwIfRTE((Throwable) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getTypeName();
      Object object0 = new Object();
      TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) placeholderForType0);
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(object0);
      // Undeclared exception!
      try { 
        placeholderForType0.withContentType(javaType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isBogusClass((Class<?>) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, throwable0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Default constructor for ", "Zte", (-71), sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "primitive";
      TextNode textNode0 = TextNode.valueOf("primitive");
      ClassUtil.nonNull(textNode0, textNode0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.getOuterClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, true);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.printStackTrace();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLClientInfoException0);
      sQLClientInfoException0.fillInStackTrace();
      sQLNonTransientException0.setNextException(sQLClientInfoException0);
      sQLNonTransientException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.sql.SQLClientInfoException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      SQLTransientException sQLTransientException0 = new SQLTransientException("keyUniverse", "keyUniverse", 1104, (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyUniverse
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findEnumType(class1);
      Class<Byte> class2 = Byte.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Byte is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Short> class0 = Short.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isJacksonStdImpl((Object) classUtil0);
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = true;
      File file0 = MockFile.createTempFile("|~o-c72^\"FARsx", "|~o-c72^\"FARsx");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      mockFileReader0.skip(0L);
      SQLWarning sQLWarning0 = new SQLWarning("|~o-c72^\"FARsx", "NULL", 1536);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileReader0, "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory", sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "NULL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NULL
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.initCause((Throwable) null);
      sQLSyntaxErrorException0.getStackTrace();
      sQLSyntaxErrorException0.getStackTrace();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLSyntaxErrorException0.forEach(consumer0);
      int int0 = 574;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(574);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('H');
      batchUpdateException0.printStackTrace(printWriter0);
      batchUpdateException0.printStackTrace();
      sQLSyntaxErrorException0.setNextException(batchUpdateException0);
      ClassUtil.getRootCause(sQLSyntaxErrorException0);
      MockError mockError0 = new MockError("ZERO_LENGTH_ENUM_ARRAY");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false, "ZERO_LENGTH_ENUM_ARRAY");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ZERO_LENGTH_ENUM_ARRAY
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findConstructor(class0, true);
      Class<CollectionType> class1 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.getClassDescription(list0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Short short0 = new Short((short)0);
      ClassUtil.getClassDescription(short0);
      ClassUtil.classNameOf("`java.lang.Short`");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`java.lang.String`", "", 3173);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`java.lang.Short`", sQLTransactionRollbackException0);
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      Object[] objectArray0 = new Object[9];
      Class<AccessPattern> class0 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class1, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1083));
      placeholderForType0.getContentType();
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.getClassDescription(class0);
      ClassUtil.nonNullString(" is not a primitive type");
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.getEnclosingClass(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class3 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("org.hibernate.proxy.", class3, "idType cannot be null");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(jsonMappingException0);
      ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<NoClass>[] classArray0 = (Class<NoClass>[]) Array.newInstance(Class.class, 6);
      Class<NoClass> class4 = NoClass.class;
      classArray0[0] = class4;
      Class<NoClass> class5 = NoClass.class;
      classArray0[1] = class5;
      Class<NoClass> class6 = NoClass.class;
      classArray0[2] = class6;
      Class<NoClass> class7 = NoClass.class;
      classArray0[3] = class7;
      Class<NoClass> class8 = NoClass.class;
      classArray0[4] = class8;
      Class<NoClass> class9 = NoClass.class;
      classArray0[5] = class9;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      String string0 = " is not a primitive type";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientConnectionException0, " is not a primitive type");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<IOException> class1 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class1, true);
      Class<?> class2 = ClassUtil.classOf(iOException0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, class2, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      String string0 = "elementType";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class0, "elementType");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.type.ReferenceType) must override method 'elementType'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Float> class1 = Float.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getPackageName(class1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("java.lang", (Throwable) null);
      sQLTransientConnectionException0.getSuppressed();
      ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Short> class2 = Short.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("java.lang", class2, "java.lang");
      jsonMappingException0.getMessage();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Short` from String \"java.lang\": java.lang
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findConstructor(class1, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      Class<Character> class2 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ClassUtil.nonNullString("j7`|9VBVhI)ghk\"M<");
      ClassUtil.backticked((String) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.nameOf(class1);
      ClassUtil.getClassMethods(class0);
      Class<Double> class2 = Double.class;
      ClassUtil.findEnumType(class2);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      
      constructor0.getDeclaredAnnotations();
      constructor0.getDeclaredAnnotations();
      assertFalse(constructor0.isAccessible());
      
      constructor0.setAccessible(true);
      constructor0.getParameterAnnotations();
      constructor0.getAnnotatedParameterTypes();
      constructor0.getAnnotatedReceiverType();
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      IOException iOException0 = constructor0.newInstance(annotationArray0);
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      constructor0.getExceptionTypes();
      classUtil_Ctor0.getConstructor();
      ClassUtil.findEnumType(class0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<Long> class3 = Long.class;
      Class<Annotation> class4 = Annotation.class;
      constructor0.isAnnotationPresent(class4);
      ClassUtil.isNonStaticInnerClass(class3);
      Class<IOException> class5 = IOException.class;
      classUtil_Ctor0.getParamCount();
      ClassUtil.isObjectOrPrimitive(class5);
      ClassUtil.classNameOf(classUtil_Ctor0);
      Class<Object> class6 = Object.class;
      ClassUtil.getConstructors(class6);
      ClassUtil.throwIfRTE(iOException0);
      classUtil_Ctor0.getDeclaringClass();
      Class<Boolean> class7 = Boolean.class;
      boolean boolean0 = ClassUtil.isBogusClass(class7);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getEnclosingClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<HashMap> class1 = HashMap.class;
      Class<CollectionType> class2 = CollectionType.class;
      MapType mapType0 = typeFactory1.constructMapType(class1, class2, class0);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class0, (JavaType) mapType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.util.AccessPattern with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.hasClass((Object) null, class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("P_%2Z0v`");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "P_%2Z0v`");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      sQLNonTransientConnectionException0.printStackTrace((PrintWriter) mockPrintWriter0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format("delegate", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0);
      PrintWriter printWriter0 = mockPrintWriter1.append((CharSequence) "P_%2Z0v`");
      sQLNonTransientConnectionException0.printStackTrace(printWriter0);
      ClassUtil.throwIfRTE(sQLNonTransientConnectionException0);
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<NoClass> class0 = NoClass.class;
      typeFactory0.constructParametricType(class0, (JavaType[]) null);
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      typeFactory0.withModifier(typeModifier0);
      Class<SimpleType> class1 = SimpleType.class;
      Class<ReferenceType> class2 = ReferenceType.class;
      Class<Double> class3 = Double.class;
      typeFactory0.constructMapLikeType(class1, class2, class3);
      int int0 = (-1188);
      LRUMap<Object, JavaType> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, JavaType>((-1188), (-1188));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }
}
