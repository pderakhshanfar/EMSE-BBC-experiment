/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 01:51:08 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(simpleDeserializers0, class0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapLikeType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.module.SimpleDeserializers`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassUtil.backticked("Unexpected token (%s), expected %s");
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isLocalType(class0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-1);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0, (-615), (int) (byte) (-1));
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_INT: org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType
         //  at [Source: (byte[])\"s\uFFFD\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<JsonSerializer> class0 = JsonSerializer.class;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper1.reader();
      objectReader0.getTypeFactory();
      Class<LinkedList> class1 = LinkedList.class;
      try { 
        objectMapper0.writeValueAsString(defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.lang.NullPointerException) (through reference chain: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"base64Variant\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PF=84IC");
      ClassUtil.findSuperTypes(class0, class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findEnumType(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.getConstructors(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = new Character('>');
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-974), pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      MockError mockError0 = new MockError("PF=84IC");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON", mockError0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "", (Throwable) sQLNonTransientConnectionException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //  at [Source: (Character); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.getOuterClass(class1);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("elementType");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      String string0 = "ei";
      String string1 = "";
      SQLException sQLException0 = new SQLException("ei", "", (-649), sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isLocalType(class1, true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      ClassUtil.getRootCause(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, collectionType0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3549), objectMapper0, pipedOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.setCodec(objectMapper0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "; Mu-y");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ; Mu-y
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-90));
      ClassUtil.classOf(byte0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class0);
      ClassUtil.classOf((Object) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("KakN+h", "yavX^BC`#~:c W'Csr");
      sQLNonTransientException0.spliterator();
      ClassUtil.getRootCause(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<Module> class1 = Module.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findEnumType(class1);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer((-2));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.SimpleType", integer0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.SimpleType");
      Integer integer1 = new Integer(2047);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer1);
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition(annotationIntrospector1, (AnnotatedMember) null, (PropertyName) null, propertyMetadata1, (JsonInclude.Value) null);
      BeanPropertyDefinition beanPropertyDefinition0 = simpleBeanPropertyDefinition0.withMetadata(propertyMetadata1);
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) beanPropertyDefinition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.SimpleType", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.SimpleType");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.annotation.NoClass` from String \"net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.SimpleType\": net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.SimpleType
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      objectMapper0.readerForUpdating(iOContext1);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "E=bm7,?<^P&0";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E=bm7,?<^P&0");
      ClassUtil.nonNullString((String) null);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.nameOf(class1);
      ClassUtil.isConcrete(class0);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.isCollectionMapOrArray(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = ' ';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      Class<Double> class0 = Double.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "q,hIYQ[EyRQ]0Bd9");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_FALSE: q,hIYQ[EyRQ]0Bd9
         //  at [Source: (char[])\"} \"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
      String string0 = "Xz\\vG*";
      int int0 = 435;
      HashMap<String, ClientInfoStatus> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, ClientInfoStatus>(1, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -1.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      ClassUtil.isLocalType(class0, false);
      Class<ArrayType> class1 = ArrayType.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MapType> class3 = MapType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class3, (JavaType) null);
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class2, javaTypeArray0);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("PCpH");
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings1, (Object) null, (Object) collectionLikeType0);
      ClassUtil.findSuperTypes((JavaType) arrayType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.hasClass(resolvedRecursiveType0, class1);
      TypeBindings.create(class1, (JavaType[]) null);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isLocalType(class0, false);
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(mapLikeType0, javaType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, (TypeBindings) null, (Object) javaType0, (Object) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedInputStream0, (String) null, (Throwable) null);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(jsonMappingException0);
      ArrayType arrayType2 = arrayType1.withContentTypeHandler((Object) null);
      ClassUtil.rawClass(arrayType2);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(iOContext0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-381), objectReader0, byteArrayOutputStream0, byteArray0, 4277, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(3, 0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.float", "org.hibernate.proxy.float", (-699427978));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: org.hibernate.proxy.float
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.findSuperClasses(class0, class0, true);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<Annotation> class1 = Annotation.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructRawCollectionLikeType(class1);
      ClassUtil.rawClass(collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.getEnclosingClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("`com.fasterxml.jackson.databind.util.AccessPattern`");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper1, mockPrintStream2);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(2, 3);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      CollectionType collectionType1 = collectionType0.withValueHandler(iOContext0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(collectionType1, "[null]");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [collection type; class java.util.LinkedList, contains [simple type, class java.lang.Object]]: [null]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, "");
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 8);
      Class<Float> class0 = Float.class;
      classArray0[0] = class0;
      Class<Float> class1 = Float.class;
      classArray0[1] = class1;
      Class<Float> class2 = Float.class;
      classArray0[2] = class2;
      Class<Float> class3 = Float.class;
      classArray0[3] = class3;
      Class<Float> class4 = Float.class;
      classArray0[4] = class4;
      Class<Float> class5 = Float.class;
      classArray0[5] = class5;
      Class<Float> class6 = Float.class;
      classArray0[6] = class6;
      Class<Float> class7 = Float.class;
      classArray0[7] = class7;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findSingleArgConstructor(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<Long> class1 = Long.TYPE;
      ClassUtil.findSuperTypes(class0, class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature1, true);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) null);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("net.sf.cglib.proxy.java.lang.Short", hashMap0, sQLDataException0);
      sQLDataException0.initCause(sQLClientInfoException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, SimpleType> enumMap0 = new EnumMap<AccessPattern, SimpleType>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionType> class1 = CollectionType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectReader objectReader2 = objectReader1.without(deserializationFeature0);
      objectReader2.getTypeFactory();
      JavaType[] javaTypeArray0 = new JavaType[8];
      Class<MapLikeType> class2 = MapLikeType.class;
      // Undeclared exception!
      try { 
        TypeBindings.create(class2, javaTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.type.MapLikeType with 8 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.isLocalType(class0, false);
      Class<String> class1 = String.class;
      ClassUtil.hasEnclosingMethod(class1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("net.sf.cglib.proxy.java.lang.Double", (String) null, (-1594));
      MockIOException mockIOException0 = new MockIOException("{Zhw", sQLSyntaxErrorException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isConcrete(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("{hClB_H7H X0)~O");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("{hClB_H7H X0)~O");
      mockRuntimeException0.addSuppressed(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "{hClB_H7H X0)~O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Long> class0 = Long.TYPE;
      defaultDeserializationContext_Impl0.weirdStringException("t", class0, "t");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("t", "t");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // t
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getOuterClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isJacksonStdImpl(class1);
      SQLDataException sQLDataException0 = new SQLDataException("INT", "D:a;o^}c");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "INT");
      SQLDataException sQLDataException1 = new SQLDataException("ZERO_LENGTH_ENUM_ARRAY", sQLDataException0);
      ClassUtil.getRootCause(sQLDataException1);
      Class<Float> class2 = Float.TYPE;
      ClassUtil.wrapperType(class2);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<ObjectNode> class1 = ObjectNode.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) null, jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, filteringGeneratorDelegate0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.ALLOW_COERCION_OF_SCALARS;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.AUTO_DETECT_SETTERS;
      mapperFeatureArray0[2] = mapperFeature2;
      ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'X';
      charArray0[2] = 'E';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 62, (Reader) null, objectMapper1, charsToNameCanonicalizer0, charArray0, 1, (-1168), false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.overrideFormatFeatures(62, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No FormatFeatures defined for parser of type com.fasterxml.jackson.core.json.ReaderBasedJsonParser
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isConcrete(class0);
      Class<Annotation> class1 = Annotation.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class0);
      ClassUtil.isLocalType(class0, false);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<LinkedList> class0 = LinkedList.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isProxyType(class1);
      Class<Error> class2 = Error.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "enum");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<NoClass> class0 = NoClass.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.getPackageName(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.getGenericInterfaces(class0);
      System.setCurrentTimeMillis(0L);
      ClassUtil.getDeclaringClass(class1);
      Class<MapType> class3 = MapType.class;
      ClassUtil.getOuterClass(class3);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.backticked((String) null);
      ClassUtil.getGenericInterfaces(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      MockError mockError0 = new MockError("#S#v", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "G~/2 VG!Fa1df-");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      EnumMap<AccessPattern, SimpleType> enumMap0 = new EnumMap<AccessPattern, SimpleType>(class0);
      HashMap<AccessPattern, ReferenceType> hashMap0 = new HashMap<AccessPattern, ReferenceType>();
      enumMap0.putAll(hashMap0);
      EnumMap<AccessPattern, SimpleType> enumMap1 = enumMap0.clone();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<Boolean> class2 = Boolean.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class1, (JavaType) simpleType0, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(mapType0);
      enumMap1.put(accessPattern0, (SimpleType) referenceType1);
      ClassUtil.findEnumType(enumMap1);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      Class<Void> class4 = Void.class;
      ClassUtil.findSuperTypes(class3, class4);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<LinkedList> class0 = LinkedList.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findEnumType(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<Character> class3 = Character.class;
      ClassUtil.getDeclaredMethods(class3);
      SQLTransientException sQLTransientException0 = new SQLTransientException(";\"G h>c|# <\"ZkC", "java.lang.Double", 33, (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("unknown", sQLTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("", "", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      EnumMap<AccessPattern, SimpleType> enumMap0 = new EnumMap<AccessPattern, SimpleType>(class0);
      HashMap<AccessPattern, ReferenceType> hashMap0 = new HashMap<AccessPattern, ReferenceType>();
      enumMap0.putAll(hashMap0);
      EnumMap<AccessPattern, SimpleType> enumMap1 = enumMap0.clone();
      ClassUtil.findEnumType(enumMap1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isLocalType(class0, true);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassUtil.verifyMustOverride(class0, simpleType0, (String) null);
      ClassUtil.isJacksonStdImpl((Object) class0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getEnclosingClass(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.nameOf(class2);
      ClassUtil.getClassDescription((Object) null);
      Class<Integer> class3 = Integer.class;
      ClassUtil.nameOf(class3);
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.findClassAnnotations(class0);
      Class<NoClass> class1 = NoClass.class;
      Class<Short> class2 = Short.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class1, class1, true);
      Class<NoClass> class2 = NoClass.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) arrayType0;
      Class<RuntimeException> class3 = RuntimeException.class;
      resolvedRecursiveType0.findSuperType(class3);
      javaTypeArray0[2] = (JavaType) arrayType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) arrayType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, typeBindings0, (JavaType) arrayType0, javaTypeArray0, (JavaType) arrayType0);
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(referenceType0, resolvedRecursiveType0);
      ReferenceType referenceType2 = referenceType1.withValueHandler((Object) null);
      JavaType javaType0 = referenceType2.withContentType(resolvedRecursiveType0);
      ClassUtil.findSuperTypes(javaType0, class1, true);
      ClassUtil.nonNullString("Sub-class %s (of class %s) must override method '%s'");
      ClassUtil.getClassMethods(class2);
      ClassUtil.isConcrete(class1);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.isConcrete(class4);
      ClassUtil.getDeclaringClass(class4);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Short> class5 = Short.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("oVZCQ*nc<0ILAAvT", class5, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize value of type `java.lang.Short` from String \"oVZCQ*nc<0ILAAvT\": net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.findRawSuperTypes(class0, class0, false);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isJacksonStdImpl((Object) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, (Class<?>) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type [null] from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.BeanDeserializerFactory`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getEnclosingClass(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.getOuterClass(class2);
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Xr+tl;+", "keyUniverse", sQLTimeoutException0);
      ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      String string0 = "'gs=Q(%Mz@Ul'4&z";
      ClassUtil.quotedOr(class0, "'gs=Q(%Mz@Ul'4&z");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<NoClass> class1 = NoClass.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException("\"class com.fasterxml.jackson.databind.type.CollectionType\"", class1);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.annotation.NoClass` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.String`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TypeFactory.defaultInstance();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      System.setCurrentTimeMillis((-1305L));
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNotNull(constructor0);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class2);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNull(annotation0);
      
      Class<Annotation> class3 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class3);
      assertFalse(boolean0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertSame(class3, class2);
      
      Annotation annotation1 = constructor0.getDeclaredAnnotation(class3);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertSame(class3, class2);
      assertNull(annotation1);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotatedTypeArray0.length);
      assertNotNull(annotatedTypeArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotationArray1.length);
      assertNotNull(annotationArray1);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotationArray2.length);
      assertSame(annotationArray2, annotationArray0);
      assertNotNull(annotationArray2);
      
      Annotation[] annotationArray3 = constructor0.getAnnotationsByType(class3);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(annotationArray3.equals((Object)annotationArray1));
      assertEquals(0, annotationArray3.length);
      assertSame(class3, class2);
      assertNotSame(annotationArray3, annotationArray1);
      assertNotNull(annotationArray3);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNotNull(constructor1);
      
      String string1 = ClassUtil.nonNull((String) null, (String) null);
      assertNull(string1);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      
      ClassUtil.getConstructors(class2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Long> class0 = Long.TYPE;
      Class<IOException> class1 = IOException.class;
      ClassUtil.createInstance(class1, true);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotation(class2);
      Class<Annotation> class3 = Annotation.class;
      constructor0.isAnnotationPresent(class3);
      constructor0.getDeclaredAnnotation(class3);
      constructor0.getAnnotatedParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getAnnotationsByType(class3);
      classUtil_Ctor0.getParamCount();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.nonNull((String) null, (String) null);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      ClassUtil.isObjectOrPrimitive(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      char char0 = ']';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("EpY>W3=*<", "S}O\"n!(,~~!", true, ']', (-248));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 11)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern3 = AccessPattern.CONSTANT;
      EnumSet.of(accessPattern0, accessPattern1, accessPattern0, accessPattern2, accessPattern3);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class2, false);
      Class<MapType> class3 = MapType.class;
      ClassUtil.isNonStaticInnerClass(class3);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("EAGER_DESERIALIZER_FETCH", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EAGER_DESERIALIZER_FETCH
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class2, true);
      Class<MapType> class3 = MapType.class;
      ClassUtil.isNonStaticInnerClass(class3);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<MapLikeType> class0 = MapLikeType.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(116);
      placeholderForType0.getContentType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      typeBindings0.findBoundType("C");
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getOuterClass(class1);
      Class<Double> class2 = Double.class;
      Class<ReferenceType> class3 = ReferenceType.class;
      boolean boolean0 = false;
      ClassUtil.findSuperClasses(class2, class3, false);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findClassAnnotations(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "non-static member class");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Q", jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-static member class
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassUtil.quotedOr("S22yA45YvU:Sr931G", "S22yA45YvU:Sr931G");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.backticked("S22yA45YvU:Sr931G");
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameterCount();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("void", "1_OQNCM;zJ", (Throwable) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("void", sQLNonTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientConnectionException0);
      sQLNonTransientException0.printStackTrace();
      MockError mockError0 = new MockError("void", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "org.hibernate.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", (Throwable) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("net.sf.cglib.proxy.", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)24;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectMapper1, mockFileOutputStream0, byteArray0, (byte)24, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: net.sf.cglib.proxy.
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<Long> class1 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, true);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findSuperTypes(class2, class0, list0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      ClassUtil.findSuperTypes(javaType0, class0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      AnnotationIntrospector.nopInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Short> class0 = Short.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.hasClass(class0, class1);
      TypeFactory.defaultInstance();
      ClassUtil.isBogusClass(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1158);
      placeholderForType0.getContentType();
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.hasClass("net.sf.cglib.proxy.java.lang.Error", class0);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.nonNullString("AtZ^RzXoy$!");
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.nonNullString("org.hibernate.proxy.float");
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getPackageName(class2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException((String) null);
      mockIOException0.getCause();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, mockIOException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, mockIOException0);
      mockIOException0.initCause(sQLTransientConnectionException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0, "M8W#4Q7k%68y");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.=asterxml.jackson.databind.util.ClassUtil", mockIOException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      int int0 = constructor0.getParameterCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern1, accessPattern0, accessPattern2);
      assertEquals(3, enumSet0.size());
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern1.equals((Object)accessPattern2));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern1));
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(accessPattern2, accessPattern1);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(accessPattern0));
      
      Stack<Boolean> stack0 = new Stack<Boolean>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      assertFalse(stack0.contains(false));
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean boolean2 = stack0.add(boolean1);
      assertTrue(boolean2);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[false]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(stack0.contains(boolean2));
      assertTrue(stack0.contains(false));
      
      boolean boolean3 = enumSet0.retainAll(stack0);
      assertTrue(boolean3);
      assertEquals(0, enumSet0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[false]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern1.equals((Object)accessPattern2));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern1));
      assertTrue(boolean3 == boolean2);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(accessPattern2, accessPattern1);
      assertFalse(enumSet0.contains(accessPattern0));
      assertFalse(stack0.contains(boolean2));
      assertTrue(stack0.contains(boolean0));
      
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("t-Lq(x9-", "com.fasterxml.jackson.databind.util.ClassUtil", (Throwable) null);
      assertEquals("java.sql.SQLNonTransientConnectionException: t-Lq(x9-", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("t-Lq(x9-", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotNull(iOContext1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1809238660), objectMapper1, (OutputStream) null);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1809238660), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-1809238724), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals((-1809238724), uTF8JsonGenerator1.getFeatureMask());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertNotNull(uTF8JsonGenerator1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 1007;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 56320;
      intArray0[5] = 0;
      intArray0[6] = 57343;
      intArray0[7] = 56319;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Unrecognized inject value id type (%s), expecting String");
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Unrecognized inject value id type (%s), expecting String", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("Unrecognized inject value id type (%s), expecting String", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "Yp3,hW[rau-[!]l<?C", 2, intArray0, sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Unrecognized inject value id type (%s), expecting String", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("Unrecognized inject value id type (%s), expecting String", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("Yp3,hW[rau-[!]l<?C", batchUpdateException0.getSQLState());
      assertEquals("", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: ", batchUpdateException0.toString());
      assertEquals(2, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {3, 1007, 0, 1, 56320, 0, 57343, 56319}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("long", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertNotNull(arrayNode0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertNotNull(jsonParser0);
      
      String string0 = "Could not resolve type id '%s' into a subtype of %s";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/Od", "Could not resolve type id '%s' into a subtype of %s");
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: /Od", sQLTransientConnectionException0.toString());
      assertEquals("/Od", sQLTransientConnectionException0.getMessage());
      assertEquals("Could not resolve type id '%s' into a subtype of %s", sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: /Od", sQLTransientConnectionException0.toString());
      assertEquals("/Od", sQLTransientConnectionException0.getMessage());
      assertEquals("Could not resolve type id '%s' into a subtype of %s", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTransientConnectionException: /Od", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: /Od", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: /Od", sQLTransientConnectionException0.toString());
      assertEquals("/Od", sQLTransientConnectionException0.getMessage());
      assertEquals("Could not resolve type id '%s' into a subtype of %s", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTransientConnectionException: /Od", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: /Od", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLFeatureNotSupportedException: java.sql.SQLTransientConnectionException: /Od", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTransientConnectionException: /Od", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "Could not resolve type id '%s' into a subtype of %s", (Throwable) sQLTransactionRollbackException0);
      assertFalse(arrayNode0.isIntegralNumber());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.booleanValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isInt());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: /Od", sQLTransientConnectionException0.toString());
      assertEquals("/Od", sQLTransientConnectionException0.getMessage());
      assertEquals("Could not resolve type id '%s' into a subtype of %s", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTransientConnectionException: /Od", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException: /Od", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.sql.SQLFeatureNotSupportedException: java.sql.SQLTransientConnectionException: /Od", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLTransientConnectionException: /Od", sQLTransactionRollbackException0.getMessage());
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '%s' into a subtype of %s
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("com.fasterxml.jackson.databind.util.ClassUtil");
      assertNotNull(mockIOException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.fasterxml.jackson.databind.util.ClassUtil", mockIOException0);
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.databind.util.ClassUtil", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      StackTraceElement[] stackTraceElementArray0 = mockIOException0.getStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      Class<Short> class0 = Short.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("H-WWV&/%m", class0, "com.fasterxml.jackson.databind.util.ClassUtil");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.util.ClassUtil
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(accessPattern0));
      
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      assertEquals(1, enumSet0.size());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertEquals(16385, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class0.toString());
      assertNotNull(class0);
      assertTrue(enumSet0.contains(accessPattern0));
      
      MockIOException mockIOException0 = new MockIOException("java.lang.reflect.Ac", (Throwable) null);
      assertNotNull(mockIOException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = ClassUtil.nonNull("6-@M`Na-0y", "6-@M`Na-0y");
      assertEquals("6-@M`Na-0y", string0);
      assertNotNull(string0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl1.getGenerator();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNull(jsonGenerator0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "6-@M`Na-0y", (Throwable) null);
      assertEquals("6-@M`Na-0y", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: ", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = ClassUtil.quotedOr("com.fasterxml.jackson.databind.util.ClassUtil", "com.fasterxml.jackson.databind.util.ClassUtil");
      assertEquals("\"com.fasterxml.jackson.databind.util.ClassUtil\"", string0);
      assertNotNull(string0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.hasClass("com.fasterxml.jackson.databind.util.ClassUtil", class0);
      assertFalse(boolean0);
      
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern3 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2, accessPattern0, accessPattern3);
      assertEquals(2, enumSet0.size());
      assertFalse(accessPattern0.equals((Object)accessPattern3));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(accessPattern3.equals((Object)accessPattern0));
      assertNotSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertSame(accessPattern1, accessPattern2);
      assertSame(accessPattern1, accessPattern3);
      assertSame(accessPattern2, accessPattern3);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertSame(accessPattern3, accessPattern2);
      assertNotSame(accessPattern3, accessPattern0);
      assertSame(accessPattern3, accessPattern1);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(accessPattern3));
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertEquals(2, enumSet0.size());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(accessPattern0.equals((Object)accessPattern3));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(accessPattern3.equals((Object)accessPattern0));
      assertNotSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertSame(accessPattern1, accessPattern2);
      assertSame(accessPattern1, accessPattern3);
      assertSame(accessPattern2, accessPattern3);
      assertSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertSame(accessPattern3, accessPattern2);
      assertNotSame(accessPattern3, accessPattern0);
      assertSame(accessPattern3, accessPattern1);
      assertNotNull(class1);
      assertTrue(enumSet0.contains(accessPattern3));
      
      Class<?> class2 = ClassUtil.classOf(accessPattern3);
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertEquals(16385, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(accessPattern3.equals((Object)accessPattern0));
      assertSame(accessPattern3, accessPattern2);
      assertNotSame(accessPattern3, accessPattern0);
      assertSame(accessPattern3, accessPattern1);
      assertNotNull(class2);
      
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      Constructor<ResolvedRecursiveType> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotNull(defaultDeserializationContext0);
      
      Class<Object> class0 = Object.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("O _qh&rS;m7xA", class0, " is not a primitive type");
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from String \"O _qh&rS;m7xA\":  is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.annotatio");
      assertFalse(boolean0);
      
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      Throwable[] throwableArray0 = sQLDataException0.getSuppressed();
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("DAtq?#nbBoQ+:J");
      assertNotNull(mockPrintStream0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringBuilder stringBuilder0 = new StringBuilder(16);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      sQLDataException0.printStackTrace((PrintStream) mockPrintStream0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertSame(mockPrintStream0, printStream0);
      
      sQLDataException0.printStackTrace(printStream0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", stringBuilder0.toString());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.getRootCause(sQLDataException0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException1.getSQLState());
      assertNull(sQLDataException1.getMessage());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertNotNull(sQLDataException1);
      
      SQLDataException sQLDataException2 = (SQLDataException)ClassUtil.throwRootCauseIfIOE(sQLDataException1);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException1.getSQLState());
      assertNull(sQLDataException1.getMessage());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertEquals("java.sql.SQLDataException", sQLDataException2.toString());
      assertEquals(0, sQLDataException2.getErrorCode());
      assertNull(sQLDataException2.getMessage());
      assertNull(sQLDataException2.getSQLState());
      assertSame(sQLDataException0, sQLDataException2);
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertSame(sQLDataException1, sQLDataException2);
      assertSame(sQLDataException2, sQLDataException1);
      assertSame(sQLDataException2, sQLDataException0);
      assertNotNull(sQLDataException2);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<?> class2 = ClassUtil.classOf("java.lang.annotatio");
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.equals((Object)class1));
      assertNotSame(class2, class1);
      assertNotNull(class2);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte)44;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-85), (byte)8, (byte) (-109), (byte)86, (byte) (-72), (byte)62, (byte) (-55), (byte)44}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      String string0 = ClassUtil.getPackageName(class0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.java.lang.Float");
      assertEquals("net.sf.cglib.proxy.java.lang.Float", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: net.sf.cglib.proxy.java.lang.Float", sQLTransientException0.toString());
      assertNotNull(sQLTransientException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransientException0);
      assertEquals("net.sf.cglib.proxy.java.lang.Float", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: net.sf.cglib.proxy.java.lang.Float", sQLTransientException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: net.sf.cglib.proxy.java.lang.Float", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTransientException: net.sf.cglib.proxy.java.lang.Float", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      MockError mockError0 = new MockError("", sQLRecoverableException0);
      assertNotNull(mockError0);
      
      SQLException sQLException0 = new SQLException(mockError0);
      assertEquals("net.sf.cglib.proxy.java.lang.Float", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: net.sf.cglib.proxy.java.lang.Float", sQLTransientException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: net.sf.cglib.proxy.java.lang.Float", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTransientException: net.sf.cglib.proxy.java.lang.Float", sQLRecoverableException0.toString());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: org.evosuite.runtime.mock.java.lang.MockThrowable: ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      int int0 = constructor0.getParameterCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<Integer>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.java.lang.Float", "Sub-class %s (of class %s) must override method '%s'", 18, sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("org.hibernate.proxy.java.lang.Float", sQLNonTransientException0.getMessage());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", sQLNonTransientException0.getSQLState());
      assertEquals(18, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: org.hibernate.proxy.java.lang.Float", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("org.hibernate.proxy.java.lang.Float", sQLNonTransientException0.getMessage());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", sQLNonTransientException0.getSQLState());
      assertEquals(18, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: org.hibernate.proxy.java.lang.Float", sQLNonTransientException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException: org.hibernate.proxy.java.lang.Float", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLNonTransientException: org.hibernate.proxy.java.lang.Float", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("org.hibernate.proxy.java.lang.Float", sQLNonTransientException0.getMessage());
      assertEquals("Sub-class %s (of class %s) must override method '%s'", sQLNonTransientException0.getSQLState());
      assertEquals(18, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: org.hibernate.proxy.java.lang.Float", sQLNonTransientException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException: org.hibernate.proxy.java.lang.Float", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.sql.SQLNonTransientException: org.hibernate.proxy.java.lang.Float", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLNonTransientException: org.hibernate.proxy.java.lang.Float", sQLInvalidAuthorizationSpecException1.toString());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: org.hibernate.proxy.java.lang.Float", sQLInvalidAuthorizationSpecException1.getMessage());
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      Class<Annotation> class2 = Annotation.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, class2, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLException sQLException0 = new SQLException((Throwable) null);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNotNull(constructor0);
      
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[4];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      accessibleObjectArray0[1] = (AccessibleObject) constructor0;
      accessibleObjectArray0[2] = (AccessibleObject) constructor0;
      accessibleObjectArray0[3] = (AccessibleObject) constructor0;
      AccessibleObject.setAccessible(accessibleObjectArray0, true);
      assertEquals(4, accessibleObjectArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern2 = AccessPattern.CONSTANT;
      AccessPattern accessPattern3 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern4 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2, accessPattern3, accessPattern4);
      assertEquals(3, enumSet0.size());
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern3));
      assertFalse(accessPattern1.equals((Object)accessPattern2));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern1.equals((Object)accessPattern4));
      assertFalse(accessPattern2.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern1));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern4));
      assertFalse(accessPattern3.equals((Object)accessPattern2));
      assertFalse(accessPattern3.equals((Object)accessPattern1));
      assertFalse(accessPattern4.equals((Object)accessPattern1));
      assertFalse(accessPattern4.equals((Object)accessPattern2));
      assertSame(accessPattern0, accessPattern4);
      assertSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(accessPattern1, accessPattern3);
      assertNotSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern4);
      assertNotSame(accessPattern2, accessPattern3);
      assertNotSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(accessPattern2, accessPattern4);
      assertNotSame(accessPattern3, accessPattern2);
      assertNotSame(accessPattern3, accessPattern1);
      assertSame(accessPattern3, accessPattern4);
      assertSame(accessPattern3, accessPattern0);
      assertNotSame(accessPattern4, accessPattern1);
      assertNotSame(accessPattern4, accessPattern2);
      assertSame(accessPattern4, accessPattern3);
      assertSame(accessPattern4, accessPattern0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(accessPattern4));
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertEquals(3, enumSet0.size());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertTrue(class1.isEnum());
      assertFalse(class1.isPrimitive());
      assertEquals(16385, class1.getModifiers());
      assertFalse(accessPattern0.equals((Object)accessPattern2));
      assertFalse(accessPattern0.equals((Object)accessPattern1));
      assertFalse(accessPattern1.equals((Object)accessPattern3));
      assertFalse(accessPattern1.equals((Object)accessPattern2));
      assertFalse(accessPattern1.equals((Object)accessPattern0));
      assertFalse(accessPattern1.equals((Object)accessPattern4));
      assertFalse(accessPattern2.equals((Object)accessPattern3));
      assertFalse(accessPattern2.equals((Object)accessPattern1));
      assertFalse(accessPattern2.equals((Object)accessPattern0));
      assertFalse(accessPattern2.equals((Object)accessPattern4));
      assertFalse(accessPattern3.equals((Object)accessPattern2));
      assertFalse(accessPattern3.equals((Object)accessPattern1));
      assertFalse(accessPattern4.equals((Object)accessPattern1));
      assertFalse(accessPattern4.equals((Object)accessPattern2));
      assertSame(accessPattern0, accessPattern4);
      assertSame(accessPattern0, accessPattern3);
      assertNotSame(accessPattern0, accessPattern2);
      assertNotSame(accessPattern0, accessPattern1);
      assertNotSame(accessPattern1, accessPattern3);
      assertNotSame(accessPattern1, accessPattern2);
      assertNotSame(accessPattern1, accessPattern0);
      assertNotSame(accessPattern1, accessPattern4);
      assertNotSame(accessPattern2, accessPattern3);
      assertNotSame(accessPattern2, accessPattern1);
      assertNotSame(accessPattern2, accessPattern0);
      assertNotSame(accessPattern2, accessPattern4);
      assertNotSame(accessPattern3, accessPattern2);
      assertNotSame(accessPattern3, accessPattern1);
      assertSame(accessPattern3, accessPattern4);
      assertSame(accessPattern3, accessPattern0);
      assertNotSame(accessPattern4, accessPattern1);
      assertNotSame(accessPattern4, accessPattern2);
      assertSame(accessPattern4, accessPattern3);
      assertSame(accessPattern4, accessPattern0);
      assertNotNull(class1);
      assertTrue(enumSet0.contains(accessPattern4));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertFalse(boolean0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class<Double> class1 = Double.class;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = ClassUtil.isLocalType(class1, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      Type[] typeArray1 = ClassUtil.getGenericInterfaces(class1);
      assertFalse(typeArray1.equals((Object)typeArray0));
      assertEquals(0, typeArray1.length);
      assertNotNull(typeArray1);
      
      Long long0 = new Long(468L);
      assertEquals(468L, (long)long0);
      assertNotNull(long0);
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, long0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Long (of class java.lang.Error) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("com.fasterxml.jackson.databind.util.ClassUtil");
      assertNotNull(mockIOException0);
      
      Class<Annotation> class0 = Annotation.class;
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNotNull(constructor0);
      
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNull(annotation0);
      
      Class<Annotation> class2 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class2);
      assertFalse(boolean0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertSame(class2, class0);
      
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation1 = constructor0.getDeclaredAnnotation(class3);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertSame(class3, class2);
      assertSame(class3, class0);
      assertNull(annotation1);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotatedTypeArray0.length);
      assertNotNull(annotatedTypeArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotationArray1.length);
      assertSame(annotationArray1, annotationArray0);
      assertNotNull(annotationArray1);
      
      Annotation[] annotationArray2 = constructor0.getAnnotationsByType(class2);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotationArray2.length);
      assertSame(class2, class3);
      assertSame(class2, class0);
      assertNotNull(annotationArray2);
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(int1 == int0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNotNull(constructor1);
      
      String string0 = ClassUtil.nonNull("com.fasterxml.jackson.databind.util.ClassUtil", "_W<G*U<,nV\"64U");
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", string0);
      assertNotNull(string0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`]");
      assertFalse(boolean0);
      
      MockIOException mockIOException0 = new MockIOException("com.fasterxml.jackson.databind.util.ClassUtil");
      assertNotNull(mockIOException0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertNotNull(beanProperty_Bogus0);
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertNotNull(javaType0);
      
      Class<String> class0 = String.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes(javaType0, class1, false);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      TypeBindings typeBindings0 = TypeBindings.create(class0, list0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("");
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertNotNull(typeBindings1);
      
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings1);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isMapLikeType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      assertNotNull(arrayType0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class2);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertNull(annotation0);
      
      Class<Annotation> class3 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class3);
      assertFalse(boolean0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertSame(class3, class2);
      
      Annotation annotation1 = constructor0.getDeclaredAnnotation(class3);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertSame(class3, class2);
      assertNull(annotation1);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotatedTypeArray0.length);
      assertNotNull(annotatedTypeArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotationArray1.length);
      assertSame(annotationArray1, annotationArray0);
      assertNotNull(annotationArray1);
      
      Annotation[] annotationArray2 = constructor0.getAnnotationsByType(class3);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotationArray2.length);
      assertSame(class3, class2);
      assertNotNull(annotationArray2);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertNotNull(constructor1);
      
      String string1 = ClassUtil.nonNull((String) null, "org.hibernate.proxy.java.lang.Integer");
      assertEquals("org.hibernate.proxy.java.lang.Integer", string1);
      assertNotNull(string1);
      
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(5, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("com.fasterxml.jackson.databind.type", string0);
      assertNotNull(string0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("com.fasterxml.jackson.databind.type");
      assertNotNull(mockRuntimeException0);
      
      Throwable throwable0 = ClassUtil.throwIfError(mockRuntimeException0);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      assertNotNull(throwable0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.hibernate.proxy.java.lang.RuntimeException", (Throwable) null);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: org.hibernate.proxy.java.lang.RuntimeException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("org.hibernate.proxy.java.lang.RuntimeException", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<Float> class1 = Float.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class1);
      assertFalse(boolean0);
      
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      String string0 = ClassUtil.quotedOr(class1, "net.sf.cglib.proxy.java.lang.Integer");
      assertEquals("\"class java.lang.Float\"", string0);
      assertNotNull(string0);
      
      boolean boolean1 = ClassUtil.hasClass(constructor0, class1);
      assertFalse(boolean1);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(boolean1 == boolean0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotNull(iOContext1);
      
      String string1 = "local/anonymous";
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("local/anonymous");
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("short", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JcQxtH`6=", "G60");
      assertEquals("JcQxtH`6=", sQLSyntaxErrorException0.getMessage());
      assertEquals("G60", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: JcQxtH`6=", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      Throwable[] throwableArray0 = sQLSyntaxErrorException0.getSuppressed();
      assertEquals("JcQxtH`6=", sQLSyntaxErrorException0.getMessage());
      assertEquals("G60", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: JcQxtH`6=", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException0, "\u2028");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \u2028
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("primitive", string0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertNotNull(string0);
      
      Class<Void> class1 = Void.TYPE;
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertEquals("void", class1.toString());
      assertNotNull(class1);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertEquals("void", class1.toString());
      assertEquals(0, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      boolean boolean0 = ClassUtil.isBogusClass(class1);
      assertTrue(boolean0);
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertEquals("void", class1.toString());
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class2);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotNull(deserializerFactoryConfig1);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<String> class0 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertNotNull(resolvedRecursiveType0);
      
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0, resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isAbstract());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertNotNull(mapLikeType0);
      
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) mapLikeType0;
      javaTypeArray0[1] = (JavaType) mapLikeType0;
      javaTypeArray0[2] = (JavaType) mapLikeType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapLikeType0, javaTypeArray0, javaTypeArray0[1]);
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isAbstract());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertEquals(3, javaTypeArray0.length);
      assertNotNull(referenceType0);
      
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentTypeHandler((Object) null);
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isAbstract());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.isFinal());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isArrayType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isAbstract());
      assertEquals(3, javaTypeArray0.length);
      assertSame(referenceType0, referenceType1);
      assertSame(referenceType1, referenceType0);
      assertNotNull(referenceType1);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.invalidTypeIdException(referenceType1, "local/anonymous", "local/anonymous");
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isAbstract());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.isFinal());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.isAnchorType());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isArrayType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isAbstract());
      assertEquals("local/anonymous", invalidTypeIdException0.getTypeId());
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(3, javaTypeArray0.length);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(referenceType0, referenceType1);
      assertSame(referenceType1, referenceType0);
      assertNotNull(invalidTypeIdException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) invalidTypeIdException0, "java.lang.annotatio");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.annotatio
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = (-1083);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("; expected Class<JsonDeserializer>", "c-f>R", intArray0);
      assertEquals("; expected Class<JsonDeserializer>", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: ; expected Class<JsonDeserializer>", batchUpdateException0.toString());
      assertEquals("c-f>R", batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {3, (-1083)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      MockError mockError0 = new MockError(batchUpdateException0);
      assertArrayEquals(new int[] {3, (-1083)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(mockError0);
      
      String string0 = ClassUtil.classNameOf((Object) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3));
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertNotNull(placeholderForType0);
      
      String string1 = ClassUtil.getClassDescription(placeholderForType0);
      assertEquals("`com.fasterxml.jackson.databind.type.PlaceholderForType`", string1);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = ClassUtil.nonNullString("; expected Class<Converter>");
      assertEquals("; expected Class<Converter>", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      LRUMap<Object, JavaType> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, JavaType>((-1083), 513);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<NoClass> class1 = NoClass.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean0);
      assertSame(class1, class0);
      
      String string0 = ClassUtil.classNameOf(class0);
      assertEquals("`java.lang.Class`", string0);
      assertSame(class0, class1);
      assertNotNull(string0);
      
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      boolean boolean1 = ClassUtil.isProxyType(class2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, true);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(constructor0);
      
      String string1 = ClassUtil.getClassDescription(constructor0);
      assertEquals("`java.lang.reflect.Constructor`", string1);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = ClassUtil.nonNullString((String) null);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Class<Character> class4 = Character.class;
      Constructor<Character> constructor1 = ClassUtil.findConstructor(class4, false);
      assertNull(constructor1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "[null]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Integer integer0 = Integer.getInteger("com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes");
      assertNull(integer0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      boolean boolean1 = ClassUtil.hasClass((Object) null, class1);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.classNameOf(class0);
      assertEquals("`java.lang.Class`", string0);
      assertNotNull(string0);
      
      Class<Integer> class1 = Integer.class;
      boolean boolean1 = ClassUtil.isProxyType(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = ClassUtil.getClassDescription(class0);
      assertEquals("`com.fasterxml.jackson.databind.annotation.NoClass`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = ClassUtil.nonNullString("; expected Class<Converter>");
      assertEquals("; expected Class<Converter>", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Float> class1 = Float.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class1);
      assertFalse(boolean0);
      
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      String string0 = sQLTransientConnectionException0.getLocalizedMessage();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(string0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      String string1 = ClassUtil.backticked("l7#aF9,Y/WAh]b,X:8");
      assertEquals("`l7#aF9,Y/WAh]b,X:8`", string1);
      assertNotNull(string1);
      
      String string2 = ClassUtil.backticked((String) null);
      assertEquals("[null]", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(constructor0);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Float> class1 = Float.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class1);
      assertFalse(boolean0);
      
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      String string0 = ClassUtil.quotedOr(class1, "net.sf.cglib.proxy.java.lang.Integer");
      assertEquals("\"class java.lang.Float\"", string0);
      assertNotNull(string0);
      
      boolean boolean1 = ClassUtil.hasClass(constructor0, class1);
      assertFalse(boolean1);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertTrue(boolean1 == boolean0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotNull(iOContext1);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper0);
      
      Boolean boolean2 = Boolean.valueOf(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean2);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4656, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3141, true);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(3141, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(4656, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(uTF8JsonGenerator0);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.overrideFormatFeatures(3, 248);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No FormatFeatures defined for generator of type com.fasterxml.jackson.core.json.UTF8JsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<Object> class0 = Object.class;
      String string1 = ClassUtil.backticked("[null]");
      assertEquals("`[null]`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<String> class1 = String.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<?> class2 = ClassUtil.getEnclosingClass(class0);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<Short> class1 = Short.class;
      boolean boolean2 = ClassUtil.isJacksonStdImpl(class1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      SQLDataException sQLDataException0 = new SQLDataException("INT", "D:a;o^}c");
      assertEquals("INT", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: INT", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("D:a;o^}c", sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "INT");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      SQLDataException sQLDataException1 = new SQLDataException("ZERO_LENGTH_ENUM_ARRAY", sQLDataException0);
      assertEquals("INT", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: INT", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("D:a;o^}c", sQLDataException0.getSQLState());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: ZERO_LENGTH_ENUM_ARRAY", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLDataException1.getMessage());
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertNotNull(sQLDataException1);
      
      SQLDataException sQLDataException2 = (SQLDataException)ClassUtil.getRootCause(sQLDataException1);
      assertEquals("INT", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLDataException: INT", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("D:a;o^}c", sQLDataException0.getSQLState());
      assertNull(sQLDataException1.getSQLState());
      assertEquals("java.sql.SQLDataException: ZERO_LENGTH_ENUM_ARRAY", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLDataException1.getMessage());
      assertEquals(0, sQLDataException2.getErrorCode());
      assertEquals("java.sql.SQLDataException: INT", sQLDataException2.toString());
      assertEquals("INT", sQLDataException2.getMessage());
      assertEquals("D:a;o^}c", sQLDataException2.getSQLState());
      assertFalse(sQLDataException0.equals((Object)sQLDataException1));
      assertFalse(sQLDataException1.equals((Object)sQLDataException0));
      assertFalse(sQLDataException2.equals((Object)sQLDataException1));
      assertNotSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException0, sQLDataException2);
      assertNotSame(sQLDataException1, sQLDataException2);
      assertNotSame(sQLDataException1, sQLDataException0);
      assertSame(sQLDataException2, sQLDataException0);
      assertNotSame(sQLDataException2, sQLDataException1);
      assertNotNull(sQLDataException2);
      
      Class<Float> class2 = Float.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isPrimitive());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<Byte> class2 = Byte.class;
      Constructor<Byte> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNull(constructor0);
      
      Constructor<Byte> constructor1 = ClassUtil.findConstructor(class2, false);
      assertNull(constructor1);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<Object> class0 = Object.class;
      String string1 = ClassUtil.backticked("[null]");
      assertEquals("`[null]`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ClassUtil.isProxyType(class1);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = ClassUtil.nullOrToString((Object) null);
      assertNull(string3);
      
      Class<Double> class2 = Double.class;
      String string4 = ClassUtil.isLocalType(class2, false);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class2);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertNull(annotation0);
      
      Class<Annotation> class3 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class3);
      assertFalse(boolean0);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertSame(class3, class2);
      
      Annotation annotation1 = constructor0.getDeclaredAnnotation(class3);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertSame(class3, class2);
      assertNull(annotation1);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotatedTypeArray0.length);
      assertNotNull(annotatedTypeArray0);
      
      boolean boolean1 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean1);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(boolean1 == boolean0);
      
      Class<Byte> class4 = Byte.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class4);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      String string0 = ClassUtil.nullOrToString(class0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(string0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1951;
      intArray0[1] = (-552);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("java.lang.Class@0000000001", "; failed to set access: ", intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("; failed to set access: ", batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {1951, (-552)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("; failed to set access: ", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("; failed to set access: ", batchUpdateException1.getSQLState());
      assertArrayEquals(new int[] {1951, (-552)}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(batchUpdateException0, batchUpdateException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      assertNotNull(batchUpdateException1);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.Class@0000000001
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Annotation annotation0 = ClassUtil.nonNull((Annotation) null, (Annotation) null);
      assertNull(annotation0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes");
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<Character> class1 = Character.TYPE;
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class1);
      assertTrue(boolean1);
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(boolean1 == boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      boolean boolean2 = ClassUtil.isProxyType(class2);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Class<IOException> class3 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class3, false);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = ClassUtil.quotedOr(class3, "elementType");
      assertEquals("\"class java.io.IOException\"", string0);
      assertNotNull(string0);
      
      boolean boolean3 = ClassUtil.isObjectOrPrimitive(class3);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(12, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string1 = ClassUtil.backticked("net.sf.cglib.proxy.java.lang.RuntimeException");
      assertEquals("`net.sf.cglib.proxy.java.lang.RuntimeException`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Class<Object> class2 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(class2, class0);
      assertNotNull(list0);
      
      Character character0 = Character.valueOf('{');
      assertEquals('{', (char)character0);
      assertNotNull(character0);
      
      String string2 = ClassUtil.quotedOr(character0, "D%=o$,}?OtWo%tu");
      assertEquals("\"{\"", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class2);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertSame(class2, class0);
      
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class3);
      assertEquals(2, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class3);
      assertEquals(1, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertNotNull(list0);
      
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      assertSame(class0, class1);
      
      Class<CollectionType> class2 = CollectionType.class;
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Iterator<Long> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(12, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string1 = ClassUtil.backticked("net.sf.cglib.proxy.java.lang.RuntimeException");
      assertEquals("`net.sf.cglib.proxy.java.lang.RuntimeException`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ClassUtil.isProxyType(class0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      String string2 = ClassUtil.getPackageName(class1);
      assertEquals("com.fasterxml.jackson.databind.type", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = ClassUtil.nullOrToString(class1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean3 = ClassUtil.isObjectOrPrimitive(class1);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("f2-689W&)b");
      assertEquals("java.sql.SQLRecoverableException: f2-689W&)b", sQLRecoverableException0.toString());
      assertEquals("f2-689W&)b", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      sQLRecoverableException0.printStackTrace();
      assertEquals("java.sql.SQLRecoverableException: f2-689W&)b", sQLRecoverableException0.toString());
      assertEquals("f2-689W&)b", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      Throwable[] throwableArray0 = sQLRecoverableException0.getSuppressed();
      assertEquals("java.sql.SQLRecoverableException: f2-689W&)b", sQLRecoverableException0.toString());
      assertEquals("f2-689W&)b", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      assertNotNull(throwableArray0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("}p", sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: f2-689W&)b", sQLRecoverableException0.toString());
      assertEquals("f2-689W&)b", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: }p", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("}p", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLRecoverableException: f2-689W&)b", sQLRecoverableException0.toString());
      assertEquals("f2-689W&)b", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: }p", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("}p", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("}p", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: }p", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, class1, true);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      String string0 = ClassUtil.quotedOr(mockRuntimeException0, "}p");
      assertEquals("\"org.evosuite.runtime.mock.java.lang.MockThrowable\"", string0);
      assertNotNull(string0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = (SQLInvalidAuthorizationSpecException)ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException1);
      assertEquals("java.sql.SQLRecoverableException: f2-689W&)b", sQLRecoverableException0.toString());
      assertEquals("f2-689W&)b", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: }p", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("}p", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("}p", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: }p", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException2.getSQLState());
      assertEquals("}p", sQLInvalidAuthorizationSpecException2.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException2.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: }p", sQLInvalidAuthorizationSpecException2.toString());
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException2);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException2);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException2, sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException2, sQLInvalidAuthorizationSpecException1);
      assertNotNull(sQLInvalidAuthorizationSpecException2);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.classOf(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Class", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Class<Void> class2 = Void.class;
      ClassUtil.createInstance(class2, true);
      assertEquals(java.lang.Void@6c8b6d4c, (Void)void0);
      
      String string0 = ClassUtil.quotedOr(class2, "kg H6N8uNZ EZi/{oF");
      assertEquals("\"class java.lang.Void\"", string0);
      assertNotNull(string0);
      
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class3);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) "\"class java.lang.Void\"");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<?> class4 = ClassUtil.getDeclaringClass(class1);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Class", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNull(class4);
      
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Double> class1 = Double.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(94, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string0 = ClassUtil.getPackageName(class1);
      assertEquals("java.lang", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(4, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      Iterator<ResolvedRecursiveType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Character character0 = Character.valueOf('P');
      assertEquals('P', (char)character0);
      assertNotNull(character0);
      
      String string0 = ClassUtil.quotedOr(character0, "b}P}0~VR");
      assertEquals("\"P\"", string0);
      assertNotNull(string0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<MapType> class2 = MapType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class1, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("4>|1R8?\"Fu-*LS=d", "");
      assertEquals("4>|1R8?\"Fu-*LS=d", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 4>|1R8?\"Fu-*LS=d", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      assertEquals("4>|1R8?\"Fu-*LS=d", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 4>|1R8?\"Fu-*LS=d", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 4>|1R8?\"Fu-*LS=d", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLFeatureNotSupportedException: 4>|1R8?\"Fu-*LS=d", sQLFeatureNotSupportedException1.toString());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(sQLFeatureNotSupportedException1);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException1.forEach(consumer0);
      assertEquals("4>|1R8?\"Fu-*LS=d", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 4>|1R8?\"Fu-*LS=d", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: 4>|1R8?\"Fu-*LS=d", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLFeatureNotSupportedException: 4>|1R8?\"Fu-*LS=d", sQLFeatureNotSupportedException1.toString());
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotNull(jsonFactory3);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 3314);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(bufferedWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((Writer) bufferedWriter0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotNull(writerBasedJsonGenerator0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) sQLFeatureNotSupportedException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: java.sql.SQLFeatureNotSupportedException: 4>|1R8?\"Fu-*LS=d
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      Boolean boolean0 = annotationIntrospector0.isTypeId((AnnotatedMember) null);
      assertNull(boolean0);
      
      String string0 = ClassUtil.getClassDescription((Object) null);
      assertEquals("unknown", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)12;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)101, (byte)58, (byte)7, (byte)40, (byte) (-67), (byte)12}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", "com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer");
      assertEquals("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", sQLTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
      assertEquals("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", sQLTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", sQLTransientConnectionException1.toString());
      assertEquals("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", sQLTransientConnectionException1.getMessage());
      assertEquals("com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer", sQLTransientConnectionException1.getSQLState());
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertNotNull(sQLTransientConnectionException1);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientConnectionException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Character character0 = Character.valueOf('P');
      assertEquals('P', (char)character0);
      assertNotNull(character0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      SQLWarning sQLWarning0 = new SQLWarning("ZERO_LENGTH_ENUM_ARRAY", "; failed to set access: ", 8);
      assertEquals(8, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: ZERO_LENGTH_ENUM_ARRAY", sQLWarning0.toString());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLWarning0.getMessage());
      assertEquals("; failed to set access: ", sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZERO_LENGTH_ENUM_ARRAY
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Character character0 = Character.valueOf('P');
      assertEquals('P', (char)character0);
      assertNotNull(character0);
      
      String string0 = ClassUtil.quotedOr(character0, "b}P}0~VR");
      assertEquals("\"P\"", string0);
      assertNotNull(string0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\"P\"", (String) null, 74);
      assertEquals(74, sQLRecoverableException0.getErrorCode());
      assertEquals("\"P\"", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: \"P\"", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Class ", "b}P}0~VR", sQLRecoverableException0);
      assertEquals(74, sQLRecoverableException0.getErrorCode());
      assertEquals("\"P\"", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: \"P\"", sQLRecoverableException0.toString());
      assertEquals("b}P}0~VR", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Class ", sQLFeatureNotSupportedException0.toString());
      assertEquals("Class ", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      assertEquals(74, sQLRecoverableException0.getErrorCode());
      assertEquals("\"P\"", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: \"P\"", sQLRecoverableException0.toString());
      assertEquals("b}P}0~VR", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Class ", sQLFeatureNotSupportedException0.toString());
      assertEquals("Class ", sQLFeatureNotSupportedException0.getMessage());
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.setCodec((ObjectCodec) null);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotNull(jsonFactory3);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      assertNotNull(filterOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      assertNotNull(mockPrintStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory3.createGenerator((OutputStream) dataOutputStream0, jsonEncoding0);
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotNull(uTF8JsonGenerator0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("\"P\"", ")>V6sg?mq\"FH", 14);
      assertEquals("\"P\"", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(")>V6sg?mq\"FH", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: \"P\"", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(14, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException: \"P\"
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, true);
      assertEquals("java.lang.RuntimeException", runtimeException0.toString());
      assertNull(runtimeException0.getMessage());
      assertNotNull(runtimeException0);
      
      RuntimeException runtimeException1 = (RuntimeException)ClassUtil.getRootCause(runtimeException0);
      assertEquals("java.lang.RuntimeException", runtimeException0.toString());
      assertNull(runtimeException0.getMessage());
      assertNull(runtimeException1.getMessage());
      assertEquals("java.lang.RuntimeException", runtimeException1.toString());
      assertSame(runtimeException0, runtimeException1);
      assertSame(runtimeException1, runtimeException0);
      assertNotNull(runtimeException1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      assertNotNull(mockFile0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory1.createGenerator((File) mockFile0, jsonEncoding0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/JSON", mockFile0.getParent());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/JSON/JSON", mockFile0.toString());
      assertEquals("JSON", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(writerBasedJsonGenerator0);
      
      MockIOException mockIOException0 = new MockIOException("JSON", runtimeException1);
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = ClassUtil.quotedOr((Object) null, (String) null);
      assertNull(string0);
      
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals("long", class1.toString());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
      
      String string0 = "f2-689W&)b";
      Class<Void> class1 = Void.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassUtil.createInstance(class1, true);
      assertEquals(java.lang.Void@15c48afa, (Void)void0);
      
      String string1 = ClassUtil.quotedOr(void0, "f2-689W&)b");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
      
      String string0 = "f2-689W&)b";
      Class<Void> class1 = Void.class;
      ClassUtil.createInstance(class1, true);
      assertEquals(java.lang.Void@67b10c6e, (Void)void0);
      
      String string1 = ClassUtil.quotedOr(void0, "f2-689W&)b");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<NoClass> class2 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(12, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string1 = "net.sf.cglib.proxy.java.lang.RuntimeException";
      String string2 = ClassUtil.backticked("net.sf.cglib.proxy.java.lang.RuntimeException");
      assertEquals("`net.sf.cglib.proxy.java.lang.RuntimeException`", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ClassUtil.isProxyType(class0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Class<NoClass> class1 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      Class<Long> class1 = Long.class;
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Class<NoClass> class2 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(4, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("enum", string0);
      assertNotNull(string0);
      
      SQLException sQLException0 = new SQLException();
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      MockFile mockFile0 = new MockFile("enum", "enum");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "keyType");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.format("keyType", (Object[]) fieldArray0);
      assertEquals("/experiment/enum/enum", mockFile0.toString());
      assertEquals("/experiment/enum", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("enum", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(7L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/experiment/enum/enum/keyType", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/experiment/enum/enum", mockFile1.getParent());
      assertTrue(mockFile1.canRead());
      assertEquals("keyType", mockFile1.getName());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(4, fieldArray0.length);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      sQLException0.printStackTrace(printStream0);
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("/experiment/enum/enum", mockFile0.toString());
      assertEquals("/experiment/enum", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals("enum", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/experiment/enum/enum/keyType", mockFile1.toString());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/experiment/enum/enum", mockFile1.getParent());
      assertTrue(mockFile1.canRead());
      assertEquals("keyType", mockFile1.getName());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1087L, mockFile1.length());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.canExecute());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(4, fieldArray0.length);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      SQLException sQLException1 = new SQLException();
      assertNull(sQLException1.getMessage());
      assertEquals("java.sql.SQLException", sQLException1.toString());
      assertNull(sQLException1.getSQLState());
      assertEquals(0, sQLException1.getErrorCode());
      assertFalse(sQLException1.equals((Object)sQLException0));
      assertNotNull(sQLException1);
      
      String string1 = sQLException1.getLocalizedMessage();
      assertNull(sQLException1.getMessage());
      assertEquals("java.sql.SQLException", sQLException1.toString());
      assertNull(sQLException1.getSQLState());
      assertEquals(0, sQLException1.getErrorCode());
      assertFalse(sQLException1.equals((Object)sQLException0));
      assertNotSame(sQLException1, sQLException0);
      assertNull(string1);
      
      SQLException sQLException2 = (SQLException)ClassUtil.throwIfRTE(sQLException1);
      assertNull(sQLException1.getMessage());
      assertEquals("java.sql.SQLException", sQLException1.toString());
      assertNull(sQLException1.getSQLState());
      assertEquals(0, sQLException1.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException2.toString());
      assertNull(sQLException2.getMessage());
      assertNull(sQLException2.getSQLState());
      assertEquals(0, sQLException2.getErrorCode());
      assertFalse(sQLException1.equals((Object)sQLException0));
      assertFalse(sQLException2.equals((Object)sQLException0));
      assertSame(sQLException1, sQLException2);
      assertNotSame(sQLException1, sQLException0);
      assertNotSame(sQLException2, sQLException0);
      assertSame(sQLException2, sQLException1);
      assertNotNull(sQLException2);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(3, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string2 = ClassUtil.backticked("l7#aF9,Y/WAh]b,X:8");
      assertEquals("`l7#aF9,Y/WAh]b,X:8`", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      SQLException sQLException3 = (SQLException)ClassUtil.getRootCause(sQLException0);
      assertEquals(0, sQLException3.getErrorCode());
      assertNull(sQLException3.getMessage());
      assertNull(sQLException3.getSQLState());
      assertEquals("java.sql.SQLException", sQLException3.toString());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertFalse(sQLException3.equals((Object)sQLException2));
      assertFalse(sQLException3.equals((Object)sQLException1));
      assertFalse(sQLException0.equals((Object)sQLException1));
      assertFalse(sQLException0.equals((Object)sQLException2));
      assertNotSame(sQLException3, sQLException2);
      assertNotSame(sQLException3, sQLException1);
      assertSame(sQLException3, sQLException0);
      assertSame(sQLException0, sQLException3);
      assertNotSame(sQLException0, sQLException1);
      assertNotSame(sQLException0, sQLException2);
      assertNotNull(sQLException3);
      
      boolean boolean1 = ClassUtil.isProxyType(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = ClassUtil.classNameOf((Object) null);
      assertEquals("[null]", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Class<Byte> class1 = Byte.class;
      Constructor<Byte> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<Character> class1 = Character.class;
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<Annotation> class2 = Annotation.class;
      Class<IOException> class3 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, false);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNotNull(constructor0);
      
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class2);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNull(annotation0);
      
      Class<Annotation> class4 = Annotation.class;
      boolean boolean2 = constructor0.isAnnotationPresent(class4);
      assertFalse(boolean2);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(class4, class2);
      
      Annotation annotation1 = constructor0.getDeclaredAnnotation(class4);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertSame(class4, class2);
      assertNull(annotation1);
      
      Constructor<IOException> constructor1 = ClassUtil.findConstructor(class3, false);
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertTrue(constructor1.equals((Object)constructor0));
      assertNotSame(constructor1, constructor0);
      assertNotNull(constructor1);
      
      AnnotatedType[] annotatedTypeArray0 = constructor1.getAnnotatedParameterTypes();
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertTrue(constructor1.equals((Object)constructor0));
      assertEquals(0, annotatedTypeArray0.length);
      assertNotSame(constructor1, constructor0);
      assertNotNull(annotatedTypeArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor1);
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertTrue(constructor1.equals((Object)constructor0));
      assertNotNull(classUtil_Ctor0);
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertTrue(constructor1.equals((Object)constructor0));
      assertEquals(0, annotationArray0.length);
      assertNotSame(constructor1, constructor0);
      assertNotNull(annotationArray0);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertTrue(constructor1.equals((Object)constructor0));
      assertEquals(0, annotationArray1.length);
      assertNotSame(constructor1, constructor0);
      assertNotNull(annotationArray1);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertTrue(constructor1.equals((Object)constructor0));
      assertEquals(0, annotationArray2.length);
      assertSame(annotationArray2, annotationArray0);
      assertNotSame(constructor1, constructor0);
      assertNotNull(annotationArray2);
      
      Annotation[] annotationArray3 = constructor1.getAnnotationsByType(class4);
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertFalse(annotationArray3.equals((Object)annotationArray1));
      assertTrue(constructor1.equals((Object)constructor0));
      assertEquals(0, annotationArray3.length);
      assertNotSame(annotationArray3, annotationArray1);
      assertSame(class4, class2);
      assertNotSame(constructor1, constructor0);
      assertNotNull(annotationArray3);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertTrue(constructor1.equals((Object)constructor0));
      assertNotSame(constructor1, constructor0);
      
      Constructor<?> constructor2 = classUtil_Ctor0.getConstructor();
      assertFalse(constructor2.isVarArgs());
      assertEquals(1, constructor2.getModifiers());
      assertEquals("public java.io.IOException()", constructor2.toString());
      assertFalse(constructor2.isSynthetic());
      assertFalse(constructor2.isAccessible());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertTrue(constructor1.equals((Object)constructor0));
      assertNotSame(constructor1, constructor0);
      assertNotNull(constructor2);
      
      String string0 = ClassUtil.nonNull("com.fasterxml.jackson.core.util.DefaultIndenter", "com.fasterxml.jackson.core.util.DefaultIndenter");
      assertEquals("com.fasterxml.jackson.core.util.DefaultIndenter", string0);
      assertNotNull(string0);
      
      Class<String> class5 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class5, class1, false);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      String string1 = ClassUtil.canBeABeanType(class4);
      assertSame(class4, class2);
      assertNull(string1);
      
      Class<CollectionLikeType> class6 = CollectionLikeType.class;
      Class<Long> class7 = Long.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class6, class7);
      assertFalse(list1.isEmpty());
      assertEquals(6, list1.size());
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = ClassUtil.quotedOr(float0, "f2-689W&)b");
      assertEquals("\"0.0\"", string0);
      assertNotNull(string0);
      
      Class<Float> class0 = Float.class;
      Constructor<Float> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
      
      Class<ArrayType> class1 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class1, true);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "f2-689W&)b", true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      int int0 = 1745;
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", "0+>", 3);
      assertEquals("java.sql.SQLSyntaxErrorException: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLSyntaxErrorException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLSyntaxErrorException0.getMessage());
      assertEquals("0+>", sQLSyntaxErrorException0.getSQLState());
      assertEquals(3, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("NULL", sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLSyntaxErrorException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLSyntaxErrorException0.getMessage());
      assertEquals("0+>", sQLSyntaxErrorException0.getSQLState());
      assertEquals(3, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: NULL", sQLFeatureNotSupportedException0.toString());
      assertEquals("NULL", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("qK(%z\"D;$$)xDWagCv", "0+>", sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLSyntaxErrorException: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLSyntaxErrorException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", sQLSyntaxErrorException0.getMessage());
      assertEquals("0+>", sQLSyntaxErrorException0.getSQLState());
      assertEquals(3, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: NULL", sQLFeatureNotSupportedException0.toString());
      assertEquals("NULL", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("0+>", sQLSyntaxErrorException1.getSQLState());
      assertEquals("qK(%z\"D;$$)xDWagCv", sQLSyntaxErrorException1.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: qK(%z\"D;$$)xDWagCv", sQLSyntaxErrorException1.toString());
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertNotNull(sQLSyntaxErrorException1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Double double0 = new Double(1533.9006985074711);
      assertEquals(1533.9006985074711, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(1533.9006985074711);
      assertEquals(1533.9006985074711, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(1533.9006985074711);
      assertEquals(1533.9006985074711, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      Double double3 = ClassUtil.nonNull(double1, double2);
      assertEquals(1533.9006985074711, (double)double3, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double1, (double)double2, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class2);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertNull(annotation0);
      
      Class<Annotation> class3 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      boolean boolean0 = constructor0.isAnnotationPresent(class3);
      assertFalse(boolean0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertSame(class3, class2);
      
      Annotation annotation1 = constructor0.getDeclaredAnnotation(class3);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertSame(class3, class2);
      assertNull(annotation1);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, annotatedTypeArray0.length);
      assertNotNull(annotatedTypeArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, annotationArray1.length);
      assertNotNull(annotationArray1);
      
      Annotation[] annotationArray2 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, annotationArray2.length);
      assertSame(annotationArray2, annotationArray0);
      assertNotNull(annotationArray2);
      
      Annotation[][] annotationArray3 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, annotationArray3.length);
      assertSame(annotationArray3, annotationArray1);
      assertNotNull(annotationArray3);
      
      Annotation[] annotationArray4 = constructor0.getAnnotationsByType(class3);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(annotationArray4.equals((Object)annotationArray2));
      assertFalse(annotationArray4.equals((Object)annotationArray0));
      assertEquals(0, annotationArray4.length);
      assertSame(class3, class2);
      assertNotSame(annotationArray4, annotationArray2);
      assertNotSame(annotationArray4, annotationArray0);
      assertNotNull(annotationArray4);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertNotNull(constructor1);
      
      String string1 = ClassUtil.backticked((String) null);
      assertEquals("[null]", string1);
      assertNotNull(string1);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string2 = ClassUtil.canBeABeanType(class0);
      assertNull(string2);
      
      Class<RuntimeException> class4 = RuntimeException.class;
      Class<Long> class5 = Long.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class5, class4);
      assertFalse(list1.isEmpty());
      assertEquals(3, list1.size());
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<MapLikeType> class0 = MapLikeType.class;
      boolean boolean0 = true;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<IOException> class0 = IOException.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotNull(iOContext1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      assertEquals(2, jsonGenerator_FeatureArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      assertNotNull(jsonNodeFactory0);
      
      ObjectMapper objectMapper2 = objectMapper1.setNodeFactory(jsonNodeFactory0);
      assertEquals(2, jsonGenerator_FeatureArray0.length);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertNotNull(objectMapper2);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1853514379), objectMapper2, (OutputStream) null);
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-1853514379), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(2, jsonGenerator_FeatureArray0.length);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(uTF8JsonGenerator0);
      
      SQLException sQLException0 = new SQLException();
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) null, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNotNull(constructor0);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedExceptionTypes();
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotatedTypeArray0.length);
      assertNotNull(annotatedTypeArray0);
      
      AnnotatedType[] annotatedTypeArray1 = constructor0.getAnnotatedParameterTypes();
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(annotatedTypeArray1.equals((Object)annotatedTypeArray0));
      assertEquals(0, annotatedTypeArray1.length);
      assertNotSame(annotatedTypeArray1, annotatedTypeArray0);
      assertNotNull(annotatedTypeArray1);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      assertNull(jsonGenerator0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("6Pa/ewcgY3pE", "GVl", (-1));
      assertEquals("6Pa/ewcgY3pE", sQLSyntaxErrorException0.getMessage());
      assertEquals("GVl", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: 6Pa/ewcgY3pE", sQLSyntaxErrorException0.toString());
      assertEquals((-1), sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType", hashMap0, sQLSyntaxErrorException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("6Pa/ewcgY3pE", sQLSyntaxErrorException0.getMessage());
      assertEquals("GVl", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: 6Pa/ewcgY3pE", sQLSyntaxErrorException0.toString());
      assertEquals((-1), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException: org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isEnum());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`com.fasterxml.jackson.databind.type.MapLikeType`", string0);
      assertNotNull(string0);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      Class<NoClass> class4 = NoClass.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class4);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)125);
      assertEquals((byte)125, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) byte0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.databind.util.ClassUtil", "`com.fasterxml.jackson.databind.type.MapLikeType`");
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("`com.fasterxml.jackson.databind.type.MapLikeType`", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.util.ClassUtil", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("`com.fasterxml.jackson.databind.type.MapLikeType`", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.util.ClassUtil", sQLFeatureNotSupportedException0.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.util.ClassUtil
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(4, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("enum", string0);
      assertNotNull(string0);
      
      SQLException sQLException0 = new SQLException();
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      MockFile mockFile0 = new MockFile("enum", "enum");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "keyType");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.format("keyType", (Object[]) fieldArray0);
      assertTrue(mockFile0.exists());
      assertEquals("enum", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/enum", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/enum/enum", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/experiment/enum/enum/keyType", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/experiment/enum/enum", mockFile1.getParent());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.exists());
      assertEquals("keyType", mockFile1.getName());
      assertEquals(7L, mockFile1.length());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(4, fieldArray0.length);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      sQLException0.printStackTrace(printStream0);
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertTrue(mockFile0.exists());
      assertEquals("enum", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/enum", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("/experiment/enum/enum", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/experiment/enum/enum/keyType", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1087L, mockFile1.length());
      assertEquals("/experiment/enum/enum", mockFile1.getParent());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.exists());
      assertEquals("keyType", mockFile1.getName());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(4, fieldArray0.length);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      SQLException sQLException1 = (SQLException)ClassUtil.throwIfRTE(sQLException0);
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException1.toString());
      assertNull(sQLException1.getSQLState());
      assertNull(sQLException1.getMessage());
      assertEquals(0, sQLException1.getErrorCode());
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      assertNotNull(sQLException1);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(3, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string1 = ClassUtil.backticked("l7#aF9,Y/WAh]b,X:8");
      assertEquals("`l7#aF9,Y/WAh]b,X:8`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      String string2 = ClassUtil.nonNullString("keyType");
      assertEquals("keyType", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
      
      Class<String> class1 = String.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      boolean boolean0 = ClassUtil.isBogusClass((Class<?>) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNotNull(constructor0);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class2);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNull(annotation0);
      
      Class<Annotation> class3 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class3);
      assertFalse(boolean0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertSame(class3, class2);
      
      Annotation annotation1 = constructor0.getDeclaredAnnotation(class3);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertSame(class3, class2);
      assertNull(annotation1);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotatedTypeArray0.length);
      assertNotNull(annotatedTypeArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotationArray1.length);
      assertNotNull(annotationArray1);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotationArray2.length);
      assertSame(annotationArray2, annotationArray0);
      assertNotNull(annotationArray2);
      
      Annotation[] annotationArray3 = constructor0.getAnnotationsByType(class3);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(annotationArray3.equals((Object)annotationArray1));
      assertEquals(0, annotationArray3.length);
      assertSame(class3, class2);
      assertNotSame(annotationArray3, annotationArray1);
      assertNotNull(annotationArray3);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNotNull(constructor1);
      
      String string1 = ClassUtil.nonNull((String) null, (String) null);
      assertNull(string1);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string2 = ClassUtil.canBeABeanType(class0);
      assertNull(string2);
      
      Class<RuntimeException> class4 = RuntimeException.class;
      Class<Long> class5 = Long.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class5, class4);
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(4, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("enum", string0);
      assertNotNull(string0);
      
      SQLException sQLException0 = new SQLException();
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      MockFile mockFile0 = new MockFile("enum", "enum");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "keyType");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.format("keyType", (Object[]) fieldArray0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("enum", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/enum", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/enum/enum", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals("/experiment/enum/enum", mockFile1.getParent());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/experiment/enum/enum/keyType", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.exists());
      assertEquals("keyType", mockFile1.getName());
      assertEquals(7L, mockFile1.length());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(4, fieldArray0.length);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      sQLException0.printStackTrace(printStream0);
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("enum", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("/experiment/enum", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/enum/enum", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1087L, mockFile1.length());
      assertEquals("/experiment/enum/enum", mockFile1.getParent());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertEquals("/experiment/enum/enum/keyType", mockFile1.toString());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.exists());
      assertEquals("keyType", mockFile1.getName());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertEquals(4, fieldArray0.length);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      SQLException sQLException1 = (SQLException)ClassUtil.throwIfRTE(sQLException0);
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals(0, sQLException1.getErrorCode());
      assertNull(sQLException1.getSQLState());
      assertEquals("java.sql.SQLException", sQLException1.toString());
      assertNull(sQLException1.getMessage());
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      assertNotNull(sQLException1);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(3, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string1 = ClassUtil.backticked("l7#aF9,Y/WAh]b,X:8");
      assertEquals("`l7#aF9,Y/WAh]b,X:8`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      SQLException sQLException2 = (SQLException)ClassUtil.getRootCause(sQLException0);
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals(0, sQLException2.getErrorCode());
      assertNull(sQLException2.getMessage());
      assertNull(sQLException2.getSQLState());
      assertEquals("java.sql.SQLException", sQLException2.toString());
      assertSame(sQLException0, sQLException2);
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException2, sQLException1);
      assertSame(sQLException2, sQLException0);
      assertNotNull(sQLException2);
      
      boolean boolean1 = ClassUtil.isProxyType(class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      Annotation[] annotationArray1 = ClassUtil.findClassAnnotations(class1);
      assertEquals(0, annotationArray1.length);
      assertSame(annotationArray1, annotationArray0);
      assertNotNull(annotationArray1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = ClassUtil.nonNull(double0, double0);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      Class<NoClass> class2 = NoClass.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class2);
      assertEquals(1, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      String string0 = "KEB";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("KEB");
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: KEB", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("KEB", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      sQLIntegrityConstraintViolationException0.printStackTrace();
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: KEB", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("KEB", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      MockError mockError0 = new MockError("KEB");
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "KEB");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNotNull(constructor0);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class2);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNull(annotation0);
      
      Class<Annotation> class3 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class3);
      assertFalse(boolean0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertSame(class3, class2);
      
      Annotation annotation1 = constructor0.getDeclaredAnnotation(class3);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertSame(class3, class2);
      assertNull(annotation1);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotatedTypeArray0.length);
      assertNotNull(annotatedTypeArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotationArray1.length);
      assertNotNull(annotationArray1);
      
      Annotation[] annotationArray2 = constructor0.getAnnotationsByType(class3);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(annotationArray2.equals((Object)annotationArray1));
      assertEquals(0, annotationArray2.length);
      assertSame(class3, class2);
      assertNotSame(annotationArray2, annotationArray1);
      assertNotNull(annotationArray2);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor1.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertNotNull(constructor1);
      
      String string1 = ClassUtil.nonNullString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
      
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = ClassUtil.nonNull(double0, double0);
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertNull(class2);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(0, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = ClassUtil.hasClass(class0, class0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Character> class1 = Character.class;
      boolean boolean2 = ClassUtil.isConcrete(class1);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Class<Float> class2 = Float.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("float", class3.toString());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isArray());
      assertNotNull(class3);
      
      boolean boolean3 = ClassUtil.isProxyType(class3);
      assertFalse(boolean3);
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("float", class3.toString());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isArray());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(4, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      sQLRecoverableException0.printStackTrace();
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang.reflect", string0);
      assertNotNull(string0);
      
      Class<Integer> class1 = Integer.class;
      Constructor<Integer> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(".", ".", 1006);
      assertEquals(".", sQLTransactionRollbackException0.getSQLState());
      assertEquals(".", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: .", sQLTransactionRollbackException0.toString());
      assertEquals(1006, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      String string0 = sQLTransactionRollbackException0.getLocalizedMessage();
      assertEquals(".", string0);
      assertEquals(".", sQLTransactionRollbackException0.getSQLState());
      assertEquals(".", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: .", sQLTransactionRollbackException0.toString());
      assertEquals(1006, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(string0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      assertEquals(".", sQLTransactionRollbackException0.getSQLState());
      assertEquals(".", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: .", sQLTransactionRollbackException0.toString());
      assertEquals(1006, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(1006, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: .", sQLTransactionRollbackException1.toString());
      assertEquals(".", sQLTransactionRollbackException1.getMessage());
      assertEquals(".", sQLTransactionRollbackException1.getSQLState());
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertNotNull(sQLTransactionRollbackException1);
      
      Class<Character> class0 = Character.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(2, typeArray0.length);
      assertNotNull(typeArray0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(52, methodArray0.length);
      assertNotNull(methodArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3552;
      intArray0[1] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertArrayEquals(new int[] {3552, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)ClassUtil.getRootCause(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertArrayEquals(new int[] {3552, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(batchUpdateException0, batchUpdateException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      assertNotNull(batchUpdateException1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Character character0 = Character.valueOf('P');
      assertEquals('P', (char)character0);
      assertNotNull(character0);
      
      String string0 = ClassUtil.quotedOr(character0, "b}P}0~VR");
      assertEquals("\"P\"", string0);
      assertNotNull(string0);
      
      Class<ArrayType> class0 = ArrayType.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      Class<CollectionType> class2 = CollectionType.class;
      boolean boolean0 = true;
      String string0 = ClassUtil.isLocalType(class2, true);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
      
      Class<String> class1 = String.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      boolean boolean0 = ClassUtil.isBogusClass((Class<?>) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(1, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotNull(typeFactory1);
      
      TypeFactory typeFactory2 = typeFactory1.withModifier((TypeModifier) null);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory2, typeFactory0);
      assertNotSame(typeFactory2, typeFactory1);
      assertNotNull(typeFactory2);
      
      MapLikeType mapLikeType0 = typeFactory2.constructRawMapLikeType(class0);
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory1.equals((Object)typeFactory2));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory2, typeFactory0);
      assertNotSame(typeFactory2, typeFactory1);
      assertNotNull(mapLikeType0);
      
      JavaType javaType0 = mapLikeType0.getSuperClass();
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory1.equals((Object)typeFactory2));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory2, typeFactory0);
      assertNotSame(typeFactory2, typeFactory1);
      assertNotNull(javaType0);
      
      boolean boolean0 = mapLikeType0.isTypeOrSubTypeOf(class0);
      assertTrue(boolean0);
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory1.equals((Object)typeFactory2));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory2, typeFactory0);
      assertNotSame(typeFactory2, typeFactory1);
      
      MapLikeType mapLikeType1 = mapLikeType0.withKeyTypeHandler(typeFactory1);
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isEnumType());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isInterface());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isFinal());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isPrimitive());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isAbstract());
      assertFalse(mapLikeType1.isArrayType());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory1.equals((Object)typeFactory2));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory2, typeFactory0);
      assertNotSame(typeFactory2, typeFactory1);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotNull(mapLikeType1);
      
      Class<Void> class1 = Void.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory1.equals((Object)typeFactory2));
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotNull(arrayType0);
      
      TypeBindings typeBindings0 = arrayType0.getBindings();
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory1.equals((Object)typeFactory2));
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotNull(typeBindings0);
      
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = (JavaType) arrayType0;
      javaTypeArray0[1] = (JavaType) arrayType0;
      javaTypeArray0[2] = (JavaType) mapLikeType1;
      javaTypeArray0[3] = (JavaType) mapLikeType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      javaTypeArray0[6] = javaType0;
      javaTypeArray0[7] = javaType0;
      javaTypeArray0[8] = javaType0;
      JavaType javaType1 = mapLikeType1.refine(class1, typeBindings0, mapLikeType0, javaTypeArray0);
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(javaType1.isEnumType());
      assertFalse(javaType1.isAbstract());
      assertTrue(javaType1.isContainerType());
      assertEquals(0, javaType1.containedTypeCount());
      assertTrue(javaType1.isMapLikeType());
      assertFalse(javaType1.useStaticType());
      assertFalse(javaType1.isCollectionLikeType());
      assertFalse(javaType1.isPrimitive());
      assertFalse(javaType1.hasValueHandler());
      assertFalse(javaType1.isArrayType());
      assertTrue(javaType1.hasContentType());
      assertFalse(javaType1.isInterface());
      assertFalse(javaType1.isJavaLangObject());
      assertTrue(javaType1.isConcrete());
      assertTrue(javaType1.hasHandlers());
      assertTrue(javaType1.isFinal());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isEnumType());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isInterface());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isFinal());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isPrimitive());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isAbstract());
      assertFalse(mapLikeType1.isArrayType());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isConcrete());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory1.equals((Object)typeFactory2));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertTrue(mapLikeType0.equals((Object)mapLikeType1));
      assertFalse(javaType1.equals((Object)mapLikeType1));
      assertFalse(javaType1.equals((Object)mapLikeType0));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertEquals(9, javaTypeArray0.length);
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory2, typeFactory0);
      assertNotSame(typeFactory2, typeFactory1);
      assertNotSame(mapLikeType0, javaType1);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(javaType1, mapLikeType1);
      assertNotSame(javaType1, mapLikeType0);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotSame(mapLikeType1, javaType1);
      assertNotNull(javaType1);
      
      Class<?> class2 = ClassUtil.rawClass(mapLikeType1);
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.reflect.AccessibleObject", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isEnumType());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isInterface());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isFinal());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertTrue(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isPrimitive());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isAbstract());
      assertFalse(mapLikeType1.isArrayType());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory1.equals((Object)typeFactory2));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertFalse(mapLikeType0.equals((Object)javaType1));
      assertTrue(mapLikeType0.equals((Object)mapLikeType1));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertFalse(mapLikeType1.equals((Object)javaType1));
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory2, typeFactory0);
      assertNotSame(typeFactory2, typeFactory1);
      assertNotSame(mapLikeType0, javaType1);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotSame(mapLikeType1, javaType1);
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals(0, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = ClassUtil.classNameOf(class0);
      assertEquals("`java.lang.Class`", string0);
      assertNotNull(string0);
      
      Class<IOException> class1 = IOException.class;
      boolean boolean2 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = true;
      Class<Annotation> class0 = Annotation.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        BasicBeanDescription.forSerialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.nameOf(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class1);
      Class<String> class2 = String.class;
      ClassUtil.findRawSuperTypes(class2, class0, true);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class3);
      Class<Long> class4 = Long.class;
      ClassUtil.findConstructor(class4, true);
      Byte byte0 = new Byte((byte)127);
      ClassUtil.isJacksonStdImpl((Object) byte0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.nameOf(class0);
      MockException mockException0 = new MockException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Float float0 = new Float(0.0F);
      ClassUtil.quotedOr(float0, "f2-689W&)b");
      Class<Float> class0 = Float.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperClasses(class1, class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.findEnumType(class0);
      Double double0 = new Double((-1.0));
      ClassUtil.nonNull(double0, double0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getDeclaredFields(class1);
      Class<Void> class2 = Void.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotation(class2);
      Class<Annotation> class3 = Annotation.class;
      constructor0.isAnnotationPresent(class3);
      constructor0.getDeclaredAnnotation(class3);
      constructor0.getAnnotatedParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getAnnotationsByType(class3);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      ClassUtil.nonNull((String) null, (String) null);
      ClassUtil.findSuperClasses(class0, class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getDeclaringClass(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.isJacksonStdImpl((Object) mockRuntimeException0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getName();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedExceptionTypes();
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "java.lang.RuntimeException");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Error) must override method 'java.lang.RuntimeException'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil classUtil0 = new ClassUtil();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("elementType", batchUpdateException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("elementType", "elementType", 1633, sQLTimeoutException0);
      MockIOException mockIOException0 = new MockIOException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0, ";T}>MC:BLR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ;T}>MC:BLR
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes(class1, class1);
      Class<MapType> class2 = MapType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findClassAnnotations(class0);
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      ClassUtil.canBeABeanType(class0);
      SQLException sQLException0 = new SQLException();
      MockFile mockFile0 = new MockFile("enum", "enum");
      MockFile mockFile1 = new MockFile(mockFile0, "keyType");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.format("keyType", (Object[]) fieldArray0);
      sQLException0.printStackTrace(printStream0);
      ClassUtil.throwIfRTE(sQLException0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.backticked("l7#aF9,Y/WAh]b,X:8");
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.canBeABeanType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class2);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("elementType", "", (-1794), sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("jOt", sQLFeatureNotSupportedException0);
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      Class<MapType> class0 = MapType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (List<JavaType>) null);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = null;
      // Undeclared exception!
      try { 
        ReferenceType.construct(class1, typeBindings0, (JavaType) null, javaTypeArray0, javaTypeArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Void> class0 = Void.class;
      String string0 = "";
      Long.getLong("");
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "elementType";
      MockThrowable mockThrowable0 = new MockThrowable("elementType");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0, true);
      PrintWriter printWriter0 = mockPrintWriter0.format("org.hibernate.proxy.", (Object[]) null);
      MockThrowable.replacement_printStackTrace((Throwable) mockThrowable0, printWriter0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("elementType", "elementType", (-153), mockThrowable0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("l[,K+JG.2cMi");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      PrintWriter printWriter1 = mockPrintWriter1.printf("l[,K+JG.2cMi", objectArray0);
      sQLInvalidAuthorizationSpecException0.printStackTrace(printWriter1);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) "elementType", "elementType");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // elementType (through reference chain: java.lang.String[\"elementType\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.classNameOf(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isConcrete(class1);
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotation(class3);
      ClassUtil.quotedOr((Object) null, "*enA!P4`jx^");
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException("*enA!P4`jx^", mockThrowable0);
      ClassUtil.throwIfRTE(mockIOException0);
      ClassUtil.getDeclaredFields(class1);
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      javaTypeArray0[6] = javaType0;
      Class<Long> class4 = Long.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class4, typeBindings0);
      JavaType javaType1 = resolvedRecursiveType0.withContentType(javaType0);
      javaTypeArray0[7] = javaType1;
      CollectionType collectionType0 = CollectionType.construct(class1, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[3]);
      CollectionType collectionType1 = (CollectionType)ClassUtil.nonNull((CollectionLikeType) collectionType0, (CollectionLikeType) collectionType0);
      assertTrue(collectionType1.isCollectionLikeType());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<CollectionType>[] classArray0 = (Class<CollectionType>[]) Array.newInstance(Class.class, 9);
      Class<CollectionType> class0 = CollectionType.class;
      classArray0[0] = class0;
      Class<CollectionType> class1 = CollectionType.class;
      classArray0[1] = class1;
      Class<CollectionType> class2 = CollectionType.class;
      classArray0[2] = class2;
      Class<CollectionType> class3 = CollectionType.class;
      classArray0[3] = class3;
      Class<CollectionType> class4 = CollectionType.class;
      classArray0[4] = class4;
      Class<CollectionType> class5 = CollectionType.class;
      classArray0[5] = class5;
      Class<CollectionType> class6 = CollectionType.class;
      classArray0[6] = class6;
      Class<CollectionType> class7 = CollectionType.class;
      classArray0[7] = class7;
      Class<CollectionType> class8 = CollectionType.class;
      classArray0[8] = class8;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaringClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        simpleAbstractTypeResolver0.addMapping(class1, (Class<? extends String>) class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add mapping from class to itself
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.findClassAnnotations(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getEnclosingClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.nameOf(class1);
      int[] intArray0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }
}
