/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 01:48:52 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.KeyDeserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.BufferedOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.UnsupportedCharsetException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.SimpleTimeZone;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = false;
      ClassUtil.isLocalType(class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, collectionType0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 19;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(iOContext1);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      deserializationFeatureArray0[4] = deserializationFeature4;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
      ObjectReader objectReader2 = objectReader1.withValueToUpdate(class1);
      objectReader2.without(deserializationFeature0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        Charset.forName("unknown");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // unknown
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      Class<Boolean> class0 = Boolean.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getConstructors(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.objectNode();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectNode0, true);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(bufferRecycler0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(jsonParser_FeatureArray0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      deserializationFeatureArray0[4] = deserializationFeature4;
      DeserializationFeature deserializationFeature5 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      deserializationFeatureArray0[5] = deserializationFeature5;
      ObjectReader objectReader2 = objectReader1.withFeatures(deserializationFeatureArray0);
      ObjectReader objectReader3 = objectReader2.forType(class0);
      ObjectReader objectReader4 = objectReader3.withoutRootName();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)124;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectReader4, (OutputStream) null, byteArray0, 2618, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      String string0 = "1`wOkh{Ql(a$5+e";
      JsonLocation jsonLocation0 = new JsonLocation("", 0L, (-1L), 2047, 2047);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "1`wOkh{Ql(a$5+e", jsonLocation0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "1`wOkh{Ql(a$5+e", jsonMappingException0);
      MockIOException mockIOException0 = new MockIOException(sQLFeatureNotSupportedException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Void> class0 = Void.class;
      SimpleType.constructUnsafe(class0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      ClassUtil.findConstructor(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "Cannot pass null DeserializerFactory");
      SQLTransientException sQLTransientException0 = new SQLTransientException("_B", "com.fasterxml.jackson.databind.util.ClassUtil", 2, sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(sQLTransientException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Cannot pass null DeserializerFactory", sQLTransactionRollbackException0);
      SQLWarning sQLWarning0 = new SQLWarning("_B", "", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Annotation> class0 = Annotation.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findConstructor(class0, false);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<String> class1 = String.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1056));
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) placeholderForType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      MapLikeType mapLikeType1 = mapLikeType0.withContentValueHandler((Object) null);
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) mapLikeType1, javaTypeArray0, (JavaType) mapLikeType1);
      ClassUtil.rawClass(referenceType0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      System.setCurrentTimeMillis(4723L);
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, false);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isLocalType(class1, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.isConcrete(class0);
      ClassUtil.primitiveType(class0);
      ClassUtil.getClassDescription("java.lang");
      Class<Character> class1 = Character.class;
      ClassUtil.getClassMethods(class1);
      MockError mockError0 = new MockError("`java.lang.String`");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      mockError0.initCause(batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(65);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      Class<NoClass> class0 = NoClass.class;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "pb:n3");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_STRING: pb:n3
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.getClassMethods(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      enumSet0.remove(class0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.canBeABeanType(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.findRawSuperTypes(class1, class0, false);
      Class<Byte> class2 = Byte.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.getGenericInterfaces(class2);
      Class<Short> class3 = Short.class;
      ClassUtil.getPackageName(class3);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.lang", (Throwable) null);
      mockRuntimeException0.fillInStackTrace();
      mockRuntimeException0.getMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<AccessibleObject>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isConcrete((Member) constructor0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, false);
      Class<Character> class2 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class1, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassUtil.nonNullString("elementType");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nonNullString("elementType");
      ClassUtil.hasClass(class0, class0);
      Class<Double> class1 = Double.class;
      ClassUtil.canBeABeanType(class1);
      Object object0 = new Object();
      Class<Short> class2 = Short.class;
      ClassUtil.getConstructors(class2);
      ClassUtil classUtil0 = new ClassUtil();
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!w|-#1BX5,KebFqb");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<MapType> class0 = MapType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.nameOf(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, AccessibleObject> enumMap0 = new EnumMap<ClientInfoStatus, AccessibleObject>(class1);
      ClassUtil.findEnumType(enumMap0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      AbstractDeserializer abstractDeserializer0 = beanDeserializerBuilder0.buildAbstract();
      AccessPattern accessPattern0 = abstractDeserializer0.getEmptyAccessPattern();
      ClassUtil.nullOrToString(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, AccessibleObject> enumMap0 = new EnumMap<ClientInfoStatus, AccessibleObject>(class0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      enumMap0.putIfAbsent(clientInfoStatus0, (AccessibleObject) null);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, AccessibleObject> enumMap0 = new EnumMap<ClientInfoStatus, AccessibleObject>(class0);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      ClassUtil.defaultValue(class2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
      MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS;
      mapperFeatureArray0[1] = mapperFeature1;
      ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      ClassUtil.quotedOr(mockPrintStream0, "{ zp0eq");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\"org.evosuite.runtime.mock.java.io.MockPrintStream@511fcd5\"", 0, 3);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) charBuffer0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1024, objectMapper1, printStream0, byteArrayBuilder0.NO_BYTES, (-3), true);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("short");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "D");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getConstructors(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader1);
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(class0);
      JavaType javaType0 = typeFactory1.constructReferenceType(class0, collectionType1);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      enumSet0.add(accessPattern1);
      enumSet0.remove(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Module> class0 = Module.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isJacksonStdImpl(class0);
      String string0 = ",";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",");
      ClassUtil.nonNullString(",");
      ClassUtil.nonNullString(",");
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isProxyType(class1);
      String string1 = "org.hibernate.proxy.short";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.short");
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Short> class2 = Short.class;
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      ClassUtil.isJacksonStdImpl((Object) accessPattern0);
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isLocalType(class1, true);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      AccessibleObject accessibleObject0 = ClassUtil.createInstance(class0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.verifyMustOverride(class0, accessibleObject0, "java.lang.Byte");
      SimpleModule simpleModule0 = new SimpleModule("java.lang.Byte");
      JsonSerializer<AccessibleObject> jsonSerializer0 = (JsonSerializer<AccessibleObject>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule1 = simpleModule0.addSerializer((Class<? extends AccessibleObject>) class0, jsonSerializer0);
      NamedType[] namedTypeArray0 = new NamedType[6];
      NamedType namedType0 = new NamedType(class0, "java.lang.Byte");
      namedTypeArray0[0] = namedType0;
      NamedType namedType1 = new NamedType(class0);
      namedTypeArray0[1] = namedType1;
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      NamedType namedType2 = new NamedType(class1, "[]");
      namedTypeArray0[2] = namedType2;
      Class<RuntimeException> class2 = RuntimeException.class;
      NamedType namedType3 = new NamedType(class2, (String) null);
      namedTypeArray0[3] = namedType3;
      NamedType namedType4 = new NamedType(class0, "if?'|,pRO*");
      namedTypeArray0[4] = namedType4;
      NamedType namedType5 = new NamedType(class2, "java.lang.Byte");
      namedTypeArray0[5] = namedType5;
      simpleModule1.registerSubtypes(namedTypeArray0);
      Class<Byte> class3 = Byte.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.createKeyDeserializer(defaultDeserializationContext_Impl0, referenceType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getClassMethods(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Failed to setValue() with method ");
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      Locale locale0 = Locale.TAIWAN;
      ObjectMapper objectMapper2 = new ObjectMapper();
      objectMapper2.setLocale(locale0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 192);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectMapper0, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(64);
      SQLWarning sQLWarning0 = new SQLWarning("JSON", "java.util.HashMap", (-1));
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 56319);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) bufferedOutputStream0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLTimeoutException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      OutputStream outputStream0 = null;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)39;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4733, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("GAs[/OGsv~5U2", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException: GAs[/OGsv~5U2
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "q~`}L7[3{)5[Hj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredFields(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(49, 49);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class1);
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<String> class2 = String.class;
      ClassUtil.getConstructors(class2);
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      System.setCurrentTimeMillis((-3512L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withMergeInfo(propertyMetadata_MergeInfo0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      PropertyMetadata.MergeInfo.createForDefaults(annotatedField0);
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.from(jsonInclude0);
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition((AnnotationIntrospector) null, (AnnotatedMember) null, (PropertyName) null, propertyMetadata1, jsonInclude_Value0);
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) simpleBeanPropertyDefinition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.isConcrete(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findClassAnnotations(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      placeholderForType0.getSuperClass();
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class1, true);
      ClassUtil.isNonStaticInnerClass(class0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
      // Undeclared exception!
      try { 
        beanSerializerBuilder0.getClassInfo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanSerializerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.primitiveType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = ":4.f|:!\\Fz";
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Error> class0 = Error.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isConcrete((Member) constructor0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("0%NL|T@'2ZYTl?nb iY", class0, (String) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(beanDeserializerFactory0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Error` from String \"0%NL|T@'2ZYTl?nb iY\": null (through reference chain: com.fasterxml.jackson.databind.deser.BeanDeserializerFactory[?])
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockThrowable0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.hibernate.proxy.java.lang.Double");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType", objectArray0);
      mockRuntimeException0.printStackTrace(printWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.canBeABeanType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "B;`&GI^6Y[#aEw\" 0/t", (Throwable) null);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // B;`&GI^6Y[#aEw\" 0/t
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.isConcrete((Member) constructor0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSON", "JSON");
      MockIOException mockIOException0 = new MockIOException("JSON", sQLTransientException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<ObjectNode> class0 = ObjectNode.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.primitiveType(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getConstructors(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.backticked("^?RSr:Mz");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(0);
      Integer integer1 = Integer.getInteger("]C!CS;L=-8C*", integer0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer1, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      deserializationFeatureArray0[1] = deserializationFeature1;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      deserializationFeatureArray0[8] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)65;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper2, (OutputStream) null, byteArray0, 0, true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("`^?RSr:Mz`", "enum", 2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<String> class2 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("enum", class2, "!tLd6ovvR[]P3k>(#C");
      sQLFeatureNotSupportedException0.initCause(jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: `^?RSr:Mz`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.setReference((JavaType) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.isJacksonStdImpl((Object) resolvedRecursiveType0);
      ClassUtil.emptyIterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.hibernate.proxy.java.lang.reflect.AccessibleObject", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("org.hibernate.proxy.java.lang.reflect.AccessibleObject", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      ClassUtil.throwIfRTE(sQLClientInfoException1);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, false);
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper1, bufferedOutputStream0, byteArray0, (-641314725), true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<Character> class1 = Character.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[4];
      typeBindings0.getBoundType(3);
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[1]);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(javaTypeArray0[3]);
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withContentValueHandler((Object) null);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(collectionLikeType2, "%QYQJv|{y#\"]{3rl", "%QYQJv|{y#\"]{3rl");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '%QYQJv|{y#\"]{3rl' as a subtype of [collection-like type; class java.lang.Character, contains [simple type, class java.lang.Object]]: %QYQJv|{y#\"]{3rl
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Byte> class1 = Byte.TYPE;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<MapType> class1 = MapType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<MapLikeType> class2 = MapLikeType.class;
      Class<BasicBeanDescription> class3 = BasicBeanDescription.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
      Class<MapType> class4 = MapType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<Error>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information", "abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information");
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getDeclaringClass(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedReturnType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constructor0.getGenericParameterTypes();
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getConstructors(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getDeclaringClass(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getDeclaredFields(class3);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredFields(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(49, 49);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class2, false);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<LinkedList> class1 = LinkedList.class;
      typeFactory0.constructCollectionType(class1, class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class2, false);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospectors(annotationIntrospector1, annotationIntrospector1);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      Integer integer0 = objectIdGenerators_IntSequenceGenerator0.generateId(objectMapper_DefaultTyping0);
      ObjectReader objectReader0 = objectMapper3.readerForUpdating(integer0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader1 = objectReader0.withHandler(deserializationProblemHandler0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      objectReader1.without(deserializationFeature0);
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, javaType0, javaType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Long with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector1);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      objectIdGenerators_IntSequenceGenerator0.generateId(jsonFactory1);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SerializerFactoryConfig serializerFactoryConfig0 = new SerializerFactoryConfig();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig0);
      ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory(serializerFactory0);
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping();
      ObjectReader objectReader0 = objectMapper3.readerForUpdating(serializerFactoryConfig0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      objectReader0.without(deserializationFeature0);
      TypeFactory.defaultInstance();
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.nonNullString("net.sf.cglib.proxy.java.lang.Float");
      ClassUtil.canBeABeanType(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.canBeABeanType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassUtil.nonNullString("net.sf.cglib.proxy.java.lang.Float");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      Class<Character> class0 = Character.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ObjectReader objectReader1 = objectReader0.forType((JavaType) simpleType0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<Error> class1 = Error.class;
      Class<Character> class2 = Character.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class1, class2);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      ClassUtil.rawClass(collectionLikeType1);
      Class<Character> class3 = Character.class;
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.RuntimeException");
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.canBeABeanType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Double double0 = new Double(0.0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(double0, class0, "g3)EuR'");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException("g3)EuR'", jsonMappingException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl1, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // g3)EuR'
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      List<Class<?>> list0 = new ArrayList<Class<Byte>>();
      Class<String> class0 = String.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isBogusClass(class0);
      Class<Short> class1 = Short.TYPE;
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.classOf(class0);
      MockIOException mockIOException0 = new MockIOException();
      Throwable throwable0 = ClassUtil.throwIfRTE(mockIOException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(throwable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Qjava.lang.RuntimeEx");
      Class<Void> class0 = Void.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.backticked("R-wlNa>u629k9H[<");
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findEnumType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.nameOf(class2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassUtil.backticked(";+-)z9\t/HR!cM");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ShortNode shortNode0 = ShortNode.valueOf((short)10);
      BigInteger bigInteger0 = shortNode0.bigIntegerValue();
      Class<ArrayType> class0 = ArrayType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "ML[A0i(*");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ArrayType` from number 10: ML[A0i(*
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Qjava.lang.RuntimeEx");
      Class<Void> class0 = Void.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findEnumType(class0);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getGenericParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.getClassMethods(class0);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.getConstructors(class2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BeanSerializer for ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.emptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException("keyType");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("keyType");
      FileSystemHandling.shouldAllThrowIOExceptions();
      sQLDataException0.setNextException(sQLNonTransientConnectionException0);
      MockError mockError0 = new MockError(sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isProxyType(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<Error> class2 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class2, false);
      constructor0.getGenericParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.getClassMethods(class0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      ClassUtil.hasEnclosingMethod(class2);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findSuperClasses(class3, class1, false);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Error error0 = ClassUtil.createInstance(class0, false);
      Class<Long> class1 = Long.class;
      ClassUtil.isCollectionMapOrArray(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(error0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<SimpleModule> class1 = SimpleModule.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findEnumType(class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 96;
      ObjectMapper objectMapper0 = new ObjectMapper();
      String string0 = "2.2250738585072012e-308";
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "2.2250738585072012e-308", 2, 1, 0, (-685), 96, (-106), 3, (-2138));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start time -685
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.backticked((String) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getEnclosingClass(class0);
      MockError mockError0 = new MockError("Unsupported UCS-4 endianness (");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "Unsupported UCS-4 endianness (");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-135));
      ClassUtil.rawClass(placeholderForType0);
      System.setCurrentTimeMillis(0L);
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      ClassUtil.isJacksonStdImpl((Object) placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Failed to find default constructor of class ");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("elementType", sQLNonTransientException0);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isLocalType(class0, false);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getEnclosingClass(class0);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findConstructor(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "Unsupported UCS-4 endianness (");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.rawClass((JavaType) null);
      System.setCurrentTimeMillis((-1153L));
      List<JavaType> list0 = new LinkedList<JavaType>();
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Error> class1 = Error.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Error error0 = ClassUtil.createInstance(class1, false);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) error0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer((-3445));
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.hibernate.proxy.com.fasterxml.jackson.databind.type.SimpleType");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, mockPrintStream1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("wrWs3?i8@,+0Eo)e`", "wrWs3?i8@,+0Eo)e`", 1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException: wrWs3?i8@,+0Eo)e`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      sQLClientInfoException0.getFailedProperties();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap1, sQLClientInfoException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      Locale.lookup(linkedList0, priorityQueue0);
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, "45", (Object[]) classUtil_CtorArray0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) printStream0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getEnclosingClass(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientException0.spliterator();
      sQLTransientException0.getLocalizedMessage();
      ClassUtil.throwIfIOE(sQLTransientException0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Byte byte0 = new Byte((byte) (-48));
      Byte byte1 = new Byte((byte) (-48));
      ClassUtil.nonNull(byte1, byte0);
      ClassUtil.getConstructors(class0);
      MockException mockException0 = new MockException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType");
      ClassUtil.throwIfRTE(mockException0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findEnumType(class0);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getGenericParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor1.getParamCount();
      Constructor<?> constructor1 = classUtil_Ctor1.getConstructor();
      Class<Error> class2 = Error.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      SQLWarning sQLWarning0 = new SQLWarning("@{m2Qx[-8^HRG8L[K", "@{m2Qx[-8^HRG8L[K", 0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @{m2Qx[-8^HRG8L[K
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<Error> class2 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class2, false);
      constructor0.getAnnotatedParameterTypes();
      ClassUtil.getOuterClass(class1);
      ClassUtil.isNonStaticInnerClass(class0);
      Long.getLong("I##=aZ]Jh2");
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "I##=aZ]Jh2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Error> class1 = Error.class;
      Error error0 = ClassUtil.createInstance(class1, false);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isCollectionMapOrArray(class2);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, error0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLClientInfoException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y,R=tQ6,:?R");
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findConstructor(class1, true);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findClassAnnotations(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      Class<SimpleModule> class4 = SimpleModule.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class3, class4, false);
      Class<MapType> class5 = MapType.class;
      Class<IOException> class6 = IOException.class;
      ClassUtil.findSuperTypes(class5, class6, list0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class7 = LinkedList.class;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        typeFactory0.constructCollectionType(class7, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.isObjectOrPrimitive(class1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("5Ox&t\"vf\"hdg6W", "5Ox&t\"vf\"hdg6W", 114);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLSyntaxErrorException0);
      ClassUtil.getRootCause(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Error> class1 = Error.class;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("GETTER", "LWvye,m", mockRuntimeException0);
      sQLTransientException0.spliterator();
      sQLTransientException0.getLocalizedMessage();
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.getClassMethods(class1);
      ClassUtil.emptyIterator();
      SQLDataException sQLDataException0 = new SQLDataException();
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findClassAnnotations(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Class<Error> class3 = Error.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      ClassUtil.getConstructors(class2);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findClassAnnotations(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Class<Error> class3 = Error.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "keyType");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findClassAnnotations(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.hasClass(class0, class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class3, false);
      constructor0.setAccessible(false);
      constructor0.getDeclaredAnnotations();
      ClassUtil.nameOf(class1);
      ClassUtil.findSuperTypes((Class<?>) null, class3);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y,R=tQ6,:?R");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ClassUtil.nonNull((Byte) null, (Byte) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      placeholderForType0.toString();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLException sQLException0 = new SQLException((String) null, sQLInvalidAuthorizationSpecException0);
      int[] intArray0 = new int[8];
      intArray0[0] = 12;
      intArray0[1] = 0;
      intArray0[2] = 12;
      intArray0[3] = 1325;
      intArray0[4] = 12;
      intArray0[5] = 1325;
      intArray0[6] = 12;
      intArray0[7] = 1325;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("7ji^sR!{ w~u>,C8", intArray0, sQLDataException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("oE]~f", "$13", batchUpdateException0);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLTransientException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, "7ji^sR!{ w~u>,C8", 2, map0, throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException1, "7ji^sR!{ w~u>,C8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7ji^sR!{ w~u>,C8
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ClassUtil.nonNullString("elementType");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nameOf(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, true);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<String> class1 = String.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType", 1600);
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLException0);
      Class<Short> class2 = Short.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.throwIfRTE(throwable0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getConstructors(class0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.createInstance(class1, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<Integer> class2 = Integer.TYPE;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.classNameOf(class0);
      ClassUtil.getOuterClass(class2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Short> class0 = Short.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Float float0 = new Float(0.6F);
      defaultDeserializationContext_Impl0.weirdNumberException(float0, class0, "primitive");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.classNameOf((Object) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getOuterClass(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<AccessibleObject>[] classArray0 = (Class<AccessibleObject>[]) Array.newInstance(Class.class, 3);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      classArray0[0] = class2;
      Class<AccessibleObject> class3 = AccessibleObject.class;
      classArray0[1] = class3;
      Class<AccessibleObject> class4 = AccessibleObject.class;
      classArray0[2] = class4;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findSingleArgConstructor(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)50;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.classNameOf((Object) null);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findConstructor(class1, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findClassAnnotations(class2);
      List<Class<?>> list0 = new ArrayList<Class<RuntimeException>>();
      ClassUtil.findSuperTypes(class0, class0, list0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Short> class0 = Short.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null);
      sQLTransientConnectionException0.getLocalizedMessage();
      ClassUtil.throwIfIOE(sQLTransientConnectionException0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.emptyIterator();
      Class<SimpleModule> class2 = SimpleModule.class;
      ClassUtil.nameOf(class2);
      Short short0 = new Short((short) (-3778));
      ClassUtil.hasClass(short0, class0);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getConstructors(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getOuterClass(class1);
      Class<String> class2 = String.class;
      Class<Short> class3 = Short.class;
      JavaType javaType0 = null;
      Class<RuntimeException> class4 = RuntimeException.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class4, false);
      TypeBindings typeBindings0 = TypeBindings.create(class3, list0);
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      javaTypeArray0[3] = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class5 = HashMap.class;
      typeFactory0.constructRawMapType(class5);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class5, typeBindings0);
      // Undeclared exception!
      try { 
        CollectionType.construct((Class<?>) null, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.quotedOr(class0, "?d&Ga\"LO?.3RaM.y/d");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ClassUtil.nonNullString("elementType");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.hasClass(class0, class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ClassUtil.nonNullString("elementType");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      Byte byte0 = new Byte((byte)110);
      ClassUtil.classNameOf(byte0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientException0.spliterator();
      sQLTransientException0.getLocalizedMessage();
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLTransientException0);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.emptyIterator();
      ClassUtil.classNameOf(class0);
      ClassUtil.getConstructors(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.nameOf(class1);
      ClassUtil.throwIfError(throwable0);
      ClassUtil.isJacksonStdImpl((Object) sQLTransientException0);
      Class<Short> class2 = Short.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getConstructors(class0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.classNameOf(class0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findClassAnnotations(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.nameOf(class2);
      Class<Float> class3 = Float.TYPE;
      ClassUtil.hasClass((Object) null, class3);
      Class<RuntimeException> class4 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class4, true);
      constructor0.getDeclaredAnnotations();
      ClassUtil.backticked("`com.fasterxml.jackson.databind.type.CollectionLikeType`");
      Class<CollectionLikeType> class5 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class5, true);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ClassUtil.nonNullString("elementType");
      Class<NoClass> class0 = NoClass.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig0.keyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Float float0 = new Float(0.0F);
      defaultDeserializationContext_Impl0.weirdNumberException(float0, class0, "Gj$QH7,#&uzl26Z|");
      ClassUtil.getClassDescription((Object) null);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isBogusClass(class1);
      Class<Object> class2 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotatedReturnType();
      constructor0.getDeclaredAnnotation(class1);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getParameterAnnotations();
      constructor0.getDeclaredAnnotationsByType(class2);
      constructor0.getParameterTypes();
      constructor0.toGenericString();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getDeclaredAnnotationsByType(class2);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.toGenericString();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getConstructor();
      ClassUtil.getClassDescription(class0);
      ClassUtil.isBogusClass(class0);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.PlaceholderForType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      constructor0.toGenericString();
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      constructor0.newInstance(annotationArray0);
      constructor0.getAnnotations();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-856));
      ClassUtil.isJacksonStdImpl((Object) constructor0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", "public java.lang.Object()", (-856));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("public java.lang.Object()", "n?6pav>x4Su", sQLFeatureNotSupportedException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientConnectionException0, " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isLocalType(class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[4];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      accessibleObjectArray0[1] = (AccessibleObject) constructor0;
      accessibleObjectArray0[2] = (AccessibleObject) constructor0;
      accessibleObjectArray0[3] = (AccessibleObject) constructor0;
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotation(class2);
      AccessibleObject.setAccessible(accessibleObjectArray0, true);
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      constructor0.newInstance(annotationArray0);
      ClassUtil.backticked((String) null);
      ClassUtil.isBogusClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Short> class0 = Short.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Float float0 = new Float(0.6F);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class0, "primitive");
      ClassUtil.findSuperClasses(class0, class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize value of type `java.lang.Short` from number 0.6: primitive
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      constructor0.toGenericString();
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.newInstance(annotationArray0);
      constructor0.getAnnotations();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "public java.lang.Object()");
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1941);
      ClassUtil.nonNull((PlaceholderForType) null, placeholderForType0);
      PlaceholderForType placeholderForType1 = new PlaceholderForType((-1612));
      placeholderForType1.toString();
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataException0.getSuppressed();
      SQLException sQLException0 = new SQLException("Cannot access ", sQLDataException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Cannot access ", "=yVLnY", sQLException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ClassUtil.throwRootCauseIfIOE(sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0, "com.fasterxml.jackson.core.io.UTF8Writer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.core.io.UTF8Writer
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Double> class0 = Double.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-856));
      PlaceholderForType placeholderForType1 = new PlaceholderForType((-1));
      placeholderForType1.isReferenceType();
      PlaceholderForType placeholderForType2 = ClassUtil.nonNull((PlaceholderForType) null, placeholderForType0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getGenericSuperclass(class0);
      // Undeclared exception!
      try { 
        placeholderForType2.withContentType((JavaType) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isLocalType(class0, false);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      RuntimeException runtimeException0 = constructor0.newInstance(annotationArray0);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findSuperClasses(class3, class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) runtimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<String> class1 = String.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType", 1600);
      ClassUtil.throwIfRTE(sQLException0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class2, false);
      System.setCurrentTimeMillis(1600);
      Class<String> class3 = String.class;
      ClassUtil.isJacksonStdImpl(class3);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dgU2G'I%[p!jn&yMcC");
      Class<Integer> class0 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<mKvdva=1OsksEU~w");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotatedReturnType();
      constructor0.getDeclaredAnnotation(class1);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getParameterAnnotations();
      constructor0.getDeclaredAnnotationsByType(class2);
      constructor0.getParameterTypes();
      constructor0.toGenericString();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getDeclaredAnnotationsByType(class2);
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.toGenericString();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getConstructor();
      ClassUtil.nameOf((Named) null);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.getOuterClass(class3);
      ClassUtil.classOf(class2);
      SQLException sQLException0 = new SQLException("yr&`", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findClassAnnotations(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<String> class2 = String.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassUtil.isObjectOrPrimitive(class2);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      ClassUtil.throwIfIOE(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findClassAnnotations(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Float float0 = new Float(0.6F);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class0, "primitive");
      ClassUtil.getClassDescription(jsonMappingException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<RuntimeException> class1 = RuntimeException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      ClassUtil.nameOf(class0);
      AccessibleObject.setAccessible((AccessibleObject[]) methodArray0, false);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findConstructor(class2, true);
      Class<Object> class3 = Object.class;
      Class<String> class4 = String.class;
      ClassUtil.findRawSuperTypes(class3, class4, true);
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class5);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<Error> class2 = Error.class;
      ClassUtil.nameOf(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotatedReturnType();
      constructor0.getDeclaredAnnotation(class1);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getParameterAnnotations();
      constructor0.getDeclaredAnnotationsByType(class2);
      constructor0.getParameterTypes();
      constructor0.toGenericString();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getDeclaredAnnotationsByType(class2);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.toGenericString();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor1.getParameterAnnotations();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("public java.lang.Object()", "public java.lang.Object()");
      SQLException sQLException0 = new SQLException("\"%s\"", sQLFeatureNotSupportedException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("~0", ">xO;c@04-s", sQLFeatureNotSupportedException0);
      ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ClassUtil.nonNullString("elementType");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nonNullString("elementType");
      ClassUtil.hasClass(class0, class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      RuntimeException runtimeException0 = constructor0.newInstance(annotationArray0);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findSuperClasses(class0, class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) runtimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getEnclosingClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.classOf((Object) null);
      Class<Character> class3 = Character.TYPE;
      ClassUtil.nameOf(class3);
      ClassUtil.quotedOr(class1, "com.fasterxml.jackso");
      Class<RuntimeException> class4 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.findSuperTypes(class1, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Class<NoClass> class2 = NoClass.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class2, "i2+,JdiHp*U;TfV^");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.annotation.NoClass` from number 1: i2+,JdiHp*U;TfV^
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<String> class0 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition", "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.String` from String \"com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition\": com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y,R=tQ6,:?R");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append('(');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1568), objectMapper1, printStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(12, 0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "y,R=tQ6,:?R");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockPrintStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // y,R=tQ6,:?R
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "local/anonymous");
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.nameOf(class1);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, "local/anonymous", "kgJ5s[jBev");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.String (of class java.lang.RuntimeException) must override method 'kgJ5s[jBev'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findClassAnnotations(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Float float0 = new Float(0.6F);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class0, "primitive");
      ClassUtil.getClassDescription(jsonMappingException0);
      ClassUtil.isBogusClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      ClassUtil.nameOf(class0);
      AccessibleObject.setAccessible((AccessibleObject[]) methodArray0, false);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getParameterCount();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParamCount();
      Short short0 = Short.valueOf((short)240);
      ClassUtil.classNameOf(short0);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ClassUtil.backticked("elementType");
      Class<Double> class0 = Double.class;
      ClassUtil.canBeABeanType(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      constructor0.newInstance(annotationArray0);
      ClassUtil.findSuperClasses(class0, class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotatedReturnType();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotation(class2);
      constructor0.getParameterAnnotations();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class3);
      constructor0.getParameterTypes();
      constructor0.toGenericString();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class4 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class4);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getDeclaredAnnotations();
      constructor0.toGenericString();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.nameOf((Named) null);
      ClassUtil.getOuterClass(class3);
      ClassUtil.classOf(class1);
      ClassUtil.canBeABeanType(class4);
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.quotedOr(constructor1, "Ky>+ucF^j");
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "N2!4z1eYZ jqKTNaL[X";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "N2!4z1eYZ jqKTNaL[X");
      ClassUtil.getGenericInterfaces(class0);
      Class<?> class1 = ClassUtil.classOf(class0);
      ClassUtil.isNonStaticInnerClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getPackageName(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<NoClass> class2 = NoClass.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class2);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "HH", arrayType0);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.findSuperClasses(class1, class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findClassAnnotations(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Float float0 = new Float(0.6F);
      String string0 = "primitive";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class0, "primitive");
      ClassUtil.getClassDescription(jsonMappingException0);
      ClassUtil.isBogusClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.nameOf(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, true);
      jsonMappingException0.toString();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Error> class1 = Error.class;
      boolean boolean0 = false;
      ClassUtil.createInstance(class1, false);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.hasClass(class0, class2);
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.nonNullString("ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Double double0 = new Double((-2849.0114852423653));
      ClassUtil.nullOrToString(double0);
      JavaType javaType0 = null;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(152);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class0, (JavaType) null, (JavaType) placeholderForType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.reflect.AccessibleObject with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getEnclosingClass(class1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("entrySet", "Cannot access ");
      SQLException sQLException0 = new SQLException("Cannot access ", sQLFeatureNotSupportedException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Cannot access ", "@dHV#~/5", sQLException0);
      ClassUtil.throwRootCauseIfIOE(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = true;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      constructor0.newInstance(annotationArray0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getOuterClass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.quotedOr(class0, "_E^T$Ts");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.canBeABeanType(class0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      constructor0.toGenericString();
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.newInstance(annotationArray0);
      constructor0.getAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-856));
      placeholderForType0.isReferenceType();
      PlaceholderForType placeholderForType1 = ClassUtil.nonNull(placeholderForType0, placeholderForType0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getGenericSuperclass(class2);
      // Undeclared exception!
      try { 
        placeholderForType0.withContentType(placeholderForType1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isLocalType(class1, false);
      String string0 = "USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING", (String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        sQLFeatureNotSupportedException0.initCause(sQLTransientConnectionException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLTransientConnectionException: USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotatedReturnType();
      constructor0.getDeclaredAnnotation(class1);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getParameterAnnotations();
      constructor0.getDeclaredAnnotationsByType(class2);
      constructor0.getParameterTypes();
      constructor0.toGenericString();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class3);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.toGenericString();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.nameOf((Named) null);
      Class<CollectionType> class4 = CollectionType.class;
      ClassUtil.getOuterClass(class4);
      ClassUtil.classOf(class2);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.nameOf(class0);
      ClassUtil.quotedOr(class4, "FWVW{t7v");
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ClassUtil.nonNullString("elementType");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nonNullString("elementType");
      ClassUtil.hasClass(class0, class0);
      Class<Double> class1 = Double.class;
      ClassUtil.canBeABeanType(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<IOException> class1 = IOException.class;
      String string0 = "\\6d7H3!1r/_<";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class1, "\u0006d7H3!1r/_<");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.io.IOException) must override method '\u0006d7H3!1r/_<'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Object object0 = null;
      ClassUtil.quotedOr((Object) null, "R.!y{;[NR");
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<NoClass> class1 = NoClass.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte byte0 = (byte)0;
      Byte byte1 = Byte.valueOf((byte)0);
      ClassUtil.quotedOr(byte1, "");
      Class<Double> class0 = Double.class;
      ClassUtil.canBeABeanType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, "\"0\"", "|x'u{oqI`>k");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.String (of class java.lang.RuntimeException) must override method '|x'u{oqI`>k'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findEnumType(class0);
      Class<NoClass> class1 = NoClass.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAdditionalKeyDeserializers((KeyDeserializers) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null KeyDeserializers
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<String> class2 = String.class;
      ClassUtil.isObjectOrPrimitive(class2);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      String string0 = "vals";
      String string1 = "R8&4p";
      String string2 = "";
      SQLException sQLException0 = new SQLException("", "", (-953));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLException0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sQLException0.forEach((Consumer<? super Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      Class<MapType> class0 = MapType.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findClassAnnotations(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ClassUtil.throwIfError(sQLTimeoutException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Double double0 = new Double(1486.7080086787);
      Class<NoClass> class1 = NoClass.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(double0, class1, "vals");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.annotation.NoClass` from number 1486.7080086787: vals
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isLocalType(class0, false);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLException sQLException0 = new SQLException((String) null, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", 0, sQLDataException0);
      String string0 = null;
      String string1 = "Numeric value (%s) out of range of long (%d - %s)";
      URI uRI0 = MockURI.URI((String) null, "", (String) null, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "Numeric value (%s) out of range of long (%d - %s)");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isProxyType(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Float float0 = new Float(0.0);
      ClassUtil.getClassDescription(float0);
      Class<Error> class2 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class2, false);
      constructor0.getAnnotatedParameterTypes();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotation(class3);
      constructor0.getGenericParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getAnnotatedExceptionTypes();
      ClassUtil.getGenericSuperclass(class0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.getConstructors(class4);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class5 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class5);
      Class<NoClass> class6 = NoClass.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class6, (JavaType) mapLikeType0);
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Double double0 = new Double((-9.223372036854776E18));
      ArrayType arrayType1 = ArrayType.construct((JavaType) mapLikeType0, typeBindings0, (Object) arrayType0, (Object) double0);
      ArrayType arrayType2 = arrayType1.withTypeHandler(class1);
      ClassUtil.classOf(arrayType2);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = true;
      ClassUtil.isLocalType(class0, true);
      Class<Long> class1 = Long.class;
      ClassUtil.isNonStaticInnerClass(class1);
      JsonGenerator jsonGenerator0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Cannot figure out type for EnumSet (odd JDK platform?)", (String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("Cannot figure out type for EnumSet (odd JDK platform?)", "Failed to find default constructor of class ", 1033, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException1.getStackTrace();
      sQLNonTransientConnectionException1.setNextException(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        sQLNonTransientConnectionException1.initCause(sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLNonTransientConnectionException: Cannot figure out type for EnumSet (odd JDK platform?)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findEnumType(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.hasClass(class0, class1);
      Class<Void> class2 = Void.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.isObjectOrPrimitive(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(" ($}vr.|_p");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "zbj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zbj
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.nullOrToString(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("java.lang.Class@0000000003");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("keyType", "java.lang.Class@0000000003", sQLInvalidAuthorizationSpecException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0, "java.lang.Class@0000000003");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.Class@0000000003
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
