/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 05:15:01 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.KeyDeserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.util.Comparator;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassUtil.nonNullString("'f(ju");
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.classOf(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.isProxyType(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory0.configure(jsonFactory_Feature0, false);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JSON", "java.text.SimpleDat");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"java.text.SimpleDat\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2, (DefaultSerializerProvider) null, defaultDeserializationContext0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonParser_FeatureArray0);
      objectMapper2.readerForUpdating(jsonParser_Feature1);
      Class<Short> class0 = Short.class;
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0);
      Comparator<Module> comparator0 = (Comparator<Module>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      TreeSet<Module> treeSet0 = new TreeSet<Module>(comparator0);
      ObjectMapper objectMapper3 = objectMapper2.registerModules((Iterable<? extends Module>) treeSet0);
      objectMapper3.readerFor(class0);
      objectMapper1.readerForUpdating(accessPattern0);
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      objectMapper0.readerFor(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Module>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassUtil.isConcrete(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.rawClass(simpleType0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getConstructors(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.nullOrToString(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Float> class1 = Float.class;
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Float> class2 = Float.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaTypeArray0);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      TypeBindings typeBindings1 = arrayType0.getBindings();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings1, (JavaType) arrayType0, javaTypeArray0, javaTypeArray0[1]);
      JavaType javaType1 = referenceType0.getAnchorType();
      ClassUtil.findSuperTypes(javaType1, class0, false);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(class0);
      ReferenceType referenceType2 = referenceType1.withTypeHandler(referenceType0);
      Class<CollectionType> class1 = CollectionType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(referenceType2, class1);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.type.ReferenceType`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findSuperTypes(class1, class1, list0);
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperClasses(class2, class2, false);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      EnumSet.of(accessPattern0, accessPattern0, accessPattern1, accessPattern0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.hasClass("3`Xc|tpaV;nW!vgEYV", class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Float> enumMap0 = new EnumMap<AccessPattern, Float>(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.getDeclaredFields(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.nameOf(class1);
      ClassUtil.getConstructors(class0);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.backticked(",47169");
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class2, class1, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float0 = new Float((-1.0));
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)69;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1743199137), objectMapper2, pipedOutputStream0, byteArray0, (-3952), true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(3011);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("unknown", "p?`%Isug~7xq\"B4Z(*u", (-629636399), (Map<String, ClientInfoStatus>) null);
      MockIOException mockIOException0 = new MockIOException("unknown", sQLClientInfoException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Error error0 = ClassUtil.createInstance(class0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory2.createGenerator((Writer) charArrayWriter0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, true, true);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "Qa9A", error0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.emptyIterator();
      Class<NoClass> class1 = NoClass.class;
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getGenericInterfaces(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      Float float0 = new Float(1398.336F);
      ObjectReader objectReader2 = objectReader1.withoutAttribute(float0);
      TypeFactory typeFactory0 = objectReader2.getTypeFactory();
      Class<HashMap> class2 = HashMap.class;
      Class<AccessPattern> class3 = AccessPattern.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class3, class3);
      MapLikeType mapLikeType0 = mapType0.withTypeHandler(jsonFactory0);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class3, false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<POJONode> class0 = POJONode.class;
      ClassUtil.getPackageName(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1536);
      JsonLocation jsonLocation0 = new JsonLocation(byteArrayBuilder0, 1646L, (-2164), 0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "com.fasterxml.jackson.databind.node", jsonLocation0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLTransactionRollbackException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      SQLDataException sQLDataException0 = new SQLDataException("org.hibernate.proxy.java.lang.Float", " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) dataOutputStream0, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException: org.hibernate.proxy.java.lang.Float
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, true);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isCollectionMapOrArray(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      ClassUtil.quotedOr(placeholderForType0, (String) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isProxyType(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class2, class0);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(class0);
      Object object0 = ClassUtil.defaultValue(class0);
      collectionType1.withValueHandler(object0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("annotation");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("annotation", "net.sf.cglib.proxy.java.lang.annotation.Annotation", 90, sQLDataException0);
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      Class<Error> class0 = Error.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<SimpleModule> class1 = SimpleModule.class;
      ClassUtil.findSuperTypes(class1, class0);
      Class<InputStream> class2 = InputStream.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Hg.xvJEF)oGs;=");
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class1);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      enumSet0.add(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getConstructors(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, (OutputStream) null, byteArray0, 1, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      Exception exception0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1164));
      coreXMLDeserializers_Std0.getEmptyAccessPattern();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      MapType mapType1 = mapType0.withKeyValueHandler(typeFactory0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType1, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      ClassUtil.nameOf((Named) beanProperty_Std0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("U1H`", "U1H`", (-400));
      sQLInvalidAuthorizationSpecException0.spliterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Je_4S|m(O", sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLNonTransientException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "Uup");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.hasClass(class0, class1);
      MockError mockError0 = new MockError("%F\"^7Tn,N");
      mockError0.fillInStackTrace();
      Class<String> class2 = String.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, (-2651));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.classOf(accessPattern0);
      Class<Double> class3 = Double.class;
      Class<Object> class4 = Object.class;
      ClassUtil.findRawSuperTypes(class3, class4, false);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findClassAnnotations(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B (zRKEiU$fk_l");
      MockError mockError0 = new MockError();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(432);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockError0, (Object) placeholderForType0, 432);
      MockError mockError1 = new MockError((String) null, jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError1, "VALUE_TRUE");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Void> class0 = Void.TYPE;
      ClassUtil.primitiveType(class0);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<CreatorProperty> class0 = CreatorProperty.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<SimpleModule> class1 = SimpleModule.class;
      Class<AccessibleObject> class2 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class1, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isLocalType(class1, false);
      Boolean boolean0 = new Boolean(false);
      Class<Void> class2 = Void.TYPE;
      ClassUtil.isBogusClass(class2);
      ClassUtil.getDeclaredMethods(class2);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("}2u5FAbRv\"C~>`", "'&-}}Gx1RqP");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // }2u5FAbRv\"C~>`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findClassAnnotations(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ClassUtil.nonNullString("primitive");
      Class<IOException> class1 = IOException.class;
      Class<Character> class2 = Character.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.getDeclaredMethods(class1);
      Class<MapType> class3 = MapType.class;
      ClassUtil.findSuperClasses(class0, class3, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-4076));
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(placeholderForType0, "");
      jsonMappingException0.clearLocation();
      int[] intArray0 = new int[1];
      intArray0[0] = (-4076);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "primitive", 2, intArray0, jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of $-4075: 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Short> class1 = Short.TYPE;
      ClassUtil.findSuperTypes(class0, class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TimeZone timeZone0 = TimeZone.getTimeZone("_5V,UliDN(s");
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, false);
      MockFile mockFile0 = new MockFile("_5V,UliDN(s");
      MockFile mockFile1 = new MockFile(mockFile0, "_5V,UliDN(s");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append('h');
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1158), objectMapper2, printStream0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class2 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class2, "JSON", "WEAK_MATCH");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.String` from String \"JSON\": WEAK_MATCH
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Short> class0 = Short.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      MapType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[3]);
      simpleType0.withStaticTyping();
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperTypes(javaTypeArray0[5], class2, false);
      Short short0 = new Short((short)24617);
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, false);
      Class<Error> class1 = Error.class;
      Error error0 = ClassUtil.createInstance(class1, true);
      Class<Object> class2 = Object.class;
      ClassUtil.isObjectOrPrimitive(class2);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) error0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}ZSWCt3?icSx+vK(D`");
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassUtil.nullOrToString("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Vy#>CytMDd'(xH");
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-4341));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("annotation");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("E 0x9xu$$jCVLYZz6x", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, (Object) null, "K+k<1cG~)|I0sy%%'E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, " is not a primitive type");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Float> enumMap0 = new EnumMap<AccessPattern, Float>(class0);
      EnumMap<AccessPattern, Float> enumMap1 = enumMap0.clone();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float(165.0);
      enumMap1.put(accessPattern0, float0);
      EnumMap<AccessPattern, Float> enumMap2 = new EnumMap<AccessPattern, Float>(enumMap1);
      ClassUtil.findEnumType(enumMap1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      String string0 = ")]";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")]");
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.instantiationException((Class<?>) null, "vHR=");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of [null]: vHR=
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.canBeABeanType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Double> class2 = Double.TYPE;
      ClassUtil.wrapperType(class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("VEON}?mSozl[");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(122, 850);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "net.sf.cglib.proxy.java.lang.Long");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0, "org.hibernate.proxy.java.lang.Error");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.hibernate.proxy.java.lang.Error
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<?> class1 = ClassUtil.classOf(classUtil_Ctor0);
      ClassUtil.verifyMustOverride(class1, classUtil_Ctor0, (String) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      System.setCurrentTimeMillis(1124L);
      Class<Long> class0 = Long.class;
      ClassUtil.findClassAnnotations(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockException mockException0 = new MockException();
      mockException0.getMessage();
      mockRuntimeException0.getLocalizedMessage();
      mockRuntimeException0.initCause(mockException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "java.lang.Float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassUtil.classNameOf((Object) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getClassMethods(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("xxC+{GW", "[Up", (Throwable) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLNonTransientConnectionException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Failed to find default constructor of class ", batchUpdateException0);
      MockError mockError0 = new MockError("XN ", sQLIntegrityConstraintViolationException0);
      ClassUtil.isJacksonStdImpl((Object) mockError0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(243);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: Failed to find default constructor of class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      Class<Module> class2 = Module.class;
      ClassUtil.isObjectOrPrimitive(class2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-4341));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.nullOrToString(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ReferenceType> class2 = ReferenceType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class2);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withContentValueHandler(collectionLikeType0);
      Class<JsonDeserializer> class3 = JsonDeserializer.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType2, (Class<?>) class3, false);
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.nonNull((PlaceholderForType) null, (PlaceholderForType) null);
      AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      TypeFactory.defaultInstance();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(128);
      ClassUtil.rawClass(placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
      MockIOException mockIOException0 = new MockIOException();
      ClassUtil.getClassDescription(class0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(mockIOException0);
      sQLNonTransientConnectionException0.getStackTrace();
      mockIOException0.initCause(sQLNonTransientConnectionException0);
      mockIOException0.getStackTrace();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<Object> class1 = Object.class;
      ClassUtil.hasClass(class1, class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, Float> enumMap0 = new EnumMap<AccessPattern, Float>(class2);
      EnumMap<AccessPattern, Float> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, Float> enumMap2 = new EnumMap<AccessPattern, Float>(enumMap1);
      ClassUtil.findEnumType(enumMap2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isJacksonStdImpl((Object) class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockDateFormat.getDateTimeInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class2 = Object.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class2);
      collectionLikeType0.withStaticTyping();
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentValueHandler(class0);
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType1, (Class<?>) class3, false);
      Class<NoClass> class4 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException("Q(/}?-\"xNsDr]dYes^ ");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Q(/}?-\"xNsDr]dYes^ 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Throwable throwable0 = null;
      ClassUtil.throwIfError((Throwable) null);
      Class<Error> class0 = Error.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes(class0, class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getDeclaredAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Byte> class2 = Byte.class;
      ClassUtil.nameOf(class2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-4341));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.nullOrToString(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ReferenceType> class2 = ReferenceType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class2);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withContentValueHandler(collectionLikeType0);
      Class<JsonDeserializer> class3 = JsonDeserializer.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType2, (Class<?>) class3, false);
      Class<RuntimeException> class4 = RuntimeException.class;
      Class<Character> class5 = Character.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class4, class5, true);
      ClassUtil.findSuperTypes(class5, class1, list0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-4341));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.nullOrToString(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ReferenceType> class2 = ReferenceType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class2);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withContentValueHandler(collectionLikeType0);
      Class<JsonDeserializer> class3 = JsonDeserializer.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType2, (Class<?>) class3, false);
      Class<RuntimeException> class4 = RuntimeException.class;
      Class<Character> class5 = Character.class;
      ClassUtil.findRawSuperTypes(class4, class5, true);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.hasClass(class0, class1);
      MockError mockError0 = new MockError("%F\"^7Tn,N");
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Double> class1 = Double.class;
      ClassUtil.hasClass(class0, class1);
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, true);
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.class;
      ClassUtil.isLocalType(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getConstructors(class0);
      MockIOException mockIOException0 = new MockIOException((String) null);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.quotedOr((Object) null, (String) null);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.nonNullString("|(_L0tzlYj2Lg,?TZea");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-987));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.nullOrToString((Object) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Cannot figure out type for EnumMap (odd JDK platform?)");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isBogusClass(class0);
      ClassUtil.getClassDescription(class0);
      MockIOException mockIOException0 = new MockIOException("`java.lang.Double`");
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getClassMethods(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Double> class0 = Double.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "java.lang.String", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      AnnotatedField annotatedField1 = annotatedField0.withAnnotations(annotationMap0);
      annotatedField1.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1615));
      Class<Module> class1 = Module.class;
      Constructor<Module> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0);
      dataTruncation0.getDataSize();
      ClassUtil.throwRootCauseIfIOE(dataTruncation0);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      Class<MapLikeType> class2 = MapLikeType.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("");
      SQLTransientException sQLTransientException0 = new SQLTransientException("a2V/wlkS|H&[", "a2V/wlkS|H&[", 1536, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getClassMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      Class<AccessPattern> class0 = AccessPattern.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-784));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<Float> class1 = Float.TYPE;
      ClassUtil.wrapperType(class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-6141L));
      Class<Long> class2 = Long.TYPE;
      Class<SettableBeanProperty> class3 = SettableBeanProperty.class;
      ClassUtil.findEnumType(class3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("NZB4KMu", "Class %s not subtype of %s", sQLClientInfoException0);
      Throwable throwable0 = sQLClientInfoException0.initCause(sQLTransientException0);
      sQLClientInfoException0.setNextException(sQLTransientException0);
      sQLClientInfoException0.getFailedProperties();
      File file0 = MockFile.createTempFile("Class %s not subtype of %s", "NZB4KMu");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) throwable0;
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) sQLClientInfoException0;
      PrintStream printStream0 = mockPrintStream1.printf(locale0, "Class %s not subtype of %s", objectArray0);
      sQLClientInfoException0.printStackTrace(printStream0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getDeclaringClass(class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.util.ClassUtil");
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
      ClassUtil.getClassDescription(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getPackageName(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4);
      // Undeclared exception!
      try { 
        placeholderForType0.withTypeHandler("com.fasterxml.jackson.databind.type");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(" dpx", "EDFV!");
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
      ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Error error0 = ClassUtil.createInstance(class0, false);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getRootCause(error0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) error0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<String> class0 = String.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.backticked("h?N|.ef AKHAtq`B{lE");
      Class<Long> class1 = Long.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.primitiveType(class1);
      Class<JsonDeserializer> class2 = JsonDeserializer.class;
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.canBeABeanType(class1);
      Class<Byte> class3 = Byte.class;
      ClassUtil.isNonStaticInnerClass(class3);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      int int0 = (-1601);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1601));
      coreXMLDeserializers_Std0.getEmptyAccessPattern();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isProxyType(class0);
      Class<NoClass> class1 = NoClass.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.isConcrete(class1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Default constructor for ", (String) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Short short0 = new Short((short)758);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(short0, class2, (String) null);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from number 758: null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.emptyIterator();
      ClassUtil.isBogusClass(class0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "@X,1\"D] Q'{sXVs%");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<POJONode> class0 = POJONode.class;
      ClassUtil.isProxyType(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findEnumType(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isConcrete(class2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "Default constructor for ");
      ClassUtil.throwIfIOE(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isLocalType(class1, false);
      Boolean boolean0 = new Boolean(false);
      Class<Void> class2 = Void.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.getDeclaredMethods(class2);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("}2u5FAbRv\"C~>`", "'&-}}Gx1RqP");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // }2u5FAbRv\"C~>`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isLocalType(class0, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(239);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLNonTransientConnectionException0);
      ClassUtil.getRootCause(mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.getStackTrace();
      ClassUtil.getClassDescription(class1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      boolean boolean0 = false;
      ClassUtil.findSuperClasses(class0, class0, false);
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findConstructor(class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassUtil.backticked("eleHmentType");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nonNullString("eleHmentType");
      ClassUtil.hasClass(class0, class0);
      ClassUtil.nullOrToString("eleHmentType");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("~HWv AfQe");
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("eleHmentType", "#2|O;", sQLInvalidAuthorizationSpecException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ClassUtil.nonNullString("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType");
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      Class<ArrayType> class0 = ArrayType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      AccessibleObject.setAccessible((AccessibleObject[]) methodArray0, false);
      Class<Object> class1 = Object.class;
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Error error0 = ClassUtil.createInstance(class0, false);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getRootCause(error0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Annotation> class2 = Annotation.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.emptyIterator();
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Map<String, ClientInfoStatus> map0 = new HashMap<String, ClientInfoStatus>();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getDeclaredMethods(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float0 = new Float((-1217.9927F));
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls1);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot figure out type for EnumMap (odd JDK platform?)");
      byteArray0[2] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4, objectMapper1, pipedOutputStream0, byteArray0, 2, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((-2580));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MapLikeType> class0 = MapLikeType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1688));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<JsonDeserializer> class1 = JsonDeserializer.class;
      ClassUtil.isProxyType(class1);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull((NoClass) null, noClass0);
      Class<Long> class2 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ClassUtil.nonNullString("-fM=bf");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.hasEnclosingMethod(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.getClassMethods(class2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.nullOrToString(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClassUtil.nonNullString("elementType");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nonNullString("elementType");
      ClassUtil.hasClass(class0, class0);
      ClassUtil.nullOrToString("elementType");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("~HWv AfQe");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("elementType", "#2|O;", sQLInvalidAuthorizationSpecException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isLocalType(class1, false);
      Boolean boolean0 = new Boolean(false);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, false);
      Object[] objectArray0 = new Object[0];
      constructor0.newInstance(objectArray0);
      constructor0.getAnnotations();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      placeholderForType0.isReferenceType();
      PlaceholderForType placeholderForType1 = ClassUtil.nonNull(placeholderForType0, placeholderForType0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class2, (String) null, placeholderForType0);
      virtualAnnotatedMember0.getAnnotated();
      ClassUtil.isConcrete((Member) constructor0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      sQLFeatureNotSupportedException0.setNextException(sQLSyntaxErrorException0);
      ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
      ClassUtil.findSuperTypes((JavaType) placeholderForType1, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isProxyType(class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ClassUtil.throwIfError(batchUpdateException0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) null, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(referenceType0, referenceType0);
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      ReferenceType referenceType3 = referenceType2.withValueHandler((Object) null);
      Character character0 = new Character('^');
      referenceType3.withValueHandler(character0);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperTypes(javaType0, class1, false);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaringClass(class0);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[0];
      AccessibleObject.setAccessible(accessibleObjectArray0, false);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isProxyType(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isProxyType(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.classOf((Object) null);
      ClassUtil.classNameOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isProxyType(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.isConcrete(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 8);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, true);
      constructor0.newInstance((Object[]) null);
      constructor0.getAnnotations();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(8);
      placeholderForType0.isReferenceType();
      PlaceholderForType placeholderForType1 = new PlaceholderForType(8);
      ClassUtil.nonNull(placeholderForType1, placeholderForType0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      String string0 = "net.sf.cglib.proxy.java.lang.Double";
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "net.sf.cglib.proxy.java.lang.Double", placeholderForType1);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isBogusClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 8);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      defaultDeserializationContext_Impl0.weirdStringException("", class0, "!p^+f");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      charArray0[1] = '@';
      charArray0[2] = 'F';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, (String) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //  at [Source: (char[])\"M@F\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 8);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.isProxyType(class0);
      ClassUtil.backticked((String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[null]");
      MockException mockException0 = new MockException(sQLTimeoutException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockException0);
      mockRuntimeException0.getCause();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      constructor0.toGenericString();
      Boolean boolean0 = new Boolean(false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.newInstance(annotationArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("public java.lang.Object()", (Map<String, ClientInfoStatus>) null, (Throwable) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("h", (Map<String, ClientInfoStatus>) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLClientInfoException2);
      sQLFeatureNotSupportedException0.setNextException(sQLClientInfoException2);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findEnumType(class0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StackTraceElement stackTraceElement0 = new StackTraceElement("=", "C\"snT-", "=", 83);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(";g&FV\"lW)V", "C\"snT-");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      stackTraceElementArray0[4] = stackTraceElement0;
      stackTraceElementArray0[5] = stackTraceElement0;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      MockFile mockFile0 = new MockFile(";g&FV\"lW)V", ";g&FV\"lW)V");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) sQLFeatureNotSupportedException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: ;g&FV\"lW)V
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findClassAnnotations(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ClassUtil.nonNullString("primitive");
      Class<IOException> class1 = IOException.class;
      ClassUtil.isBogusClass(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.findSuperClasses(class3, class0, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2628));
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(placeholderForType0, "org.hibernate.proxy.java.lang.Object");
      jsonMappingException0.clearLocation();
      int[] intArray0 = new int[2];
      intArray0[0] = (-4076);
      ClassUtil.nullOrToString(placeholderForType0);
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Constructor<Object> constructor1 = ClassUtil.findConstructor(class0, false);
      Annotation[] annotationArray0 = constructor1.getAnnotations();
      constructor0.toGenericString();
      Boolean boolean0 = new Boolean(false);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      constructor1.newInstance(annotationArray0);
      constructor0.getAnnotations();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-856));
      placeholderForType0.isReferenceType();
      ClassUtil.nonNull(placeholderForType0, placeholderForType0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "public java.lang.Object()", placeholderForType0);
      virtualAnnotatedMember0.getAnnotated();
      ClassUtil.isConcrete((Member) constructor1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("serialVersionUID");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("java.lang.Object");
      sQLFeatureNotSupportedException0.setNextException(sQLSyntaxErrorException0);
      ClassUtil.throwIfError(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nonNullString("BM!]I/B{#/Ap=c3");
      ClassUtil.hasClass((Object) null, class0);
      SQLException sQLException0 = new SQLException("BM!]I/B{#/Ap=c3", "BM!]I/B{#/Ap=c3");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("BM!]I/B{#/Ap=c3", sQLException0);
      ClassUtil.nameOf((Class<?>) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.canBeABeanType(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.nameOf(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      ClassUtil.quotedOr((Object) null, "[null]");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.hibernate.proxy.", sQLInvalidAuthorizationSpecException0);
      ClassUtil.throwIfRTE(jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0, " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.nonNullString("HKZ4");
      ClassUtil.backticked("HKZ4");
      Class<Object> class1 = Object.class;
      ClassUtil.createInstance(class1, true);
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<Integer> class3 = Integer.class;
      ClassUtil.findSuperTypes(class2, class3);
      ClassUtil.getClassDescription("com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base");
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.nonNullString("`java.lang.String`");
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.getDeclaredFields(class4);
      Class<NoClass> class5 = NoClass.class;
      ClassUtil.hasEnclosingMethod(class5);
      Class<MapType> class6 = MapType.class;
      ClassUtil.getClassMethods(class6);
      ClassUtil.backticked("expected padding character '");
      ClassUtil.isProxyType(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      Class<ArrayType> class7 = ArrayType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class7);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(defaultSerializerProvider_Impl0);
      ReferenceType referenceType2 = referenceType1.withContentValueHandler(class6);
      JavaType javaType0 = referenceType2.getReferencedType();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypeSerializer(javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ClassUtil.nonNullString("elementType");
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.primitiveType(class0);
      ClassUtil.nonNullString("elementType");
      ClassUtil.hasClass(class0, class0);
      ClassUtil.nullOrToString("elementType");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("~HWv AfQe");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("elementType", "#2|O;", sQLInvalidAuthorizationSpecException0);
      ClassUtil.nameOf((Class<?>) null);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findClassAnnotations(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ClassUtil.nonNullString("primitive");
      ClassUtil.isBogusClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      int[] intArray0 = new int[6];
      intArray0[0] = (-4076);
      intArray0[1] = (-4076);
      intArray0[3] = (-4076);
      intArray0[4] = (-4076);
      intArray0[5] = (-4076);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(placeholderForType0, "DHK}m}&'L~");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("primitive", "DHK}m}&'L~", (-4076), intArray0, jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // primitive
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.nameOf((Named) null);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.classOf(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory.defaultInstance();
      ClassUtil.findSuperClasses(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ClassUtil.nonNullString("elementType");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nonNullString("elementType");
      ClassUtil.hasClass(class0, class0);
      ClassUtil.nullOrToString("elementType");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("~HWv AfQe");
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.nameOf(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "lW[^x{Z\"yVmc#+Y&/]");
      ClassUtil.quotedOr(jsonMappingException0, "`java.lang.Boolean`");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("\"com.fasterxml.jackson.databind.JsonMappingException: lW[^x{Z\"yVmc#+Y&/]\"", jsonMappingException0);
      ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.getDeclaredFields(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Cannot figure out type for EnumMap (odd JDK platform?)", "Cannot access ");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("R", "=vTv/Go#{-{hd3|c", "oh,WQh;R>z\u0004b^:", (-1074));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Should not be called on this type", "com.fasterxml.jackso", "&h-@", (-1));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("=vTv/Go#{-{hd3|c", "keyUniverse", "=vTv/Go#{-{hd3|c", (-402));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("size", "Should not be called on this type", ";g&FV\"lW)V", (-402));
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isProxyType(class2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      SQLDataException sQLDataException0 = new SQLDataException("Y#[I]", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "entrySet");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // entrySet
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ClassUtil.nonNullString("elementType");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nonNullString("elementType");
      ClassUtil.hasClass(class0, class0);
      ClassUtil.nullOrToString("elementType");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("~HWv AfQe");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("elementType", "#2|O;", sQLInvalidAuthorizationSpecException0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // elementType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getDeclaredFields(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isJacksonStdImpl((Object) class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      objectMapper0.setDateFormat(dateFormat0);
      MockFile mockFile0 = new MockFile("@r @x*z%?UI");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "@r @x*z%?UI", 1536);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<SimpleType> class1 = SimpleType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertNotNull(list0);
      
      Class<String> class2 = String.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class2);
      assertFalse(boolean0);
      
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ClassUtil.backticked("E>4dM&y\"");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      deserializerFactoryConfig0.valueInstantiators();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ClassUtil.emptyIterator();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getOuterClass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getConstructors(class1);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      Double double0 = new Double((-170.5710115));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getDeclaringClass(class1);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[0];
      AccessibleObject.setAccessible(accessibleObjectArray0, false);
      Long long0 = new Long((-2100L));
      ClassUtil.classNameOf(long0);
      ClassUtil.getOuterClass(class1);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotatedReturnType();
      constructor0.getDeclaredAnnotation(class1);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getParameterAnnotations();
      constructor0.getDeclaredAnnotationsByType(class2);
      constructor0.getParameterTypes();
      constructor0.toGenericString();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class3);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.toGenericString();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getConstructor();
      ClassUtil.nameOf((Named) null);
      Class<CollectionType> class4 = CollectionType.class;
      ClassUtil.getOuterClass(class4);
      ClassUtil.classOf(class2);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.nameOf(class0);
      Class<Double> class5 = Double.class;
      ClassUtil.findSuperClasses(class5, (Class<?>) null, false);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Class<Integer> class0 = Integer.class;
      ClassUtil.getPackageName(class0);
      Class<Integer> class1 = Integer.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ClassUtil.getEnclosingClass(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class2);
      ClassUtil.classOf((Object) null);
      ClassUtil.getOuterClass(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.getPackageName(class3);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("java.lang", "com.fasterxml.jackson.databind.ser.BeanSerializerModifier", (int[]) null);
      SQLWarning sQLWarning0 = new SQLWarning("nRmp2fs1H+~MH", "nRmp2fs1H+~MH");
      batchUpdateException0.initCause(sQLWarning0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(batchUpdateException0, "com.fasterxml.jackson.databind.util");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, jsonMappingException_Reference0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.databind.ser.BeanSerializerModifier", "com.fasterxml.jackson.databind.util", jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.ser.BeanSerializerModifier
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class0, true);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getOuterClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.canBeABeanType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Double> class2 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findEnumType(class0);
      Float float0 = new Float(0.0);
      ClassUtil.getClassDescription(float0);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotatedParameterTypes();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotation(class2);
      ClassUtil.nullOrToString(class1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("9o_");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("9o_", "target type", sQLInvalidAuthorizationSpecException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Boolean> class3 = Boolean.TYPE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class3, "=+");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `boolean` from number 0.0: =+
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ClassUtil.backticked("'f(ju");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Deserialization (of %s) with Builder, External type id, @JsonCreator not yet implemented");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes((Class<?>) null, class2);
      ClassUtil.canBeABeanType(class1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "K<v^Cp<");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) null, 1000);
      ClassUtil.isJacksonStdImpl((Object) jsonMappingException0);
      Class<Short> class3 = Short.class;
      ClassUtil.hasClass(list0, class3);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
      MockFile mockFile0 = new MockFile("@r @x~=*{%^UI");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, objectMapper1, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper1);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.sql.SQLTransientConnectionException) (through reference chain: UNKNOWN[1000])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("'f(ju");
      assertNotNull(string0);
      assertEquals("'f(ju", string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Deserialization (of %s) with Builder, External type id, @JsonCreator not yet implemented");
      assertFalse(boolean0);
      
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Byte> class2 = Byte.class;
      Class class3 = (Class)ClassUtil.getGenericSuperclass(class2);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isPrimitive());
      assertEquals(1025, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.lang.Number", class3.toString());
      assertFalse(class3.isAnnotation());
      assertNotNull(class3);
      
      Class<RuntimeException> class4 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes((Class<?>) null, class4);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string1 = ClassUtil.canBeABeanType(class2);
      assertNull(string1);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "K<v^Cp<");
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("K<v^Cp<", sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) null, 1000);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("K<v^Cp<", sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNotNull(jsonMappingException0);
      
      boolean boolean2 = ClassUtil.isJacksonStdImpl((Object) jsonMappingException0);
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("K<v^Cp<", sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)ClassUtil.throwIfError(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNull(sQLTimeoutException1.getMessage());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      assertNotNull(sQLTimeoutException1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      
      Double double0 = new Double(1486.7080086787);
      assertNotNull(double0);
      assertEquals(1486.7080086787, (double)double0, 0.01);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(52, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Long`", string0);
      
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<CollectionType> class1 = CollectionType.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      String string0 = null;
      String string1 = ClassUtil.nonNullString((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      Class<String> class3 = String.class;
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Error error0 = ClassUtil.createInstance(class0, false);
      assertEquals("java.lang.Error", error0.toString());
      assertNull(error0.getMessage());
      assertNotNull(error0);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      String string0 = "";
      String string1 = ClassUtil.nonNullString("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) error0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Called operation not supported for TokenBuffer");
      assertFalse(boolean0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "v$-I(H`$XSr");
      assertNotNull(jsonMappingException0);
      
      String string0 = jsonMappingException0.getOriginalMessage();
      assertNotNull(string0);
      assertEquals("v$-I(H`$XSr", string0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotNull(jsonMappingException1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("50jBNaZ?e8`", "50jBNaZ?e8`", 96, jsonMappingException0);
      assertEquals("java.sql.SQLTimeoutException: 50jBNaZ?e8`", sQLTimeoutException0.toString());
      assertEquals("50jBNaZ?e8`", sQLTimeoutException0.getSQLState());
      assertEquals("50jBNaZ?e8`", sQLTimeoutException0.getMessage());
      assertEquals(96, sQLTimeoutException0.getErrorCode());
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertNotNull(sQLTimeoutException0);
      
      sQLTimeoutException0.addSuppressed(jsonMappingException0);
      assertEquals("java.sql.SQLTimeoutException: 50jBNaZ?e8`", sQLTimeoutException0.toString());
      assertEquals("50jBNaZ?e8`", sQLTimeoutException0.getSQLState());
      assertEquals("50jBNaZ?e8`", sQLTimeoutException0.getMessage());
      assertEquals(96, sQLTimeoutException0.getErrorCode());
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("serialVersionUID");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: serialVersionUID", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("serialVersionUID", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      sQLTimeoutException0.setNextException(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLTimeoutException: 50jBNaZ?e8`", sQLTimeoutException0.toString());
      assertEquals("50jBNaZ?e8`", sQLTimeoutException0.getSQLState());
      assertEquals("50jBNaZ?e8`", sQLTimeoutException0.getMessage());
      assertEquals(96, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: serialVersionUID", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("serialVersionUID", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      
      Throwable throwable0 = jsonMappingException0.fillInStackTrace();
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, throwable0);
      assertNotSame(throwable0, jsonMappingException1);
      assertSame(throwable0, jsonMappingException0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(throwable0.equals((Object)jsonMappingException1));
      assertNotNull(throwable0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLTimeoutException0.getStackTrace();
      assertEquals("java.sql.SQLTimeoutException: 50jBNaZ?e8`", sQLTimeoutException0.toString());
      assertEquals("50jBNaZ?e8`", sQLTimeoutException0.getSQLState());
      assertEquals("50jBNaZ?e8`", sQLTimeoutException0.getMessage());
      assertEquals(96, sQLTimeoutException0.getErrorCode());
      assertEquals(13, stackTraceElementArray0.length);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, throwable0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertNotNull(stackTraceElementArray0);
      
      sQLTimeoutException0.printStackTrace();
      assertEquals("java.sql.SQLTimeoutException: 50jBNaZ?e8`", sQLTimeoutException0.toString());
      assertEquals("50jBNaZ?e8`", sQLTimeoutException0.getSQLState());
      assertEquals("50jBNaZ?e8`", sQLTimeoutException0.getMessage());
      assertEquals(96, sQLTimeoutException0.getErrorCode());
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, throwable0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)ClassUtil.throwIfIOE(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: 50jBNaZ?e8`", sQLTimeoutException0.toString());
      assertEquals("50jBNaZ?e8`", sQLTimeoutException0.getSQLState());
      assertEquals("50jBNaZ?e8`", sQLTimeoutException0.getMessage());
      assertEquals(96, sQLTimeoutException0.getErrorCode());
      assertEquals("50jBNaZ?e8`", sQLTimeoutException1.getSQLState());
      assertEquals("50jBNaZ?e8`", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: 50jBNaZ?e8`", sQLTimeoutException1.toString());
      assertEquals(96, sQLTimeoutException1.getErrorCode());
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, throwable0);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertNotNull(sQLTimeoutException1);
      
      Class<Double> class0 = Double.class;
      String string1 = ClassUtil.canBeABeanType(class0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Integer> class0 = Integer.class;
      Constructor<Integer> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Member member0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ") [");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h7$");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Class<Short> class0 = Short.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      System.setCurrentTimeMillis(2027L);
      Short short0 = new Short((short) (-217));
      assertNotNull(short0);
      assertEquals((short) (-217), (short)short0);
      
      Short short1 = ClassUtil.nonNull(short0, short0);
      assertNotNull(short1);
      assertEquals((short) (-217), (short)short1);
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, ") [", "8j[(&<=X");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.String (of class java.lang.Short) must override method '8j[(&<=X'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      JavaType javaType0 = null;
      Class<Byte> class1 = Byte.class;
      boolean boolean1 = false;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class1, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<Long> class2 = Long.class;
      Class<ReferenceType> class3 = ReferenceType.class;
      // Undeclared exception!
      try { 
        TypeBindings.create(class3, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.type.ReferenceType with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(1, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      Class<Error> class1 = Error.class;
      Error error0 = ClassUtil.createInstance(class1, false);
      assertNull(error0.getMessage());
      assertEquals("java.lang.Error", error0.toString());
      assertNotNull(error0);
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class2);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nonNullString("ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER");
      assertNotNull(string0);
      assertEquals("ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER", string0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      Class<ArrayType> class3 = ArrayType.class;
      Class<String> class4 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) error0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<Void> class0 = Void.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = ClassUtil.hasClass(list0, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(boolean0);
      
      Class<Long> class1 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(constructor0);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      String string0 = constructor0.toGenericString();
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(string0);
      assertEquals("public java.lang.Object()", string0);
      
      Class<Annotation> class1 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class1);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(boolean0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
      
      Object object0 = constructor0.newInstance(annotationArray0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(0, annotationArray0.length);
      assertNotNull(object0);
      
      Annotation[] annotationArray1 = constructor0.getAnnotations();
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(0, annotationArray1.length);
      assertSame(annotationArray1, annotationArray0);
      assertNotNull(annotationArray1);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(0, annotationArray2.length);
      assertNotNull(annotationArray2);
      
      Class<?> class2 = classUtil_Ctor0.getDeclaringClass();
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertNotNull(class2);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-856));
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertNotNull(placeholderForType0);
      
      boolean boolean1 = placeholderForType0.isReferenceType();
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PlaceholderForType placeholderForType1 = ClassUtil.nonNull(placeholderForType0, placeholderForType0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType1.isMapLikeType());
      assertFalse(placeholderForType1.hasValueHandler());
      assertFalse(placeholderForType1.isPrimitive());
      assertFalse(placeholderForType1.isInterface());
      assertFalse(placeholderForType1.isFinal());
      assertFalse(placeholderForType1.isEnumType());
      assertTrue(placeholderForType1.hasContentType());
      assertFalse(placeholderForType1.hasHandlers());
      assertFalse(placeholderForType1.isContainerType());
      assertFalse(placeholderForType1.isCollectionLikeType());
      assertTrue(placeholderForType1.isConcrete());
      assertEquals(0, placeholderForType1.containedTypeCount());
      assertFalse(placeholderForType1.isArrayType());
      assertFalse(placeholderForType1.isAbstract());
      assertFalse(placeholderForType1.useStaticType());
      assertTrue(placeholderForType1.isJavaLangObject());
      assertSame(placeholderForType0, placeholderForType1);
      assertSame(placeholderForType1, placeholderForType0);
      assertNotNull(placeholderForType1);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      assertNull(annotatedClass0);
      
      Class<Double> class3 = Double.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class3, "public java.lang.Object()", placeholderForType0);
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals("public java.lang.Object()", virtualAnnotatedMember0.getName());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertNotNull(virtualAnnotatedMember0);
      
      Field field0 = virtualAnnotatedMember0.getAnnotated();
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals("public java.lang.Object()", virtualAnnotatedMember0.getName());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertSame(placeholderForType0, placeholderForType1);
      assertNull(field0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<AccessPattern>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(4, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Cannot access ", "JsonNode not of typ ObjectNode (but ");
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("JsonNode not of typ ObjectNode (but ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Cannot access ", sQLFeatureNotSupportedException0.toString());
      assertEquals("Cannot access ", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLException sQLException0 = new SQLException("entrySet", sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("JsonNode not of typ ObjectNode (but ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Cannot access ", sQLFeatureNotSupportedException0.toString());
      assertEquals("Cannot access ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("entrySet", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: entrySet", sQLException0.toString());
      assertNotNull(sQLException0);
      
      String string0 = sQLException0.getLocalizedMessage();
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("JsonNode not of typ ObjectNode (but ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Cannot access ", sQLFeatureNotSupportedException0.toString());
      assertEquals("Cannot access ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("entrySet", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: entrySet", sQLException0.toString());
      assertNotNull(string0);
      assertEquals("entrySet", string0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackso", "Cannot access ", sQLException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("JsonNode not of typ ObjectNode (but ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Cannot access ", sQLFeatureNotSupportedException0.toString());
      assertEquals("Cannot access ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("entrySet", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: entrySet", sQLException0.toString());
      assertEquals("java.sql.SQLTransientException: com.fasterxml.jackso", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("Cannot access ", sQLTransientException0.getSQLState());
      assertEquals("com.fasterxml.jackso", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("JsonNode not of typ ObjectNode (but ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Cannot access ", sQLFeatureNotSupportedException0.toString());
      assertEquals("Cannot access ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("JsonNode not of typ ObjectNode (but ", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Cannot access ", sQLFeatureNotSupportedException1.toString());
      assertEquals("Cannot access ", sQLFeatureNotSupportedException1.getMessage());
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      
      String string1 = ClassUtil.backticked("[null]");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`[null]`", string1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      Constructor<AccessPattern> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(86);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((Writer) charArrayWriter0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertNotNull(writerBasedJsonGenerator0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      String string0 = "c 2WdfEHwvdR";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) writerBasedJsonGenerator0, "c 2WdfEHwvdR");
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertNotNull(jsonMappingException0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdNativeValueException(jsonMappingException0, class0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(invalidFormatException0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      String string1 = invalidFormatException0.toString();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.lang.Double` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.JsonMappingException`: incompatible types", string1);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      Constructor<AccessPattern> constructor1 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor1);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Float float0 = new Float(0.6F);
      assertNotNull(float0);
      assertEquals(0.6F, (float)float0, 0.01F);
      
      String string0 = "primitive";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class0, "primitive");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      
      String string1 = ClassUtil.getClassDescription(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`com.fasterxml.jackson.databind.exc.InvalidFormatException`", string1);
      
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string2 = ClassUtil.nameOf(class0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("`java.lang.Short`", string2);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      Constructor<AccessPattern> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      String string3 = jsonMappingException0.toString();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.lang.Short` from number 0.6: primitive", string3);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(1, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      Class<Error> class1 = Error.class;
      boolean boolean0 = false;
      Error error0 = ClassUtil.createInstance(class1, false);
      assertNull(error0.getMessage());
      assertEquals("java.lang.Error", error0.toString());
      assertNotNull(error0);
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      boolean boolean1 = ClassUtil.hasClass(class0, class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ClassUtil.isCollectionMapOrArray(class2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = ClassUtil.nonNullString("ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER");
      assertNotNull(string0);
      assertEquals("ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER", string0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Double double0 = new Double((-2849.0114852423653));
      assertNotNull(double0);
      assertEquals((-2849.0114852423653), (double)double0, 0.01);
      
      String string0 = ClassUtil.nullOrToString(double0);
      assertNotNull(string0);
      
      JavaType javaType0 = null;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(152);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertNotNull(placeholderForType0);
      
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class0, (JavaType) null, (JavaType) placeholderForType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.reflect.AccessibleObject with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<CollectionType> class1 = CollectionType.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("entrySet", "Cannot access ");
      assertEquals("entrySet", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Cannot access ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: entrySet", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLException sQLException0 = new SQLException("Cannot access ", sQLFeatureNotSupportedException0);
      assertEquals("entrySet", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Cannot access ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: entrySet", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLException: Cannot access ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("Cannot access ", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("Cannot access ", "@dHV#~/5", sQLException0);
      assertEquals("entrySet", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Cannot access ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: entrySet", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLException: Cannot access ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("Cannot access ", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("@dHV#~/5", sQLTransientException0.getSQLState());
      assertEquals("Cannot access ", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Cannot access ", sQLTransientException0.toString());
      assertNotNull(sQLTransientException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwRootCauseIfIOE(sQLTransientException0);
      assertEquals("entrySet", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("Cannot access ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: entrySet", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLException: Cannot access ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("Cannot access ", sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals("@dHV#~/5", sQLTransientException0.getSQLState());
      assertEquals("Cannot access ", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Cannot access ", sQLTransientException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("Cannot access ", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: entrySet", sQLFeatureNotSupportedException1.toString());
      assertEquals("entrySet", sQLFeatureNotSupportedException1.getMessage());
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = true;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      RuntimeException runtimeException0 = constructor0.newInstance(annotationArray0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("java.lang.RuntimeException", runtimeException0.toString());
      assertNull(runtimeException0.getMessage());
      assertEquals(0, annotationArray0.length);
      assertNotNull(runtimeException0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor0);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, int0);
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray1.length);
      assertNotNull(annotationArray1);
      
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("int", class1.toString());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<ReferenceType> class2 = ReferenceType.class;
      String string0 = ClassUtil.nameOf(class2);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.type.ReferenceType`", string0);
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<?> class3 = ClassUtil.wrapperType(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("int", class1.toString());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Integer", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(17, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertNotSame(class1, class3);
      assertNotSame(class3, class1);
      assertFalse(class3.equals((Object)class1));
      assertNotNull(class3);
      
      String string1 = "org.hibernate.proxy.";
      int int0 = (-393805500);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertNotNull(jsonParserDelegate0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) jsonParserDelegate0, (JsonParser) jsonParserDelegate0);
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertNotNull(jsonParserSequence0);
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "org.hibernate.proxy.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Character> class0 = Character.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      String string0 = constructor0.toGenericString();
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(string0);
      assertEquals("public java.lang.Object()", string0);
      
      Class<Annotation> class1 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class1);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(boolean0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      Object object0 = constructor0.newInstance(annotationArray0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      assertNotNull(object0);
      
      Annotation[] annotationArray1 = constructor0.getAnnotations();
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      assertSame(annotationArray1, annotationArray0);
      assertNotNull(annotationArray1);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray2.length);
      assertNotNull(annotationArray2);
      
      Class<?> class2 = classUtil_Ctor0.getDeclaringClass();
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertNotNull(class2);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-856));
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertNotNull(placeholderForType0);
      
      boolean boolean1 = placeholderForType0.isReferenceType();
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PlaceholderForType placeholderForType1 = ClassUtil.nonNull(placeholderForType0, placeholderForType0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType1.useStaticType());
      assertFalse(placeholderForType1.isMapLikeType());
      assertFalse(placeholderForType1.hasValueHandler());
      assertTrue(placeholderForType1.isJavaLangObject());
      assertFalse(placeholderForType1.isArrayType());
      assertEquals(0, placeholderForType1.containedTypeCount());
      assertFalse(placeholderForType1.isAbstract());
      assertFalse(placeholderForType1.isContainerType());
      assertTrue(placeholderForType1.isConcrete());
      assertTrue(placeholderForType1.hasContentType());
      assertFalse(placeholderForType1.isEnumType());
      assertFalse(placeholderForType1.hasHandlers());
      assertFalse(placeholderForType1.isInterface());
      assertFalse(placeholderForType1.isPrimitive());
      assertFalse(placeholderForType1.isFinal());
      assertFalse(placeholderForType1.isCollectionLikeType());
      assertSame(placeholderForType0, placeholderForType1);
      assertSame(placeholderForType1, placeholderForType0);
      assertNotNull(placeholderForType1);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)ClassUtil.getGenericSuperclass(class3);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        placeholderForType0.withContentType(placeholderForType1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      String string0 = ClassUtil.isLocalType(class2, false);
      assertNull(string0);
      
      String string1 = "USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING", (String) null);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING", sQLTransientConnectionException0.toString());
      assertEquals("USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING", sQLTransientConnectionException0.toString());
      assertEquals("USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
      try { 
        sQLFeatureNotSupportedException0.initCause(sQLTransientConnectionException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLTransientConnectionException: USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertEquals("char", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("char", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(string0);
      assertEquals("primitive", string0);
      
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      Class<Annotation> class1 = Annotation.class;
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReturnType();
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotatedType0);
      
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNull(annotation0);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation[][] annotationArray0 = constructor0.getParameterAnnotations();
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Annotation[] annotationArray1 = constructor0.getDeclaredAnnotationsByType(class2);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray1.length);
      assertSame(class2, class1);
      assertNotNull(annotationArray1);
      
      Class<?>[] classArray0 = constructor0.getParameterTypes();
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, classArray0.length);
      assertNotNull(classArray0);
      
      String string0 = constructor0.toGenericString();
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(string0);
      assertEquals("public java.lang.Object()", string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor0);
      
      Class<Annotation> class3 = Annotation.class;
      Annotation[] annotationArray2 = constructor0.getDeclaredAnnotationsByType(class3);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray2.length);
      assertSame(class3, class1);
      assertSame(class3, class2);
      assertNotSame(annotationArray2, annotationArray1);
      assertFalse(annotationArray2.equals((Object)annotationArray1));
      assertNotNull(annotationArray2);
      
      Annotation[] annotationArray3 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray3.length);
      assertNotSame(annotationArray3, annotationArray2);
      assertNotSame(annotationArray3, annotationArray1);
      assertFalse(annotationArray3.equals((Object)annotationArray2));
      assertFalse(annotationArray3.equals((Object)annotationArray1));
      assertNotNull(annotationArray3);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, int0);
      
      Annotation[] annotationArray4 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray4.length);
      assertNotSame(annotationArray4, annotationArray2);
      assertNotSame(annotationArray4, annotationArray1);
      assertSame(annotationArray4, annotationArray3);
      assertFalse(annotationArray4.equals((Object)annotationArray2));
      assertFalse(annotationArray4.equals((Object)annotationArray1));
      assertNotNull(annotationArray4);
      
      String string1 = constructor0.toGenericString();
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("public java.lang.Object()", string1);
      
      Annotation[][] annotationArray5 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray5.length);
      assertNotSame(annotationArray5, annotationArray0);
      assertFalse(annotationArray5.equals((Object)annotationArray0));
      assertNotNull(annotationArray5);
      
      Annotation[][] annotationArray6 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray6.length);
      assertNotSame(annotationArray6, annotationArray0);
      assertSame(annotationArray6, annotationArray5);
      assertFalse(annotationArray6.equals((Object)annotationArray0));
      assertNotNull(annotationArray6);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertNotNull(constructor1);
      
      String string2 = ClassUtil.nameOf((Named) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("[null]", string2);
      
      Class<CollectionType> class4 = CollectionType.class;
      Class<?> class5 = ClassUtil.getOuterClass(class4);
      assertNull(class5);
      
      Class<?> class6 = ClassUtil.classOf(class2);
      assertEquals("class java.lang.Class", class6.toString());
      assertEquals(17, class6.getModifiers());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      assertFalse(class6.isAnnotation());
      assertFalse(class6.isPrimitive());
      assertSame(class2, class1);
      assertSame(class2, class3);
      assertNotNull(class6);
      
      String string3 = ClassUtil.canBeABeanType(class1);
      assertSame(class1, class2);
      assertSame(class1, class3);
      assertNull(string3);
      
      String string4 = ClassUtil.nameOf(class0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("`java.lang.Object`", string4);
      
      String string5 = ClassUtil.quotedOr(class4, "FWVW{t7v");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("\"class com.fasterxml.jackson.databind.type.CollectionType\"", string5);
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor1);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(classUtil_Ctor1);
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("elementType");
      assertNotNull(string0);
      assertEquals("elementType", string0);
      
      Class<NoClass> class0 = NoClass.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      String string1 = ClassUtil.nonNullString("elementType");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("elementType", string1);
      
      boolean boolean0 = ClassUtil.hasClass(class0, class0);
      assertFalse(boolean0);
      
      Class<Double> class2 = Double.class;
      String string2 = ClassUtil.canBeABeanType(class2);
      assertNull(string2);
      
      Class<JsonMappingException> class3 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<IOException> class1 = IOException.class;
      String string0 = "\\6d7H3!1r/_<";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class1, "\u0006d7H3!1r/_<");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.io.IOException) must override method '\u0006d7H3!1r/_<'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Object object0 = null;
      String string0 = ClassUtil.quotedOr((Object) null, "R.!y{;[NR");
      assertNotNull(string0);
      assertEquals("R.!y{;[NR", string0);
      
      Class<IOException> class0 = IOException.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(4, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<NoClass> class2 = NoClass.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte byte0 = (byte)0;
      Byte byte1 = Byte.valueOf((byte)0);
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)byte1);
      
      String string0 = ClassUtil.quotedOr(byte1, "");
      assertNotNull(string0);
      assertEquals("\"0\"", string0);
      
      Class<Double> class0 = Double.class;
      String string1 = ClassUtil.canBeABeanType(class0);
      assertNull(string1);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, "\"0\"", "|x'u{oqI`>k");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.String (of class java.lang.RuntimeException) must override method '|x'u{oqI`>k'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionLikeType", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<NoClass> class2 = NoClass.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNull(class1);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAdditionalKeyDeserializers((KeyDeserializers) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null KeyDeserializers
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("keyType", "USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING");
      assertEquals("java.sql.SQLTransientConnectionException: keyType", sQLTransientConnectionException0.toString());
      assertEquals("keyType", sQLTransientConnectionException0.getMessage());
      assertEquals("USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<ReferenceType> class2 = ReferenceType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertEquals(34, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<JsonMappingException> class3 = JsonMappingException.class;
      String string1 = ClassUtil.isLocalType(class3, true);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<Long> class1 = Long.class;
      String string0 = ClassUtil.getPackageName(class1);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      String string0 = "vals";
      String string1 = "R8&4p";
      String string2 = "";
      SQLException sQLException0 = new SQLException("", "", (-953));
      assertEquals((-953), sQLException0.getErrorCode());
      assertEquals("", sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertNotNull(sQLException0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", sQLException0);
      assertEquals((-953), sQLException0.getErrorCode());
      assertEquals("", sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLInvalidAuthorizationSpecException0);
      assertEquals((-953), sQLException0.getErrorCode());
      assertEquals("", sQLException0.getSQLState());
      assertEquals("", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLDataException: java.sql.SQLInvalidAuthorizationSpecException: ", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sQLException0.forEach((Consumer<? super Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException1.toString());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLIntegrityConstraintViolationException1);
      
      Class<MapType> class0 = MapType.class;
      Constructor<MapType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)ClassUtil.throwIfError(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      assertNotNull(sQLTimeoutException1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext_Impl1);
      
      Double double0 = new Double(1486.7080086787);
      assertNotNull(double0);
      assertEquals(1486.7080086787, (double)double0, 0.01);
      
      Class<NoClass> class1 = NoClass.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdNumberException(double0, class1, "vals");
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertNotNull(invalidFormatException0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl1, (IOException) invalidFormatException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.annotation.NoClass` from number 1486.7080086787: vals
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Character> class0 = Character.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      SQLException sQLException0 = new SQLException((String) null, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", 0, sQLDataException0);
      assertNull(sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      String string1 = null;
      String string2 = "Numeric value (%s) out of range of long (%d - %s)";
      URI uRI0 = MockURI.URI((String) null, "", (String) null, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "Numeric value (%s) out of range of long (%d - %s)");
      assertNull(uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", uRI0.getRawQuery());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertEquals("", uRI0.getRawPath());
      assertEquals("Numeric%20value%20(%25s)%20out%20of%20range%20of%20long%20(%25d%20-%20%25s)", uRI0.getRawFragment());
      assertEquals("//?com.fasterxml.jackson.databind.util.ClassUtil$Ctor#Numeric%20value%20(%25s)%20out%20of%20range%20of%20long%20(%25d%20-%20%25s)", uRI0.toString());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertNotNull(class1);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      String string0 = ClassUtil.getClassDescription(float0);
      assertNotNull(string0);
      assertEquals("`java.lang.Float`", string0);
      
      Class<Error> class2 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class2, false);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotatedTypeArray0.length);
      assertNotNull(annotatedTypeArray0);
      
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class3);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNull(annotation0);
      
      Type[] typeArray0 = constructor0.getGenericParameterTypes();
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray1.length);
      assertSame(annotationArray1, annotationArray0);
      assertNotNull(annotationArray1);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray2.length);
      assertNotNull(annotationArray2);
      
      AnnotatedType[] annotatedTypeArray1 = constructor0.getAnnotatedExceptionTypes();
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotatedTypeArray1.length);
      assertNotSame(annotatedTypeArray1, annotatedTypeArray0);
      assertFalse(annotatedTypeArray1.equals((Object)annotatedTypeArray0));
      assertNotNull(annotatedTypeArray1);
      
      Class class4 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class4.toString());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals(1025, class4.getModifiers());
      assertNotNull(class4);
      
      Annotation[][] annotationArray3 = classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray3.length);
      assertSame(annotationArray3, annotationArray2);
      assertNotNull(annotationArray3);
      
      Class<ArrayType> class5 = ArrayType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class5);
      assertEquals(1, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Object> class6 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class6);
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertNotNull(mapLikeType0);
      
      Class<NoClass> class7 = NoClass.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class7, (JavaType) mapLikeType0);
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertNotNull(arrayType0);
      
      Double double0 = new Double((-9.223372036854776E18));
      assertNotNull(double0);
      assertEquals((-9.223372036854776E18), (double)double0, 0.01);
      
      ArrayType arrayType1 = ArrayType.construct((JavaType) mapLikeType0, typeBindings0, (Object) arrayType0, (Object) double0);
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.useStaticType());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isPrimitive());
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertFalse(arrayType1.equals((Object)arrayType0));
      assertNotNull(arrayType1);
      
      ArrayType arrayType2 = arrayType1.withTypeHandler(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.useStaticType());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType2.isPrimitive());
      assertTrue(arrayType2.hasContentType());
      assertTrue(arrayType2.isFinal());
      assertFalse(arrayType2.isMapLikeType());
      assertFalse(arrayType2.isInterface());
      assertFalse(arrayType2.isAbstract());
      assertTrue(arrayType2.isConcrete());
      assertFalse(arrayType2.isJavaLangObject());
      assertTrue(arrayType2.isContainerType());
      assertTrue(arrayType2.isArrayType());
      assertTrue(arrayType2.hasHandlers());
      assertFalse(arrayType2.isCollectionLikeType());
      assertFalse(arrayType2.isEnumType());
      assertTrue(arrayType2.hasValueHandler());
      assertFalse(arrayType2.useStaticType());
      assertEquals(0, arrayType2.containedTypeCount());
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType2, arrayType0);
      assertFalse(arrayType0.equals((Object)arrayType1));
      assertFalse(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertFalse(arrayType2.equals((Object)arrayType0));
      assertNotNull(arrayType2);
      
      Class<?> class8 = ClassUtil.classOf(arrayType2);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.useStaticType());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isEnumType());
      assertTrue(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType2.isPrimitive());
      assertTrue(arrayType2.hasContentType());
      assertTrue(arrayType2.isFinal());
      assertFalse(arrayType2.isMapLikeType());
      assertFalse(arrayType2.isInterface());
      assertFalse(arrayType2.isAbstract());
      assertTrue(arrayType2.isConcrete());
      assertFalse(arrayType2.isJavaLangObject());
      assertTrue(arrayType2.isContainerType());
      assertTrue(arrayType2.isArrayType());
      assertTrue(arrayType2.hasHandlers());
      assertFalse(arrayType2.isCollectionLikeType());
      assertFalse(arrayType2.isEnumType());
      assertTrue(arrayType2.hasValueHandler());
      assertFalse(arrayType2.useStaticType());
      assertEquals(0, arrayType2.containedTypeCount());
      assertFalse(class8.isInterface());
      assertFalse(class8.isArray());
      assertFalse(class8.isAnnotation());
      assertFalse(class8.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.type.ArrayType", class8.toString());
      assertEquals(1, class8.getModifiers());
      assertFalse(class8.isEnum());
      assertFalse(class8.isSynthetic());
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType2, arrayType0);
      assertFalse(arrayType0.equals((Object)arrayType2));
      assertFalse(arrayType0.equals((Object)arrayType1));
      assertFalse(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType1.equals((Object)arrayType2));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertFalse(arrayType2.equals((Object)arrayType0));
      assertNotNull(class8);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = true;
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
      
      Class<Long> class1 = Long.class;
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JsonGenerator jsonGenerator0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Cannot figure out type for EnumSet (odd JDK platform?)", (String) null);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Cannot figure out type for EnumSet (odd JDK platform?)", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("Cannot figure out type for EnumSet (odd JDK platform?)", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("Cannot figure out type for EnumSet (odd JDK platform?)", "Failed to find default constructor of class ", 1033, sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Cannot figure out type for EnumSet (odd JDK platform?)", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("Cannot figure out type for EnumSet (odd JDK platform?)", sQLNonTransientConnectionException0.getMessage());
      assertEquals("Cannot figure out type for EnumSet (odd JDK platform?)", sQLNonTransientConnectionException1.getMessage());
      assertEquals("Failed to find default constructor of class ", sQLNonTransientConnectionException1.getSQLState());
      assertEquals(1033, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Cannot figure out type for EnumSet (odd JDK platform?)", sQLNonTransientConnectionException1.toString());
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(sQLNonTransientConnectionException1);
      
      StackTraceElement[] stackTraceElementArray0 = sQLNonTransientConnectionException1.getStackTrace();
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Cannot figure out type for EnumSet (odd JDK platform?)", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("Cannot figure out type for EnumSet (odd JDK platform?)", sQLNonTransientConnectionException0.getMessage());
      assertEquals("Cannot figure out type for EnumSet (odd JDK platform?)", sQLNonTransientConnectionException1.getMessage());
      assertEquals("Failed to find default constructor of class ", sQLNonTransientConnectionException1.getSQLState());
      assertEquals(1033, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Cannot figure out type for EnumSet (odd JDK platform?)", sQLNonTransientConnectionException1.toString());
      assertEquals(13, stackTraceElementArray0.length);
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      assertNotNull(stackTraceElementArray0);
      
      sQLNonTransientConnectionException1.setNextException(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Cannot figure out type for EnumSet (odd JDK platform?)", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("Cannot figure out type for EnumSet (odd JDK platform?)", sQLNonTransientConnectionException0.getMessage());
      assertEquals("Cannot figure out type for EnumSet (odd JDK platform?)", sQLNonTransientConnectionException1.getMessage());
      assertEquals("Failed to find default constructor of class ", sQLNonTransientConnectionException1.getSQLState());
      assertEquals(1033, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: Cannot figure out type for EnumSet (odd JDK platform?)", sQLNonTransientConnectionException1.toString());
      assertNotSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertNotSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertFalse(sQLNonTransientConnectionException0.equals((Object)sQLNonTransientConnectionException1));
      assertFalse(sQLNonTransientConnectionException1.equals((Object)sQLNonTransientConnectionException0));
      
      // Undeclared exception!
      try { 
        sQLNonTransientConnectionException1.initCause(sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLNonTransientConnectionException: Cannot figure out type for EnumSet (odd JDK platform?)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1025, class1.getModifiers());
      assertNotNull(class1);
      
      Class<Boolean> class2 = Boolean.class;
      boolean boolean0 = ClassUtil.hasClass(class0, class2);
      assertFalse(boolean0);
      
      Class<Void> class3 = Void.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class3);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(" ($}vr.|_p");
      assertEquals(" ($}vr.|_p", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException:  ($}vr.|_p", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      assertEquals(" ($}vr.|_p", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException:  ($}vr.|_p", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException:  ($}vr.|_p", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLTransactionRollbackException:  ($}vr.|_p", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "zbj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zbj
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(2, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      String string0 = ClassUtil.nullOrToString(class0);
      assertNotNull(string0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("java.lang.Class@0000000003");
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("keyType", "java.lang.Class@0000000003", sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: keyType", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("keyType", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLNonTransientConnectionException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: keyType", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("keyType", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLNonTransientConnectionException: keyType", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: keyType", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0, "java.lang.Class@0000000003");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.Class@0000000003
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
