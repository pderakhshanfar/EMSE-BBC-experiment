/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:40:57 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AbstractTypeResolver;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, true);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, (TypeBindings) null);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      Character character0 = new Character(')');
      SimpleType simpleType1 = simpleType0.withValueHandler(character0);
      ArrayType arrayType2 = arrayType1.withTypeHandler(simpleType1);
      ClassUtil.rawClass(arrayType2);
      Class<Boolean> class1 = Boolean.class;
      boolean boolean0 = true;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getClassDescription(class0);
      ClassUtil.findClassAnnotations(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findClassAnnotations(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findEnumType(class2);
      Class<Double> class3 = Double.class;
      Double double0 = new Double((-1.0));
      ClassUtil.verifyMustOverride(class3, double0, "c");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ZVALft%", (String) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "c", 9, map0);
      sQLNonTransientConnectionException0.initCause(sQLClientInfoException1);
      sQLNonTransientConnectionException0.getSuppressed();
      ClassUtil.getRootCause(sQLNonTransientConnectionException0);
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.getDeclaringClass(class4);
      Class<Void> class5 = Void.class;
      ClassUtil.getOuterClass(class5);
      ClassUtil.getClassDescription(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, class3, "ZVALft%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.isBogusClass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationFeature0, false);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, list0, true);
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = 'J';
      charArray0[2] = '\\';
      charArray0[3] = '5';
      charArray0[4] = '\\';
      charArray0[5] = 'q';
      charArray0[6] = 'c';
      charArray0[7] = 'P';
      charArray0[8] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 2, 2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2598, charArrayReader0, objectMapper2, charsToNameCanonicalizer0, charArray0, 6, 3, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      Class<IntNode> class1 = IntNode.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[0]);
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(referenceType0, referenceType0);
      ReferenceType referenceType2 = referenceType1.withTypeHandler(deserializerFactory0);
      SimpleType simpleType0 = referenceType2.withValueHandler(deserializerFactory0);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) simpleType0, jsonToken0, "84e{r5k3amN_.p0_Y+?");
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_ARRAY: 84e{r5k3amN_.p0_Y+?
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) mockFileWriter0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "java.lang.Long");
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType", "lk1QF(EBR,", jsonMappingException0);
      DataTruncation dataTruncation0 = new DataTruncation(9, true, false, 9, 95, sQLException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(dataTruncation0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.Long
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Double> class1 = Double.TYPE;
      List<Class<?>> list0 = new Vector<Class<Integer>>();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockFileOutputStream0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)65;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, (String) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ArrayType` from number 181057: null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(accessPattern0);
      Character character0 = new Character('r');
      ClassUtil.quotedOr(character0, "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicIntegerSerializer");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(batchUpdateException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLNonTransientException0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<NoClass> class0 = NoClass.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(124);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-404), objectReader0, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(56320, class0, "(");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.annotation.NoClass` from number 56320: (
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<CreatorProperty> class1 = CreatorProperty.class;
      ClassUtil.findSuperTypes(class1, class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class0 = Short.TYPE;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.wrapperType(class0);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Module> class0 = Module.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarning0.getStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.databind.introspect.AnnotatedClass$Creators", "org.hibernate.proxy.com.fasterxml.jackson.databind.Module", sQLWarning0);
      sQLWarning0.initCause(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getConstructors(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.emptyIterator();
      ClassUtil.defaultValue(class0);
      Class<String> class1 = String.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Byte> class2 = Byte.class;
      ClassUtil.findConstructor(class2, true);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[3];
      accessibleObjectArray0[0] = (AccessibleObject) null;
      accessibleObjectArray0[1] = (AccessibleObject) null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      accessibleObjectArray0[2] = (AccessibleObject) null;
      // Undeclared exception!
      try { 
        AccessibleObject.setAccessible(accessibleObjectArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.AccessibleObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.canBeABeanType(class0);
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.findSuperTypes(class0, class0, list0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<MapType> class1 = MapType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class2, class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, collectionType0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-692677533));
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper1, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 46, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-708825413), (-692677533));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("@Y2=", "@Y2=", sQLWarning0);
      sQLWarning0.initCause(sQLNonTransientException0);
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class1, false);
      ClassUtil.rawClass(collectionType0);
      ClassUtil.backticked("sj^8u\u0007Sri|p<[k)");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.findSuperClasses(class0, class0, true);
      Class<NoClass> class1 = NoClass.class;
      Class<Long> class2 = Long.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLFeatureNotSupportedException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<BufferedInputStream> class1 = BufferedInputStream.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.classOf(class1);
      Class<String> class2 = String.class;
      ClassUtil.findSuperTypes(class0, class2, list0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getName();
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.nonNullString("SWzFcu>qL$T_");
      Class<Short> class1 = Short.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactory0, class0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.PlaceholderForType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.BeanDeserializerFactory`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1743199137);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("^QH<A4y<eii5GxU?'", "2869<sitWZ|X", (-1743199137), intArray0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionType collectionType1 = collectionType0.withValueHandler(batchUpdateException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) collectionType1, "com.fasterxml.jackson.databind.util.ClassUtil");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ^QH<A4y<eii5GxU?' (through reference chain: com.fasterxml.jackson.databind.type.CollectionType[\"com.fasterxml.jackson.databind.util.ClassUtil\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("qF!`W");
      mockRuntimeException0.toString();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.canBeABeanType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, enumSet0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      ObjectReader objectReader1 = objectReader0.with(formatFeature0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)113;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 7, objectReader1, bufferedOutputStream0, byteArray0, (byte)8, true);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = new Object();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Failed to find default constructor of class ", ",p&Jhb)JQ", (-2));
      MockError mockError0 = new MockError(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.nameOf(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Short short0 = new Short((short) (-42));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(short0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockRuntimeException0, jsonMappingException_Reference0);
      mockRuntimeException0.addSuppressed(jsonMappingException0);
      mockRuntimeException0.toString();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<Short> class2 = Short.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(class1);
      Class<Error> class3 = Error.class;
      ClassUtil.findSuperTypes(javaType0, class3, false);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Byte");
      Class<Long> class0 = Long.TYPE;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.defaultValue(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 9;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findSingleArgConstructor((Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getGenericInterfaces(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Character> class2 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class2, class0, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockRuntimeException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Cannot access ", "Cannot access ", 414, sQLTimeoutException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLInvalidAuthorizationSpecException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Cannot access ", mockThrowable0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0, "Cannot access ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.nameOf(class1);
      ClassUtil.backticked("?l+(=-\"");
      ClassUtil.findSuperClasses(class1, class1, false);
      ClassUtil.nameOf(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.getEnclosingClass(class2);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.findSuperTypes(class3, class1);
      ClassUtil.getClassMethods(class3);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockError mockError0 = new MockError("Argument %d |as no property name, i( not Injectable: can not use as Creator %s");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Cannot figure out type for EnumMap (odd JDK platform?)");
      mockPrintWriter0.println();
      mockError0.printStackTrace((PrintWriter) mockPrintWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Class<Object> class2 = Object.class;
      classArray0[1] = class2;
      Class<Object> class3 = Object.class;
      classArray0[2] = class3;
      Class<Object> class4 = Object.class;
      classArray0[3] = class4;
      Class<Object> class5 = Object.class;
      classArray0[4] = class5;
      Class<Object> class6 = Object.class;
      classArray0[5] = class6;
      Class<Object> class7 = Object.class;
      classArray0[6] = class7;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern1);
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      ClassUtil.findEnumType(enumSet1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("r=Td&\"f's-&UB^@H", (String) null, 15, (Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.findSuperTypes(class0, class0, list0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class1);
      String string0 = "A'/+'l.9_-`;\"5T";
      ClassUtil.quotedOr((Object) null, "A'/+'l.9_-`;\"5T");
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class2, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("A'/+'l.9_-`;\"5T", " (from class ");
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.hibernate.proxy.java.lang.reflect.AccessibleObject", "[KB!xZa", sQLInvalidAuthorizationSpecException0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("A'/+'l.9_-`;\"5T", ",U=1gPa$t>#h_fTWe");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ,U=1gPa$t>#h_fTWe
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      EnumSet.complementOf(enumSet0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.classNameOf(class0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)55;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, bufferedInputStream0, "`java.lang.Class`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockError mockError0 = new MockError();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("_", "L(#_Ij8P:[5xh%", (String) null, 1421);
      stackTraceElementArray0[0] = stackTraceElement0;
      mockError0.setStackTrace(stackTraceElementArray0);
      mockError0.toString();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "FGV'}$f+|VDJcSA?uJ|");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("_", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.backticked("annotation");
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findEnumType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "PK8#S_Y", "PK8#S_Y");
      DataTruncation dataTruncation0 = new DataTruncation(1857, false, false, 1857, 1857, jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(dataTruncation0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.ArrayType` from String \"PK8#S_Y\": PK8#S_Y
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Module> class0 = Module.class;
      ClassUtil.findConstructor(class0, true);
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.toString();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      LinkedList<Class<AccessibleObject>> linkedList0 = new LinkedList<Class<AccessibleObject>>();
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isProxyType(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(2773L);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      Class<Object> class2 = Object.class;
      Class<Double> class3 = Double.class;
      ClassUtil.findRawSuperTypes(class2, class3, true);
      Class<ArrayType> class4 = ArrayType.class;
      Class<Annotation> class5 = Annotation.class;
      ClassUtil.findSuperTypes(class4, class5);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1512867866));
      placeholderForType0.getTypeName();
      String string0 = "get";
      placeholderForType0.isReferenceType();
      // Undeclared exception!
      try { 
        placeholderForType0.withTypeHandler((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      LinkedList<Class<AccessibleObject>> linkedList0 = new LinkedList<Class<AccessibleObject>>();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern1, accessPattern2);
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      ClassUtil.findEnumType(enumSet1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      configOverrides0.getDefaultMergeable();
      ClassUtil.nonNull((Boolean) null, (Boolean) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.node.IntNode");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.isConcrete(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.canBeABeanType(class0);
      Class<InputStream> class1 = InputStream.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.backticked((String) null);
      int int0 = (-32768);
      IntNode intNode0 = IntNode.valueOf((-32768));
      intNode0.asText();
      intNode0.findParents("[null]");
      ClassUtil.classNameOf(intNode0);
      ClassUtil.getOuterClass(class2);
      ClassUtil.isBogusClass(class0);
      short short0 = (short)6012;
      Short short1 = new Short((short)6012);
      try { 
        Short.valueOf("6^)xZ%hZP^/4V.~P#", (-32768));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -32768 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      boolean boolean0 = new Boolean(true);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, String> enumMap0 = new EnumMap<AccessPattern, String>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, (String) null);
      EnumMap<AccessPattern, String> enumMap1 = new EnumMap<AccessPattern, String>(enumMap0);
      EnumMap<AccessPattern, String> enumMap2 = new EnumMap<AccessPattern, String>(class0);
      EnumMap<AccessPattern, String> enumMap3 = new EnumMap<AccessPattern, String>((Map<AccessPattern, ? extends String>) enumMap1);
      enumMap3.clone();
      ClassUtil.getDeclaredFields(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      String string0 = "pgh";
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.isCollectionMapOrArray(class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, String> enumMap0 = new EnumMap<AccessPattern, String>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, (String) null);
      EnumMap<AccessPattern, String> enumMap1 = new EnumMap<AccessPattern, String>(enumMap0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerFor(class0);
      SQLException sQLException0 = new SQLException();
      SQLException sQLException1 = new SQLException("org.hibernate.proxy.java.lang.Boolean", "%P", sQLException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("%P", sQLException1);
      ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, (String) null, (Throwable) sQLTransientConnectionException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility2 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      Class<Object> class0 = Object.class;
      objectMapper1.readerFor(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Integer integer0 = new Integer((-1170));
      Integer integer1 = Integer.getInteger("%P", integer0);
      Class<BufferedInputStream> class1 = BufferedInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(integer1, class1, "");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.io.BufferedInputStream` from number -1170: 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.nameOf(class1);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("f;R");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      MockFile mockFile0 = new MockFile("JSON");
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((File) mockFile0, jsonEncoding0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) pipedInputStream0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "net.sf.cglib.proxy.java.lang.RuntimeException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.getClassDescription(class1);
      classUtil_Ctor0.getParamCount();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`java.lang.Object`");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Class ", "Class ", "`java.lang.Object`", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("}&V6YVhc0z9d5m {_#", "`java.lang.Object`", "`java.lang.Object`", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("VALUE_STRING", "kr2J**%b", "net.sf.cglib.proxy.long", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("gx#5D4SDM~^vvOB2", "]0a!~4K]j9P", "Unrecognized filter type (", (-2640));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("net.sf.cglib.proxy.java.lang.RuntimeException", "Unrecognized filter type (", "net.sf.cglib.proxy.long", (-2640));
      stackTraceElementArray0[4] = stackTraceElement4;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassUtil.nonNull("D]2f`H!K` *", "[]");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isLocalType(class1, false);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Module> class1 = Module.class;
      Object object0 = new Object();
      ClassUtil.getClassDescription(class1);
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isLocalType((Class<?>) null, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iirw@[y7u");
      Object object0 = new Object();
      ClassUtil.getClassDescription((Object) null);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockError mockError0 = new MockError("org.hibernate.proxy.java.lang.Long");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("arPSel%]:C7qO", (Map<String, ClientInfoStatus>) null, mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0, "org.hibernate.proxy.java.lang.Long");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findSuperClasses(class1, class0, true);
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassUtil.emptyIterator();
      System.setCurrentTimeMillis(1L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&XMz<`bTUFz%_\"7_s:c");
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isLocalType((Class<?>) null, true);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.isLocalType(class1, false);
      Object object0 = new Object();
      ClassUtil.getClassDescription(object0);
      ClassUtil.getGenericInterfaces(class0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, String> enumMap0 = new EnumMap<AccessPattern, String>(class0);
      EnumMap<AccessPattern, String> enumMap1 = new EnumMap<AccessPattern, String>(enumMap0);
      EnumMap<AccessPattern, String> enumMap2 = new EnumMap<AccessPattern, String>(class0);
      enumMap0.clone();
      ClassUtil.findEnumType(enumMap0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("6&Gto|~'N&*a;5Pwg");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) bufferedOutputStream0, jsonEncoding0);
      SQLException sQLException0 = new SQLException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      objectMapper0.readerFor(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("%P");
      ClassUtil.throwIfIOE(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ClassUtil.backticked("");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory1.setOutputDecorator(outputDecorator0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.withRootName("");
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      objectReader1.with(contextAttributes0);
      int int0 = (-460);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-1654975209), "net.sf.cglib.proxy.java.lang.Integer", (-1654975209), 1378, 1378, (-1654975209), 1378, (-1654975209), 2819, (-460), 2819);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1654975209
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Double> class2 = Double.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.getGenericSuperclass(class1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.findSuperTypes((JavaType) null, class2, true);
      ClassUtil.getDeclaredFields(class1);
      Throwable throwable0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Closeable closeable0 = null;
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Float> class1 = Float.class;
      Class<MapLikeType> class2 = MapLikeType.class;
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      Class<Character> class4 = Character.class;
      ClassUtil.isJacksonStdImpl(class4);
      ClassUtil.getDeclaringClass(class1);
      Class<ReferenceType> class5 = ReferenceType.class;
      ClassUtil.findClassAnnotations(class5);
      Class<Long> class6 = Long.class;
      Class<Annotation> class7 = Annotation.class;
      Class<Short> class8 = Short.class;
      ClassUtil.findSuperClasses(class7, class8, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext.createRootContext(tokenFilter1);
      try { 
        ClassUtil.createInstance(class6, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.getGenericInterfaces(class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findEnumType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getGenericSuperclass(class1);
      JavaType javaType0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.findSuperTypes((JavaType) null, class1, false);
      ClassUtil.getDeclaredFields(class0);
      Throwable throwable0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[0];
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-393));
      MapType mapType0 = MapType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, (JavaType) placeholderForType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapType0, (TypeBindings) null);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) arrayType0);
      JavaType javaType0 = referenceType0.withContentType(arrayType0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Module> class1 = Module.class;
      boolean boolean0 = true;
      Constructor<Module> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("TSue");
      sQLTransientConnectionException0.fillInStackTrace();
      ClassUtil.throwIfError(sQLTransientConnectionException0);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      Class<Object> class3 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Double> class0 = Double.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.getGenericSuperclass(class0);
      JavaType javaType0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      ClassUtil.getDeclaredFields(class0);
      Throwable throwable0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isBogusClass(class1);
      ClassUtil.isJacksonStdImpl(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<AccessPattern>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      ClassUtil.nonNull((String) null, "n0LGq}rd/E");
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, String> enumMap0 = new EnumMap<AccessPattern, String>(class0);
      EnumMap<AccessPattern, String> enumMap1 = new EnumMap<AccessPattern, String>(enumMap0);
      EnumMap<AccessPattern, String> enumMap2 = new EnumMap<AccessPattern, String>((Map<AccessPattern, ? extends String>) enumMap1);
      EnumMap<AccessPattern, String> enumMap3 = enumMap2.clone();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap3.put(accessPattern0, "n0LGq}rd/E");
      EnumMap<AccessPattern, String> enumMap4 = null;
      try {
        enumMap4 = new EnumMap<AccessPattern, String>((EnumMap<AccessPattern, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.EnumMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isBogusClass(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Module> class2 = Module.class;
      ClassUtil.findConstructor(class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("qH=kMhQo=h<");
      sQLTransientConnectionException0.fillInStackTrace();
      ClassUtil.throwIfError(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.emptyIterator();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Duplicate property '", sQLIntegrityConstraintViolationException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("entrySet", "org.hibernate.proxy.", (-8), sQLSyntaxErrorException0);
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath(throwable0, (Object) "org.hibernate.proxy.", (-8));
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, " (above 0x%08x)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  (above 0x%08x)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassUtil.nonNull("D]2f`H!K` *", "[]");
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, String> enumMap0 = new EnumMap<AccessPattern, String>(class0);
      EnumMap<AccessPattern, String> enumMap1 = new EnumMap<AccessPattern, String>(enumMap0);
      EnumMap<AccessPattern, String> enumMap2 = enumMap1.clone();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, "[]");
      EnumMap<AccessPattern, String> enumMap3 = new EnumMap<AccessPattern, String>(enumMap2);
      EnumMap<AccessPattern, String> enumMap4 = new EnumMap<AccessPattern, String>(class0);
      enumMap0.clone();
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.throwIfRTE((Throwable) null);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Module> class0 = Module.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isBogusClass(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Module> class2 = Module.class;
      Constructor<Module> constructor0 = ClassUtil.findConstructor(class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassUtil.nonNull("D]2f`H!K` *", "[]");
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, String> enumMap0 = new EnumMap<AccessPattern, String>(class0);
      EnumMap<AccessPattern, String> enumMap1 = new EnumMap<AccessPattern, String>(enumMap0);
      EnumMap<AccessPattern, String> enumMap2 = enumMap1.clone();
      EnumMap<AccessPattern, String> enumMap3 = new EnumMap<AccessPattern, String>(enumMap2);
      EnumMap<AccessPattern, String> enumMap4 = new EnumMap<AccessPattern, String>(class0);
      enumMap0.clone();
      ClassUtil.findEnumType(enumMap3);
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.nameOf(class1);
      ClassUtil.primitiveType(class1);
      ClassUtil.isProxyType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isBogusClass(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Module> class2 = Module.class;
      Constructor<Module> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getConstructor();
      Class<String> class3 = String.class;
      ClassUtil.isNonStaticInnerClass(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.findSuperTypes(class2, class4);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.Module is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isBogusClass(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Module> class2 = Module.class;
      Constructor<Module> constructor0 = ClassUtil.findConstructor(class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.canBeABeanType(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findConstructor(class1, false);
      Class<Short> class2 = Short.class;
      ClassUtil.hasClass(class0, class2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("tw| HT,");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 169);
      int int0 = (-4817);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)124;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, (-4817), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 3, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.canBeABeanType(class0);
      Class<IOException> class1 = IOException.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.isProxyType(class1);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.isConcrete(class3);
      Class<Integer> class4 = Integer.class;
      ClassUtil.nameOf(class4);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaringClass(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">ayU$wj?KE@GKC");
      ClassUtil.nameOf((Named) null);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isLocalType(class0, true);
      TypeResolutionContext typeResolutionContext0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getConstructors(class1);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotationsByType(class3);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.canBeABeanType(class4);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("M+K'QdP", "net.sf.cglib.proxy.", 311);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException();
      Class<Object> class5 = Object.class;
      ClassUtil.getDeclaringClass(class5);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getConstructors(class1);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor1.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      ClassUtil.backticked((String) null);
      ClassUtil.canBeABeanType(class2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("?A 6ozD$LYP", (String) null, (-2625));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassUtil.nonNull("D]2f`H!K` *", "[]");
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, String> enumMap0 = new EnumMap<AccessPattern, String>(class0);
      EnumMap<AccessPattern, String> enumMap1 = new EnumMap<AccessPattern, String>(enumMap0);
      EnumMap<AccessPattern, String> enumMap2 = enumMap1.clone();
      EnumMap<AccessPattern, String> enumMap3 = new EnumMap<AccessPattern, String>(enumMap2);
      EnumMap<AccessPattern, String> enumMap4 = new EnumMap<AccessPattern, String>(class0);
      enumMap0.clone();
      ClassUtil.findEnumType(enumMap0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassUtil.nonNullString("D]2f`H!K` *");
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaringClass(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      String string0 = "Failed to instantiate class ";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "Failed to instantiate class ");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to instantiate class 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonFactory0.configure(jsonParser_Feature0, false);
      ClassUtil.nonNullString("JSON");
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Sub-class %s (of class %s) must override method '%s'");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonMappingException> class1 = JsonMappingException.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "- l", collectionLikeType0);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "non-static member class");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      collectionType1.withTypeHandler((Object) null);
      collectionType1.withContentTypeHandler((Object) null);
      collectionType1.withValueHandler(class1);
      ClassUtil.classOf(collectionType0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isBogusClass(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isConcrete(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getOuterClass(class2);
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.getRootCause(sQLWarning0);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.getDeclaringClass(class3);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.isNonStaticInnerClass(class3);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.canBeABeanType(class4);
      Class<Long> class5 = Long.class;
      ClassUtil.findConstructor(class5, true);
      Class<Module> class6 = Module.class;
      Constructor<Module> constructor1 = ClassUtil.findConstructor(class6, true);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor1.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      List<Class<?>> list0 = new LinkedList<Class<Double>>();
      Class<Float> class0 = Float.class;
      ClassUtil.getConstructors(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor0.getDeclaringClass();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("9ej!OFO?");
      ClassUtil.throwIfError(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "missing type id property '%s'", 2480);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9999, objectMapper1, mockPrintStream0, byteArray0, 0, true);
      uTF8JsonGenerator0.setHighestNonEscapedChar(2);
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.hasClass((Object) null, class2);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getConstructors(class1);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotationsByType(class3);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.canBeABeanType(class4);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("M+K'QdP", "net.sf.cglib.proxy.", 311);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Character> class1 = Character.class;
      ClassUtil.getOuterClass(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.primitiveType(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class3);
      ClassUtil.getDeclaredMethods(class0);
      Class<AccessPattern> class4 = AccessPattern.class;
      EnumMap<AccessPattern, String> enumMap0 = new EnumMap<AccessPattern, String>(class4);
      EnumMap<AccessPattern, String> enumMap1 = new EnumMap<AccessPattern, String>(enumMap0);
      EnumMap<AccessPattern, String> enumMap2 = enumMap1.clone();
      EnumMap<AccessPattern, String> enumMap3 = new EnumMap<AccessPattern, String>(enumMap2);
      Class<AccessPattern> class5 = AccessPattern.class;
      EnumMap<AccessPattern, String> enumMap4 = new EnumMap<AccessPattern, String>(class5);
      enumMap4.clone();
      ClassUtil.findEnumType(enumMap2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      Class<MapType> class0 = MapType.class;
      boolean boolean0 = false;
      boolean boolean1 = true;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer", "serialVersionUID", 13, (Throwable) null);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLTransactionRollbackException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("serialVersionUID", "org.hibernate.proxy.java.lang.String", throwable0);
      ClassUtil.getRootCause(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getConstructors(class1);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotationsByType(class3);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<Integer> class4 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class4);
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.canBeABeanType(class5);
      Class<Long> class6 = Long.class;
      ClassUtil.findRawSuperTypes(class0, class6, false);
      MockFile mockFile0 = new MockFile("size");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      classUtil_Ctor0.getParameterAnnotations();
      mockFile0.setWritable(false);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getOuterClass(class1);
      Class<Character> class2 = Character.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      ClassUtil.getGenericInterfaces(class2);
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.getDeclaredMethods(class4);
      Class<Long> class5 = Long.class;
      ClassUtil.classNameOf(class5);
      ClassUtil.getDeclaredMethods(class3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getConstructor();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ClassUtil.throwIfRTE(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getOuterClass(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.getGenericInterfaces(class2);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.getDeclaredMethods(class3);
      Class<Long> class4 = Long.class;
      ClassUtil.findEnumType(class4);
      Class<AccessPattern> class5 = AccessPattern.class;
      EnumMap<AccessPattern, String> enumMap0 = new EnumMap<AccessPattern, String>(class5);
      EnumMap<AccessPattern, String> enumMap1 = new EnumMap<AccessPattern, String>(enumMap0);
      EnumMap<AccessPattern, String> enumMap2 = enumMap1.clone();
      EnumMap<AccessPattern, String> enumMap3 = new EnumMap<AccessPattern, String>(enumMap2);
      enumMap3.clone();
      Double double0 = new Double(0.0);
      Class<Double> class6 = Double.class;
      ClassUtil.hasClass(double0, class6);
      IOContext iOContext0 = null;
      int int0 = 759;
      ObjectCodec objectCodec0 = null;
      String string0 = "tw| HT,";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("tw| HT,");
      int int1 = (-2575);
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, (-2575));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isBogusClass(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.findEnumType(class3);
      Class<AccessPattern> class4 = AccessPattern.class;
      EnumMap<AccessPattern, String> enumMap0 = new EnumMap<AccessPattern, String>(class4);
      Class<AccessPattern> class5 = AccessPattern.class;
      EnumMap<AccessPattern, String> enumMap1 = new EnumMap<AccessPattern, String>(class5);
      EnumMap<AccessPattern, String> enumMap2 = new EnumMap<AccessPattern, String>(enumMap1);
      EnumMap<AccessPattern, String> enumMap3 = enumMap0.clone();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      enumMap3.replace(accessPattern0, (String) null, (String) null);
      EnumMap<AccessPattern, String> enumMap4 = new EnumMap<AccessPattern, String>(enumMap3);
      enumMap1.clone();
      ClassUtil.findEnumType(enumMap1);
      Class<MapLikeType> class6 = MapLikeType.class;
      ClassUtil.findSuperClasses(class6, class3, true);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.findEnumType(class0);
      Class<Integer> class1 = Integer.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findConstructor(class3, false);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      Character character0 = new Character(':');
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      objectMapper0.setFilterProvider(simpleFilterProvider0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType.constructUnsafe(class0);
      simpleType0.isTypeOrSuperTypeOf(class0);
      simpleType0.toCanonical();
      simpleType0.equals((Object) null);
      ClassUtil.nullOrToString(simpleType0);
      ClassUtil.primitiveType(class0);
      ClassUtil.emptyIterator();
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Module> class1 = Module.class;
      Constructor<Module> constructor1 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      SQLException sQLException0 = new SQLException("*Q");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLException0, "a(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a(
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isBogusClass(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Module> class2 = Module.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ClassUtil.nonNullString((String) null);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.getEnclosingClass(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class2);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CollectionType collectionType2 = collectionType1.withTypeHandler(class1);
      CollectionType collectionType3 = collectionType1.withContentTypeHandler(collectionType2);
      CollectionType collectionType4 = collectionType3.withValueHandler(collectionType0);
      ClassUtil.classOf(collectionType4);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getPackageName(class0);
      Object object0 = new Object();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getUpdateCounts();
      batchUpdateException0.getLocalizedMessage();
      batchUpdateException0.getLargeUpdateCounts();
      Throwable throwable0 = ClassUtil.throwIfIOE(batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("j!vgU", (Throwable) null);
      File file0 = MockFile.createTempFile("j!vgU", "j!vgU");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) "j!vgU";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "Cannot pass null property name";
      objectArray0[7] = (Object) mockPrintStream0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)95;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[8] = (Object) file0;
      PrintStream printStream0 = mockPrintStream0.format("Cannot pass null property name", objectArray0);
      sQLDataException0.printStackTrace(printStream0);
      ClassUtil.getRootCause(sQLDataException0);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.isProxyType(class0);
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getPackageName(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getParameters();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getGenericSuperclass(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotation(class3);
      ClassUtil.hasEnclosingMethod(class1);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.findConstructor(class4, true);
      Class<String> class5 = String.class;
      ClassUtil.isProxyType(class5);
      Class<String> class6 = String.class;
      ClassUtil.getClassMethods(class6);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Throwable throwable0 = ClassUtil.getRootCause(batchUpdateException0);
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      batchUpdateException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, "~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ~
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.canBeABeanType(class0);
      String string0 = "Cannot find a Value deserializer for type ";
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 1831, objectMapper0, mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isJacksonStdImpl(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      DeserializationConfig deserializationConfig0 = null;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      boolean boolean0 = true;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.InputStream.class));
      NameTransformer.NopTransformer nameTransformer_NopTransformer0 = (NameTransformer.NopTransformer)NameTransformer.NOP;
      NameTransformer.Chained nameTransformer_Chained0 = new NameTransformer.Chained(nameTransformer_NopTransformer0, nameTransformer_NopTransformer0);
      coreXMLDeserializers_Std0.unwrappingDeserializer(nameTransformer_Chained0);
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      jsonFactory3.createParser((InputStream) sequenceInputStream0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAbstractTypeResolver((AbstractTypeResolver) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null resolver
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 9999, objectMapper1, mockPrintStream0, byteArray0, 0, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(2);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("qj<~ '4b", "qj<~ '4b", 0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException: qj<~ '4b
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getOuterClass(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.getGenericInterfaces(class2);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.getDeclaredMethods(class3);
      Class<Long> class4 = Long.class;
      ClassUtil.findEnumType(class4);
      Class<AccessPattern> class5 = AccessPattern.class;
      EnumMap<AccessPattern, String> enumMap0 = new EnumMap<AccessPattern, String>(class5);
      EnumMap<AccessPattern, String> enumMap1 = new EnumMap<AccessPattern, String>(enumMap0);
      EnumMap<AccessPattern, String> enumMap2 = enumMap1.clone();
      EnumMap<AccessPattern, String> enumMap3 = new EnumMap<AccessPattern, String>(enumMap2);
      EnumMap<AccessPattern, String> enumMap4 = enumMap3.clone();
      ClassUtil.findEnumType(enumMap4);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.findEnumType(class0);
      Class<Integer> class1 = Integer.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      String string0 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, (String) null);
      int[] intArray0 = new int[4];
      intArray0[0] = 8;
      intArray0[1] = 6;
      intArray0[2] = 2;
      intArray0[3] = (-407);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(batchUpdateException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isBogusClass(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Module> class2 = Module.class;
      ClassUtil.findConstructor(class2, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature1);
      JsonFactory jsonFactory4 = jsonFactory3.setCodec((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory5 = jsonFactory4.enable(jsonParser_Feature2);
      MockFile mockFile0 = new MockFile("JSON");
      File file0 = MockFile.createTempFile("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", "JSON", (File) mockFile0);
      JsonGenerator jsonGenerator0 = jsonFactory5.createGenerator(file0, jsonEncoding0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("+:z)B9wokp6A0C{4$O", "x#^<+;5$;<<>D$");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("x#^<+;5$;<<>D$", "+:z)B9wokp6A0C{4$O");
      sQLNonTransientException0.initCause(sQLIntegrityConstraintViolationException0);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException();
      sQLNonTransientException1.getLocalizedMessage();
      sQLNonTransientException1.addSuppressed(sQLNonTransientException0);
      sQLNonTransientException0.setNextException(sQLNonTransientException1);
      sQLNonTransientException0.setNextException(sQLNonTransientException1);
      sQLNonTransientException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // x#^<+;5$;<<>D$
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ClassUtil.nonNull("D]2f`H!K` *", "[]");
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      Class<MapType> class2 = MapType.class;
      Class<Void> class3 = Void.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isBogusClass(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ObjectCodec objectCodec0 = null;
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "keyUniverse");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      byte byte0 = (byte) (-79);
      boolean boolean0 = false;
      String string0 = "Failed to find default constructor of class ";
      MockFile mockFile2 = new MockFile("Failed to find default constructor of class ");
      mockFile2.setWritable(false);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      jsonFactory0._getBufferRecycler();
      Class<Error> class2 = Error.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Error is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.nameOf(class1);
      ClassUtil.primitiveType(class1);
      ClassUtil.isProxyType(class0);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.isBogusClass(class2);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.isConcrete(class3);
      ClassUtil.nameOf((Class<?>) null);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getConstructors(class1);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotationsByType(class3);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<Integer> class4 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class4);
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.canBeABeanType(class5);
      Class<Long> class6 = Long.class;
      boolean boolean0 = false;
      ClassUtil.findRawSuperTypes(class0, class6, false);
      String string0 = "size";
      MockFile mockFile0 = new MockFile("size");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (byte)0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<CollectionType> class1 = CollectionType.class;
      boolean boolean0 = false;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.nameOf(class1);
      String string0 = "FWnx]";
      String string1 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("FWnx]", (String) null, 125);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Azw^~u>j3hBl7X8XE F", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLFeatureNotSupportedException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<IOException> class1 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.findSuperTypes(class2, class0, list0);
      Class<String> class3 = String.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getConstructors(class3);
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class4);
      Class<BufferedInputStream> class5 = BufferedInputStream.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.BufferedInputStream is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getOuterClass(class1);
      Class<Character> class2 = Character.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      ClassUtil.getGenericInterfaces(class2);
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.getDeclaredMethods(class4);
      ClassUtil.nameOf(class3);
      Class<PlaceholderForType> class5 = PlaceholderForType.class;
      ClassUtil.primitiveType(class5);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<IOException> class6 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class6, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getConstructor();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLRecoverableException0);
      ClassUtil.throwIfRTE(mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ClassUtil.backticked(" t#xPRP");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findConstructor(class0, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLTransientConnectionException0);
      ClassUtil.quotedOr(throwable0, "=");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "FHOI)x";
      ClassUtil.quotedOr((Object) null, "FHOI)x");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.backticked("FHOI)x");
      Class<NoClass> class1 = NoClass.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.canBeABeanType(class0);
      Constructor<RuntimeException> constructor0 = null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isConcrete(class0);
      String string0 = "com.fasterxml.jackson.databind.util.TokenBuffer";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("=k~G", "com.fasterxml.jackson.databind.util.TokenBuffer");
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "com.fasterxml.jackson.databind.util.TokenBuffer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.util.TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "local/anonymous");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.type.CollectionType) must override method 'local/anonymous'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.isBogusClass(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Long> class2 = Long.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      Character character0 = new Character(':');
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findInjectableValue(character0, (BeanProperty) null, objectMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.findEnumType(class0);
      Class<Integer> class1 = Integer.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findConstructor(class3, false);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "Cannot figure out type for EnumSet (odd JDK platform?)");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot figure out type for EnumSet (odd JDK platform?)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.nameOf(class0);
      LinkedList<Class<AccessibleObject>> linkedList0 = new LinkedList<Class<AccessibleObject>>();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nameOf((Named) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getConstructors(class1);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isLocalType((Class<?>) null, false);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
      try { 
        SimpleType.constructUnsafe((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JavaType", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaringClass(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      Class<Float> class3 = Float.class;
      ClassUtil.canBeABeanType(class3);
      int int0 = 0;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ClassUtil.classNameOf(placeholderForType0);
      ClassUtil.isObjectOrPrimitive(class3);
      Class<ReferenceType> class4 = ReferenceType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ReferenceType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nameOf((Named) null);
      ClassUtil.getConstructors(class0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isLocalType(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isBogusClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.nullOrToString((Object) null);
      Class<Annotation> class2 = Annotation.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, class0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.annotation.Annotation) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getConstructors(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
