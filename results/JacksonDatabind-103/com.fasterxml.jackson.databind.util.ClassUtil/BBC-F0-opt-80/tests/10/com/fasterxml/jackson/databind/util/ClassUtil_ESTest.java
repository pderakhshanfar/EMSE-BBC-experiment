/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:47:54 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) filterOutputStream0, jsonEncoding0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ArrayType> class0 = ArrayType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(3, class0, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ArrayType` from number 3: JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      MockFile mockFile1 = new MockFile(mockFile0, "org.hibernate.proxy.com.fasterxml.jackson.databind.module.SimpleModule");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((File) mockFile1, jsonEncoding0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Long long0 = new Long(0L);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(long0, class0, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.sql.ClientInfoStatus` from number 0: JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "net.sf.cglib.proxy.";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.");
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Long> class1 = Long.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 8);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.canBeABeanType(class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLDataException0);
      sQLDataException0.spliterator();
      sQLWarning0.fillInStackTrace();
      sQLDataException0.printStackTrace();
      sQLDataException0.initCause(sQLWarning0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLDataException sQLDataException0 = new SQLDataException("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      SQLException sQLException0 = new SQLException(sQLDataException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLException0.getLocalizedMessage();
      sQLException0.printStackTrace();
      sQLException0.forEach(consumer0);
      ClassUtil.throwIfRTE(sQLException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nullOrToString("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.fasterxml.jackson.databind.type.ClassKey", "VeRJF*v'2'qqMY", "", 2954);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      Class<Integer> class0 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "java.sql.SQLDataException: org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      mapLikeType0.getErasedSignature(stringBuilder0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(mapLikeType0, mapLikeType1);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) collectionLikeType1, (Class<?>) class0, false);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.nonNullString("net.sf.cglib.proxy.java.lang.Character");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassUtil.emptyIterator();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = mapType1.withKeyType(mapType0);
      ClassUtil.findSuperTypes((JavaType) mapType2, (Class<?>) class0, true);
      Class<Long> class1 = Long.class;
      Class<String> class2 = String.class;
      ClassUtil.findSuperTypes(class1, class2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Void>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassUtil.nonNull(simpleType0, simpleType0);
      ClassUtil.isConcrete(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.defaultValue(class0);
      Class<ArrayType> class2 = ArrayType.class;
      Class<Integer> class3 = Integer.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", " is not a primitive type", (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("'`", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0, "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.deser.DefaultDeserializationContext
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<JsonSerializer> class1 = JsonSerializer.class;
      ClassUtil.findSuperTypes(class0, class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      MockIOException mockIOException0 = new MockIOException("w;\"vZYx)w<D<7dI", (Throwable) null);
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.quotedOr(class0, "non-static member class");
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.getOuterClass(class0);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      Class<NoClass> class1 = NoClass.class;
      Class<Module> class2 = Module.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.defaultValue(class0);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, AccessPattern> enumMap0 = new EnumMap<AccessPattern, AccessPattern>(class0);
      ClassUtil.findEnumType(enumMap0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Module> class0 = Module.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = false;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.isConcrete((Member) constructor0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      objectMapper0.readerForUpdating(iOContext1);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getPackageName(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IOException> class1 = IOException.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes((JavaType) arrayType0, (Class<?>) class2, true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      enumSet0.add(accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(accessPattern0);
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, false);
      DataTruncation dataTruncation0 = new DataTruncation((-537), false, false, 1624, 1501);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[0];
      iOContext0.allocTokenBuffer(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-338), (ObjectCodec) null, bufferedOutputStream0, byteArray0, 3101, false);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGenerator0, (Exception) dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.DataTruncation: Data truncation
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.allOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isConcrete(class0);
      MockError mockError0 = new MockError();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", "ROOT", (-3480), mockError0);
      sQLTransientConnectionException0.getLocalizedMessage();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Class ", "(L^y", (-3480), sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0, "Class ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<Short> class2 = Short.class;
      Class<Character> class3 = Character.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class3, (JavaType) simpleType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      Class<JsonDeserializer> class4 = JsonDeserializer.class;
      ClassUtil.findSuperTypes(javaType0, class4, false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Float float0 = new Float(3536.5817397379565);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class0, "enum");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("}(Z0obxZ#t;r", "}(Z0obxZ#t;r", 571, jsonMappingException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("(:", "(:", sQLTimeoutException0);
      sQLSyntaxErrorException0.setNextException(sQLFeatureNotSupportedException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Integer` from number 3536.5818: enum
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.nameOf(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.primitiveType(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.quotedOr((Object) null, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(65536, false, false, 55, 55);
      dataTruncation0.getNextWarning();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataTruncation0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Class<Void> class0 = Void.class;
      objectMapper1.readerFor(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.nameOf(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.canBeABeanType(class1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.findSuperClasses(class0, class0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class2);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.findEnumType(class3);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, AccessPattern> enumMap0 = new EnumMap<AccessPattern, AccessPattern>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumMap0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      ClassUtil.findEnumType(enumSet0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, enumSet0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-6);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, (OutputStream) null, byteArray0, 1, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, true);
      int[] intArray0 = new int[3];
      intArray0[0] = 56320;
      intArray0[1] = 2;
      intArray0[2] = (int) (byte)1;
      MockException mockException0 = new MockException("RY)M1V!<", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("elementType", "net.sf.cglib.proxy.java.lang.Integer", intArray0, mockException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" as a Bean", "org.hibernate.proxy.", batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException:  as a Bean
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.nameOf((Named) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getConstructors(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getOuterClass(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.instantiationException((Class<?>) null, "8/$Lo{$A9!Zo#'.I/");
      jsonMappingException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0, ",<MP}@DX>GkxKnNd=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ,<MP}@DX>GkxKnNd=
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      DataTruncation dataTruncation0 = new DataTruncation((-4836), true, true, (-1191), (-166));
      dataTruncation0.getNextWarning();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, true, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) null, (Exception) dataTruncation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.primitiveType(class0);
      DataTruncation dataTruncation0 = new DataTruncation((-2479), false, false, (-2479), (-2479));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", (-1654975209), dataTruncation0);
      dataTruncation0.initCause(sQLSyntaxErrorException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Character character0 = new Character('K');
      Class<Character> class0 = Character.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.hasClass(character0, class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Float> class0 = Float.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.nullOrToString(constructor0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      MockException mockException0 = new MockException((Throwable) null);
      DataTruncation dataTruncation0 = new DataTruncation(32768, true, true, (-1807672430), (-1807672430), mockException0);
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(decimalNode0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) dataTruncation0, jsonMappingException_Reference0);
      SQLWarning sQLWarning0 = new SQLWarning("|`18<Iym", "|`18<Iym", jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<DecimalNode> class0 = DecimalNode.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Long> class2 = Long.class;
      ClassUtil.isLocalType(class2, true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory2.setInputDecorator(inputDecorator0);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isConcrete(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)105;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Short> class0 = Short.class;
      ClassUtil.isJacksonStdImpl(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("IM$e(jj%(q[Ef");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((byte)105);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-13);
      intArray0[2] = (int) (byte) (-13);
      intArray0[3] = (-653);
      intArray0[4] = (int) (byte) (-13);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("JSON", "IM$e(jj%(q[Ef", intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JSON", "JSON", batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("JSON", sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException1, (Object) jsonFactory1, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON (through reference chain: com.fasterxml.jackson.core.JsonFactory[\"JSON\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isProxyType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isBogusClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<Short> class3 = Short.class;
      ClassUtil.findSuperTypes(class2, class3);
      SQLDataException sQLDataException0 = new SQLDataException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType");
      Throwable throwable0 = ClassUtil.throwIfError(sQLDataException0);
      ClassUtil.throwIfRTE(throwable0);
      Class<Object> class4 = Object.class;
      ClassUtil.isObjectOrPrimitive(class4);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLWarning0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, false);
      Long long0 = new Long(0L);
      Long long1 = new Long(0L);
      ClassUtil.nonNull((Long) null, long1);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, false);
      Long long0 = new Long(0L);
      int[] intArray0 = new int[7];
      intArray0[0] = 1381;
      intArray0[1] = 2102;
      intArray0[2] = (-1555);
      intArray0[3] = 878;
      intArray0[4] = 2;
      intArray0[5] = (-6);
      intArray0[6] = (-2902);
      MockError mockError0 = new MockError("[null]");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ArrayType> class0 = ArrayType.class;
      objectMapper0.canSerialize(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, false);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotation(class3);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor0.getParamCount();
      Constructor<RuntimeException> constructor1 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(constructor1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Integer integer0 = new Integer(390);
      ClassUtil.hasClass(class0, class0);
      ClassUtil.verifyMustOverride(class0, integer0, "unknown");
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, false);
      Long long0 = new Long(0L);
      ClassUtil.nonNull((Long) null, (Long) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.canSerialize(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonFactory0.configure(jsonParser_Feature0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MapLikeType> class1 = MapLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class1, (String) null);
      Class<Short> class2 = Short.class;
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class2, "org.hibernate.proxy.java.lang.RuntimeException");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(jsonMappingException1);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapLikeType` from number 0: null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(linkedList0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.nameOf(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      System.setCurrentTimeMillis((-790L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1295);
      intArray0[1] = 1;
      intArray0[2] = (-617);
      intArray0[3] = 323;
      intArray0[4] = (-1809238660);
      intArray0[5] = 323;
      intArray0[6] = 1441;
      intArray0[7] = (-1809238660);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.isJacksonStdImpl((Object) class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = true;
      DataTruncation dataTruncation0 = new DataTruncation(2268, true, true, 1, (-56));
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "EW<qDE6(~$+MA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ClassUtil.nonNullString("2h{");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, pipedOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "2h{");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 2h{
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getPackageName(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ClassUtil.nonNullString("\"t-`M^+qW");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte)43;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Byte byte0 = new Byte((byte)48);
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(byte0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, false);
      Class<Double> class3 = Double.class;
      ClassUtil.findRawSuperTypes(class1, class3, false);
      ClassUtil.isObjectOrPrimitive(class3);
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Integer> class5 = Integer.class;
      ClassUtil.isProxyType(class5);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1274, objectMapper0, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassUtil.backticked("entrySet");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("entrySet");
      Boolean boolean0 = new Boolean(false);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.isConcrete((Member) constructor0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ClassUtil.nonNullString("2h{");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class0);
      Boolean boolean0 = Boolean.valueOf((String) null);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultMergeable(boolean0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      int[] intArray0 = new int[3];
      intArray0[0] = (-1746839910);
      intArray0[1] = (-1807324828);
      intArray0[2] = (-2374);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.SimpleType", (String) null, intArray0, (Throwable) null);
      Throwable throwable0 = ClassUtil.throwIfIOE(batchUpdateException0);
      MockIOException mockIOException0 = new MockIOException(throwable0);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.sql.BatchUpdateException: org.hibernate.proxy.com.fasterxml.jackson.databind.type.SimpleType
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.hasEnclosingMethod(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findSuperClasses((Class<?>) null, class2, false);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.hasEnclosingMethod(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.hasEnclosingMethod(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaringClass(class1);
      Float float0 = new Float(944.06105089);
      ClassUtil.isJacksonStdImpl((Object) float0);
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassUtil.backticked("*5s6u2Lz{v9x");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class1, (Class<?>) null, false);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.hasEnclosingMethod(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassUtil.backticked("*5s6u2Lz{v9x");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ClassUtil.isNonStaticInnerClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, AccessPattern> enumMap0 = new EnumMap<AccessPattern, AccessPattern>(class0);
      enumMap0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.findEnumType(enumMap0);
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      ClassUtil.findEnumType(enumSet0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "Iv6N]*");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Iv6N]*
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.nullOrToString((Object) null);
      Integer integer0 = new Integer(1811);
      Integer integer1 = new Integer(1811);
      ClassUtil.nonNull(integer1, integer0);
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isProxyType(class2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.Character");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      String string0 = "size";
      Class<Boolean> class0 = Boolean.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("size", class0, "size");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Boolean` from String \"size\": size
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<DecimalNode> class1 = DecimalNode.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<IOException> class2 = IOException.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<MapLikeType> class3 = MapLikeType.class;
      Class<Integer> class4 = Integer.class;
      ClassUtil.findSuperTypes((JavaType) null, class4, false);
      Class<ResolvedRecursiveType> class5 = ResolvedRecursiveType.class;
      ClassUtil.findRawSuperTypes(class5, class3, false);
      Class<Integer> class6 = Integer.class;
      ClassUtil.canBeABeanType(class6);
      Class<RuntimeException> class7 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class7, false);
      Class<AccessPattern> class8 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class8);
      ClassUtil.findEnumType(enumSet0);
      Class<JsonMappingException> class9 = JsonMappingException.class;
      ClassUtil.isBogusClass(class9);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(runtimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, AccessPattern> enumMap0 = new EnumMap<AccessPattern, AccessPattern>(class0);
      EnumMap<AccessPattern, AccessPattern> enumMap1 = enumMap0.clone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      enumMap0.put(accessPattern0, accessPattern1);
      ClassUtil.findEnumType(enumMap1);
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      ClassUtil.findEnumType(enumSet0);
      Class<Double> class1 = Double.class;
      ClassUtil.isBogusClass(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = new Double(0.0);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      AnnotationIntrospector.nopInstance();
      ClassUtil.quotedOr((Object) null, "7s7ki}N:}>Mk@|IXWEP");
      ClassUtil.emptyIterator();
      SQLWarning sQLWarning0 = new SQLWarning();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLWarning0.forEach(consumer0);
      ClassUtil.throwIfError(sQLWarning0);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.quotedOr((Object) null, "nfNO:&tS`/jvaf K");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Float> class0 = Float.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<Integer> class2 = Integer.class;
      ClassUtil.nullOrToString(class1);
      Integer integer0 = new Integer(1811);
      Integer integer1 = new Integer(1053);
      ClassUtil.nonNull(integer0, integer1);
      Class<?> class3 = ClassUtil.primitiveType(class0);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.getEnclosingClass(class3);
      Class<CollectionType> class4 = CollectionType.class;
      Class<String> class5 = String.class;
      ClassUtil.findSuperTypes(class4, class5, list0);
      System.setCurrentTimeMillis(1811);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.setAccessible(false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      Class<IOException> class3 = IOException.class;
      ClassUtil.findSuperTypes(class2, class3);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("6S");
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("6S");
      ClassUtil.emptyIterator();
      ClassUtil.getGenericInterfaces(class2);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.getConstructors(class4);
      Class<CollectionType> class5 = CollectionType.class;
      ClassUtil.isLocalType(class5, false);
      Class<Integer> class6 = Integer.class;
      ClassUtil.primitiveType(class6);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.setAccessible(false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("; failed to set access: ");
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException((String) null);
      ClassUtil.emptyIterator();
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.isLocalType(class1, true);
      Class<Long> class2 = Long.class;
      ClassUtil.primitiveType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "WU!w4W1lWtT7P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WU!w4W1lWtT7P
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.nameOf(class0);
      ClassUtil.nonNullString("");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<Integer> class2 = Integer.class;
      ClassUtil.nullOrToString(class1);
      Integer integer0 = new Integer(1811);
      Integer integer1 = new Integer(1053);
      ClassUtil.nonNull(integer0, integer1);
      Class<?> class3 = ClassUtil.primitiveType(class0);
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.getEnclosingClass(class3);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.nullOrToString(class1);
      Integer integer0 = new Integer(1811);
      Integer integer1 = new Integer(1053);
      ClassUtil.nonNull(integer0, integer1);
      ClassUtil.primitiveType(class0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isBogusClass(class2);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.getDeclaredFields(class3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isBogusClass(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class3);
      Class<Short> class4 = Short.class;
      ClassUtil.canBeABeanType(class4);
      Class<Character> class5 = Character.class;
      ClassUtil.findSuperTypes(class5, class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("READ_ONLY");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("READ_ONLY", (String) null, 462);
      Throwable throwable0 = sQLIntegrityConstraintViolationException0.initCause(sQLTimeoutException0);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      String string0 = "x5uKT*9/Ow`kR";
      SQLTransientException sQLTransientException0 = new SQLTransientException("x5uKT*9/Ow`kR");
      ClassUtil.throwIfIOE(sQLTransientException0);
      ClassUtil.emptyIterator();
      Class<JsonMappingException> class6 = JsonMappingException.class;
      ClassUtil.getConstructors(class6);
      sQLTimeoutException0.initCause(throwable0);
      sQLTimeoutException0.getStackTrace();
      ClassUtil.isLocalType(class2, false);
      Class<Short> class7 = Short.class;
      ClassUtil.primitiveType(class7);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.setAccessible(false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Boolean boolean0 = new Boolean(false);
      ClassUtil.getConstructors(class0);
      ClassUtil.nonNullString("org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getClassMethods(class0);
      Long long0 = new Long(16L);
      ClassUtil.getClassDescription(class0);
      ClassUtil.hasClass("`void`", class0);
      Boolean boolean0 = Boolean.TRUE;
      Class<Character> class1 = Character.class;
      Object object0 = ClassUtil.nonNull((Object) boolean0, (Object) class0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, object0, "`void`");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Boolean (of class java.lang.Character) must override method '`void`'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Integer> class1 = Integer.class;
      Class<Double> class2 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.isLocalType(class2, true);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getClassMethods(class0);
      SQLDataException sQLDataException0 = new SQLDataException("u3F", "com.fasterxml.jackso");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException: u3F
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.getDeclaringClass(class3);
      ClassUtil.emptyIterator();
      ClassUtil.isJacksonStdImpl((Object) bufferRecycler0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<Object> class2 = Object.class;
      ClassUtil.getConstructors(class2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TypeFactory.defaultInstance();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, true);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class1);
      ClassUtil.findEnumType(enumSet0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.throwRootCauseIfIOE(runtimeException0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.hasClass(class0, class0);
      Double double0 = new Double(0.0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("HhKRs/EF3q|!+hv5#B`", sQLInvalidAuthorizationSpecException0);
      mockRuntimeException0.getSuppressed();
      mockRuntimeException0.getLocalizedMessage();
      ClassUtil.classNameOf(mockRuntimeException0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findEnumType(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.getGenericSuperclass(class1);
      Class<Object> class3 = Object.class;
      ClassUtil.getGenericSuperclass(class3);
      Float float0 = new Float(1.0F);
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      ClassUtil.getClassDescription(decimalNode0);
      ClassUtil.isJacksonStdImpl(class1);
      Class<Character> class4 = Character.class;
      Short short0 = new Short((short) (-7));
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class4, short0, "V1g2=A|[Kw9MBMh$UI");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Short (of class java.lang.Character) must override method 'V1g2=A|[Kw9MBMh$UI'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Double> class0 = Double.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassUtil.nonNull(simpleType0, simpleType0);
      ClassUtil.isConcrete(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getDeclaredMethods(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.backticked("[]");
      Class<String> class3 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Double> class1 = Double.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<Double> class1 = Double.class;
      ClassUtil.isConcrete(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.backticked("w$NbDgR?>oFg-/O!");
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Double> class0 = Double.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassUtil.nonNull(simpleType0, simpleType0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      Class<Short> class2 = Short.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.getDeclaringClass(class3);
      ClassUtil.isJacksonStdImpl((Object) class2);
      String string0 = "U6B>18.9TQ_h";
      ClassUtil.nonNullString("U6B>18.9TQ_h");
      int int0 = 312;
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, AccessPattern> enumMap0 = new EnumMap<AccessPattern, AccessPattern>(class0);
      EnumMap<AccessPattern, AccessPattern> enumMap1 = new EnumMap<AccessPattern, AccessPattern>(enumMap0);
      EnumMap<AccessPattern, AccessPattern> enumMap2 = new EnumMap<AccessPattern, AccessPattern>(enumMap1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      enumMap2.keySet();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      enumMap2.put(accessPattern1, accessPattern2);
      MockIOException mockIOException0 = new MockIOException("H;fs&4?fn_}Zs;*");
      JsonMappingException.fromUnexpectedIOE(mockIOException0);
      enumMap2.remove((Object) accessPattern0, (Object) "H;fs&4?fn_}Zs;*");
      AccessPattern accessPattern3 = AccessPattern.CONSTANT;
      AccessPattern accessPattern4 = AccessPattern.CONSTANT;
      enumMap2.put(accessPattern4, accessPattern3);
      ClassUtil.findEnumType(enumMap1);
      Class<Integer> class1 = Integer.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.setAccessible(false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotatedReceiverType();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Byte byte0 = new Byte((byte) (-94));
      Character.valueOf('z');
      ClassUtil.backticked("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.backticked((String) null);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(0.0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      objectMapper0.readerForUpdating(defaultSerializerProvider_Impl0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClassUtil.backticked("entrySet");
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isLocalType(class0, false);
      Long long0 = new Long(2086L);
      Long long1 = new Long(2086L);
      Long long2 = new Long((-121L));
      ClassUtil.nonNull(long1, long2);
      Character character0 = new Character('{');
      ClassUtil.classOf(character0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.nonNullString("A[Owp>8>=TG l");
      Class<Long> class0 = Long.class;
      ClassUtil.isConcrete(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Integer integer0 = new Integer(3600);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, integer0, "mJh<+");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Integer (of class java.lang.RuntimeException) must override method 'mJh<+'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.hasClass(class0, class0);
      Double double0 = new Double(0.0);
      Class<?> class1 = ClassUtil.classOf(double0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("HhKRs/EF3q|!+hv5#B`", sQLInvalidAuthorizationSpecException0);
      mockRuntimeException0.getSuppressed();
      sQLInvalidAuthorizationSpecException0.fillInStackTrace();
      mockRuntimeException0.getLocalizedMessage();
      ClassUtil.classNameOf(mockRuntimeException0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findEnumType(class2);
      Class<Short> class3 = Short.class;
      ClassUtil.isNonStaticInnerClass(class3);
      ClassUtil.getGenericSuperclass(class2);
      ClassUtil.getConstructors(class1);
      Class<Module> class4 = Module.class;
      ClassUtil.getGenericSuperclass(class4);
      Float float0 = new Float(1.0F);
      ClassUtil.getClassDescription(float0);
      Class<Error> class5 = Error.class;
      ClassUtil.isJacksonStdImpl(class5);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.isConcrete(class1);
      ClassUtil.getDeclaredMethods(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.findSuperTypes(class0, class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.canBeABeanType(class2);
      Class<Character> class3 = Character.class;
      Class<MapLikeType> class4 = MapLikeType.class;
      ClassUtil.findSuperTypes(class4, class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException((String) null);
      ClassUtil.emptyIterator();
      ClassUtil.getGenericInterfaces(class3);
      ClassUtil.getConstructors(class3);
      Class<MapLikeType> class5 = MapLikeType.class;
      ClassUtil.isLocalType(class5, false);
      Class<Byte> class6 = Byte.class;
      ClassUtil.primitiveType(class6);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "com.fasterxml.jackson.databind.JsonNode");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.JsonNode
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.isLocalType(class2, true);
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.nonNullString((String) null);
      Integer integer0 = new Integer(1811);
      Integer integer1 = new Integer(1053);
      ClassUtil.nonNull(integer0, integer1);
      ClassUtil.hasEnclosingMethod(class1);
      Class<Double> class3 = Double.class;
      ClassUtil.isConcrete(class3);
      Class<Annotation> class4 = Annotation.class;
      ClassUtil.getConstructors(class4);
      SQLException sQLException0 = new SQLException((String) null, (String) null, 1811);
      SQLException sQLException1 = new SQLException((String) null, (String) null, 80, sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLException1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getConstructors(class0);
      Class<MapType> class1 = MapType.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      Class<NoClass> class3 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor1, true);
      classUtil_Ctor0.getDeclaredAnnotations();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("WNv7", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.getStackTrace();
      classUtil_Ctor0.getParameterAnnotations();
      sQLSyntaxErrorException0.getStackTrace();
      ClassUtil.quotedOr(class0, "WNv7");
      ClassUtil.getDeclaredMethods(class3);
      ClassUtil.nullOrToString(throwable0);
      Class class4 = (Class)ClassUtil.getGenericSuperclass(class1);
      ClassUtil.classNameOf(class2);
      MockError mockError0 = new MockError("?.XsABK&Y`Fu2K(C");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ClassUtil.getPackageName(class4);
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "java.lang");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isBogusClass(class2);
      Class<Character> class3 = Character.class;
      ClassUtil.findSuperTypes(class3, class1);
      ClassUtil.emptyIterator();
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class4);
      Class<MapType> class5 = MapType.class;
      ClassUtil.getConstructors(class5);
      Class<Object> class6 = Object.class;
      ClassUtil.isLocalType(class6, false);
      Class<Float> class7 = Float.class;
      ClassUtil.primitiveType(class7);
      Class<RuntimeException> class8 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class8, class8, true);
      Class<IOException> class9 = IOException.class;
      ClassUtil.isConcrete(class9);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ClassUtil.classOf((Object) null);
      Class<Integer> class0 = Integer.class;
      Class<Short> class1 = Short.class;
      String string0 = "entrySet";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "entrySet");
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getOuterClass(class2);
      String string1 = " is not a primitive type";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, " is not a primitive type");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.isLocalType(class2, true);
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.nonNullString((String) null);
      int int0 = 1811;
      Integer integer0 = new Integer(1811);
      Integer integer1 = new Integer(1053);
      ClassUtil.nonNull(integer0, integer1);
      ClassUtil.isObjectOrPrimitive(class2);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isConcrete(class1);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      constructor0.getParameterCount();
      Class<AccessPattern> class3 = AccessPattern.class;
      constructor0.getAnnotatedExceptionTypes();
      ClassUtil.getClassMethods(class3);
      Class<CollectionType> class4 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class2, class4, false);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, AccessPattern> enumMap0 = new EnumMap<AccessPattern, AccessPattern>(class0);
      EnumMap<AccessPattern, AccessPattern> enumMap1 = new EnumMap<AccessPattern, AccessPattern>(enumMap0);
      EnumMap<AccessPattern, AccessPattern> enumMap2 = new EnumMap<AccessPattern, AccessPattern>(enumMap1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      enumMap1.put(accessPattern0, accessPattern1);
      MockIOException mockIOException0 = new MockIOException("H;fs&4?fn_}Zs;*");
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      enumMap0.remove((Object) "H;fs&4?fn_}Zs;*", (Object) jsonMappingException0);
      AccessPattern accessPattern2 = AccessPattern.CONSTANT;
      AccessPattern accessPattern3 = AccessPattern.CONSTANT;
      enumMap2.put(accessPattern2, accessPattern3);
      ClassUtil.findEnumType(enumMap2);
      Class<Integer> class1 = Integer.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ClassUtil.backticked(">#s6u2L[{v9x");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Long> class1 = Long.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ClassUtil.getConstructors(class0);
      ClassUtil.isLocalType(class0, false);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.primitiveType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, ">#s6u2L[{v9x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ClassUtil.backticked("B5Z]0/=G8Fe^6@S}J`N");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = ">#s6u2L[{v9x";
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<Void> class3 = Void.class;
      ClassUtil.getDeclaringClass(class3);
      StackTraceElement stackTraceElement0 = new StackTraceElement("nDgK0id3'7}4H^!-&", "nDgK0id3'7}4H^!-&", "org.hibernate.proxy.java.lang.Float", 0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      stackTraceElementArray0[4] = stackTraceElement0;
      stackTraceElementArray0[5] = stackTraceElement0;
      stackTraceElementArray0[6] = stackTraceElement0;
      sQLTransactionRollbackException0.spliterator();
      stackTraceElementArray0[7] = stackTraceElement0;
      stackTraceElementArray0[8] = stackTraceElement0;
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLTransactionRollbackException0);
      mockRuntimeException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ClassUtil.backticked(">#s6u2L[{v9x");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil classUtil0 = new ClassUtil();
      List<Class<?>> list0 = new Stack<Class<ReferenceType>>();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.nonNullString("K0}!)");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.setAccessible(false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedReceiverType();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getConstructor();
      classUtil_Ctor0.getParameterAnnotations();
      MockThrowable mockThrowable0 = new MockThrowable("keyUniverse");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("size", "R2XKXF", mockThrowable0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.isLocalType(class2, false);
      Class<Character> class3 = Character.class;
      ClassUtil.primitiveType(class3);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyUniverse
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ClassUtil.backticked(">#s6u2L[{v9x");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Long> class1 = Long.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 192, objectMapper0, byteArrayOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) byteArrayOutputStream0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      Object object0 = null;
      Class<NoClass> class1 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "enum");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isConcrete(class1);
      Class<Object> class2 = Object.class;
      boolean boolean0 = false;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getAnnotatedExceptionTypes();
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AnnotationIntrospector.nopInstance();
      SQLWarning sQLWarning0 = new SQLWarning("JSON");
      sQLWarning0.spliterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("JSON", "ywODI.^", sQLWarning0);
      sQLTransactionRollbackException0.addSuppressed(sQLWarning0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Q|L-:");
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      ClassUtil.isJacksonStdImpl((Object) "ywODI.^");
      Class<CollectionType> class0 = CollectionType.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getOuterClass(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<Float> class3 = Float.class;
      ClassUtil.isProxyType(class3);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-44);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "J_W");
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLWarning0.forEach(consumer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sQLTransactionRollbackException0.getLocalizedMessage();
      sQLWarning0.spliterator();
      sQLTransactionRollbackException0.addSuppressed(sQLWarning0);
      ClassUtil.throwRootCauseIfIOE(sQLTransactionRollbackException0);
      ClassUtil.isJacksonStdImpl((Object) sQLWarning0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes((Class<?>) null, class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getOuterClass(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      Class<Integer> class4 = Integer.class;
      ClassUtil.findRawSuperTypes(class3, class4, false);
      Class<NoClass> class5 = NoClass.class;
      ClassUtil.isProxyType(class5);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isBogusClass(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class3);
      Class<Short> class4 = Short.class;
      ClassUtil.canBeABeanType(class4);
      Class<Character> class5 = Character.class;
      ClassUtil.findSuperTypes(class5, class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      ClassUtil.canBeABeanType(class5);
      ClassUtil.getClassDescription(class2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-6));
      // Undeclared exception!
      try { 
        placeholderForType0.withTypeHandler(class2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.classNameOf(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findSuperTypes((JavaType) null, class1, true);
      Class<Double> class2 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class2, true);
      Class<Character> class3 = Character.class;
      ClassUtil.canBeABeanType(class3);
      Class<RuntimeException> class4 = RuntimeException.class;
      Class<CollectionType> class5 = CollectionType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class2, (List<JavaType>) null);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      // Undeclared exception!
      try { 
        MapType.construct(class5, typeBindings0, (JavaType) null, javaTypeArray0, javaTypeArray0[2], javaTypeArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.findSuperClasses(class1, class0, true);
      ClassUtil.canBeABeanType(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLWarning sQLWarning0 = new SQLWarning("chlass");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("@(TPO}[.]-", hashMap0, sQLWarning0);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0, sQLWarning0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("[]", sQLClientInfoException1);
      ClassUtil.throwIfIOE(sQLTransientException0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findRawSuperTypes(class2, class1, true);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isBogusClass(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class3);
      Class<Short> class4 = Short.class;
      ClassUtil.canBeABeanType(class4);
      Class<Character> class5 = Character.class;
      ClassUtil.findSuperTypes(class5, class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("READ_ONLY");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("READ_ONLY", (String) null, 462);
      sQLIntegrityConstraintViolationException0.initCause(sQLTimeoutException0);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      String string0 = "x5uKT*9/Ow`kR";
      SQLTransientException sQLTransientException0 = new SQLTransientException("x5uKT*9/Ow`kR");
      ClassUtil.throwIfIOE(sQLTransientException0);
      ClassUtil.emptyIterator();
      Class<JsonMappingException> class6 = JsonMappingException.class;
      ClassUtil.getConstructors(class6);
      sQLTimeoutException0.getStackTrace();
      ClassUtil.isLocalType(class2, false);
      Class<Short> class7 = Short.class;
      ClassUtil.primitiveType(class7);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // READ_ONLY
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ClassUtil.backticked(">#s6u2L[{v9x");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Long> class1 = Long.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, true);
      Class<Long> class2 = Long.class;
      ClassUtil.getPackageName(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      Class<Double> class0 = Double.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<Void> class3 = Void.class;
      ClassUtil.getDeclaringClass(class3);
      ClassUtil.isJacksonStdImpl((Object) class3);
      ClassUtil.nonNullString("[]");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.nullOrToString(class1);
      ClassUtil.hasEnclosingMethod(class2);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLTransientException0);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "NULL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NULL
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ClassUtil.classNameOf((Object) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B(u");
      Object object0 = null;
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.nullOrToString(class0);
      ClassUtil.nonNullString("java.lang.Class@0000000001");
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.backticked("; expected type JsonDeserializer or Class<JsonDeserializer> instead");
      String string0 = null;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "java.lang.Class@0000000001", (-2400));
      sQLDataException0.getSuppressed();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      short short0 = (short)2275;
      Short short1 = new Short((short)2275);
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.hasClass(short1, class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findClassAnnotations(class1);
      String string0 = "vA\"H9G";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class1, "vA\"H9G");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.module.SimpleModule) must override method 'vA\"H9G'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Long> class1 = Long.class;
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.canBeABeanType(class3);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLWarning sQLWarning0 = new SQLWarning("Qt)");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0, sQLWarning0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLWarning0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Qt)", sQLClientInfoException1);
      ClassUtil.throwIfIOE(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isBogusClass(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class3);
      Class<Short> class4 = Short.class;
      ClassUtil.canBeABeanType(class4);
      Class<Character> class5 = Character.class;
      ClassUtil.findSuperTypes(class5, class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, (-442));
      sQLIntegrityConstraintViolationException0.initCause(sQLTimeoutException0);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      ClassUtil.emptyIterator();
      Class<CollectionLikeType> class6 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class6);
      Class<MapType> class7 = MapType.class;
      ClassUtil.getConstructors(class7);
      sQLTimeoutException0.getStackTrace();
      Class<Object> class8 = Object.class;
      ClassUtil.isLocalType(class8, false);
      Class<Float> class9 = Float.class;
      ClassUtil.primitiveType(class9);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<NoClass> class1 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Annotation> class0 = Annotation.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, " has no default (no arg) constructor", "keyUniverse");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Cannot construct instance of %s (although at least one Creator exists): %s", "uct", hashMap0, jsonMappingException0);
      sQLClientInfoException0.spliterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(jsonMappingException0);
      sQLClientInfoException0.setNextException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot construct instance of %s (although at least one Creator exists): %s
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ClassUtil.backticked(">#s6u2L[{v9x");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Long> class1 = Long.class;
      ClassUtil.getPackageName(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isConcrete(class1);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      constructor0.getAnnotatedExceptionTypes();
      ClassUtil.getClassMethods(class3);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.hasEnclosingMethod(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.hasEnclosingMethod(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.emptyIterator();
      ClassUtil.isJacksonStdImpl((Object) class1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.findEnumType(class0);
      ClassUtil.nonNullString("6D^");
      Class<Double> class1 = Double.TYPE;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.backticked("6D^");
      Class<ReferenceType> class2 = ReferenceType.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ReferenceType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 1179);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.spliterator();
      sQLTransientConnectionException0.getStackTrace();
      sQLTransientConnectionException0.forEach(consumer0);
      ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      Class<String> class0 = String.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      Class<Double> class1 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getEnclosingClass(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("\"%s\"", "hz", 65536);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("hz", "hz", 65536, sQLTransactionRollbackException0);
      SQLDataException sQLDataException0 = new SQLDataException(".5]=", sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      ClassUtil.getPackageName(class0);
      ClassUtil.isConcrete(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Incomplete surrogate pair: first char 0x", "Incomplete surrogate pair: first char 0x");
      Class<Module> class2 = Module.class;
      ClassUtil.findSuperTypes(class2, class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("oKXTAL{+Go}K?G");
      int int0 = 3018;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.PropertyNamingStrategy$UpperCamelCaseStrategy", "Duplicate property '", 3018);
      Throwable throwable0 = sQLIntegrityConstraintViolationException0.initCause(sQLTimeoutException0);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      ClassUtil.emptyIterator();
      Class<Error> class3 = Error.class;
      ClassUtil.getGenericInterfaces(class3);
      ClassUtil.getConstructors(class1);
      ClassUtil.isLocalType(class3, true);
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      ClassUtil.primitiveType(class4);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.PropertyNamingStrategy$UpperCamelCaseStrategy
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class1);
      String string0 = "Incomplete surrogate pair: first char 0x";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Incomplete surrogate pair: first char 0x", "Incomplete surrogate pair: first char 0x");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Duplicate property '", "Incomplete surrogate pair: first char 0x", "Incomplete surrogate pair: first char 0x", 1008);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Incomplete surrogate pair: first char 0x", "eljyv+F6`oqHJu%4Zi/", "eljyv+F6`oqHJu%4Zi/", 1008);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = null;
      try {
        stackTraceElement2 = new StackTraceElement((String) null, "Duplicate property '", "Bk;YNH\"ooFckPd C+ws", 56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isLocalType(class0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "\\";
      int[] intArray0 = new int[3];
      intArray0[0] = 624;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      Class<CollectionType> class1 = CollectionType.class;
      Class<CollectionType> class2 = CollectionType.class;
      // Undeclared exception!
      try { 
        simpleAbstractTypeResolver0.addMapping(class1, (Class<? extends CollectionType>) class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add mapping from class to itself
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.isConcrete(class1);
      ClassUtil.getDeclaredMethods(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findClassAnnotations(class0);
      boolean boolean0 = true;
      ClassUtil.isLocalType(class0, true);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.nonNullString("6D^");
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.getPackageName(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.setAccessible(false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedReceiverType();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getConstructor();
      classUtil_Ctor0.getParameterAnnotations();
      MockThrowable mockThrowable0 = new MockThrowable("keyUniverse");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("size", "R2XKXF", mockThrowable0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      sQLNonTransientConnectionException0.setNextException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyUniverse
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.canBeABeanType(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientConnectionException0.addSuppressed(sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaredMethods(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("e5D\"8[|~+?0", "e5D\"8[|~+?0");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // e5D\"8[|~+?0
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "serialVersionUID";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      String string1 = "eV8DGLd6CPc#";
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("eV8DGLd6CPc#", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("serialVersionUID", hashMap0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // serialVersionUID
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SQLException sQLException0 = new SQLException("java.lang.annotatio", "java.lang.annotatio", 390);
      Integer integer0 = new Integer(390);
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Boolean> class1 = Boolean.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Boolean is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("#5:Ix~Hmtm>3dVrs");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("#5:Ix~Hmtm>3dVrs", sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("#5:Ix~Hmtm>3dVrs", "#5:Ix~Hmtm>3dVrs", (-13), sQLIntegrityConstraintViolationException0);
      MockException mockException0 = new MockException("#5:Ix~Hmtm>3dVrs", sQLTransientConnectionException0);
      ClassUtil.throwRootCauseIfIOE(mockException0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.hasEnclosingMethod(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.core.JsonFactory", "com.fasterxml.jackson.core.JsonFactory", 1573);
      ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1343);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) objectOutputStream0, jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.core.JsonFactory
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findConstructor(class1, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("a7");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getConstructors(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findEnumType(class1);
      Class<NoClass> class2 = NoClass.class;
      boolean boolean0 = true;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor1, true);
      classUtil_Ctor0.getDeclaredAnnotations();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("WNv7", "Cannot construct instance of %s (no Creators, like default construct, exist): %s");
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.getStackTrace();
      classUtil_Ctor0.getParameterAnnotations();
      sQLSyntaxErrorException0.getStackTrace();
      ClassUtil.quotedOr(class0, "WNv7");
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.nullOrToString(throwable0);
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.classNameOf(class1);
      MockError mockError0 = new MockError("^:");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getClassMethods(class0);
      Long long0 = new Long((-1599L));
      ClassUtil.getClassDescription(long0);
      ClassUtil.hasClass("`java.lang.Long`", class0);
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, boolean0, "`java.lang.Long`");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Boolean (of class com.fasterxml.jackson.databind.type.CollectionType) must override method '`java.lang.Long`'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      String string0 = "I@]-|Cn1.&.hHQoiNq";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class1, "I@]-|Cn1.&.hHQoiNq");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.util.AccessPattern) must override method 'I@]-|Cn1.&.hHQoiNq'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.canBeABeanType(class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLDataException0);
      sQLDataException0.spliterator();
      sQLWarning0.fillInStackTrace();
      sQLDataException0.printStackTrace();
      sQLDataException0.initCause(sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLDataException0);
      batchUpdateException0.getSuppressed();
      // Undeclared exception!
      try { 
        sQLDataException0.initCause(batchUpdateException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.BatchUpdateException: java.sql.SQLDataException
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Constructor<Float> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
  }
}
