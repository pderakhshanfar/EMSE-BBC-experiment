/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 00:31:38 GMT 2020
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(1536);
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap2 = ClassUtil.nonNull(hashMap1, hashMap0);
      assertSame(hashMap2, hashMap1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<String> class1 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      MockError mockError0 = new MockError("Failed to instantiate class ", sQLSyntaxErrorException0);
      ArrayType arrayType0 = ArrayType.construct(javaTypeArray0[5], typeBindings0, (Object) classUtil_Ctor0, (Object) mockError0);
      MapType mapType0 = MapType.construct((Class<?>) class2, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) arrayType0, javaTypeArray0[3]);
      ClassUtil.verifyMustOverride(class0, mapType0, "ALLOW_NON_NUMERIC_NUMBERS");
      assertFalse(mapType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.databind.util.ClassUtil", "JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) bufferedWriter0);
      MockException mockException0 = new MockException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectReader0, byteArrayOutputStream0, byteArray0, 2, true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<?> class1 = ClassUtil.rawClass(resolvedRecursiveType0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      AccessibleObject accessibleObject0 = ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      assertNull(accessibleObject0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.RuntimeException`", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(22, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(4, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(77, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<CollectionType> class1 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Constructor<AccessPattern> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Error> class0 = Error.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (byte)0);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      Class<?> class1 = ClassUtil.classOf(accessPattern0);
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      String string0 = ClassUtil.classNameOf(referenceType0);
      assertEquals("`com.fasterxml.jackson.databind.type.ReferenceType`", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "]s$|@nm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("k&}7#t&8U*bQ>N-", "`k&}7#t&8U*bQ>N-`");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("k&}7#t&8U*bQ>N-", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLTransientConnectionException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "k&}7#t&8U*bQ>N-");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("$4Rk# ", "net.sf.cglib.proxy.");
      MockIOException mockIOException0 = new MockIOException(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockError mockError0 = new MockError("annotation");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "annotation");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("@(HCpI", "@(HCpI", 1868, sQLException0);
      sQLException0.initCause(sQLNonTransientException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("com.fasterxml.jackson.databind.node.NodeCursor$RootCursor");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.node.NodeCursor$RootCursor", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("Cannot handle managed/back reference '%s': no back reference property found from type %s");
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("o;+wiEnog^r:P", "o;+wiEnog^r:P");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(bigIntegerNode0);
      Class<Error> class0 = Error.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "`java.lang.Long`");
      sQLInvalidAuthorizationSpecException0.initCause(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_INT: `java.lang.Long`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 46, pipedInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, 650, (-2997), true);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) uTF8StreamJsonParser0, "java.lang.Float");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("java.lang.Float", "(lRJam", jsonMappingException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("(lRJam", "(lRJam", 2217, sQLFeatureNotSupportedException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.Float
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("1PI*@{a}{yD7", "1PI*@{a}{yD7");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0, "vals");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vals
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Annotation>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-368));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1982), true);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Error> class0 = Error.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class0.toString());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = ClassUtil.backticked("Missing constructor (broken JDK (de)serialization?)");
      assertEquals("`Missing constructor (broken JDK (de)serialization?)`", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Ex,?Hn$", sQLSyntaxErrorException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLSyntaxErrorException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "entrySet");
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLSyntaxErrorException0);
      assertSame(sQLSyntaxErrorException0, throwable0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockError mockError0 = new MockError("private java.lang.Void()", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("F", "F");
      Throwable throwable0 = ClassUtil.throwIfError(sQLTransientException0);
      assertSame(throwable0, sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", "com.fasterxml.jackson.databind.ser.std.EnumSerializer", 0, (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("net.sf.cglib.proxy.java.lang.Integer", "java.lang.Long");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      MockError mockError0 = new MockError(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "net.sf.cglib.proxy.java.lang.Integer");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      int int0 = classUtil_Ctor0.getParamCount();
      assertTrue(constructor0.isAccessible());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(0, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(0, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      String string0 = ClassUtil.getPackageName(class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("com.fasterxml.jackson.databind.type", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-453));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) accessPattern0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals(16385, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, (Long) null);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertTrue(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern[] accessPatternArray0 = new AccessPattern[0];
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      assertEquals(16385, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("char", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("byte", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class1);
      assertFalse(boolean0);
      assertEquals("float", class1.toString());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("double", class1.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("short", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("long", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("boolean", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("class java.lang.Character", class1.toString());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("class java.lang.Double", class1.toString());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0.0F, object0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = ClassUtil.backticked((String) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapLikeType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapLikeType0, classNameIdResolver0, (String) null, false, mapLikeType0, jsonTypeInfo_As0);
      Class<Character> class1 = Character.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      Boolean boolean0 = new Boolean((String) null);
      Integer integer0 = new Integer((-30));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, (String) null, integer0, (String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, (-30), annotationMap0, propertyMetadata0);
      String string0 = ClassUtil.nameOf((Named) creatorProperty0);
      assertEquals("``", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Long> class0 = Long.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Long` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) collectionType0);
      String string0 = ClassUtil.getClassDescription(arrayType0);
      assertEquals("`com.fasterxml.jackson.databind.type.ArrayType`", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = ClassUtil.getClassDescription((Object) null);
      assertEquals("unknown", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      String string0 = ClassUtil.getClassDescription(class0);
      assertEquals("`int`", string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = ClassUtil.quotedOr((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = ClassUtil.quotedOr("FdJ2;mG-AY:8?W(C", "FdJ2;mG-AY:8?W(C");
      assertEquals("\"FdJ2;mG-AY:8?W(C\"", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = ClassUtil.nonNullString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("org.hibernate.proxy.java.lang.Short");
      assertEquals("org.hibernate.proxy.java.lang.Short", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      String string0 = ClassUtil.nullOrToString(boolean0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = ClassUtil.nonNull((HashMap<String, ClientInfoStatus>) null, hashMap0);
      assertSame(hashMap0, hashMap1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<?> class0 = ClassUtil.rawClass((JavaType) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      Class<?> class1 = ClassUtil.rawClass(collectionLikeType0);
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "org.hibernate.proxy.java.lang.Short", batchUpdateException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) null, (Exception) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("F", "F");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: F
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException((Class<?>) null, (String) null, (String) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type [null] from String [N/A]: null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, iOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `int` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.BeanDeserializerFactory`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Long> class1 = Long.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, class0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Number) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.classOf(class0);
      boolean boolean0 = ClassUtil.hasClass(class0, class1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      boolean boolean0 = ClassUtil.hasClass(float0, class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Error> class0 = Error.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(constructor0.isAccessible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Module> class0 = Module.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNotNull(string0);
      assertEquals("primitive", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      String string0 = ClassUtil.canBeABeanType(class1);
      assertNotNull(string0);
      assertEquals("enum", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Error> class0 = Error.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, (Class<?>) null, false);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SimpleModule> class0 = SimpleModule.class;
      Class<Integer> class1 = Integer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, false);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<NoClass> class1 = NoClass.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[8];
      CollectionType collectionType0 = CollectionType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0);
      Class<Object> class2 = Object.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class2, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<CollectionType> class1 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Boolean> class1 = Boolean.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class0, true);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, class0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Float> class0 = Float.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Constructor<?> constructor0 = classUtil_Ctor0.getConstructor();
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 1721);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      assertEquals(1721, sQLIntegrityConstraintViolationException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      SQLDataException sQLDataException0 = new SQLDataException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "UTF8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Iterator<Double> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<NullNode> class0 = NullNode.class;
      Class<SimpleType> class1 = SimpleType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(0, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockError mockError0 = new MockError("java.lang.annotation");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<NullNode> class0 = NullNode.class;
      Constructor<NullNode> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern[] accessPatternArray0 = new AccessPattern[0];
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      enumSet0.remove(accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      assertFalse(class0.isArray());
  }
}
