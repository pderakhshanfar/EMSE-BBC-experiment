/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 00:24:29 GMT 2020
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URISyntaxException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Spliterator;
import java.util.Stack;
import java.util.function.Consumer;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      iOContext0.setEncoding(jsonEncoding0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertSame(iOContext0, iOContext1);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null, 1, 1);
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringWriter1.toString());
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 1, (ObjectCodec) null, stringWriter1);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(writerBasedJsonGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringWriter1.toString());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(iOContext0, class0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(jsonMappingException0);
      assertSame(iOContext0, iOContext1);
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Integer` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.core.io.IOContext`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-47);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)8, (byte) (-17), (byte)117, (byte) (-47), (byte) (-47)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("; expected Class<JsonSerializer>", "; expected Class<JsonSerializer>", 1455);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("; expected Class<JsonSerializer>", sQLTransactionRollbackException0.getSQLState());
      assertEquals("; expected Class<JsonSerializer>", sQLTransactionRollbackException0.getMessage());
      assertEquals(1455, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ; expected Class<JsonSerializer>", sQLTransactionRollbackException0.toString());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, sQLTransactionRollbackException0);
      assertNotNull(mockRuntimeException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)sQLTransactionRollbackException0.initCause(mockRuntimeException0);
      assertNotNull(sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertEquals("; expected Class<JsonSerializer>", sQLTransactionRollbackException0.getSQLState());
      assertEquals("; expected Class<JsonSerializer>", sQLTransactionRollbackException0.getMessage());
      assertEquals(1455, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ; expected Class<JsonSerializer>", sQLTransactionRollbackException0.toString());
      assertEquals(1455, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: ; expected Class<JsonSerializer>", sQLTransactionRollbackException1.toString());
      assertEquals("; expected Class<JsonSerializer>", sQLTransactionRollbackException1.getSQLState());
      assertEquals("; expected Class<JsonSerializer>", sQLTransactionRollbackException1.getMessage());
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<InputStream>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Annotation> class0 = Annotation.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertNotNull(arrayType0);
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      
      ArrayType arrayType1 = arrayType0.withTypeHandler(batchUpdateException0);
      assertNotNull(arrayType1);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isJavaLangObject());
      
      ArrayType arrayType2 = arrayType1.withContentTypeHandler(batchUpdateException0);
      assertNotNull(arrayType2);
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType2, arrayType0);
      assertNotSame(arrayType2, arrayType1);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertTrue(arrayType2.equals((Object)arrayType0));
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType2.isContainerType());
      assertFalse(arrayType2.isEnumType());
      assertFalse(arrayType2.isCollectionLikeType());
      assertEquals(0, arrayType2.containedTypeCount());
      assertFalse(arrayType2.isInterface());
      assertTrue(arrayType2.isArrayType());
      assertFalse(arrayType2.hasValueHandler());
      assertFalse(arrayType2.isPrimitive());
      assertFalse(arrayType2.isMapLikeType());
      assertTrue(arrayType2.hasContentType());
      assertFalse(arrayType2.useStaticType());
      assertFalse(arrayType2.isAbstract());
      assertTrue(arrayType2.hasHandlers());
      assertFalse(arrayType2.isJavaLangObject());
      assertTrue(arrayType2.isConcrete());
      assertTrue(arrayType2.isFinal());
      
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class1);
      assertNotNull(mapType0);
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      
      ArrayType arrayType3 = arrayType2.withValueHandler(mapType0);
      assertNotNull(arrayType3);
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType3);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType3);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType2, arrayType0);
      assertNotSame(arrayType2, arrayType3);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType3, arrayType1);
      assertNotSame(arrayType3, arrayType0);
      assertNotSame(arrayType3, arrayType2);
      assertTrue(arrayType0.equals((Object)arrayType2));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType1.equals((Object)arrayType2));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertTrue(arrayType2.equals((Object)arrayType0));
      assertTrue(arrayType3.equals((Object)arrayType0));
      assertTrue(arrayType3.equals((Object)arrayType2));
      assertTrue(arrayType3.equals((Object)arrayType1));
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType2.isContainerType());
      assertFalse(arrayType2.isEnumType());
      assertFalse(arrayType2.isCollectionLikeType());
      assertEquals(0, arrayType2.containedTypeCount());
      assertFalse(arrayType2.isInterface());
      assertTrue(arrayType2.isArrayType());
      assertFalse(arrayType2.hasValueHandler());
      assertFalse(arrayType2.isPrimitive());
      assertFalse(arrayType2.isMapLikeType());
      assertTrue(arrayType2.hasContentType());
      assertFalse(arrayType2.useStaticType());
      assertFalse(arrayType2.isAbstract());
      assertTrue(arrayType2.hasHandlers());
      assertFalse(arrayType2.isJavaLangObject());
      assertTrue(arrayType2.isConcrete());
      assertTrue(arrayType2.isFinal());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(arrayType3.isPrimitive());
      assertTrue(arrayType3.isFinal());
      assertFalse(arrayType3.isMapLikeType());
      assertTrue(arrayType3.isContainerType());
      assertFalse(arrayType3.isInterface());
      assertFalse(arrayType3.isCollectionLikeType());
      assertFalse(arrayType3.isEnumType());
      assertTrue(arrayType3.hasContentType());
      assertTrue(arrayType3.hasValueHandler());
      assertTrue(arrayType3.isArrayType());
      assertTrue(arrayType3.hasHandlers());
      assertTrue(arrayType3.isConcrete());
      assertFalse(arrayType3.isJavaLangObject());
      assertFalse(arrayType3.isAbstract());
      assertEquals(0, arrayType3.containedTypeCount());
      assertFalse(arrayType3.useStaticType());
      
      Class<?> class2 = ClassUtil.rawClass(arrayType3);
      assertNotNull(class2);
      assertNotSame(arrayType0, arrayType2);
      assertNotSame(arrayType0, arrayType3);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType3);
      assertNotSame(arrayType1, arrayType0);
      assertNotSame(arrayType1, arrayType2);
      assertNotSame(arrayType2, arrayType0);
      assertNotSame(arrayType2, arrayType3);
      assertNotSame(arrayType2, arrayType1);
      assertNotSame(arrayType3, arrayType1);
      assertNotSame(arrayType3, arrayType0);
      assertNotSame(arrayType3, arrayType2);
      assertTrue(arrayType0.equals((Object)arrayType3));
      assertTrue(arrayType0.equals((Object)arrayType2));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType1.equals((Object)arrayType2));
      assertTrue(arrayType1.equals((Object)arrayType3));
      assertTrue(arrayType2.equals((Object)arrayType3));
      assertTrue(arrayType2.equals((Object)arrayType1));
      assertTrue(arrayType2.equals((Object)arrayType0));
      assertTrue(arrayType3.equals((Object)arrayType0));
      assertTrue(arrayType3.equals((Object)arrayType2));
      assertTrue(arrayType3.equals((Object)arrayType1));
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isJavaLangObject());
      assertTrue(arrayType2.isContainerType());
      assertFalse(arrayType2.isEnumType());
      assertFalse(arrayType2.isCollectionLikeType());
      assertEquals(0, arrayType2.containedTypeCount());
      assertFalse(arrayType2.isInterface());
      assertTrue(arrayType2.isArrayType());
      assertFalse(arrayType2.hasValueHandler());
      assertFalse(arrayType2.isPrimitive());
      assertFalse(arrayType2.isMapLikeType());
      assertTrue(arrayType2.hasContentType());
      assertFalse(arrayType2.useStaticType());
      assertFalse(arrayType2.isAbstract());
      assertTrue(arrayType2.hasHandlers());
      assertFalse(arrayType2.isJavaLangObject());
      assertTrue(arrayType2.isConcrete());
      assertTrue(arrayType2.isFinal());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(arrayType3.isPrimitive());
      assertTrue(arrayType3.isFinal());
      assertFalse(arrayType3.isMapLikeType());
      assertTrue(arrayType3.isContainerType());
      assertFalse(arrayType3.isInterface());
      assertFalse(arrayType3.isCollectionLikeType());
      assertFalse(arrayType3.isEnumType());
      assertTrue(arrayType3.hasContentType());
      assertTrue(arrayType3.hasValueHandler());
      assertTrue(arrayType3.isArrayType());
      assertTrue(arrayType3.hasHandlers());
      assertTrue(arrayType3.isConcrete());
      assertFalse(arrayType3.isJavaLangObject());
      assertFalse(arrayType3.isAbstract());
      assertEquals(0, arrayType3.containedTypeCount());
      assertFalse(arrayType3.useStaticType());
      assertTrue(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertEquals("class [Ljava.lang.annotation.Annotation;", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      assertNotNull(iOException0);
      assertNull(iOException0.getMessage());
      assertEquals("java.io.IOException", iOException0.toString());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7*.Cj:rV'XlJOq");
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.hasClass(iOException0, class0);
      assertFalse(boolean1 == boolean0);
      assertNull(iOException0.getMessage());
      assertEquals("java.io.IOException", iOException0.toString());
      assertTrue(boolean1);
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      assertNotNull(javaType0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      
      PropertyName propertyName0 = PropertyName.construct((String) null);
      assertNotNull(propertyName0);
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.isEmpty());
      
      ObjectIdGenerator<InputStream> objectIdGenerator0 = (ObjectIdGenerator<InputStream>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, objectIdGenerator0, true);
      assertTrue(objectIdWriter0.alwaysAsId);
      assertNotNull(objectIdWriter0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.isEmpty());
      
      SimpleType simpleType0 = (SimpleType)objectIdWriter0.idType;
      assertNotNull(simpleType0);
      assertSame(simpleType0, javaType0);
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isPrimitive());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      
      Class<?> class1 = ClassUtil.rawClass(simpleType0);
      assertTrue(objectIdWriter0.alwaysAsId);
      assertNotNull(class1);
      assertSame(javaType0, simpleType0);
      assertSame(simpleType0, javaType0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasContentType());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertEquals("", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertTrue(propertyName0.isEmpty());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isPrimitive());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "|tM&:^jU$b\"Q>h1'");
      assertFalse(boolean0);
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(5, fieldArray0.length);
      
      Class<String> class1 = String.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(77, methodArray0.length);
      
      String string0 = ClassUtil.backticked(" has no default (no arg) constructor");
      assertNotNull(string0);
      assertEquals("` has no default (no arg) constructor`", string0);
      
      Class<Error> class2 = Error.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      Class<Float> class4 = Float.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class4, class1, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      String string1 = mockError0.getMessage();
      assertNull(string1);
      
      Throwable throwable0 = mockError0.fillInStackTrace();
      assertNotNull(throwable0);
      assertSame(mockError0, throwable0);
      assertSame(throwable0, mockError0);
      
      mockError0.printStackTrace();
      assertSame(mockError0, throwable0);
      
      String string2 = mockError0.getMessage();
      assertNull(string2);
      assertSame(mockError0, throwable0);
      
      mockError0.printStackTrace();
      assertSame(mockError0, throwable0);
      
      mockError0.printStackTrace();
      assertSame(mockError0, throwable0);
      
      String string3 = mockError0.getLocalizedMessage();
      assertNull(string3);
      assertSame(mockError0, throwable0);
      
      Throwable throwable1 = mockError0.getCause();
      assertNull(throwable1);
      assertSame(mockError0, throwable0);
      
      String string4 = mockError0.getLocalizedMessage();
      assertNull(string4);
      assertSame(mockError0, throwable0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "` has no default (no arg) constructor`");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertNotNull(class1);
      assertEquals(0, enumSet0.size());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertEquals(16385, class1.getModifiers());
      
      Class<?> class2 = ClassUtil.classOf(enumSet0);
      assertNotNull(class2);
      assertEquals(0, enumSet0.size());
      assertEquals("class java.util.RegularEnumSet", class2.toString());
      assertEquals(0, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      String string1 = ClassUtil.quotedOr((Object) null, (String) null);
      assertNull(string1);
      
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(accessPattern0));
      
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      assertNotNull(class0);
      assertEquals(1, enumSet0.size());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isEnum());
      assertFalse(class0.isAnnotation());
      assertEquals(16385, class0.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(enumSet0.contains(accessPattern0));
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Object");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertEquals("byte", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Class<?> class2 = ClassUtil.getEnclosingClass(class0);
      assertNull(class2);
      
      String string0 = ClassUtil.backticked("GE~v");
      assertNotNull(string0);
      assertEquals("`GE~v`", string0);
      
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "`GE~v`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `GE~v`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(accessPattern0));
      
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      assertNotNull(class0);
      assertEquals(1, enumSet0.size());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(16385, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isEnum());
      assertFalse(class0.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class0.toString());
      assertTrue(enumSet0.contains(accessPattern0));
      
      Class<?> class1 = ClassUtil.classOf(accessPattern0);
      assertNotNull(class1);
      assertEquals(16385, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class1);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<Annotation> class2 = Annotation.class;
      boolean boolean1 = true;
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) null, class2, true);
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<Class<?>> list2 = ClassUtil.findSuperTypes(class2, class0, list0);
      assertNotNull(list2);
      assertSame(list0, list2);
      assertSame(list2, list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      Class<?> class3 = ClassUtil.classOf(class0);
      assertNotNull(class3);
      assertEquals("class java.lang.Class", class3.toString());
      assertFalse(class3.isArray());
      assertEquals(17, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      
      IOContext iOContext0 = null;
      int int0 = (-1744094291);
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockError mockError0 = new MockError("");
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<Error> class1 = Error.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "JSON");
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("JSON", stringWriter0.toString());
      assertEquals("JSON", stringWriter1.toString());
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory1.createGenerator((Writer) stringWriter1);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(writerBasedJsonGenerator0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", stringWriter0.toString());
      assertEquals("JSON", stringWriter1.toString());
      assertEquals(159, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdStringException("%?gA*-UI@'> )", class0, "org.hibernate.proxy.java.io.InputStream");
      assertNotNull(invalidFormatException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "%?gA*-UI@'> )");
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) invalidFormatException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.io.IOException` from String \"%?gA*-UI@'> )\": org.hibernate.proxy.java.io.InputStream
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1608;
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "java.lang.Integer");
      assertFalse(boolean0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      
      Spliterator<Throwable> spliterator0 = sQLRecoverableException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("pv6CgQ53.qfvtd;", "pv6CgQ53.qfvtd;", sQLRecoverableException0);
      assertNotNull(sQLRecoverableException1);
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: pv6CgQ53.qfvtd;", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("pv6CgQ53.qfvtd;", sQLRecoverableException1.getSQLState());
      assertEquals("pv6CgQ53.qfvtd;", sQLRecoverableException1.getMessage());
      
      SQLRecoverableException sQLRecoverableException2 = (SQLRecoverableException)sQLRecoverableException1.fillInStackTrace();
      assertNotNull(sQLRecoverableException2);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException2);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException2);
      assertNotSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNotSame(sQLRecoverableException2, sQLRecoverableException0);
      assertSame(sQLRecoverableException2, sQLRecoverableException1);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException2.equals((Object)sQLRecoverableException0));
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: pv6CgQ53.qfvtd;", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("pv6CgQ53.qfvtd;", sQLRecoverableException1.getSQLState());
      assertEquals("pv6CgQ53.qfvtd;", sQLRecoverableException1.getMessage());
      assertEquals(0, sQLRecoverableException2.getErrorCode());
      assertEquals("pv6CgQ53.qfvtd;", sQLRecoverableException2.getSQLState());
      assertEquals("pv6CgQ53.qfvtd;", sQLRecoverableException2.getMessage());
      assertEquals("java.sql.SQLRecoverableException: pv6CgQ53.qfvtd;", sQLRecoverableException2.toString());
      
      SQLRecoverableException sQLRecoverableException3 = (SQLRecoverableException)sQLRecoverableException0.initCause(sQLRecoverableException1);
      assertNotNull(sQLRecoverableException3);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException2);
      assertSame(sQLRecoverableException0, sQLRecoverableException3);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException2);
      assertNotSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNotSame(sQLRecoverableException1, sQLRecoverableException3);
      assertNotSame(sQLRecoverableException3, sQLRecoverableException2);
      assertNotSame(sQLRecoverableException3, sQLRecoverableException1);
      assertSame(sQLRecoverableException3, sQLRecoverableException0);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException3.equals((Object)sQLRecoverableException1));
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: pv6CgQ53.qfvtd;", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("pv6CgQ53.qfvtd;", sQLRecoverableException1.getSQLState());
      assertEquals("pv6CgQ53.qfvtd;", sQLRecoverableException1.getMessage());
      assertNull(sQLRecoverableException3.getSQLState());
      assertNull(sQLRecoverableException3.getMessage());
      assertEquals(0, sQLRecoverableException3.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException3.toString());
      
      sQLRecoverableException0.setNextException(sQLRecoverableException1);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException2);
      assertSame(sQLRecoverableException0, sQLRecoverableException3);
      assertNotSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException2);
      assertNotSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNotSame(sQLRecoverableException1, sQLRecoverableException3);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException0));
      assertFalse(sQLRecoverableException1.equals((Object)sQLRecoverableException3));
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: pv6CgQ53.qfvtd;", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("pv6CgQ53.qfvtd;", sQLRecoverableException1.getSQLState());
      assertEquals("pv6CgQ53.qfvtd;", sQLRecoverableException1.getMessage());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLRecoverableException0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {1608}, intArray0);
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException2));
      assertFalse(sQLRecoverableException0.equals((Object)sQLRecoverableException1));
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLRecoverableException", batchUpdateException0.toString());
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      ClassUtil.getRootCause(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNotNull(string0);
      assertEquals("enum", string0);
      
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, RuntimeException> enumMap0 = new EnumMap<ClientInfoStatus, RuntimeException>(class1);
      assertNotNull(enumMap0);
      assertEquals(0, enumMap0.size());
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      SQLWarning sQLWarning0 = new SQLWarning("enum");
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: enum", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("enum", sQLWarning0.getMessage());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLWarning0);
      assertNotNull(mockRuntimeException0);
      
      RuntimeException runtimeException0 = enumMap0.put(clientInfoStatus0, (RuntimeException) mockRuntimeException0);
      assertNull(runtimeException0);
      assertEquals(1, enumMap0.size());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: enum", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("enum", sQLWarning0.getMessage());
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(enumMap0);
      assertNotNull(class2);
      assertEquals(1, enumMap0.size());
      assertEquals("class java.sql.ClientInfoStatus", class2.toString());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isEnum());
      assertFalse(class2.isAnnotation());
      assertEquals(16401, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
      
      Class<Short> class1 = Short.TYPE;
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("short", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<Long> class2 = Long.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isInterface());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("long", class2.toString());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertTrue(class2.isPrimitive());
      
      Object object0 = ClassUtil.defaultValue(class2);
      assertNotNull(object0);
      assertFalse(class2.isInterface());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("long", class2.toString());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertTrue(class2.isPrimitive());
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Integer> enumMap0 = new EnumMap<AccessPattern, Integer>(class0);
      assertNotNull(enumMap0);
      assertEquals(0, enumMap0.size());
      
      EnumMap<AccessPattern, Integer> enumMap1 = enumMap0.clone();
      assertNotNull(enumMap1);
      assertNotSame(enumMap0, enumMap1);
      assertNotSame(enumMap1, enumMap0);
      assertTrue(enumMap1.equals((Object)enumMap0));
      assertEquals(0, enumMap0.size());
      assertEquals(0, enumMap1.size());
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap1);
      assertNotNull(class1);
      assertNotSame(enumMap0, enumMap1);
      assertNotSame(enumMap1, enumMap0);
      assertTrue(enumMap0.equals((Object)enumMap1));
      assertTrue(enumMap1.equals((Object)enumMap0));
      assertEquals(0, enumMap0.size());
      assertEquals(0, enumMap1.size());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.type.ResolvedRecursiveType`", string0);
      
      Class<Float> class1 = Float.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class1);
      assertNotNull(fieldArray0);
      assertEquals(13, fieldArray0.length);
      
      Class<String> class2 = String.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class2);
      assertNotNull(typeArray0);
      assertEquals(3, typeArray0.length);
      
      Class<Character> class3 = Character.class;
      Class<?> class4 = ClassUtil.getDeclaringClass(class3);
      assertNull(class4);
      
      Class<Byte> class5 = Byte.class;
      Class<? extends Enum<?>> class6 = ClassUtil.findEnumType(class5);
      assertNotNull(class6);
      assertFalse(class6.isAnnotation());
      assertEquals(1025, class6.getModifiers());
      assertFalse(class6.isPrimitive());
      assertFalse(class6.isArray());
      assertFalse(class6.isInterface());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertEquals("class java.lang.Number", class6.toString());
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class2, class2, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Long> class7 = Long.class;
      String string1 = ClassUtil.canBeABeanType(class7);
      assertNull(string1);
      
      Class<Integer> class8 = Integer.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class8);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Float float0 = new Float(Double.NaN);
      assertNotNull(float0);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      
      String string2 = ClassUtil.nullOrToString(float0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(17, methodArray0.length);
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class5);
      assertFalse(boolean0);
      
      Class<Byte> class9 = Byte.class;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<?> class10 = ClassUtil.getDeclaringClass(class9);
      assertNull(class10);
      assertSame(class9, class5);
      
      Class<Long> class11 = Long.class;
      Class<?> class12 = ClassUtil.primitiveType(class11);
      assertNotNull(class12);
      assertSame(class11, class7);
      assertEquals("long", class12.toString());
      assertEquals(1041, class12.getModifiers());
      assertFalse(class12.isSynthetic());
      assertFalse(class12.isEnum());
      assertFalse(class12.isInterface());
      assertFalse(class12.isArray());
      assertTrue(class12.isPrimitive());
      assertFalse(class12.isAnnotation());
      
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class8, class6);
      assertNotNull(list1);
      assertSame(class5, class9);
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(class6.isAnnotation());
      assertEquals(1025, class6.getModifiers());
      assertFalse(class6.isPrimitive());
      assertFalse(class6.isArray());
      assertFalse(class6.isInterface());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertEquals("class java.lang.Number", class6.toString());
      assertFalse(list1.contains(class12));
      
      Class<?> class13 = ClassUtil.wrapperType(class12);
      assertNotNull(class13);
      assertSame(class11, class7);
      assertNotSame(class12, class13);
      assertNotSame(class13, class12);
      assertFalse(class13.equals((Object)class12));
      assertEquals("long", class12.toString());
      assertEquals(1041, class12.getModifiers());
      assertFalse(class12.isSynthetic());
      assertFalse(class12.isEnum());
      assertFalse(class12.isInterface());
      assertFalse(class12.isArray());
      assertTrue(class12.isPrimitive());
      assertFalse(class12.isAnnotation());
      assertFalse(class13.isInterface());
      assertFalse(class13.isArray());
      assertEquals("class java.lang.Long", class13.toString());
      assertFalse(class13.isEnum());
      assertFalse(class13.isSynthetic());
      assertEquals(17, class13.getModifiers());
      assertFalse(class13.isPrimitive());
      assertFalse(class13.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1));
      assertNotNull(coreXMLDeserializers_Std0);
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, accessPattern0);
      
      String string0 = ClassUtil.getClassDescription(accessPattern0);
      assertNotNull(string0);
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals("`com.fasterxml.jackson.databind.util.AccessPattern`", string0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      assertNotNull(class1);
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      Class<InputStream> class3 = InputStream.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      assertNotNull(iOException0);
      assertNull(iOException0.getMessage());
      assertEquals("java.io.IOException", iOException0.toString());
      
      boolean boolean0 = ClassUtil.hasClass(iOException0, class0);
      assertNull(iOException0.getMessage());
      assertEquals("java.io.IOException", iOException0.toString());
      assertTrue(boolean0);
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<CollectionType> class1 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      
      Class<SimpleType> class2 = SimpleType.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class4, class1, list0);
      assertNotNull(list1);
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertFalse(list1.isEmpty());
      assertEquals(8, list1.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("char", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Class<Void> class1 = Void.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      Class<Error> class2 = Error.class;
      Error error0 = ClassUtil.createInstance(class2, true);
      assertNotNull(error0);
      assertEquals("java.lang.Error", error0.toString());
      assertNull(error0.getMessage());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, error0, true);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertEquals("java.lang.Error", error0.toString());
      assertNull(error0.getMessage());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=$.B/4Zf1Bv=taRb");
      assertNotNull(mockFileOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)72;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-708825413), true);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertArrayEquals(new byte[] {(byte)57, (byte) (-87), (byte) (-33), (byte)72}, byteArray0);
      assertEquals("java.lang.Error", error0.toString());
      assertNull(error0.getMessage());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals((-708825413), uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(4, byteArray0.length);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertNotNull(jsonpCharacterEscapes0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertArrayEquals(new byte[] {(byte)57, (byte) (-87), (byte) (-33), (byte)72}, byteArray0);
      assertEquals("java.lang.Error", error0.toString());
      assertNull(error0.getMessage());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals((-708825413), uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(2, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals((-708825413), uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(4, byteArray0.length);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("=$.B/4Zf1Bv=taRb", "=$.B/4Zf1Bv=taRb", (-1743199137), error0);
      assertNotNull(sQLTimeoutException0);
      assertEquals((-1743199137), sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: =$.B/4Zf1Bv=taRb", sQLTimeoutException0.toString());
      assertEquals("=$.B/4Zf1Bv=taRb", sQLTimeoutException0.getMessage());
      assertEquals("=$.B/4Zf1Bv=taRb", sQLTimeoutException0.getSQLState());
      assertEquals("java.lang.Error", error0.toString());
      assertNull(error0.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Closeable) uTF8JsonGenerator0, (Exception) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTimeoutException: =$.B/4Zf1Bv=taRb
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Annotation> class0 = Annotation.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      String string0 = ClassUtil.quotedOr(long0, "; failed to set access: ");
      assertNotNull(string0);
      assertEquals("\"0\"", string0);
      
      String string1 = ClassUtil.isLocalType((Class<?>) null, true);
      assertNull(string1);
      
      Iterator<JsonDeserializer<JsonDeserializer<ArrayType>>> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.String()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.String()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1076);
      intArray0[1] = 8;
      intArray0[2] = (-1922);
      intArray0[3] = 1787;
      intArray0[4] = 1430;
      intArray0[5] = 101;
      intArray0[6] = (-2014059526);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("&s(bs+@&=<'>GlJ=$", "LS", 500);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("LS", sQLTransactionRollbackException0.getSQLState());
      assertEquals("&s(bs+@&=<'>GlJ=$", sQLTransactionRollbackException0.getMessage());
      assertEquals(500, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: &s(bs+@&=<'>GlJ=$", sQLTransactionRollbackException0.toString());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("&s(bs+@&=<'>GlJ=$", "8?iJO\"/y", intArray0, sQLTransactionRollbackException0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-1076), 8, (-1922), 1787, 1430, 101, (-2014059526)}, intArray0);
      assertEquals("LS", sQLTransactionRollbackException0.getSQLState());
      assertEquals("&s(bs+@&=<'>GlJ=$", sQLTransactionRollbackException0.getMessage());
      assertEquals(500, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: &s(bs+@&=<'>GlJ=$", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.BatchUpdateException: &s(bs+@&=<'>GlJ=$", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("&s(bs+@&=<'>GlJ=$", batchUpdateException0.getMessage());
      assertEquals("8?iJO\"/y", batchUpdateException0.getSQLState());
      assertEquals(7, intArray0.length);
      
      SQLException sQLException0 = batchUpdateException0.getNextException();
      assertNull(sQLException0);
      assertArrayEquals(new int[] {(-1076), 8, (-1922), 1787, 1430, 101, (-2014059526)}, intArray0);
      assertEquals("LS", sQLTransactionRollbackException0.getSQLState());
      assertEquals("&s(bs+@&=<'>GlJ=$", sQLTransactionRollbackException0.getMessage());
      assertEquals(500, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: &s(bs+@&=<'>GlJ=$", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.BatchUpdateException: &s(bs+@&=<'>GlJ=$", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("&s(bs+@&=<'>GlJ=$", batchUpdateException0.getMessage());
      assertEquals("8?iJO\"/y", batchUpdateException0.getSQLState());
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      System.setCurrentTimeMillis((-404L));
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<Long> class1 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Class<String> class3 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class2, class3, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      boolean boolean0 = ClassUtil.hasClass(class0, class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(boolean0);
      
      Short short0 = new Short((short)1257);
      assertNotNull(short0);
      assertEquals((short)1257, (short)short0);
      
      boolean boolean1 = ClassUtil.hasClass(short0, class0);
      assertTrue(boolean1 == boolean0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(boolean1);
      
      boolean boolean2 = ClassUtil.hasEnclosingMethod(class0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      
      boolean boolean0 = ClassUtil.hasClass(class0, class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(boolean0);
      
      String string0 = ClassUtil.getPackageName(class0);
      assertNull(string0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      
      Class<Error> class1 = Error.class;
      Error error0 = ClassUtil.createInstance(class1, false);
      assertNotNull(error0);
      assertEquals("java.lang.Error", error0.toString());
      assertNull(error0.getMessage());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "v3?3gWk+u");
      assertNotNull(jsonMappingException0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, false);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      
      MockFile mockFile0 = new MockFile("IPV6");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, mockFileOutputStream0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("IPV6", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals("IPV6", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      assertNotNull(minimalPrettyPrinter0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("IPV6", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals("IPV6", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // v3?3gWk+u
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(1, fieldArray0.length);
      
      MockIOException mockIOException0 = new MockIOException("Ok");
      assertNotNull(mockIOException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string0 = ClassUtil.quotedOr((Object) null, "W?u");
      assertNotNull(string0);
      assertEquals("W?u", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = ClassUtil.quotedOr((Object) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      assertNotNull(string0);
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<IOException> class1 = IOException.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
      
      MockError mockError0 = new MockError((String) null);
      assertNotNull(mockError0);
      
      String string1 = ClassUtil.classNameOf(mockError0);
      assertNotNull(string1);
      assertEquals("`org.evosuite.runtime.mock.java.lang.MockError`", string1);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonParser_Feature0);
      assertNotNull(jsonFactory4);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory5 = jsonFactory4.setInputDecorator(inputDecorator0);
      assertNotNull(jsonFactory5);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory4);
      assertSame(jsonFactory5, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory5.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(writerBasedJsonGenerator0);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory4);
      assertSame(jsonFactory5, jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(63, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JSON", "NUMBER_FLOAT");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: JSON", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("JSON", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("NUMBER_FLOAT", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) dataOutputStream0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      String string0 = "]";
      int int0 = 93;
      SQLException sQLException0 = new SQLException("]", (String) null, 93, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("]", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: ]", sQLException0.toString());
      assertEquals(93, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLException0);
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(boolean1);
      
      Class<Short> class1 = Short.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      assertNotNull(resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isConcrete());
      
      Class<?> class2 = ClassUtil.rawClass(resolvedRecursiveType0);
      assertNotNull(class2);
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isConcrete());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertEquals(1537, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isInterface());
      assertFalse(class2.isAnnotation());
      assertEquals("interface java.lang.annotation.Annotation", class2.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<NoClass>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<?> class0 = ClassUtil.rawClass((JavaType) null);
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertNotNull(jsonpCharacterEscapes0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(3, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = BigInteger.probablePrime(1548, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte)89, bigInteger0.byteValue());
      assertEquals((short)12633, bigInteger0.shortValue());
      
      Class<Boolean> class0 = Boolean.class;
      IntStream intStream0 = mockRandom0.ints((long) 1548);
      assertNotNull(intStream0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "net.sf.cglib.proxy.");
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((byte)89, bigInteger0.byteValue());
      assertEquals((short)12633, bigInteger0.shortValue());
      
      Integer integer0 = Integer.getInteger("ACCEPT_SINGLE_VALUE_ASoARRAY", 1548);
      assertNotNull(integer0);
      assertEquals(1548, (int)integer0);
      
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdNativeValueException(integer0, class0);
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1548);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      
      Class<?> class1 = ClassUtil.rawClass(placeholderForType0);
      assertNotNull(class1);
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Double> class1 = Double.class;
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class class3 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class3);
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Class<NoClass> class1 = NoClass.class;
      Byte byte0 = new Byte((byte) (-99));
      assertNotNull(byte0);
      assertEquals((byte) (-99), (byte)byte0);
      
      Class<Float> class2 = Float.class;
      boolean boolean0 = ClassUtil.hasClass(byte0, class2);
      assertFalse(boolean0);
      
      String string1 = ClassUtil.nonNullString("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType");
      assertNotNull(string1);
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType", string1);
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isFinal());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      assertNotNull(referenceType0);
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      
      ReferenceType referenceType1 = referenceType0.withValueHandler(simpleType0);
      assertNotNull(referenceType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isContainerType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isConcrete());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.useStaticType());
      
      ReferenceType referenceType2 = referenceType0.withValueHandler((Object) null);
      assertNotNull(referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertSame(referenceType0, referenceType2);
      assertNotSame(referenceType2, referenceType1);
      assertSame(referenceType2, referenceType0);
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType2.useStaticType());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isPrimitive());
      assertTrue(referenceType2.isFinal());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isJavaLangObject());
      assertTrue(referenceType2.isAnchorType());
      assertFalse(referenceType2.isEnumType());
      assertFalse(referenceType2.hasHandlers());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType2.isInterface());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isContainerType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.isReferenceType());
      
      Class<Float> class3 = Float.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) referenceType2, (Class<?>) class3, false);
      assertNotNull(list0);
      assertNotSame(referenceType0, referenceType1);
      assertSame(referenceType0, referenceType2);
      assertNotSame(referenceType2, referenceType1);
      assertSame(referenceType2, referenceType0);
      assertSame(class3, class2);
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType2.useStaticType());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isPrimitive());
      assertTrue(referenceType2.isFinal());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isJavaLangObject());
      assertTrue(referenceType2.isAnchorType());
      assertFalse(referenceType2.isEnumType());
      assertFalse(referenceType2.hasHandlers());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType2.isInterface());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isContainerType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.isReferenceType());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Parameter[] parameterArray0 = constructor0.getParameters();
      assertNotNull(parameterArray0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, parameterArray0.length);
      
      Class<Long> class1 = Long.class;
      boolean boolean0 = ClassUtil.isConcrete(class1);
      assertTrue(boolean0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class1);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(enumSet0);
      assertNotNull(class2);
      assertEquals(0, enumSet0.size());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(16385, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertFalse(class2.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = ClassUtil.nonNullString("4r,'8Pu)#v9{&rD<R");
      assertNotNull(string0);
      assertEquals("4r,'8Pu)#v9{&rD<R", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      System.setCurrentTimeMillis((-1538L));
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nameOf((Named) beanProperty_Bogus0);
      assertNotNull(string0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("``", string0);
      
      String string1 = ClassUtil.getClassDescription(list0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("`java.util.ArrayList`", string1);
      
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, int0);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      String string0 = ClassUtil.nameOf((Named) null);
      assertNotNull(string0);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Integer> class1 = Integer.class;
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = ClassUtil.isLocalType(class1, false);
      assertNull(string0);
      
      Class<String> class2 = String.class;
      boolean boolean3 = ClassUtil.hasClass(class1, class2);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string1 = ClassUtil.nonNullString((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      assertNotNull(referenceType0);
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      
      Byte byte0 = new Byte((byte) (-13));
      assertNotNull(byte0);
      assertEquals((byte) (-13), (byte)byte0);
      
      ReferenceType referenceType1 = referenceType0.withValueHandler(byte0);
      assertNotNull(referenceType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isFinal());
      assertTrue(referenceType1.hasContentType());
      
      ReferenceType referenceType2 = referenceType1.withContentValueHandler((Object) null);
      assertNotNull(referenceType2);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertSame(referenceType2, referenceType1);
      assertNotSame(referenceType2, referenceType0);
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isFinal());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType2.isMapLikeType());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.hasHandlers());
      assertFalse(referenceType2.isJavaLangObject());
      assertTrue(referenceType2.isFinal());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isAnchorType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.useStaticType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isAbstract());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.hasValueHandler());
      
      Class<Long> class3 = Long.class;
      Float float0 = new Float((double) (byte) (-13));
      assertNotNull(float0);
      assertEquals((-13.0F), (float)float0, 0.01F);
      
      ReferenceType referenceType3 = referenceType0.withValueHandler(float0);
      assertNotNull(referenceType3);
      assertNotSame(referenceType3, referenceType1);
      assertNotSame(referenceType3, referenceType0);
      assertNotSame(referenceType3, referenceType2);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType3);
      assertTrue(referenceType3.equals((Object)referenceType2));
      assertTrue(referenceType3.equals((Object)referenceType1));
      assertTrue(referenceType3.equals((Object)referenceType0));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType3.hasContentType());
      assertFalse(referenceType3.useStaticType());
      assertFalse(referenceType3.isJavaLangObject());
      assertFalse(referenceType3.isAnchorType());
      assertFalse(referenceType3.isMapLikeType());
      assertEquals(0, referenceType3.containedTypeCount());
      assertFalse(referenceType3.isAbstract());
      assertTrue(referenceType3.isFinal());
      assertTrue(referenceType3.hasHandlers());
      assertTrue(referenceType3.isConcrete());
      assertFalse(referenceType3.isInterface());
      assertFalse(referenceType3.isContainerType());
      assertFalse(referenceType3.isCollectionLikeType());
      assertFalse(referenceType3.isEnumType());
      assertTrue(referenceType3.hasValueHandler());
      assertFalse(referenceType3.isArrayType());
      assertFalse(referenceType3.isPrimitive());
      assertTrue(referenceType3.isReferenceType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) referenceType2, (Class<?>) class3, true);
      assertNotNull(list0);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType3);
      assertSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType3);
      assertNotSame(referenceType2, referenceType3);
      assertSame(referenceType2, referenceType1);
      assertNotSame(referenceType2, referenceType0);
      assertTrue(referenceType0.equals((Object)referenceType3));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType1.equals((Object)referenceType3));
      assertTrue(referenceType2.equals((Object)referenceType3));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isPrimitive());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isFinal());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType2.isMapLikeType());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.hasHandlers());
      assertFalse(referenceType2.isJavaLangObject());
      assertTrue(referenceType2.isFinal());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isAnchorType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.useStaticType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isAbstract());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Class class1 = (Class)ClassUtil.nonNull((Object) null, (Object) class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(16385, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      
      String string0 = ClassUtil.nullOrToString(class1);
      assertNotNull(string0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(16385, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      
      Class<Float> class2 = Float.class;
      Class<Object> class3 = Object.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class3, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      assertNotNull(mapType0);
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      
      MapType mapType1 = mapType0.withContentTypeHandler(typeFactory0);
      assertNotNull(mapType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasValueHandler());
      
      MapType mapType2 = mapType1.withContentValueHandler(mapType0);
      assertNotNull(mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.hasHandlers());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.useStaticType());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.hasValueHandler());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isFinal());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      DecimalNode decimalNode0 = new DecimalNode(bigDecimal0);
      assertNotNull(decimalNode0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.booleanValue());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      
      MapType mapType3 = mapType2.withKeyValueHandler(decimalNode0);
      assertNotNull(mapType3);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType3, mapType1);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType3.equals((Object)mapType0));
      assertTrue(mapType3.equals((Object)mapType1));
      assertTrue(mapType3.equals((Object)mapType2));
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.hasHandlers());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.useStaticType());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.hasValueHandler());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isFinal());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.booleanValue());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertTrue(mapType3.hasHandlers());
      assertFalse(mapType3.isJavaLangObject());
      assertFalse(mapType3.hasValueHandler());
      assertFalse(mapType3.isAbstract());
      assertFalse(mapType3.useStaticType());
      assertEquals(2, mapType3.containedTypeCount());
      assertFalse(mapType3.isFinal());
      assertFalse(mapType3.isInterface());
      assertTrue(mapType3.isConcrete());
      assertFalse(mapType3.isArrayType());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.isEnumType());
      assertTrue(mapType3.hasContentType());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isCollectionLikeType());
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) mapType3, (Class<?>) class0, true);
      assertNotNull(list0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType3, mapType1);
      assertTrue(mapType0.equals((Object)mapType3));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType1.equals((Object)mapType3));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType3));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType3.equals((Object)mapType0));
      assertTrue(mapType3.equals((Object)mapType1));
      assertTrue(mapType3.equals((Object)mapType2));
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasHandlers());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.hasHandlers());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.useStaticType());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.hasValueHandler());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isFinal());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(decimalNode0.isBigDecimal());
      assertEquals(0, decimalNode0.size());
      assertFalse(decimalNode0.isIntegralNumber());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, decimalNode0.asToken());
      assertEquals(JsonParser.NumberType.BIG_DECIMAL, decimalNode0.numberType());
      assertFalse(decimalNode0.isFloat());
      assertFalse(decimalNode0.isLong());
      assertFalse(decimalNode0.isInt());
      assertFalse(decimalNode0.isShort());
      assertEquals(JsonNodeType.NUMBER, decimalNode0.getNodeType());
      assertFalse(decimalNode0.booleanValue());
      assertTrue(decimalNode0.isFloatingPointNumber());
      assertFalse(decimalNode0.isDouble());
      assertFalse(decimalNode0.isObject());
      assertFalse(decimalNode0.isArray());
      assertFalse(decimalNode0.isNaN());
      assertFalse(decimalNode0.isMissingNode());
      assertFalse(decimalNode0.isBigInteger());
      assertNull(decimalNode0.textValue());
      assertTrue(mapType3.hasHandlers());
      assertFalse(mapType3.isJavaLangObject());
      assertFalse(mapType3.hasValueHandler());
      assertFalse(mapType3.isAbstract());
      assertFalse(mapType3.useStaticType());
      assertEquals(2, mapType3.containedTypeCount());
      assertFalse(mapType3.isFinal());
      assertFalse(mapType3.isInterface());
      assertTrue(mapType3.isConcrete());
      assertFalse(mapType3.isArrayType());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.isEnumType());
      assertTrue(mapType3.hasContentType());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isCollectionLikeType());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      BufferRecycler bufferRecycler1 = jsonFactory0._getBufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler1);
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(dataOutputStream0);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((DataOutput) null, jsonEncoding0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JSON", "JSON", 3);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: JSON", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("JSON", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("JSON", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(3, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      Object object0 = ClassUtil.nonNull((Object) null, (Object) null);
      assertNull(object0);
      
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
      
      Class<Short> class0 = Short.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<?> class1 = ClassUtil.rawClass((JavaType) null);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      assertNotNull(enumSet1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals(0, enumSet0.size());
      assertEquals(3, enumSet1.size());
      
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      boolean boolean0 = enumSet0.add(accessPattern0);
      assertNotSame(enumSet0, enumSet1);
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNotNull(string0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals("primitive", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      assertNotNull(enumSet1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals(0, enumSet0.size());
      assertEquals(3, enumSet1.size());
      
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      boolean boolean0 = enumSet0.add(accessPattern0);
      assertNotSame(enumSet0, enumSet1);
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(boolean0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet1);
      assertNotNull(class1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals(1, enumSet0.size());
      assertEquals(3, enumSet1.size());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2858;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("=2N6AdkkI&bp](", "org.hibernate.proxy.java.io.IOException", 2858);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("org.hibernate.proxy.java.io.IOException", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: =2N6AdkkI&bp](", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(2858, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("=2N6AdkkI&bp](", sQLInvalidAuthorizationSpecException0.getMessage());
      
      boolean boolean1 = ClassUtil.hasClass(class0, class1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, enumSet0.size());
      assertEquals(3, enumSet1.size());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      assertFalse(boolean1);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNotNull(string0);
      assertEquals("enum", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      assertNotNull(coreXMLDeserializers_Std0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, accessPattern0);
      
      Enum<AccessPattern> enum0 = ClassUtil.nonNull((Enum<AccessPattern>) accessPattern0, (Enum<AccessPattern>) null);
      assertNotNull(enum0);
      assertSame(accessPattern0, enum0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, enum0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "Bo2%paTRP:\"[X0O", "Bo2%paTRP:\"[X0O");
      assertNotNull(invalidTypeIdException0);
      assertEquals("Bo2%paTRP:\"[X0O", invalidTypeIdException0.getTypeId());
      
      Class<Double> class0 = Double.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(1025, class1.getModifiers());
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      
      try { 
        ClassUtil.throwIfIOE(invalidTypeIdException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'Bo2%paTRP:\"[X0O' as a subtype of null: Bo2%paTRP:\"[X0O
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(25, methodArray0.length);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(4, fieldArray0.length);
      
      String string1 = ClassUtil.backticked((String) null);
      assertNotNull(string1);
      assertEquals("[null]", string1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Class<IOException> class0 = IOException.class;
      Class<Short> class1 = Short.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "JSON");
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals("JSON", stringWriter0.toString());
      assertEquals("JSON", stringWriter1.toString());
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((Writer) stringWriter1);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(writerBasedJsonGenerator0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", stringWriter0.toString());
      assertEquals("JSON", stringWriter1.toString());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      
      defaultSerializerProvider_Impl0.defaultSerializeNull(writerBasedJsonGenerator0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", stringWriter0.toString());
      assertEquals("JSON", stringWriter1.toString());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(4, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "Bo2%paTRP:\"[X0O", "Bo2%paTRP:\"[X0O");
      assertNotNull(invalidTypeIdException0);
      assertEquals("Bo2%paTRP:\"[X0O", invalidTypeIdException0.getTypeId());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Bo2%paTRP:\"[X0O", "Bo2%paTRP:\"[X0O");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: Bo2%paTRP:\"[X0O", sQLTransientConnectionException0.toString());
      assertEquals("Bo2%paTRP:\"[X0O", sQLTransientConnectionException0.getSQLState());
      assertEquals("Bo2%paTRP:\"[X0O", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Bo2%paTRP:\"[X0O", "Bo2%paTRP:\"[X0O", (-2215));
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("Bo2%paTRP:\"[X0O", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals((-2215), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Bo2%paTRP:\"[X0O", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("Bo2%paTRP:\"[X0O", sQLInvalidAuthorizationSpecException0.getMessage());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      Class<Object> class2 = Object.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "org.hibernate.proxy.java.lang.String");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      assertNotNull(enumSet1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals(0, enumSet0.size());
      assertEquals(3, enumSet1.size());
      
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      boolean boolean0 = enumSet0.add(accessPattern0);
      assertNotSame(enumSet0, enumSet1);
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(boolean0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet1);
      assertNotNull(class1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals(1, enumSet0.size());
      assertEquals(3, enumSet1.size());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertNotNull(classUtil_CtorArray0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals(1, enumSet0.size());
      assertEquals(3, enumSet1.size());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertEquals(1, classUtil_CtorArray0.length);
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      
      Class<SimpleType> class2 = SimpleType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class2);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      ClassUtil.Ctor[] classUtil_CtorArray1 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray1);
      assertNotSame(classUtil_CtorArray1, classUtil_CtorArray0);
      assertFalse(classUtil_CtorArray1.equals((Object)classUtil_CtorArray0));
      assertEquals(5, classUtil_CtorArray1.length);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("^");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("^", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ^", sQLInvalidAuthorizationSpecException0.toString());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "^", (Throwable) sQLInvalidAuthorizationSpecException0);
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("^", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ^", sQLInvalidAuthorizationSpecException0.toString());
      
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("^", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ^", sQLInvalidAuthorizationSpecException0.toString());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("BVq", "BVq");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: BVq", sQLTransientConnectionException0.toString());
      assertEquals("BVq", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("BVq", sQLTransientConnectionException0.getSQLState());
      
      sQLInvalidAuthorizationSpecException0.setNextException(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: BVq", sQLTransientConnectionException0.toString());
      assertEquals("BVq", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("BVq", sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("^", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ^", sQLInvalidAuthorizationSpecException0.toString());
      
      Class<Long> class3 = Long.class;
      boolean boolean2 = ClassUtil.hasClass(jsonMappingException1, class3);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("^", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ^", sQLInvalidAuthorizationSpecException0.toString());
      assertFalse(boolean2);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertEquals("^", sQLInvalidAuthorizationSpecException1.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException1.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ^", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("^", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ^", sQLInvalidAuthorizationSpecException0.toString());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException2 = (SQLInvalidAuthorizationSpecException)ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLInvalidAuthorizationSpecException2);
      assertSame(sQLInvalidAuthorizationSpecException2, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException2, sQLInvalidAuthorizationSpecException0);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException2);
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertEquals(0, sQLInvalidAuthorizationSpecException2.getErrorCode());
      assertEquals("^", sQLInvalidAuthorizationSpecException2.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ^", sQLInvalidAuthorizationSpecException2.toString());
      assertNull(sQLInvalidAuthorizationSpecException2.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("^", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ^", sQLInvalidAuthorizationSpecException0.toString());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      String string0 = ClassUtil.nameOf((Named) beanProperty_Bogus0);
      assertNotNull(string0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("``", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionLikeType", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      assertNotNull(class2);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionLikeType", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "Bo2%paTRP:\"[X0O", "Bo2%paTRP:\"[X0O");
      assertNotNull(invalidTypeIdException0);
      assertEquals("Bo2%paTRP:\"[X0O", invalidTypeIdException0.getTypeId());
      
      Class<Double> class0 = Double.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isAnnotation());
      
      Class<Annotation> class2 = Annotation.class;
      Constructor<Annotation> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(635);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertNotNull(uS_ASCII0);
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayBuilder0, uS_ASCII0);
      assertNotNull(outputStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, (-565), objectMapper0, outputStreamWriter0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(writerBasedJsonGenerator0);
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(127, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals((-565), writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      
      MockIOException mockIOException0 = new MockIOException(">f,6# 4nTlQ?");
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      assertNotNull(iOException0);
      assertNull(iOException0.getMessage());
      assertEquals("java.io.IOException", iOException0.toString());
      
      try { 
        ClassUtil.throwIfIOE(iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)112;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-46), (byte) (-110), (byte) (-105), (byte)112}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean1);
      
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 59);
      assertNotNull(coreXMLDeserializers_Std0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, accessPattern0);
      
      Enum<AccessPattern> enum0 = ClassUtil.nonNull((Enum<AccessPattern>) accessPattern0, (Enum<AccessPattern>) accessPattern0);
      assertNotNull(enum0);
      assertSame(accessPattern0, enum0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, enum0);
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Constructor<Float> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<MapType> class0 = MapType.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class1);
      assertNotNull(mapLikeType0);
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      
      JavaType javaType0 = typeFactory0.constructSimpleType(class0, (JavaType[]) null);
      assertNotNull(javaType0);
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      assertNotNull(mapType0);
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      
      MapType mapType1 = mapType0.withKeyTypeHandler(javaType0);
      assertNotNull(mapType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertTrue(mapType1.equals((Object)mapType0));
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertTrue(mapType1.hasHandlers());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      
      boolean boolean1 = mapType1.hasGenericTypes();
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertTrue(mapType1.hasHandlers());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(boolean1);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = mapLikeType0.getGenericSignature(stringBuilder0);
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertEquals("Ljava/lang/RuntimeException<Ljava/lang/Object;Ljava/lang/Object;>;", stringBuilder0.toString());
      assertEquals("Ljava/lang/RuntimeException<Ljava/lang/Object;Ljava/lang/Object;>;", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = mapType0.getErasedSignature(stringBuilder1);
      assertNotNull(stringBuilder2);
      assertNotSame(mapType0, mapType1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertTrue(mapType0.equals((Object)mapType1));
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertEquals("Ljava/lang/RuntimeException<Ljava/lang/Object;Ljava/lang/Object;>;Ljava/util/HashMap;", stringBuilder0.toString());
      assertEquals("Ljava/lang/RuntimeException<Ljava/lang/Object;Ljava/lang/Object;>;Ljava/util/HashMap;", stringBuilder1.toString());
      assertEquals("Ljava/lang/RuntimeException<Ljava/lang/Object;Ljava/lang/Object;>;Ljava/util/HashMap;", stringBuilder2.toString());
      
      String string0 = ClassUtil.getClassDescription(mapType0);
      assertNotNull(string0);
      assertNotSame(mapType0, mapType1);
      assertTrue(mapType0.equals((Object)mapType1));
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertEquals("`com.fasterxml.jackson.databind.type.MapType`", string0);
      
      String string1 = ClassUtil.getClassDescription(mapType1);
      assertNotNull(string1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertTrue(mapType1.hasHandlers());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertEquals("`com.fasterxml.jackson.databind.type.MapType`", string1);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Class<IOException> class3 = IOException.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class3);
      assertNotNull(objectReader0);
      
      char[] charArray0 = iOContext0.allocTokenBuffer();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(charArray0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(4000, charArray0.length);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.hibernate.proxy.java.lang.reflect.AccessibleObject");
      assertNotNull(mockPrintStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectReader0, mockPrintStream0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCodec(objectReader0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator1.getFeatureMask());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Closeable) mockPrintStream0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.hasClass(class0, class0);
      assertFalse(boolean0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature1, false);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory_Feature1, jsonFactory_Feature0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory_Feature1.equals((Object)jsonFactory_Feature0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      assertNotNull(jsonFactory3);
      assertNotSame(jsonFactory_Feature0, jsonFactory_Feature1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory_Feature1, jsonFactory_Feature0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertFalse(jsonFactory_Feature0.equals((Object)jsonFactory_Feature1));
      assertFalse(jsonFactory_Feature1.equals((Object)jsonFactory_Feature0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      
      JsonFactory jsonFactory4 = jsonFactory3.setRootValueSeparator("JSON");
      assertNotNull(jsonFactory4);
      assertNotSame(jsonFactory_Feature0, jsonFactory_Feature1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory_Feature1, jsonFactory_Feature0);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory0);
      assertFalse(jsonFactory_Feature0.equals((Object)jsonFactory_Feature1));
      assertFalse(jsonFactory_Feature1.equals((Object)jsonFactory_Feature0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals("JSON", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresCustomCodec());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory5 = jsonFactory4.configure(jsonGenerator_Feature0, false);
      assertNotNull(jsonFactory5);
      assertNotSame(jsonFactory_Feature0, jsonFactory_Feature1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory_Feature1, jsonFactory_Feature0);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory4);
      assertSame(jsonFactory5, jsonFactory1);
      assertFalse(jsonFactory_Feature0.equals((Object)jsonFactory_Feature1));
      assertFalse(jsonFactory_Feature1.equals((Object)jsonFactory_Feature0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals("JSON", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory5.canParseAsync());
      assertEquals("JSON", jsonFactory5.getRootValueSeparator());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory5.getFormatName());
      
      JsonFactory jsonFactory6 = jsonFactory5.disable(jsonFactory_Feature1);
      assertNotNull(jsonFactory6);
      assertNotSame(jsonFactory_Feature0, jsonFactory_Feature1);
      assertSame(jsonFactory0, jsonFactory6);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory6);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory_Feature1, jsonFactory_Feature0);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory6);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory5);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory5);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory6);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory5);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory6);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory3);
      assertSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory2);
      assertSame(jsonFactory5, jsonFactory4);
      assertSame(jsonFactory5, jsonFactory6);
      assertSame(jsonFactory5, jsonFactory1);
      assertSame(jsonFactory6, jsonFactory4);
      assertSame(jsonFactory6, jsonFactory1);
      assertSame(jsonFactory6, jsonFactory5);
      assertSame(jsonFactory6, jsonFactory3);
      assertSame(jsonFactory6, jsonFactory0);
      assertSame(jsonFactory6, jsonFactory2);
      assertFalse(jsonFactory_Feature0.equals((Object)jsonFactory_Feature1));
      assertFalse(jsonFactory_Feature1.equals((Object)jsonFactory_Feature0));
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertEquals("JSON", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory5.canParseAsync());
      assertEquals("JSON", jsonFactory5.getRootValueSeparator());
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertFalse(jsonFactory6.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory6.getRootValueSeparator());
      assertEquals("JSON", jsonFactory6.getFormatName());
      assertFalse(jsonFactory6.canHandleBinaryNatively());
      assertTrue(jsonFactory6.canParseAsync());
      assertTrue(jsonFactory6.canUseCharArrays());
      assertFalse(jsonFactory6.requiresCustomCodec());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(dataOutputStream0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory1.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(writerBasedJsonGenerator0);
      assertSame(jsonFactory0, jsonFactory6);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory6);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ORDER_MAP_ENTRIES_BY_KEYS", "java.lang.reflect.Ac");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ORDER_MAP_ENTRIES_BY_KEYS", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("java.lang.reflect.Ac", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("ORDER_MAP_ENTRIES_BY_KEYS", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, false);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(filteringGeneratorDelegate0);
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(uTF8JsonGenerator0);
      assertSame(jsonFactory0, jsonFactory6);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory5);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(writerBasedJsonGenerator0, "W>ttaP7UE");
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "net.sf.cglib.proxy.java.lang.Error");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class<Double> class1 = Double.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(29, methodArray0.length);
      
      Class<Object> class2 = Object.class;
      Class<?> class3 = ClassUtil.getEnclosingClass(class2);
      assertNull(class3);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(25, methodArray0.length);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, class0, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("IuUaSL{", "byte", (-1824), hashMap0, (Throwable) null);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: IuUaSL{", sQLClientInfoException0.toString());
      assertEquals("byte", sQLClientInfoException0.getSQLState());
      assertEquals("IuUaSL{", sQLClientInfoException0.getMessage());
      assertEquals((-1824), sQLClientInfoException0.getErrorCode());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotNull(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: IuUaSL{", sQLClientInfoException0.toString());
      assertEquals("byte", sQLClientInfoException0.getSQLState());
      assertEquals("IuUaSL{", sQLClientInfoException0.getMessage());
      assertEquals((-1824), sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("0%rU^gt\"MT+O)e1v+;-", "", (-5163), map0);
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.SQLClientInfoException: IuUaSL{", sQLClientInfoException0.toString());
      assertEquals("byte", sQLClientInfoException0.getSQLState());
      assertEquals("IuUaSL{", sQLClientInfoException0.getMessage());
      assertEquals((-1824), sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("java.sql.SQLClientInfoException: 0%rU^gt\"MT+O)e1v+;-", sQLClientInfoException1.toString());
      assertEquals((-5163), sQLClientInfoException1.getErrorCode());
      assertEquals("", sQLClientInfoException1.getSQLState());
      assertEquals("0%rU^gt\"MT+O)e1v+;-", sQLClientInfoException1.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException1, "K3Vj[-,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // K3Vj[-,
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class0);
      assertFalse(boolean0);
      
      Class<NoClass> class1 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "Expected space separating root-level values");
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.SimpleType` from number 1: Expected space separating root-level values
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.type.ReferenceType`", string0);
      
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<SimpleType> class1 = SimpleType.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("3jH[4RbYO", "w;o&R2_2W", (-439), mockRuntimeException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals((-439), sQLRecoverableException0.getErrorCode());
      assertEquals("w;o&R2_2W", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 3jH[4RbYO", sQLRecoverableException0.toString());
      assertEquals("3jH[4RbYO", sQLRecoverableException0.getMessage());
      
      SQLException sQLException1 = (SQLException)sQLException0.initCause(sQLRecoverableException0);
      assertNotNull(sQLException1);
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals((-439), sQLRecoverableException0.getErrorCode());
      assertEquals("w;o&R2_2W", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 3jH[4RbYO", sQLRecoverableException0.toString());
      assertEquals("3jH[4RbYO", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLException1.getErrorCode());
      assertNull(sQLException1.getMessage());
      assertNull(sQLException1.getSQLState());
      assertEquals("java.sql.SQLException", sQLException1.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "org.hibernate.proxy.java.lang.reflect.AccessibleObject";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.hibernate.proxy.java.lang.reflect.AccessibleObject", "ujJ$\rVKd{~)pg>", (-946));
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals((-946), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("ujJ$\rVKd{~)pg>", sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals((-946), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("ujJ$\rVKd{~)pg>", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLTransientConnectionException0.toString());
      
      Spliterator<Throwable> spliterator0 = sQLTransientConnectionException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals((-946), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("ujJ$\rVKd{~)pg>", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLTransientConnectionException0.toString());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)sQLTransientConnectionException0.fillInStackTrace();
      assertNotNull(sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertEquals((-946), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("ujJ$\rVKd{~)pg>", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLTransientConnectionException1.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLTransientConnectionException1.getMessage());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = sQLIntegrityConstraintViolationException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals((-946), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("ujJ$\rVKd{~)pg>", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(13, stackTraceElementArray0.length);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)sQLIntegrityConstraintViolationException0.initCause(sQLTransientConnectionException0);
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      assertEquals((-946), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("ujJ$\rVKd{~)pg>", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException1.toString());
      assertEquals("org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals((-946), sQLIntegrityConstraintViolationException1.getErrorCode());
      assertEquals("ujJ$\rVKd{~)pg>", sQLIntegrityConstraintViolationException1.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException2 = (SQLIntegrityConstraintViolationException)sQLIntegrityConstraintViolationException0.fillInStackTrace();
      assertNotNull(sQLIntegrityConstraintViolationException2);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException2);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException2, sQLIntegrityConstraintViolationException0);
      assertSame(sQLIntegrityConstraintViolationException2, sQLIntegrityConstraintViolationException1);
      assertEquals((-946), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("ujJ$\rVKd{~)pg>", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("ujJ$\rVKd{~)pg>", sQLIntegrityConstraintViolationException2.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException2.toString());
      assertEquals((-946), sQLIntegrityConstraintViolationException2.getErrorCode());
      assertEquals("org.hibernate.proxy.java.lang.reflect.AccessibleObject", sQLIntegrityConstraintViolationException2.getMessage());
      
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      Class<Object> class0 = Object.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNull(type0);
      
      Class<Short> class1 = Short.class;
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(boolean0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      String string0 = ClassUtil.getClassDescription((Object) null);
      assertNotNull(string0);
      assertEquals("unknown", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      
      Class<Object> class0 = Object.class;
      Class<Annotation> class1 = Annotation.class;
      Constructor<Annotation> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Class<Object> class2 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, 524);
      assertNotNull(coreXMLDeserializers_Std0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      assertSame(class2, class0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, accessPattern0);
      
      Enum<AccessPattern> enum0 = ClassUtil.nonNull((Enum<AccessPattern>) accessPattern0, (Enum<AccessPattern>) accessPattern0);
      assertNotNull(enum0);
      assertSame(class2, class0);
      assertSame(accessPattern0, enum0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, enum0);
      
      Class<IOException> class3 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class3, class0, true);
      assertNotNull(list0);
      assertSame(class0, class2);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      IOException iOException0 = ClassUtil.createInstance(class3, true);
      assertNotNull(iOException0);
      assertEquals("java.io.IOException", iOException0.toString());
      assertNull(iOException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(dataOutputStream0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "$7_Ub?[|X{>Zi");
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // $7_Ub?[|X{>Zi
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      Class<Annotation> class1 = Annotation.class;
      boolean boolean0 = ClassUtil.hasClass(class0, class1);
      assertSame(class0, class1);
      assertSame(class1, class0);
      assertFalse(boolean0);
      
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      assertSame(class1, class0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      assertNotNull(annotationArray0);
      assertSame(class1, class0);
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("size", "size", 32755);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(32755, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("size", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("size", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: size", sQLFeatureNotSupportedException0.toString());
      
      Spliterator<Throwable> spliterator0 = sQLFeatureNotSupportedException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(32755, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("size", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("size", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: size", sQLFeatureNotSupportedException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("size", "size");
      assertNotNull(sQLTimeoutException0);
      assertEquals("size", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: size", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("size", sQLTimeoutException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)ClassUtil.throwIfError(sQLTimeoutException0);
      assertNotNull(sQLTimeoutException1);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      assertEquals("size", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: size", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("size", sQLTimeoutException0.getSQLState());
      assertEquals("size", sQLTimeoutException1.getMessage());
      assertEquals("size", sQLTimeoutException1.getSQLState());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: size", sQLTimeoutException1.toString());
      
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals("short", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      String string0 = "S:+jQ?l@H:f1r";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S:+jQ?l@H:f1r");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<ArrayType> class2 = ArrayType.class;
      boolean boolean2 = ClassUtil.isJacksonStdImpl(class2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Class<ArrayType> class3 = ArrayType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class3);
      assertNotNull(typeArray0);
      assertSame(class3, class2);
      assertEquals(1, typeArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "com.fasterxml.jackson.databind.util.ClassUtil", "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      assertNotNull(invalidTypeIdException0);
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", invalidTypeIdException0.getTypeId());
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<Long> class1 = Long.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertEquals("long", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("v 0p$=4gtmpWtUa=o", " is not a primitive typ");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(" is not a primitive typ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException0.toString());
      
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertNotNull(list0);
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.hasClass(class0, class0);
      assertFalse(boolean0);
      
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class2 = Annotation.class;
      boolean boolean1 = constructor0.isAnnotationPresent(class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(boolean1);
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertNotNull(classArray0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, classArray0.length);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      Annotation[] annotationArray1 = constructor0.getAnnotations();
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray2 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray2);
      assertSame(annotationArray2, annotationArray1);
      assertSame(annotationArray2, annotationArray0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray2.length);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.Error()", constructor1.toString());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      
      ClassUtil.checkAndFixAccess((Member) constructor1);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.Error()", constructor1.toString());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(29, methodArray0.length);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      boolean boolean2 = ClassUtil.isConcrete(class3);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<ArrayType> class1 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      
      Class<Double> class2 = Double.class;
      boolean boolean0 = ClassUtil.isBogusClass(class2);
      assertFalse(boolean0);
      
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3696);
      assertNotNull(placeholderForType0);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      
      boolean boolean1 = placeholderForType0.isTypeOrSuperTypeOf(class0);
      assertSame(class0, class3);
      assertFalse(boolean1 == boolean0);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(boolean1);
      
      Class<AccessibleObject> class4 = AccessibleObject.class;
      boolean boolean2 = placeholderForType0.isTypeOrSuperTypeOf(class4);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(boolean2);
      
      ClassUtil.verifyMustOverride(class3, placeholderForType0, "tlOr{(xo@*_ACr>'");
      assertSame(class3, class0);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("tlOr{(xo@*_ACr>'");
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals("tlOr{(xo@*_ACr>'", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("tlOr{(xo@*_ACr>'", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals("tlOr{(xo@*_ACr>'", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("tlOr{(xo@*_ACr>'", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("tlOr{(xo@*_ACr>'", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals("tlOr{(xo@*_ACr>'", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals("tlOr{(xo@*_ACr>'", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("tlOr{(xo@*_ACr>'", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("tlOr{(xo@*_ACr>'", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(dataOutputStream0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(writerBasedJsonGenerator0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals("tlOr{(xo@*_ACr>'", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(15, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals("tlOr{(xo@*_ACr>'", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("tlOr{(xo@*_ACr>'", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals("tlOr{(xo@*_ACr>'", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JSON", (String) null);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: JSON", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("JSON", sQLInvalidAuthorizationSpecException0.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      String string0 = mockRuntimeException0.getMessage();
      assertNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Throwable[] throwableArray0 = mockRuntimeException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      
      String string1 = mockRuntimeException0.getMessage();
      assertNull(string1);
      
      String string2 = ClassUtil.getClassDescription(mockRuntimeException0);
      assertNotNull(string2);
      assertEquals("`org.evosuite.runtime.mock.java.lang.MockRuntimeException`", string2);
      
      Class<Error> class0 = Error.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Float> class0 = Float.class;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("v 0p$=4gtmpWtUa=o", " is not a primitive typ", (-1345));
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException0.toString());
      assertEquals("v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-1345), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(" is not a primitive typ", sQLFeatureNotSupportedException0.getSQLState());
      
      Spliterator<Throwable> spliterator0 = sQLFeatureNotSupportedException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException0.toString());
      assertEquals("v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-1345), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(" is not a primitive typ", sQLFeatureNotSupportedException0.getSQLState());
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      String string1 = ClassUtil.nonNullString((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class2 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class2);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(boolean0);
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertNotNull(classArray0);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, classArray0.length);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertNotNull(annotationArray0);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      Annotation[] annotationArray1 = constructor0.getAnnotations();
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      assertNotNull(typeResolutionContext_Basic0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler(list0);
      assertNotNull(javaType0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.hasContentType());
      assertTrue(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, " is not a primitive typ", javaType0);
      assertNotNull(virtualAnnotatedMember0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.hasContentType());
      assertTrue(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertEquals(" is not a primitive typ", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      
      Member member0 = virtualAnnotatedMember0.getMember();
      assertNull(member0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.hasContentType());
      assertTrue(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertEquals(" is not a primitive typ", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%:<L)m\"_\"B W'");
      assertFalse(boolean0);
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class1.toString());
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertNotNull(list0);
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(class1));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      
      Stack<Class<Short>> stack0 = new Stack<Class<Short>>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertNotNull(class1);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.Float", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, true);
      assertNotNull(filteringGeneratorDelegate0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) filteringGeneratorDelegate0, (String) null);
      assertNotNull(jsonMappingException0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      assertNotNull(throwable0);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      
      Class<Long> class1 = Long.class;
      boolean boolean1 = ClassUtil.isProxyType(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      Class<DecimalNode> class2 = DecimalNode.class;
      Class class3 = (Class)ClassUtil.getGenericSuperclass(class2);
      assertNotNull(class3);
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1025, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("class com.fasterxml.jackson.databind.node.NumericNode", class3.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Float> class0 = Float.class;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("v 0p$=4gtmpWtUa=o", " is not a primitive typ", (-1345));
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(" is not a primitive typ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException0.toString());
      assertEquals((-1345), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException0.getMessage());
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<Double> class2 = Double.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class2);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      String string0 = ClassUtil.nameOf(class1);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", string0);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      Class class4 = (Class)ClassUtil.getGenericSuperclass(class3);
      assertNotNull(class4);
      assertFalse(class4.isInterface());
      assertEquals("class java.lang.Exception", class4.toString());
      assertFalse(class4.isArray());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isPrimitive());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ArrayDeque<Module> arrayDeque0 = new ArrayDeque<Module>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) arrayDeque0);
      assertNotNull(objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("v 0p$=4gtmpWtUa=o");
      assertNotNull(mockPrintStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 39, objectMapper2, mockPrintStream0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(39, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: v 0p$=4gtmpWtUa=o
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<Character> class1 = Character.class;
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
      
      Class<Short> class3 = Short.TYPE;
      assertNotNull(class3);
      assertFalse(class3.isAnnotation());
      assertEquals("short", class3.toString());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(94, methodArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      assertNotNull(basicClassIntrospector0);
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      assertNotNull(propertyNamingStrategy_UpperCamelCaseStrategy0);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      assertNull(annotatedClass0);
      
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      
      Class<Long> class1 = Long.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getAnnotation(class2);
      assertNull(annotation0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      assertNotNull(annotationMap0);
      assertEquals(1, annotationMap0.size());
      
      AnnotationMap annotationMap1 = new AnnotationMap();
      assertNotNull(annotationMap1);
      assertFalse(annotationMap1.equals((Object)annotationMap0));
      assertEquals(0, annotationMap1.size());
      
      AnnotationMap annotationMap2 = AnnotationMap.merge(annotationMap0, annotationMap1);
      assertNotNull(annotationMap2);
      assertNotSame(annotationMap0, annotationMap1);
      assertSame(annotationMap0, annotationMap2);
      assertNotSame(annotationMap1, annotationMap2);
      assertNotSame(annotationMap1, annotationMap0);
      assertSame(annotationMap2, annotationMap0);
      assertNotSame(annotationMap2, annotationMap1);
      assertFalse(annotationMap0.equals((Object)annotationMap1));
      assertFalse(annotationMap1.equals((Object)annotationMap0));
      assertFalse(annotationMap2.equals((Object)annotationMap1));
      assertEquals(1, annotationMap0.size());
      assertEquals(0, annotationMap1.size());
      assertEquals(1, annotationMap2.size());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, " iV~#^!7DVeUx[kR");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals(" iV~#^!7DVeUx[kR", sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      
      String string0 = ClassUtil.getClassDescription((Object) null);
      assertNotNull(string0);
      assertEquals("unknown", string0);
      
      String string1 = ClassUtil.getClassDescription(annotationMap2);
      assertNotNull(string1);
      assertNotSame(annotationMap0, annotationMap1);
      assertSame(annotationMap0, annotationMap2);
      assertNotSame(annotationMap1, annotationMap2);
      assertNotSame(annotationMap1, annotationMap0);
      assertSame(annotationMap2, annotationMap0);
      assertNotSame(annotationMap2, annotationMap1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(annotationMap0.equals((Object)annotationMap1));
      assertFalse(annotationMap1.equals((Object)annotationMap2));
      assertFalse(annotationMap1.equals((Object)annotationMap0));
      assertFalse(annotationMap2.equals((Object)annotationMap1));
      assertEquals(1, annotationMap0.size());
      assertEquals(0, annotationMap1.size());
      assertEquals(1, annotationMap2.size());
      assertEquals("`com.fasterxml.jackson.databind.introspect.AnnotationMap`", string1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(23, methodArray0.length);
      
      String string0 = ClassUtil.getClassDescription((Object) null);
      assertNotNull(string0);
      assertEquals("unknown", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionLikeType", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<Character> class1 = Character.class;
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
      
      Class<Short> class3 = Short.TYPE;
      assertNotNull(class3);
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals("short", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(94, methodArray0.length);
      
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class4);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl1.getGenerator();
      assertNull(jsonGenerator0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Constructor<ArrayType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("com.fasterxml.jackson.databind.deser.impl.ObjectIdReader");
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ObjectIdReader", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ObjectIdReader", jsonFactory1.getRootValueSeparator());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ObjectIdReader", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ObjectIdReader", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ObjectIdReader", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ObjectIdReader", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ObjectIdReader", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ObjectIdReader", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ObjectIdReader", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("FD$D%h");
      assertNotNull(mockPrintWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((Writer) mockPrintWriter0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(writerBasedJsonGenerator0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ObjectIdReader", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(23, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-204);
      intArray0[1] = 76;
      intArray0[2] = (-912);
      intArray0[3] = (-738);
      intArray0[4] = 2164;
      intArray0[5] = 2;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-204), 76, (-912), (-738), 2164, 2}, intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(6, intArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("JSON");
      assertNotNull(mockPrintWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((Writer) mockPrintWriter0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(writerBasedJsonGenerator0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = (-5414);
      intArray0[2] = 76;
      intArray0[3] = 2164;
      intArray0[4] = 207;
      intArray0[5] = (-8);
      intArray0[6] = (-912);
      intArray0[7] = (-738);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {2, (-5414), 76, 2164, 207, (-8), (-912), (-738)}, intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) null, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Iterator<Object> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      String string0 = ClassUtil.quotedOr(iterator0, "keyType");
      assertNotNull(string0);
      
      Class<String> class0 = String.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
      assertNotNull(filteringGeneratorDelegate0);
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      
      Integer integer0 = Integer.getInteger("ACCEPT_SINGLE_VALUE_ASoARRAY", (-87));
      assertNotNull(integer0);
      assertEquals((-87), (int)integer0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(tokenFilter0, (Class<?>) null);
      assertNotNull(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-87));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      MockError mockError0 = new MockError(jsonMappingException0);
      assertNotNull(mockError0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      assertNotNull(objectReader0);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) null);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(beanDeserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory2 = (BeanDeserializerFactory)beanDeserializerFactory1.withConfig(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory2);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory2);
      assertNotSame(beanDeserializerFactory1, deserializerFactory0);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory2, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory2, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory2, deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(beanDeserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory2.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory2.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory2.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory2);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory2));
      assertFalse(beanDeserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory2.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory2.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory2.equals((Object)deserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl1, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type [null] from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.core.filter.TokenFilter`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      boolean boolean5 = ClassUtil.isJacksonStdImpl(class0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      boolean boolean6 = ClassUtil.hasClass(class0, (Class<?>) null);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<Error> class2 = Error.class;
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes((Class<?>) null, class2, true);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class3);
      assertNotNull(class4);
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class4.toString());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isPrimitive());
      assertEquals(1025, class4.getModifiers());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isEnum());
      assertFalse(class4.isAnnotation());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setAttribute(class2, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionLikeType", class1.toString());
      
      Class<Short> class2 = Short.class;
      Class<IOException> class3 = IOException.class;
      Class<Integer> class4 = Integer.class;
      Class<Error> class5 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class5, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class6 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class6);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(boolean0);
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertNotNull(classArray0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, classArray0.length);
      
      Annotation annotation0 = constructor0.getAnnotation(class6);
      assertNull(annotation0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertNotNull(annotationArray0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      Annotation[] annotationArray1 = constructor0.getAnnotations();
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Class<Double> class7 = Double.class;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Character character0 = Character.valueOf('\\');
      assertNotNull(character0);
      assertEquals('\\', (char)character0);
      
      Class<MapLikeType> class8 = MapLikeType.class;
      boolean boolean2 = ClassUtil.hasClass(class3, class8);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class7, class4);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      constructor0.setAccessible(true);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      String string0 = ClassUtil.nullOrToString(class2);
      assertNotNull(string0);
      
      Iterator<Float> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionLikeType", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionLikeType", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(boolean0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("O8", hashMap0, sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: O8", sQLClientInfoException0.toString());
      assertEquals("O8", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("KX^Yi", "com.fasterxml.jackso", "vU-:'Ip", 5);
      assertNotNull(stackTraceElement0);
      assertEquals("KX^Yi.com.fasterxml.jackso(vU-:'Ip:5)", stackTraceElement0.toString());
      assertEquals(5, stackTraceElement0.getLineNumber());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("vU-:'Ip", stackTraceElement0.getFileName());
      assertEquals("com.fasterxml.jackso", stackTraceElement0.getMethodName());
      assertEquals("KX^Yi", stackTraceElement0.getClassName());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("DyI&xa2ts,6fy", "com.fasterxml.jackso", "O8", 5);
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("DyI&xa2ts,6fy.com.fasterxml.jackso(O8:5)", stackTraceElement1.toString());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals(5, stackTraceElement1.getLineNumber());
      assertEquals("O8", stackTraceElement1.getFileName());
      assertEquals("DyI&xa2ts,6fy", stackTraceElement1.getClassName());
      assertEquals("com.fasterxml.jackso", stackTraceElement1.getMethodName());
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("^)}7c$K!#BF-", "O8", "org.hibernate.proxy.java.lang.Short", 5);
      assertNotNull(stackTraceElement2);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertEquals("^)}7c$K!#BF-.O8(org.hibernate.proxy.java.lang.Short:5)", stackTraceElement2.toString());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("^)}7c$K!#BF-", stackTraceElement2.getClassName());
      assertEquals("O8", stackTraceElement2.getMethodName());
      assertEquals(5, stackTraceElement2.getLineNumber());
      assertEquals("org.hibernate.proxy.java.lang.Short", stackTraceElement2.getFileName());
      
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLClientInfoException0.setStackTrace(stackTraceElementArray0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: O8", sQLClientInfoException0.toString());
      assertEquals("O8", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(3, stackTraceElementArray0.length);
      
      MockError mockError0 = new MockError(sQLClientInfoException0);
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Should not be called on this type", "= Y_Vz+ DqG", mockException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("Should not be called on this type", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("= Y_Vz+ DqG", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Should not be called on this type", sQLTimeoutException0.toString());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("Should not be called on this type", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("= Y_Vz+ DqG", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Should not be called on this type", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLTimeoutException: Should not be called on this type", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException: Should not be called on this type", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      Throwable throwable0 = ClassUtil.getRootCause(sQLRecoverableException0);
      assertNotNull(throwable0);
      assertSame(mockException0, throwable0);
      assertSame(throwable0, mockException0);
      assertEquals("Should not be called on this type", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("= Y_Vz+ DqG", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Should not be called on this type", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLTimeoutException: Should not be called on this type", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException: Should not be called on this type", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      Class<Long> class1 = Long.TYPE;
      assertNotNull(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("long", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Throwable throwable1 = ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      assertNotNull(throwable1);
      assertSame(mockException0, throwable1);
      assertSame(mockException0, throwable0);
      assertSame(throwable1, throwable0);
      assertSame(throwable1, mockException0);
      assertEquals("Should not be called on this type", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("= Y_Vz+ DqG", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: Should not be called on this type", sQLTimeoutException0.toString());
      
      Class<RuntimeException> class2 = RuntimeException.class;
      String string0 = ClassUtil.getPackageName(class2);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      assertNull(annotatedClass0);
      
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      Class<Long> class1 = Long.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getAnnotation(class2);
      assertNull(annotation0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      assertNotNull(annotationMap0);
      assertEquals(1, annotationMap0.size());
      
      AnnotationMap annotationMap1 = new AnnotationMap();
      assertNotNull(annotationMap1);
      assertFalse(annotationMap1.equals((Object)annotationMap0));
      assertEquals(0, annotationMap1.size());
      
      AnnotationMap annotationMap2 = AnnotationMap.merge(annotationMap0, annotationMap1);
      assertNotNull(annotationMap2);
      assertSame(annotationMap0, annotationMap2);
      assertNotSame(annotationMap0, annotationMap1);
      assertNotSame(annotationMap1, annotationMap2);
      assertNotSame(annotationMap1, annotationMap0);
      assertNotSame(annotationMap2, annotationMap1);
      assertSame(annotationMap2, annotationMap0);
      assertFalse(annotationMap0.equals((Object)annotationMap1));
      assertFalse(annotationMap1.equals((Object)annotationMap0));
      assertFalse(annotationMap2.equals((Object)annotationMap1));
      assertEquals(1, annotationMap0.size());
      assertEquals(0, annotationMap1.size());
      assertEquals(1, annotationMap2.size());
      
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[8];
      annotationMapArray0[0] = annotationMap1;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D,i ycRV~8j3=");
      assertFalse(boolean0);
      
      annotationMapArray0[1] = annotationMap0;
      annotationMapArray0[2] = annotationMap1;
      annotationMapArray0[3] = annotationMap1;
      annotationMapArray0[2] = annotationMap1;
      annotationMapArray0[5] = annotationMap0;
      annotationMapArray0[6] = annotationMap0;
      annotationMapArray0[7] = annotationMap0;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, annotationMap2, annotationMapArray0);
      assertNotNull(annotatedConstructor0);
      assertFalse(annotationMap0.equals((Object)annotationMap1));
      assertFalse(annotationMap1.equals((Object)annotationMap2));
      assertFalse(annotationMap1.equals((Object)annotationMap0));
      assertFalse(annotationMap2.equals((Object)annotationMap1));
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, annotatedConstructor0.getModifiers());
      assertEquals(1, annotatedConstructor0.getAnnotationCount());
      assertEquals(1, annotationMap0.size());
      assertEquals(0, annotationMap1.size());
      assertEquals(1, annotationMap2.size());
      assertEquals(8, annotationMapArray0.length);
      
      Constructor constructor1 = (Constructor)annotatedConstructor0.getMember();
      assertNotNull(constructor1);
      assertSame(annotationMap0, annotationMap2);
      assertNotSame(annotationMap0, annotationMap1);
      assertNotSame(annotationMap1, annotationMap2);
      assertNotSame(annotationMap1, annotationMap0);
      assertNotSame(annotationMap2, annotationMap1);
      assertSame(annotationMap2, annotationMap0);
      assertFalse(annotationMap0.equals((Object)annotationMap1));
      assertFalse(annotationMap1.equals((Object)annotationMap2));
      assertFalse(annotationMap1.equals((Object)annotationMap0));
      assertFalse(annotationMap2.equals((Object)annotationMap1));
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, annotatedConstructor0.getModifiers());
      assertEquals(1, annotatedConstructor0.getAnnotationCount());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertEquals("public java.lang.String()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertEquals(1, constructor1.getModifiers());
      assertEquals(1, annotationMap0.size());
      assertEquals(0, annotationMap1.size());
      assertEquals(1, annotationMap2.size());
      assertEquals(8, annotationMapArray0.length);
      
      boolean boolean1 = ClassUtil.isConcrete((Member) constructor1);
      assertSame(annotationMap0, annotationMap2);
      assertNotSame(annotationMap0, annotationMap1);
      assertNotSame(annotationMap1, annotationMap2);
      assertNotSame(annotationMap1, annotationMap0);
      assertNotSame(annotationMap2, annotationMap1);
      assertSame(annotationMap2, annotationMap0);
      assertFalse(boolean1 == boolean0);
      assertFalse(annotationMap0.equals((Object)annotationMap1));
      assertFalse(annotationMap1.equals((Object)annotationMap2));
      assertFalse(annotationMap1.equals((Object)annotationMap0));
      assertFalse(annotationMap2.equals((Object)annotationMap1));
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, annotatedConstructor0.getModifiers());
      assertEquals(1, annotatedConstructor0.getAnnotationCount());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertEquals("public java.lang.String()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertEquals(1, constructor1.getModifiers());
      assertEquals(1, annotationMap0.size());
      assertEquals(0, annotationMap1.size());
      assertEquals(1, annotationMap2.size());
      assertEquals(8, annotationMapArray0.length);
      assertTrue(boolean1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionLikeType", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      
      Class<IOException> class2 = IOException.class;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class3, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      
      Class<Error> class4 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class4, true);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class5 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class5);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(boolean0);
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertNotNull(classArray0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, classArray0.length);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      Annotation[] annotationArray1 = constructor0.getAnnotations();
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Class<RuntimeException> class6 = RuntimeException.class;
      Constructor<RuntimeException> constructor1 = ClassUtil.findConstructor(class6, true);
      assertNotNull(constructor1);
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[3];
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor1);
      assertNotNull(classUtil_Ctor0);
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      
      Constructor<?> constructor2 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor2);
      assertEquals(1, constructor2.getModifiers());
      assertTrue(constructor2.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor2.toString());
      assertFalse(constructor2.isSynthetic());
      assertFalse(constructor2.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      
      boolean boolean1 = ClassUtil.isConcrete((Member) constructor2);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, constructor2.getModifiers());
      assertTrue(constructor2.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor2.toString());
      assertFalse(constructor2.isSynthetic());
      assertFalse(constructor2.isVarArgs());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertTrue(boolean1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Class<Long> class1 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertNotNull(object0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertEquals((short)0, object0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockThrowable0, "&A2fc1mIhz!jr>@Xe<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // &A2fc1mIhz!jr>@Xe<
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertNotNull(object0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals((short)0, object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<NoClass> class1 = NoClass.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(2, methodArray0.length);
      
      Class<Double> class2 = Double.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class2, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("java.lang", "java.lang", (-572));
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals((-572), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.lang", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.lang", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.lang", sQLFeatureNotSupportedException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("0pS{j", "serialVersionUID");
      assertNotNull(sQLTimeoutException0);
      assertEquals("serialVersionUID", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: 0pS{j", sQLTimeoutException0.toString());
      assertEquals("0pS{j", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<NoClass> class1 = NoClass.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(2, methodArray0.length);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class2);
      assertFalse(boolean0);
      
      Class<Double> class3 = Double.class;
      String string1 = ClassUtil.nameOf(class3);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`java.lang.Double`", string1);
      
      String string2 = ClassUtil.nonNullString("java.lang");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.lang", string2);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      // Undeclared exception!
      try { 
        jsonFactory3.createGenerator((File) null, jsonEncoding0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(25, methodArray0.length);
      
      Class<Long> class1 = Long.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("long", class2.toString());
      assertTrue(class2.isPrimitive());
      
      String string0 = ClassUtil.nameOf(class2);
      assertNotNull(string0);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("long", class2.toString());
      assertTrue(class2.isPrimitive());
      assertEquals("`long`", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Double> class1 = Double.class;
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      Class<Double> class1 = Double.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      Class<MapType> class2 = MapType.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MockError mockError0 = new MockError("zl`cm@|m6s[v=JI`{E9");
      assertNotNull(mockError0);
      
      MockError mockError1 = new MockError("zl`cm@|m6s[v=JI`{E9");
      assertNotNull(mockError1);
      assertFalse(mockError1.equals((Object)mockError0));
      
      Class<SimpleType> class0 = SimpleType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(1, fieldArray0.length);
      
      Boolean boolean0 = new Boolean("com.fasterxml.jackson.databind.ser.PropertyWriter");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^");
      assertFalse(boolean1);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("w0pS{j@", "X8dQ)Z88U-", 2);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(2, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("w0pS{j@", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: w0pS{j@", sQLFeatureNotSupportedException0.toString());
      assertEquals("X8dQ)Z88U-", sQLFeatureNotSupportedException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("x]fh\",09@)Lr", "+QlimVcI&", 2, mockError0);
      assertNotNull(sQLTimeoutException0);
      assertFalse(mockError0.equals((Object)mockError1));
      assertEquals("java.sql.SQLTimeoutException: x]fh\",09@)Lr", sQLTimeoutException0.toString());
      assertEquals(2, sQLTimeoutException0.getErrorCode());
      assertEquals("+QlimVcI&", sQLTimeoutException0.getSQLState());
      assertEquals("x]fh\",09@)Lr", sQLTimeoutException0.getMessage());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "array", (Throwable) sQLTimeoutException0);
      assertNotNull(jsonMappingException0);
      assertNotSame(mockError0, mockError1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(mockError0.equals((Object)mockError1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals("java.sql.SQLTimeoutException: x]fh\",09@)Lr", sQLTimeoutException0.toString());
      assertEquals(2, sQLTimeoutException0.getErrorCode());
      assertEquals("+QlimVcI&", sQLTimeoutException0.getSQLState());
      assertEquals("x]fh\",09@)Lr", sQLTimeoutException0.getMessage());
      
      Throwable throwable0 = ClassUtil.throwIfError(jsonMappingException0);
      assertNotNull(throwable0);
      assertNotSame(mockError0, mockError1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      assertFalse(mockError0.equals((Object)mockError1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals("java.sql.SQLTimeoutException: x]fh\",09@)Lr", sQLTimeoutException0.toString());
      assertEquals(2, sQLTimeoutException0.getErrorCode());
      assertEquals("+QlimVcI&", sQLTimeoutException0.getSQLState());
      assertEquals("x]fh\",09@)Lr", sQLTimeoutException0.getMessage());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1848));
      assertNotNull(placeholderForType0);
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertNull(javaType0);
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      
      Class<Object> class1 = Object.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class1, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Float> class0 = Float.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
      
      String string1 = ClassUtil.nullOrToString(class1);
      assertNotNull(string1);
      
      String string2 = ClassUtil.quotedOr("java.lang.Class@0000000001", "'");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      Class<NoClass> class3 = NoClass.class;
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "\"java.lang.Class@0000000001\"", sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      assertNotNull(sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getMessage());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<Double> class5 = Double.class;
      Constructor<Double> constructor0 = ClassUtil.findConstructor(class5, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
      
      String string3 = ClassUtil.classNameOf((Object) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("[null]", string3);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      String string0 = constructor0.getName();
      assertNotNull(string0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("java.lang.RuntimeException", string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, int0);
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, int1);
      
      int int2 = classUtil_Ctor0.getParamCount();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, int2);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(1, fieldArray0.length);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      String string1 = ClassUtil.nullOrToString((Object) null);
      assertNull(string1);
      
      Class<MapLikeType> class2 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, (Class<?>) null, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      Class<NoClass> class1 = NoClass.class;
      Class<Double> class2 = Double.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      
      Class<Object> class1 = Object.class;
      boolean boolean0 = ClassUtil.isBogusClass(class1);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, (String) null, (String) null);
      assertNotNull(invalidTypeIdException0);
      assertNull(invalidTypeIdException0.getTypeId());
      
      boolean boolean2 = ClassUtil.isJacksonStdImpl((Object) invalidTypeIdException0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNull(invalidTypeIdException0.getTypeId());
      assertFalse(boolean2);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      boolean boolean3 = ClassUtil.isConcrete(class2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(0, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(94, methodArray0.length);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      String string0 = ClassUtil.nonNullString("B4");
      assertNotNull(string0);
      assertEquals("B4", string0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("B4", sQLNonTransientConnectionException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: B4", sQLRecoverableException0.toString());
      assertEquals("B4", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLRecoverableException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: B4", sQLRecoverableException0.toString());
      assertEquals("B4", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLRecoverableException: B4", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLRecoverableException: B4", sQLFeatureNotSupportedException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("B4", "B4", (-1209), sQLFeatureNotSupportedException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: B4", sQLRecoverableException0.toString());
      assertEquals("B4", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLRecoverableException: B4", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLRecoverableException: B4", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: B4", sQLTimeoutException0.toString());
      assertEquals("B4", sQLTimeoutException0.getSQLState());
      assertEquals((-1209), sQLTimeoutException0.getErrorCode());
      assertEquals("B4", sQLTimeoutException0.getMessage());
      
      Spliterator<Throwable> spliterator0 = sQLNonTransientConnectionException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("B4");
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.forLanguageTag("B4");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "B4", (Object[]) typeArray0);
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(1, typeArray0.length);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      assertNotNull(mockPrintWriter0);
      assertEquals(1, typeArray0.length);
      
      sQLFeatureNotSupportedException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: B4", sQLRecoverableException0.toString());
      assertEquals("B4", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLRecoverableException: B4", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLRecoverableException: B4", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(1, typeArray0.length);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B4");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        sQLFeatureNotSupportedException0.forEach((Consumer<? super Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("float", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertTrue(boolean0);
      
      Class<Void> class1 = Void.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
      
      MockError mockError0 = new MockError("HWdlmp");
      assertNotNull(mockError0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", mockError0);
      assertNotNull(mockRuntimeException0);
      
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException(mockError0);
      assertNotNull(mockRuntimeException1);
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockRuntimeException0, (Object) mockRuntimeException1, (-2495));
      assertNotNull(jsonMappingException0);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertNotSame(mockRuntimeException1, mockRuntimeException0);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType (through reference chain: org.evosuite.runtime.mock.java.lang.MockRuntimeException[?])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = BigInteger.probablePrime(1536, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte) (-89), bigInteger0.byteValue());
      assertEquals((short)423, bigInteger0.shortValue());
      
      Class<Boolean> class1 = Boolean.class;
      IntStream intStream0 = mockRandom0.ints((long) 1536);
      assertNotNull(intStream0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class1, "net.sf.cglib.proxy.");
      assertNotNull(jsonMappingException0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      assertEquals((short)423, bigInteger0.shortValue());
      
      Integer integer0 = Integer.getInteger("ACCEPT_SINGLE_VALUE_ASoARRAY", 1536);
      assertNotNull(integer0);
      assertEquals(1536, (int)integer0);
      
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdNativeValueException(integer0, class1);
      assertNotNull(jsonMappingException1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      assertNotNull(placeholderForType0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      
      String string0 = ClassUtil.quotedOr(placeholderForType0, "net.sf.cglib.proxy.");
      assertNotNull(string0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals("\"$1537\"", string0);
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      assertNotNull(throwable0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(throwable0, jsonMappingException1);
      assertSame(throwable0, jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(jsonMappingException0, throwable0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(throwable0.equals((Object)jsonMappingException1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      assertEquals((short)423, bigInteger0.shortValue());
      
      Class<?> class3 = ClassUtil.primitiveType(class1);
      assertNotNull(class3);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertTrue(class3.isPrimitive());
      assertEquals("boolean", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = BigInteger.probablePrime(1536, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte) (-89), bigInteger0.byteValue());
      assertEquals((short)423, bigInteger0.shortValue());
      
      Class<Boolean> class1 = Boolean.class;
      IntStream intStream0 = mockRandom0.ints((long) 1536);
      assertNotNull(intStream0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class1, "net.sf.cglib.proxy.");
      assertNotNull(jsonMappingException0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      assertEquals((short)423, bigInteger0.shortValue());
      
      Integer integer0 = Integer.getInteger("ACCEPT_SINGLE_VALUE_ASoARRAY", 1536);
      assertNotNull(integer0);
      assertEquals(1536, (int)integer0);
      
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdNativeValueException(integer0, class1);
      assertNotNull(jsonMappingException1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      
      String string0 = ClassUtil.quotedOr(placeholderForType0, "net.sf.cglib.proxy.");
      assertNotNull(string0);
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals("\"$1537\"", string0);
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, (Class<?>) null, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "com.fasterxml.jacks");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jacks
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = BigInteger.probablePrime(1536, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)423, bigInteger0.shortValue());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      
      Class<Boolean> class1 = Boolean.class;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      IntStream intStream0 = mockRandom0.ints((long) 1536);
      assertNotNull(intStream0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class1, "net.sf.cglib.proxy.");
      assertNotNull(jsonMappingException0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((short)423, bigInteger0.shortValue());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      
      Integer integer0 = Integer.getInteger("ACCEPT_SINGLE_VALUE_ASoARRAY", 1536);
      assertNotNull(integer0);
      assertEquals(1536, (int)integer0);
      
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdNativeValueException(integer0, class1);
      assertNotNull(jsonMappingException1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertTrue(placeholderForType0.isConcrete());
      
      String string0 = ClassUtil.quotedOr(placeholderForType0, "net.sf.cglib.proxy.");
      assertNotNull(string0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals("\"$1537\"", string0);
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      assertNotNull(throwable0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(throwable0, jsonMappingException0);
      assertNotSame(throwable0, jsonMappingException1);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(jsonMappingException0, throwable0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(throwable0.equals((Object)jsonMappingException1));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((short)423, bigInteger0.shortValue());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      
      boolean boolean1 = ClassUtil.isBogusClass(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      Class<String> class2 = String.class;
      String string0 = ClassUtil.isLocalType(class2, true);
      assertNull(string0);
      
      Class<Void> class3 = Void.TYPE;
      assertNotNull(class3);
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      assertEquals("void", class3.toString());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      
      boolean boolean0 = ClassUtil.isBogusClass(class3);
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      assertEquals("void", class3.toString());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertTrue(boolean0);
      
      SQLWarning sQLWarning0 = new SQLWarning((String) null);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      String string0 = constructor0.getName();
      assertNotNull(string0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("java.lang.RuntimeException", string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, int0);
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, int1);
      
      int int2 = classUtil_Ctor0.getParamCount();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, int2);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(1, fieldArray0.length);
      
      boolean boolean0 = new Boolean("java.lang.RuntimeException");
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("w0pS{j@", " is not a primitive typ", 0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: w0pS{j@", sQLFeatureNotSupportedException0.toString());
      assertEquals(" is not a primitive typ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("w0pS{j@", sQLFeatureNotSupportedException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("array", "!pU:q4Im1p.(h+", 0, sQLFeatureNotSupportedException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: w0pS{j@", sQLFeatureNotSupportedException0.toString());
      assertEquals(" is not a primitive typ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("w0pS{j@", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("!pU:q4Im1p.(h+", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: array", sQLTimeoutException0.toString());
      assertEquals("array", sQLTimeoutException0.getMessage());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "array", (Throwable) sQLTimeoutException0);
      assertNotNull(jsonMappingException0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: w0pS{j@", sQLFeatureNotSupportedException0.toString());
      assertEquals(" is not a primitive typ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("w0pS{j@", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("!pU:q4Im1p.(h+", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: array", sQLTimeoutException0.toString());
      assertEquals("array", sQLTimeoutException0.getMessage());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: w0pS{j@", sQLFeatureNotSupportedException0.toString());
      assertEquals(" is not a primitive typ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("w0pS{j@", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: w0pS{j@", sQLFeatureNotSupportedException1.toString());
      assertEquals(" is not a primitive typ", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("w0pS{j@", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      Class<String> class2 = String.class;
      String string0 = ClassUtil.isLocalType(class2, true);
      assertNull(string0);
      
      Class<Void> class3 = Void.class;
      boolean boolean0 = ClassUtil.isBogusClass(class3);
      assertTrue(boolean0);
      
      boolean boolean1 = new Boolean((String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockError mockError0 = new MockError("zl`cm@|m6s[v=JI`{E9");
      assertNotNull(mockError0);
      
      Throwable throwable0 = mockError0.fillInStackTrace();
      assertNotNull(throwable0);
      assertSame(mockError0, throwable0);
      assertSame(throwable0, mockError0);
      
      Class<SimpleType> class0 = SimpleType.class;
      boolean boolean0 = ClassUtil.hasClass(mockError0, class0);
      assertSame(mockError0, throwable0);
      assertFalse(boolean0);
      
      Class<Short> class1 = Short.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(23, methodArray0.length);
      
      Throwable throwable1 = ClassUtil.getRootCause(mockError0);
      assertNotNull(throwable1);
      assertSame(mockError0, throwable1);
      assertSame(mockError0, throwable0);
      assertSame(throwable1, mockError0);
      assertSame(throwable1, throwable0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable1, "net.sf.cglib.proxy.");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class2, false);
      assertNotNull(list0);
      assertEquals(8, list0.size());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "(\"!D{ejA7&p,B6]W+a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Class<SimpleType> class0 = SimpleType.class;
      Float float0 = new Float(2.14748365E9F);
      assertNotNull(float0);
      assertEquals(2.14748365E9F, (float)float0, 0.01F);
      
      boolean boolean0 = ClassUtil.hasClass(float0, class0);
      assertFalse(boolean0);
      
      Class<Annotation> class1 = Annotation.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(4, methodArray0.length);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      String string0 = constructor0.getName();
      assertNotNull(string0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals("java.lang.RuntimeException", string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, int0);
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, int1);
      
      int int2 = classUtil_Ctor0.getParamCount();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, int2);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(1, fieldArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockException mockException0 = new MockException((String) null);
      assertNotNull(mockException0);
      
      Short short0 = new Short((short) (-584));
      assertNotNull(short0);
      assertEquals((short) (-584), (short)short0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(short0);
      assertNotNull(jsonMappingException_Reference0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockException0, jsonMappingException_Reference0);
      assertNotNull(jsonMappingException0);
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      Class<NoClass> class0 = NoClass.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = BigInteger.probablePrime(1536, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)423, bigInteger0.shortValue());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      
      Class<Boolean> class0 = Boolean.class;
      IntStream intStream0 = mockRandom0.ints((long) 1536);
      assertNotNull(intStream0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "net.sf.cglib.proxy.");
      assertNotNull(jsonMappingException0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((short)423, bigInteger0.shortValue());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      
      Integer integer0 = Integer.getInteger("ACCEPT_SINGLE_VALUE_ASoARRAY", 1536);
      assertNotNull(integer0);
      assertEquals(1536, (int)integer0);
      
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdNativeValueException(integer0, class0);
      assertNotNull(jsonMappingException1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      MockError mockError0 = new MockError(jsonMappingException0);
      assertNotNull(mockError0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, false);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((short)423, bigInteger0.shortValue());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((short)423, bigInteger0.shortValue());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      assertNotNull(objectReader0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-94);
      byteArray0[8] = (byte)39;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectReader0, (OutputStream) null, byteArray0, 0, false);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(uTF8JsonGenerator0);
      assertArrayEquals(new byte[] {(byte)114, (byte)22, (byte) (-7), (byte) (-1), (byte)121, (byte) (-1), (byte)0, (byte) (-94), (byte)39}, byteArray0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((short)423, bigInteger0.shortValue());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertEquals(JsonEncoding.UTF32_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_LE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.overrideFormatFeatures(96, 86);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No FormatFeatures defined for generator of type com.fasterxml.jackson.core.json.UTF8JsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      String string0 = constructor0.getName();
      assertNotNull(string0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals("java.lang.RuntimeException", string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, int0);
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, int1);
      
      int int2 = classUtil_Ctor0.getParamCount();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, int2);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      assertNull(annotatedClass0);
      
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      assertNotNull(collectionLikeType0);
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isContainerType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "java.lang.RuntimeException", collectionLikeType0);
      assertNotNull(virtualAnnotatedMember0);
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isContainerType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals("java.lang.RuntimeException", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      
      Field field0 = virtualAnnotatedMember0.getAnnotated();
      assertNull(field0);
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isContainerType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals("java.lang.RuntimeException", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean0);
      
      Class<ArrayType> class2 = ArrayType.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class2);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<Long> class3 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, (String) null, "entrySet");
      assertNotNull(invalidTypeIdException0);
      assertNull(invalidTypeIdException0.getTypeId());
      
      boolean boolean2 = ClassUtil.isJacksonStdImpl((Object) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Class<Error> class1 = Error.class;
      boolean boolean3 = ClassUtil.isConcrete(class1);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Iterator<Integer> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Short> class0 = Short.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(7, fieldArray0.length);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("}[\"6u+(BK{");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: }[\"6u+(BK{", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("}[\"6u+(BK{", sQLTimeoutException0.getMessage());
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("}[\"6u+(BK{", "}[\"6u+(BK{", "}[\"6u+(BK{", 226);
      assertNotNull(stackTraceElement0);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("}[\"6u+(BK{", stackTraceElement0.getClassName());
      assertEquals("}[\"6u+(BK{", stackTraceElement0.getMethodName());
      assertEquals(226, stackTraceElement0.getLineNumber());
      assertEquals("}[\"6u+(BK{", stackTraceElement0.getFileName());
      assertEquals("}[\"6u+(BK{.}[\"6u+(BK{(}[\"6u+(BK{:226)", stackTraceElement0.toString());
      
      StackTraceElement stackTraceElement1 = new StackTraceElement("A9", "3DBs\"dccqtOIL;", "}[\"6u+(BK{", 0);
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("}[\"6u+(BK{", stackTraceElement1.getFileName());
      assertEquals("A9", stackTraceElement1.getClassName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("A9.3DBs\"dccqtOIL;(}[\"6u+(BK{:0)", stackTraceElement1.toString());
      assertEquals(0, stackTraceElement1.getLineNumber());
      assertEquals("3DBs\"dccqtOIL;", stackTraceElement1.getMethodName());
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)ClassUtil.throwIfIOE(sQLTimeoutException0);
      assertNotNull(sQLTimeoutException1);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: }[\"6u+(BK{", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("}[\"6u+(BK{", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: }[\"6u+(BK{", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("}[\"6u+(BK{", sQLTimeoutException1.getMessage());
      
      Class<NoClass> class1 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class1, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = BigInteger.probablePrime(1536, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)423, bigInteger0.shortValue());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      
      Class<Boolean> class1 = Boolean.class;
      IntStream intStream0 = mockRandom0.ints((long) 1536);
      assertNotNull(intStream0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class1, "net.sf.cglib.proxy.");
      assertNotNull(jsonMappingException0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((short)423, bigInteger0.shortValue());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      
      Integer integer0 = Integer.getInteger("ACCEPT_SINGLE_VALUE_ASoARRAY", 1536);
      assertNotNull(integer0);
      assertEquals(1536, (int)integer0);
      
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdNativeValueException(integer0, class1);
      assertNotNull(jsonMappingException1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      
      String string0 = ClassUtil.quotedOr(placeholderForType0, "net.sf.cglib.proxy.");
      assertNotNull(string0);
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals("\"$1537\"", string0);
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      assertNotNull(throwable0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(throwable0, jsonMappingException1);
      assertSame(throwable0, jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, throwable0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(throwable0.equals((Object)jsonMappingException1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((short)423, bigInteger0.shortValue());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      
      boolean boolean0 = ClassUtil.isBogusClass(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/7EYB_>>94IGm");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.filter.FilteringParserDelegate");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
      
      Class<MapType> class0 = MapType.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<Short> class2 = Short.TYPE;
      assertNotNull(class2);
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("short", class2.toString());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertNotNull(methodArray0);
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals("short", class2.toString());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals(0, methodArray0.length);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      boolean boolean1 = ClassUtil.isConcrete(class3);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Float> class0 = Float.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Class<Object> class1 = Object.class;
      boolean boolean0 = ClassUtil.isBogusClass(class1);
      assertFalse(boolean0);
      
      Class<Integer> class2 = Integer.class;
      boolean boolean1 = ClassUtil.isConcrete(class2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      
      int[] intArray0 = batchUpdateException0.getUpdateCounts();
      assertNull(intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "b1,!k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // b1,!k
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("float", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class<Object> class1 = Object.class;
      boolean boolean0 = ClassUtil.isBogusClass(class1);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, (String) null, (String) null);
      assertNotNull(invalidTypeIdException0);
      assertNull(invalidTypeIdException0.getTypeId());
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) invalidTypeIdException0);
      assertTrue(boolean1 == boolean0);
      assertNull(invalidTypeIdException0.getTypeId());
      assertFalse(boolean1);
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class2);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      SQLWarning sQLWarning0 = new SQLWarning("otdb", "", (-1363), (Throwable) null);
      assertNotNull(sQLWarning0);
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: otdb", sQLWarning0.toString());
      assertEquals((-1363), sQLWarning0.getErrorCode());
      assertEquals("otdb", sQLWarning0.getMessage());
      
      MockThrowable mockThrowable0 = new MockThrowable("", sQLWarning0);
      assertNotNull(mockThrowable0);
      
      SQLWarning sQLWarning1 = (SQLWarning)ClassUtil.throwRootCauseIfIOE(mockThrowable0);
      assertNotNull(sQLWarning1);
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning1, sQLWarning0);
      assertEquals("", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: otdb", sQLWarning0.toString());
      assertEquals((-1363), sQLWarning0.getErrorCode());
      assertEquals("otdb", sQLWarning0.getMessage());
      assertEquals("", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: ", mockThrowable0.toString());
      assertEquals("java.sql.SQLWarning: otdb", sQLWarning1.toString());
      assertEquals((-1363), sQLWarning1.getErrorCode());
      assertEquals("otdb", sQLWarning1.getMessage());
      assertEquals("", sQLWarning1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertNotNull(object0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(0.0, object0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      Iterable<Deserializers> iterable0 = deserializerFactoryConfig0.deserializers();
      assertNotNull(iterable0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      try { 
        defaultDeserializationContext_Impl0.reportBadDefinition((JavaType) null, "#+fm8)Fnri%a2q$C|H");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // #+fm8)Fnri%a2q$C|H
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Iterator<Object> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      String string0 = ClassUtil.quotedOr(iterator0, "keyType");
      assertNotNull(string0);
      
      Class<String> class0 = String.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
      assertNotNull(filteringGeneratorDelegate0);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) filteringGeneratorDelegate0, "keyType");
      assertNotNull(jsonMappingException0);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      assertNotNull(throwable0);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      
      Class<AccessPattern> class2 = AccessPattern.class;
      boolean boolean0 = ClassUtil.isProxyType(class2);
      assertFalse(boolean0);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.instantiationException((Class<?>) null, (Throwable) jsonMappingException0);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, throwable0);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      assertNotNull(beanDeserializerBuilder0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        beanDeserializerBuilder0.buildAbstract();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<Character> class1 = Character.class;
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
      
      Class<Short> class3 = Short.TYPE;
      assertNotNull(class3);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("short", class3.toString());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(94, methodArray0.length);
      
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class4);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      String string0 = ClassUtil.nameOf((Class<?>) null);
      assertNotNull(string0);
      assertEquals("[null]", string0);
      
      Class<Long> class5 = Long.class;
      Class class6 = (Class)ClassUtil.getGenericSuperclass(class5);
      assertNotNull(class6);
      assertEquals("class java.lang.Number", class6.toString());
      assertEquals(1025, class6.getModifiers());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertFalse(class6.isAnnotation());
      assertFalse(class6.isInterface());
      assertFalse(class6.isPrimitive());
      assertFalse(class6.isArray());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Iterator<Integer> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Short> class0 = Short.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(7, fieldArray0.length);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("}[\"6u+(BK{");
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: }[\"6u+(BK{", sQLTimeoutException0.toString());
      assertEquals("}[\"6u+(BK{", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("}[\"6u+(BK{", "}[\"6u+(BK{", "}[\"6u+(BK{", 253);
      assertNotNull(stackTraceElement0);
      assertEquals("}[\"6u+(BK{", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("}[\"6u+(BK{", stackTraceElement0.getClassName());
      assertEquals("}[\"6u+(BK{", stackTraceElement0.getMethodName());
      assertEquals("}[\"6u+(BK{.}[\"6u+(BK{(}[\"6u+(BK{:253)", stackTraceElement0.toString());
      assertEquals(253, stackTraceElement0.getLineNumber());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StackTraceElement stackTraceElement1 = new StackTraceElement("A9", "3DBs\"dccqtOIL;", "}[\"6u+(BK{", 0);
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("A9.3DBs\"dccqtOIL;(}[\"6u+(BK{:0)", stackTraceElement1.toString());
      assertEquals("3DBs\"dccqtOIL;", stackTraceElement1.getMethodName());
      assertEquals("}[\"6u+(BK{", stackTraceElement1.getFileName());
      assertEquals("A9", stackTraceElement1.getClassName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals(0, stackTraceElement1.getLineNumber());
      
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: }[\"6u+(BK{", sQLTimeoutException0.toString());
      assertEquals("}[\"6u+(BK{", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(2, stackTraceElementArray0.length);
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)ClassUtil.throwIfIOE(sQLTimeoutException0);
      assertNotNull(sQLTimeoutException1);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: }[\"6u+(BK{", sQLTimeoutException0.toString());
      assertEquals("}[\"6u+(BK{", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("}[\"6u+(BK{", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: }[\"6u+(BK{", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException1.getSQLState());
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<String> class1 = String.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(22, methodArray0.length);
      
      Class<String> class1 = String.class;
      Class<Character> class2 = Character.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      String string0 = ClassUtil.getPackageName(class1);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
      
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      Class class4 = (Class)ClassUtil.getGenericSuperclass(class3);
      assertNotNull(class4);
      assertFalse(class4.isInterface());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isArray());
      assertEquals(1025, class4.getModifiers());
      assertFalse(class4.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class4.toString());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      
      String string1 = ClassUtil.getClassDescription("java.lang");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`java.lang.String`", string1);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      
      // Undeclared exception!
      try { 
        typeFactory1.constructArrayType(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1039652269) return null for type [simple type, class com.fasterxml.jackson.databind.type.TypeBase]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("v 0p$=4gtmpWtUa=o", " is not a primitive typ", (-1345));
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException0.toString());
      assertEquals("v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-1345), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(" is not a primitive typ", sQLFeatureNotSupportedException0.getSQLState());
      
      Spliterator<Throwable> spliterator0 = sQLFeatureNotSupportedException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException0.toString());
      assertEquals("v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-1345), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(" is not a primitive typ", sQLFeatureNotSupportedException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" is not a primitive typ", " is not a primitive typ");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException:  is not a primitive typ", sQLTimeoutException0.toString());
      assertEquals(" is not a primitive typ", sQLTimeoutException0.getSQLState());
      assertEquals(" is not a primitive typ", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "0pS{j", (Throwable) sQLFeatureNotSupportedException0);
      assertNotNull(jsonMappingException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException0.toString());
      assertEquals("v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-1345), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(" is not a primitive typ", sQLFeatureNotSupportedException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException0.toString());
      assertEquals("v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException0.getMessage());
      assertEquals((-1345), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(" is not a primitive typ", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(" is not a primitive typ", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals((-1345), sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: v 0p$=4gtmpWtUa=o", sQLFeatureNotSupportedException1.toString());
      
      String string0 = ClassUtil.getClassDescription("0pS{j");
      assertNotNull(string0);
      assertEquals("`java.lang.String`", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MockError mockError0 = new MockError("zl`cm@|m6s[v=JI`{E9");
      assertNotNull(mockError0);
      
      Throwable throwable0 = mockError0.fillInStackTrace();
      assertNotNull(throwable0);
      assertSame(mockError0, throwable0);
      assertSame(throwable0, mockError0);
      
      Class<SimpleType> class0 = SimpleType.class;
      boolean boolean0 = ClassUtil.hasClass(mockError0, class0);
      assertSame(mockError0, throwable0);
      assertFalse(boolean0);
      
      Class<Short> class1 = Short.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(23, methodArray0.length);
      
      Throwable throwable1 = ClassUtil.getRootCause(mockError0);
      assertNotNull(throwable1);
      assertSame(mockError0, throwable0);
      assertSame(mockError0, throwable1);
      assertSame(throwable1, mockError0);
      assertSame(throwable1, throwable0);
      
      Class<Error> class2 = Error.class;
      boolean boolean1 = ClassUtil.isConcrete(class2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Iterator<MapType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<Error> class2 = Error.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class2);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      Class<Long> class3 = Long.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockError mockError0 = new MockError("zl`cm@|m6s[v=JI`{E9");
      assertNotNull(mockError0);
      
      MockError mockError1 = new MockError("zl`cm@|m6s[v=JI`{E9");
      assertNotNull(mockError1);
      assertFalse(mockError1.equals((Object)mockError0));
      
      Class<SimpleType> class0 = SimpleType.class;
      boolean boolean0 = ClassUtil.hasClass(mockError0, class0);
      assertNotSame(mockError0, mockError1);
      assertFalse(mockError0.equals((Object)mockError1));
      assertFalse(boolean0);
      
      Class<Short> class1 = Short.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(23, methodArray0.length);
      
      Class<NoClass> class2 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(35, methodArray0.length);
      
      Class<ArrayType> class1 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class0, false);
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      Class<ArrayType> class1 = ArrayType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class1);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.isLocalType(class1, true);
      assertNull(string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-234);
      intArray0[2] = 179;
      intArray0[3] = 0;
      intArray0[4] = (-1771);
      intArray0[5] = 97;
      intArray0[6] = (-2889);
      intArray0[7] = (-2582);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {0, (-234), 179, 0, (-1771), 97, (-2889), (-2582)}, intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(8, intArray0.length);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(16385, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      SQLException sQLException0 = new SQLException((String) null, (String) null);
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0, "{#k<JBh5z{l .");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // {#k<JBh5z{l .
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      
      String string0 = ClassUtil.getClassDescription(class1);
      assertNotNull(string0);
      assertEquals("`java.lang.RuntimeException`", string0);
      
      Constructor<JsonMappingException> constructor0 = null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("`java.lang.RuntimeException`");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLSyntaxErrorException: `java.lang.RuntimeException`", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("`java.lang.RuntimeException`", sQLSyntaxErrorException0.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = sQLSyntaxErrorException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals("java.sql.SQLSyntaxErrorException: `java.lang.RuntimeException`", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("`java.lang.RuntimeException`", sQLSyntaxErrorException0.getMessage());
      assertEquals(13, stackTraceElementArray0.length);
      
      MockException mockException0 = new MockException(sQLSyntaxErrorException0);
      assertNotNull(mockException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("`java.lang.RuntimeException`", "`java.lang.RuntimeException`", mockException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLSyntaxErrorException: `java.lang.RuntimeException`", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("`java.lang.RuntimeException`", sQLSyntaxErrorException0.getMessage());
      assertEquals("`java.lang.RuntimeException`", sQLTimeoutException0.getMessage());
      assertEquals("`java.lang.RuntimeException`", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: `java.lang.RuntimeException`", sQLTimeoutException0.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `java.lang.RuntimeException`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionLikeType", class1.toString());
      assertFalse(class1.isAnnotation());
      
      Class<ArrayType> class2 = ArrayType.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      Class<Short> class4 = Short.class;
      Class<IOException> class5 = IOException.class;
      Class<JsonMappingException> class6 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class5, class6, true);
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      Class<Integer> class7 = Integer.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class2);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      Class<Error> class8 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class8, true);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      
      Class<Annotation> class9 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class9);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(boolean0);
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertNotNull(classArray0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(0, classArray0.length);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(0, annotationArray0.length);
      
      Annotation[] annotationArray1 = constructor0.getAnnotations();
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(0, annotationArray1.length);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      
      Class<Double> class10 = Double.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(22, methodArray0.length);
      
      Character character0 = Character.valueOf('\\');
      assertNotNull(character0);
      assertEquals('\\', (char)character0);
      
      Class<MapLikeType> class11 = MapLikeType.class;
      boolean boolean1 = ClassUtil.hasClass(class5, class11);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class10, class7);
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionLikeType", class1.toString());
      
      Class<ArrayType> class2 = ArrayType.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.type.CollectionType`", string0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructArrayType(class4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1039652269) return null for type [simple type, class java.io.IOException]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = true;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Iterator<Object> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      String string0 = "keyType";
      String string1 = ClassUtil.quotedOr(iterator0, "keyType");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<String> class0 = String.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      
      boolean boolean0 = true;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
      assertNotNull(filteringGeneratorDelegate0);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) filteringGeneratorDelegate0, "keyType");
      assertNotNull(jsonMappingException0);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      assertNotNull(throwable0);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      
      Class<AccessPattern> class2 = AccessPattern.class;
      boolean boolean1 = ClassUtil.isProxyType(class2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      assertNotNull(beanDeserializerBuilder0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        beanDeserializerBuilder0.buildAbstract();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 59);
      assertNotNull(coreXMLDeserializers_Std0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      assertSame(class1, class0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, accessPattern0);
      
      Enum<AccessPattern> enum0 = ClassUtil.nonNull((Enum<AccessPattern>) accessPattern0, (Enum<AccessPattern>) accessPattern0);
      assertNotNull(enum0);
      assertSame(class1, class0);
      assertSame(accessPattern0, enum0);
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, enum0);
      
      Throwable throwable0 = null;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      
      String string0 = "Gk}[% J\"7q,A";
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "Gk}[% J\"7q,A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Gk}[% J\"7q,A
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Constructor<Annotation> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = BigInteger.probablePrime(1536, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)423, bigInteger0.shortValue());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      
      Class<Boolean> class0 = Boolean.class;
      IntStream intStream0 = mockRandom0.ints((long) 1536);
      assertNotNull(intStream0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "net.sf.cglib.proxy.");
      assertNotNull(jsonMappingException0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((short)423, bigInteger0.shortValue());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      
      Integer integer0 = Integer.getInteger("ACCEPT_SINGLE_VALUE_ASoARRAY", 1536);
      assertNotNull(integer0);
      assertEquals(1536, (int)integer0);
      
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdNativeValueException(integer0, class0);
      assertNotNull(jsonMappingException1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      assertNotNull(placeholderForType0);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      MockError mockError0 = new MockError(jsonMappingException0);
      assertNotNull(mockError0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      assertNotNull(objectReader0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) null);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      
      JsonMappingException jsonMappingException2 = new JsonMappingException(uTF8JsonGenerator0, "net.sf.cglib.proxy.", jsonMappingException0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(jsonMappingException2);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      
      JsonMappingException jsonMappingException3 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null);
      assertNotNull(jsonMappingException3);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(jsonMappingException3, jsonMappingException2);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(jsonMappingException3.equals((Object)jsonMappingException2));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4181);
      assertNotNull(placeholderForType0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      
      Class<MapLikeType> class1 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertNotNull(list0);
      assertEquals(8, list0.size());
      assertFalse(list0.isEmpty());
      
      MockError mockError0 = new MockError((Throwable) null);
      assertNotNull(mockError0);
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      assertNotNull(objectReader0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) null);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(placeholderForType0);
      assertNotNull(valueInstantiator_Base0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class1, valueInstantiator_Base0);
      assertNotNull(simpleValueInstantiators1);
      assertSame(simpleValueInstantiators0, simpleValueInstantiators1);
      assertSame(simpleValueInstantiators1, simpleValueInstantiators0);
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withValueInstantiators(simpleValueInstantiators1);
      assertNotNull(deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig2);
      assertSame(simpleValueInstantiators0, simpleValueInstantiators1);
      assertSame(simpleValueInstantiators1, simpleValueInstantiators0);
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig2);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory1);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig2);
      assertSame(simpleValueInstantiators0, simpleValueInstantiators1);
      assertSame(simpleValueInstantiators1, simpleValueInstantiators0);
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      
      MockIOException mockIOException0 = new MockIOException("unknown", mockError0);
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // unknown
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<?> class1 = ClassUtil.classOf(class0);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Class", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      Class<Object> class2 = Object.class;
      Object object0 = ClassUtil.createInstance(class2, false);
      assertNotNull(object0);
      
      Class<ArrayType> class3 = ArrayType.class;
      Class<Void> class4 = Void.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class3, class4);
      assertNotNull(list0);
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(class1));
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class4);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      boolean boolean0 = ClassUtil.isBogusClass(class1);
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Class", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(boolean0);
      
      Class<Long> class5 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class5, true);
      assertNull(constructor0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotNull(deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = BigInteger.probablePrime(1536, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte) (-89), bigInteger0.byteValue());
      assertEquals((short)423, bigInteger0.shortValue());
      
      Class<Boolean> class1 = Boolean.class;
      IntStream intStream0 = mockRandom0.ints((long) 1536);
      assertNotNull(intStream0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class1, "net.sf.cglib.proxy.");
      assertNotNull(jsonMappingException0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      assertEquals((short)423, bigInteger0.shortValue());
      
      Integer integer0 = Integer.getInteger("ACCEPT_SINGLE_VALUE_ASoARRAY", 1536);
      assertNotNull(integer0);
      assertEquals(1536, (int)integer0);
      
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdNativeValueException(integer0, class1);
      assertNotNull(jsonMappingException1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      
      String string0 = ClassUtil.quotedOr(placeholderForType0, "net.sf.cglib.proxy.");
      assertNotNull(string0);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals("\"$1537\"", string0);
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
      
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)ClassUtil.throwIfRTE(jsonMappingException0);
      assertNotNull(invalidFormatException0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertSame(invalidFormatException0, jsonMappingException0);
      assertNotSame(invalidFormatException0, jsonMappingException1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(jsonMappingException0, invalidFormatException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(invalidFormatException0.equals((Object)jsonMappingException1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((byte) (-89), bigInteger0.byteValue());
      assertEquals((short)423, bigInteger0.shortValue());
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) invalidFormatException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Boolean` from number 1205156213462708460672981237455629587255338382197535951888436909772981327009297320239743231276874498349347802318301827179903522344138745777020279422585841055676520586110357534599699551802508045803133170487875163654034438682416949029687153632356692103513384963780342549247985158124908545951815862624241232184479406053164128591159644462401270042773245097473258121480778543809919445947473291181456211708820974826270144177018869584976014353914955557345228660603355559: net.sf.cglib.proxy.
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", true);
      assertNotNull(mockFileOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory1.createGenerator((OutputStream) mockFileOutputStream0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(uTF8JsonGenerator0, "0UM9+P<+%?z{P", (Throwable) null);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(22, methodArray0.length);
      
      Class<String> class1 = String.class;
      Class<Character> class2 = Character.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      String string0 = ClassUtil.getPackageName(class1);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
      
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      Class class4 = (Class)ClassUtil.getGenericSuperclass(class3);
      assertNotNull(class4);
      assertEquals(1025, class4.getModifiers());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class4.toString());
      
      Class<Short> class5 = Short.class;
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class5, class0, false);
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      
      Class<Integer> class6 = Integer.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class6);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      Class<Error> class7 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class7, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      
      Class<Annotation> class8 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class8);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(boolean0);
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertNotNull(classArray0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(0, classArray0.length);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(0, annotationArray0.length);
      
      Annotation[] annotationArray1 = constructor0.getAnnotations();
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(0, annotationArray1.length);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Error()", constructor0.toString());
      
      Class<Double> class9 = Double.class;
      Method[] methodArray1 = ClassUtil.getDeclaredMethods(class9);
      assertNotNull(methodArray1);
      assertNotSame(methodArray1, methodArray0);
      assertFalse(methodArray1.equals((Object)methodArray0));
      assertEquals(29, methodArray1.length);
      
      Character character0 = Character.valueOf('\\');
      assertNotNull(character0);
      assertEquals('\\', (char)character0);
      
      Class<Boolean> class10 = Boolean.class;
      boolean boolean1 = ClassUtil.hasClass(character0, class10);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      List<Class<?>> list2 = ClassUtil.findSuperTypes(class10, class6);
      assertNotNull(list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertEquals(2, list2.size());
      assertFalse(list2.isEmpty());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(25, methodArray0.length);
      
      Class<Boolean> class1 = Boolean.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      Method[] methodArray1 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray1);
      assertNotSame(methodArray1, methodArray0);
      assertFalse(methodArray1.equals((Object)methodArray0));
      assertEquals(25, methodArray1.length);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumMap<AccessPattern, ArrayType> enumMap0 = new EnumMap<AccessPattern, ArrayType>(class3);
      assertNotNull(enumMap0);
      assertEquals(0, enumMap0.size());
      
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.hasContentType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isEnumType());
      
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      assertNotNull(simpleType1);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType1, simpleType0);
      assertTrue(simpleType1.equals((Object)simpleType0));
      assertFalse(simpleType0.hasContentType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isArrayType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isEnumType());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.isPrimitive());
      assertTrue(simpleType1.useStaticType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertTrue(simpleType1.isEnumType());
      assertFalse(simpleType1.isJavaLangObject());
      assertFalse(simpleType1.isAbstract());
      assertTrue(simpleType1.isConcrete());
      assertTrue(simpleType1.isFinal());
      
      // Undeclared exception!
      try { 
        TypeBindings.createIfNeeded((Class<?>) null, (JavaType) simpleType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotationsByType(class1);
      assertNotNull(annotationArray0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      Annotation[] annotationArray1 = constructor0.getAnnotations();
      assertNotNull(annotationArray1);
      assertNotSame(annotationArray1, annotationArray0);
      assertFalse(annotationArray1.equals((Object)annotationArray0));
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedExceptionTypes();
      assertNotNull(annotatedTypeArray0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotatedTypeArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray2);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray2.length);
      
      Annotation[][] annotationArray3 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray3);
      assertSame(annotationArray3, annotationArray2);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray3.length);
      
      Class<?> class2 = classUtil_Ctor0.getDeclaringClass();
      assertNotNull(class2);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(class2.isArray());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.io.IOException", class2.toString());
      assertFalse(class2.isInterface());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      
      Long long0 = new Long((-2147483648L));
      assertNotNull(long0);
      assertEquals((-2147483648L), (long)long0);
      
      String string0 = ClassUtil.quotedOr(long0, "Cannot build, 'init()' not yet called");
      assertNotNull(string0);
      assertEquals("\"-2147483648\"", string0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\"-2147483648\"", (String) null);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: \"-2147483648\"", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("\"-2147483648\"", sQLRecoverableException0.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \"-2147483648\"
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      boolean boolean0 = true;
      Constructor<ArrayType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = true;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getConstructor();
      MockException mockException0 = new MockException();
      mockException0.printStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(mockException0);
      mockException0.initCause(sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.addSuppressed(mockException0);
      constructor0.getName();
      sQLSyntaxErrorException0.spliterator();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0, "^(@1sB$}Qp^lO");
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      String string0 = " as a Bean";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, " as a Bean");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.annotation.NoClass) must override method ' as a Bean'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockException mockException0 = new MockException((String) null);
      Short short0 = new Short((short) (-584));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(short0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockException0, jsonMappingException_Reference0);
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) jsonMappingException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Object object0 = new Object();
      ClassUtil.isJacksonStdImpl(object0);
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes(class0, class1);
      SQLDataException sQLDataException0 = new SQLDataException();
      MockError mockError0 = new MockError(sQLDataException0);
      String string0 = "com.fasterxml.jackson.databind.ext.CoreXMLSerializers$XMLGregorianCalendarSerializer";
      try { 
        MockURI.URI("com.fasterxml.jackson.databind.ext.CoreXMLSerializers$XMLGregorianCalendarSerializer", (String) null, (String) null, (String) null, (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 53: com.fasterxml.jackson.databind.ext.CoreXMLSerializers$XMLGregorianCalendarSerializer:
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaredFields(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("}[\"6u+(BK{");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("}[\"6u+(BK{", "}[\"6u+(BK{", "}[\"6u+(BK{", 253);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("A9", "3DBs\"dccqtOIL;", "}[\"6u+(BK{", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      ClassUtil.throwIfIOE(sQLTimeoutException0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<String> class1 = String.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MapType> class0 = MapType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("2juU%g82@`#SXC", class0, "vals");
      MockError mockError0 = new MockError(jsonMappingException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      String string0 = "vals";
      StackTraceElement stackTraceElement0 = new StackTraceElement("2juU%g82@`#SXC", "vals", "vals", (-967));
      stackTraceElementArray0[0] = stackTraceElement0;
      String string1 = "6s,Z#c";
      StackTraceElement stackTraceElement1 = new StackTraceElement("T)Mtt`X&LvWB>", "6s,Z#c", "^Fyc1[5AP6B", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("vals", "serialVersionUID", "", 1536);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = null;
      try {
        stackTraceElement3 = new StackTraceElement((String) null, (String) null, "6s,Z#c", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      ClassUtil.emptyIterator();
      Class<Float> class0 = Float.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(29, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isLocalType(class0, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.nullOrToString(class1);
      Class<Object> class2 = Object.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getClassMethods(class1);
      Class<Double> class2 = Double.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNotNull(class3);
      assertEquals("double", class3.toString());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("#!2gGNiB0");
      MockError mockError0 = new MockError("#!2gGNiB0", sQLTransientException0);
      String string0 = ClassUtil.nullOrToString(mockError0);
      assertNotNull(string0);
      
      Class<Boolean> class4 = Boolean.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class4, true);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null, (AnnotatedMember) null, (AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnyGetter();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findAnyGetter();
      basicBeanDescription0.findAnyGetter();
      basicBeanDescription0.findAnyGetter();
      Class<SimpleType>[] classArray0 = (Class<SimpleType>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "net.sf.cglib.proxy.";
      ClassUtil.backticked("net.sf.cglib.proxy.");
      Class<?> class0 = ClassUtil.classOf("`net.sf.cglib.proxy.`");
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperTypes(class0, class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      int int0 = 1536;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(1536, mockRandom0);
      Class<Boolean> class2 = Boolean.class;
      mockRandom0.ints((long) 1536);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdKey(class0, "`net.sf.cglib.proxy.`", "`net.sf.cglib.proxy.`", methodArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<CollectionType> class1 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getPackageName(class0);
      String string0 = "TIME";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("TIME");
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLTimeoutException0);
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, "TIME");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isLocalType(class0, false);
      Class<Object> class1 = Object.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.primitiveType(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      MockFile mockFile0 = new MockFile("[LLj");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }
}
