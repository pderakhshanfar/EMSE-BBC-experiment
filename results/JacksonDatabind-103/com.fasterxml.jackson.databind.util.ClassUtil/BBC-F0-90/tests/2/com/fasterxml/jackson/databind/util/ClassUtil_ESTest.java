/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:27:06 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
      Class<InputStream> class1 = InputStream.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.InputStream is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.findSuperTypes(class0, class0, list0);
      Class<Double> class1 = Double.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.findSuperTypes(class1, class2);
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getDeclaredFields(class0);
      System.setCurrentTimeMillis((-3492L));
      ClassUtil.classOf(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.getConstructors(class1);
      MockError mockError0 = new MockError("; base-type:");
      String string0 = "My_[dXUh";
      SQLWarning sQLWarning0 = new SQLWarning("My_[dXUh", mockError0);
      sQLWarning0.setNextException((SQLException) null);
      mockError0.initCause(sQLWarning0);
      // Undeclared exception!
      ClassUtil.getRootCause(mockError0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".'");
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
      Class<SimpleModule> class1 = SimpleModule.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.module.SimpleModule is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) referenceType0);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) referenceType0;
      javaTypeArray0[2] = (JavaType) referenceType0;
      JavaType javaType0 = referenceType0.refine(class0, typeBindings0, placeholderForType0, javaTypeArray0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaTypeArray0[1]);
      ClassUtil.rawClass(collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Object> class0 = Object.class;
      objectMapper0.readerFor(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class1);
      MockFile mockFile0 = new MockFile("5\"");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      JsonLocation jsonLocation0 = new JsonLocation(class1, 0L, 0L, (-1246572939), (-1246572939));
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "JSON", jsonLocation0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<AccessPattern> class0 = AccessPattern.class;
      objectMapper0.readerFor(class0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.verifyMustOverride(class0, accessPattern0, "org.hibernate.proxy.java.lang.Long");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, RuntimeException> enumMap0 = new EnumMap<AccessPattern, RuntimeException>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      int[] intArray0 = new int[5];
      intArray0[0] = 115;
      intArray0[1] = (-4475);
      intArray0[2] = (-1);
      intArray0[3] = (-10);
      intArray0[4] = 1536;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.java.lang.Double", (String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientException0);
      Byte byte0 = Byte.valueOf((byte)65);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) byte0, (-413));
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.sql.SQLNonTransientException: org.hibernate.proxy.java.lang.Double (through reference chain: java.lang.Byte[?])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-267));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.classOf(accessPattern0);
      MockException mockException0 = new MockException("unknown");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: unknown
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      MockIOException mockIOException0 = new MockIOException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      enumSet0.clone();
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      typeFactory0.constructCollectionType(class0, class0);
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Module>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.noneOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getConstructors(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getDeclaredMethods(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<ArrayType> class2 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class2);
      ObjectReader objectReader1 = objectReader0.forType(class2);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-69);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1852831698), objectReader1, (OutputStream) null, byteArray0, (-1808662384), true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, RuntimeException> enumMap0 = new EnumMap<AccessPattern, RuntimeException>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumMap<AccessPattern, RuntimeException> enumMap1 = new EnumMap<AccessPattern, RuntimeException>((Map<AccessPattern, ? extends RuntimeException>) enumMap0);
      MockThrowable mockThrowable0 = new MockThrowable("net.sf.cglib.proxy.java.lang.annotation.Annotation");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(mockThrowable0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("kE-).X]re`.9r a", sQLRecoverableException0);
      enumMap1.put(accessPattern0, (RuntimeException) mockRuntimeException0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, false);
      int[] intArray0 = new int[9];
      intArray0[0] = (-2945);
      intArray0[1] = 8232;
      intArray0[2] = (-1965);
      intArray0[3] = (-1316);
      intArray0[4] = 3;
      intArray0[5] = (-746);
      intArray0[6] = (-2);
      intArray0[7] = 1638;
      intArray0[8] = (-629636399);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "0x", "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.util.AccessPattern` from String \"0x\": 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.findEnumType(class0);
      Class<JsonDeserializer> class2 = JsonDeserializer.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.isLocalType(class2, true);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumMap<AccessPattern, RuntimeException> enumMap0 = new EnumMap<AccessPattern, RuntimeException>(class3);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      enumMap0.put(accessPattern0, (RuntimeException) mockRuntimeException0);
      ClassUtil.findEnumType(enumMap0);
      Class<IOException> class4 = IOException.class;
      Class<Void> class5 = Void.class;
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        TypeBindings.create(class5, javaType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Void with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isNonStaticInnerClass(class0);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "java.lang.reflect.Ac");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = false;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ArrayList<Module> arrayList0 = new ArrayList<Module>();
      ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<? extends Module>) arrayList0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(arrayList0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(576, 8);
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      Class<LinkedList> class0 = LinkedList.class;
      // Undeclared exception!
      try { 
        typeFactory2.constructCollectionType(class0, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$55438811) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<LinkedList> class0 = LinkedList.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2034);
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(placeholderForType0);
      ObjectReader objectReader2 = objectReader1.forType((JavaType) placeholderForType0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[6];
      objectReaderArray0[0] = objectReader2;
      objectReaderArray0[1] = objectReader2;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader2;
      objectReaderArray0[4] = objectReader2;
      objectReaderArray0[5] = objectReader1;
      ObjectReader objectReader3 = objectReader2.withFormatDetection(objectReaderArray0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectReader objectReader4 = objectReader3.withAttribute(simpleObjectIdResolver0, "");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ObjectReader objectReader5 = objectReader4.with(jsonParser_Feature0);
      TypeFactory typeFactory0 = objectReader5.getTypeFactory();
      Class<String> class1 = String.class;
      typeFactory0.constructCollectionType(class0, class1);
      Class<Integer> class2 = Integer.TYPE;
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class3, false);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      ClassUtil.isCollectionMapOrArray(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException((JavaType) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern", "org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.canBeABeanType(class0);
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      ArrayType arrayType1 = ArrayType.construct((JavaType) arrayType0, typeBindings0, (Object) null, (Object) null);
      ArrayType arrayType2 = arrayType1.withContentTypeHandler((Object) null);
      ClassUtil.rawClass(arrayType2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, ":b\"MicbharIU2", 3, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<Module> class1 = Module.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.isLocalType(class2, false);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<CollectionType> class3 = CollectionType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, simpleType0, collectionLikeType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, simpleType0);
      Short short0 = new Short((short)1175);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(short0);
      ReferenceType referenceType2 = referenceType1.withValueHandler(class2);
      ReferenceType referenceType3 = (ReferenceType)referenceType2.withContentValueHandler((Object) null);
      ReferenceType referenceType4 = (ReferenceType)referenceType3.withTypeHandler(short0);
      Class<Integer> class4 = Integer.class;
      ClassUtil.findSuperTypes((JavaType) referenceType4, (Class<?>) class4, true);
      ClassUtil.getClassMethods(class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      MockFile mockFile0 = new MockFile("7J.J<l+nb}s{@x?j}l7", "com.fasterxml.jackson.databind.util.NameTransformer");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("7J.J<l+nb}s{@x?j}l7", "1vX.+Uoo'2kNjV_", (short)1175);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTimeoutException: 7J.J<l+nb}s{@x?j}l7
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes(javaType0, class1, false);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[]", "5EMnsum=A5`{V", (-10));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[]", false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte) (-19);
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte)43;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1183), objectMapper0, pipedOutputStream0, byteArray0, (byte)8, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGenerator0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException: []
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassUtil.nonNullString("m`y.,3H#");
      Class<ReferenceType> class0 = ReferenceType.class;
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-78);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nameOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.findEnumType(class0);
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Module> class1 = Module.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      ClassUtil.nullOrToString(mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "Class ");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): Class 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2);
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      AccessPattern accessPattern3 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern4 = AccessPattern.DYNAMIC;
      EnumSet.of(accessPattern3, accessPattern0, accessPattern4);
      ClassUtil.findEnumType(enumSet1);
      Class<ShortNode> class0 = ShortNode.class;
      ClassUtil.isConcrete(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findSuperTypes(class0, class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern1);
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern3 = AccessPattern.ALWAYS_NULL;
      EnumSet.of(accessPattern2, accessPattern3, accessPattern3);
      ClassUtil.findEnumType(enumSet1);
      Class<Short> class1 = Short.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getGenericInterfaces(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.util.LinkedList");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      SQLException sQLException0 = new SQLException(sQLIntegrityConstraintViolationException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(sQLException0);
      sQLIntegrityConstraintViolationException1.getSuppressed();
      sQLIntegrityConstraintViolationException0.printStackTrace();
      sQLIntegrityConstraintViolationException0.initCause(sQLIntegrityConstraintViolationException1);
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", true);
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<SimpleModule> class1 = SimpleModule.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, true);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-3459));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getClassMethods(class1);
      ClassUtil.primitiveType(class1);
      System.setCurrentTimeMillis(0L);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.nameOf(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      defaultDeserializationContext_Impl0.with(deserializerFactory1);
      deserializerFactoryConfig0.valueInstantiators();
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.isNonStaticInnerClass(class3);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isConcrete(class0);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isLocalType(class0, true);
      Class<Long> class2 = Long.class;
      ClassUtil.getEnclosingClass(class2);
      Class<Error> class3 = Error.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class3, true);
      ClassUtil.findSuperTypes(class1, class1);
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.getEnclosingClass(class4);
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.getOuterClass(class2);
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.isLocalType(class5, true);
      Class<CollectionLikeType> class6 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class6, (Class<?>) null, list0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(". =^0\"(1t\u0005/aS&cL");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, ". =^0\"(1t\u0005/aS&cL", (-708825413), sQLIntegrityConstraintViolationException0);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.getConstructors(class0);
      ClassUtil.findSuperTypes(class0, class0);
      Class<Short> class2 = Short.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Gms#X/w", "Gms#X/w", hashMap0);
      MockError mockError0 = new MockError("$1|hJjF?o=+[t{", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getPackageName(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte) (-105);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1653959476), (ObjectCodec) null, pipedOutputStream0, byteArray0, 922, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((-2028326306));
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTransientException sQLTransientException1 = new SQLTransientException("java.lang", "java.lang", (-1809238660), sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) sQLTransientException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: java.lang
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      ClassUtil.hasEnclosingMethod(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getEnclosingClass(class1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ClassUtil.getRootCause(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.canBeABeanType(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getDeclaredAnnotations();
      constructor0.getDeclaredAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.getDeclaredFields(class3);
      Character.valueOf('.');
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(arrayType0, (String) null, (String) null);
      arrayType0.withValueHandler(jsonMappingException0);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JY++ju>tjzA@^{", hashMap0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("$[WH)/3n7VLy^Z1x", sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("array", "2-i(h+kg$a5", sQLTransientException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("2-i(h+kg$a5", "array", hashMap0, sQLTimeoutException0);
      MockError mockError0 = new MockError(sQLClientInfoException1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      Object object0 = new Object();
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class1);
      Class<String> class2 = String.class;
      ClassUtil.isLocalType(class2, true);
      ClassUtil.getConstructors(class0);
      ClassUtil.findSuperClasses(class2, class2, true);
      Byte byte0 = new Byte((byte)0);
      ClassUtil.classNameOf(byte0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getClassMethods(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotatedExceptionTypes();
      constructor0.getDeclaredAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotationsByType(class2);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<Error>[] classArray0 = (Class<Error>[]) Array.newInstance(Class.class, 6);
      Class<Error> class3 = Error.class;
      classArray0[0] = class3;
      Class<Error> class4 = Error.class;
      classArray0[1] = class4;
      Class<Error> class5 = Error.class;
      classArray0[2] = class5;
      Class<Error> class6 = Error.class;
      classArray0[3] = class6;
      Class<Error> class7 = Error.class;
      classArray0[4] = class7;
      Class<Error> class8 = Error.class;
      classArray0[5] = class8;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.getOuterClass(class0);
      Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
      Constructor<SimpleObjectIdResolver> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getConstructors(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      referenceType0.withContentTypeHandler(class1);
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withStaticTyping();
      referenceType1.withStaticTyping();
      ReferenceType referenceType2 = (ReferenceType)referenceType1.withContentValueHandler(referenceType0);
      referenceType2.withContentType(collectionLikeType0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class2, true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Character character0 = Character.valueOf('D');
      Class<Character> class0 = Character.class;
      ClassUtil.hasClass(character0, class0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      MockError mockError0 = new MockError("Failed to instantiate class ");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<NoClass> class0 = NoClass.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Void> class0 = Void.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findConstructor(class0, true);
      Class<Void> class1 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getClassMethods(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotatedExceptionTypes();
      constructor0.getDeclaredAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotationsByType(class3);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<Character> class4 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<Void> class1 = Void.class;
      ClassUtil.hasClass(class1, class1);
      ClassUtil.getConstructors(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, (TypeBindings) null);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) arrayType0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[3], (JavaType) arrayType0);
      MapType mapType1 = mapType0.withKeyType(javaTypeArray0[0]);
      ClassUtil.findSuperTypes((JavaType) mapType1, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, (TypeBindings) null);
      arrayType0.getBindings();
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class2, class0, true);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findEnumType(class3);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<NoClass> class0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("CvXP", "CvXP", (-368));
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter", "_+u9>", sQLTimeoutException0);
      SQLWarning sQLWarning0 = new SQLWarning("CvXP", sQLException0);
      sQLTimeoutException0.initCause(sQLWarning0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, (TypeBindings) null);
      arrayType0.getBindings();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) arrayType0;
      javaTypeArray0[1] = (JavaType) arrayType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) arrayType0;
      javaTypeArray0[6] = (JavaType) arrayType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[6]);
      MapType mapType1 = mapType0.withContentTypeHandler(javaTypeArray0[6]);
      mapType1.withKeyType(javaTypeArray0[4]);
      Class<Byte> class2 = Byte.class;
      ClassUtil.findSuperTypes((JavaType) mapType1, (Class<?>) class2, false);
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " F#q!?.7vve");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FAIL_ON_TRAILING_TOKENS");
      ClassUtil.nullOrToString("FAIL_ON_TRAILING_TOKENS");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class0 = Annotation.class;
      annotationMap0.get(class0);
      ClassUtil.nonNull((Annotation) null, (Annotation) null);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class0);
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) null, "FAIL_ON_TRAILING_TOKENS");
      sQLSyntaxErrorException0.initCause(jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.emptyIterator();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getConstructors(class0);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, (TypeBindings) null);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) arrayType0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[3], (JavaType) arrayType0);
      MapType mapType1 = mapType0.withKeyType(javaTypeArray0[0]);
      ClassUtil.findSuperTypes((JavaType) mapType1, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("net.sf.cglib.proxy.java.lang.Float", "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException", (Throwable) null);
      sQLTransactionRollbackException0.getLocalizedMessage();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException", "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException", (-2), sQLTransactionRollbackException0);
      sQLRecoverableException0.getStackTrace();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      mockRuntimeException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<MapType> class1 = MapType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Character.valueOf('6');
      Float float0 = new Float(0.0F);
      ClassUtil.nonNull((Object) null, (Object) float0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isProxyType(class1);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1071);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("{l(uGX", "}T", (-1071), intArray0);
      batchUpdateException0.getNextException();
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.findRawSuperTypes(class0, class0, false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-104);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Float> class0 = Float.class;
      ClassUtil.findConstructor(class0, true);
      Class<Character> class1 = Character.class;
      ClassUtil.getClassMethods(class1);
      Class<Integer> class2 = Integer.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.getDeclaredMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("RgLLP%p]|`%");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("RgLLP%p]|`%", "RgLLP%p]|`%", (-188), (Throwable) null);
      sQLSyntaxErrorException0.setNextException(sQLRecoverableException0);
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0, "RgLLP%p]|`%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RgLLP%p]|`%
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.hasClass((Object) null, class1);
      ClassUtil.getClassMethods(class0);
      Class<Error> class2 = Error.class;
      ClassUtil.getConstructors(class2);
      ClassUtil.findSuperClasses(class2, class0, false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Error> class1 = Error.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.findConstructor(class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Integer> class1 = Integer.class;
      ClassUtil.canBeABeanType(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getGenericSuperclass(class2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isBogusClass(class0);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "MyA03@*F!6w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.getConstructors(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.getClassDescription((Object) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(53);
      ClassUtil.nullOrToString(placeholderForType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("JSON");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("net.sf.cglib.proxy.java.lang.Double", "unknown", 53);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTimeoutException: net.sf.cglib.proxy.java.lang.Double
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasEnclosingMethod(class0);
      SQLDataException sQLDataException0 = new SQLDataException("net.sf.cglib.proxy.java.lang.String", "net.sf.cglib.proxy.java.lang.String");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<Double> class3 = Double.class;
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.canBeABeanType(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.getClassDescription(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(53);
      ClassUtil.nullOrToString((Object) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("B<#FKiah,a;");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", "JSON", 53);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTimeoutException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<MapType> class1 = MapType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findConstructor(class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.printStackTrace();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<Object> class0 = Object.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-638502591));
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "java.lang.reflect.A", placeholderForType0);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.getConstructors(class0);
      Class<Double> class1 = Double.TYPE;
      Byte byte0 = Byte.valueOf((byte) (-73));
      ClassUtil.classNameOf(byte0);
      ClassUtil.isBogusClass(class0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 605;
      longArray0[1] = (long) (byte) (-73);
      longArray0[2] = (long) (byte) (-73);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "5sxmmWYlV-U/UEv", (byte) (-73), longArray0, (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Default constructor for ", "`{6G>Sn+3kw", 605, batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: Default constructor for 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashMap0, (Throwable) null);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("Type ", map0, sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, (-2014059526), sQLClientInfoException1);
      sQLSyntaxErrorException0.getSuppressed();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, sQLSyntaxErrorException0);
      sQLRecoverableException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "Type ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.getDeclaredFields(class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.isConcrete(class3);
      Class<Boolean> class4 = Boolean.class;
      Class<Byte> class5 = Byte.class;
      ClassUtil.findRawSuperTypes(class4, class5, false);
      Class<Object> class6 = Object.class;
      ClassUtil.isJacksonStdImpl(class6);
      ClassUtil.nameOf(class6);
      Class<ReferenceType> class7 = ReferenceType.class;
      ClassUtil.hasClass(fileSystemHandling0, class7);
      Class<Integer> class8 = Integer.class;
      ClassUtil.getClassMethods(class8);
      Class<AccessibleObject> class9 = AccessibleObject.class;
      try { 
        ClassUtil.createInstance(class9, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      SQLDataException sQLDataException0 = new SQLDataException("net.sf.cglib.proxy.java.lang.String", "net.sf.cglib.proxy.java.lang.String");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.setNextException(sQLDataException0);
      Class<ReferenceType> class1 = ReferenceType.class;
      Class<Character> class2 = Character.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.getDeclaredMethods(class1);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, true);
      Class<String> class1 = String.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaredMethods(class0);
      MockThrowable mockThrowable0 = new MockThrowable("Attempted to unwrap '%s' value from an array (with `DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS`) but it contains more than one value", (Throwable) null);
      ClassUtil.throwRootCauseIfIOE(mockThrowable0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("$GwpcfE9D`");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "$GwpcfE9D`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-32);
      byteArray0[0] = (byte) (-41);
      byteArray0[3] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.findClassAnnotations(class1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ZEZzqW#7ul_\"'>I", "ZEZzqW#7ul_\"'>I");
      sQLSyntaxErrorException0.printStackTrace();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ZEZzqW#7ul_\"'>I");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0, "Cannot pass null DeserializerFactory");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(".3KK9#nY", ".3KK9#nY", (-922));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException();
      Class<String> class0 = String.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nonNullString((String) null);
      Class<Float> class1 = Float.class;
      ClassUtil.getOuterClass(class1);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      ClassUtil.isProxyType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.hasEnclosingMethod(class0);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      configOverrides0.getDefaultMergeable();
      ClassUtil.classOf((Object) null);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Byte> class2 = Byte.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Byte has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isProxyType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.createInstance(class2, false);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      beanDeserializerFactory1.withValueInstantiators(simpleValueInstantiators0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Object> class3 = Object.class;
      ClassUtil.getEnclosingClass(class3);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      ClassUtil.quotedOr((Object) null, ") decorated with @JsonCreator (for Enum type ");
      ClassUtil.getClassDescription(constructor0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getClassMethods(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BII%+8#;~AcN;eXp]`");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nonNullString("enum");
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperClasses((Class<?>) null, class2, true);
      Byte.valueOf((byte)0);
      ClassUtil.classNameOf("enum");
      Class<Integer> class3 = Integer.class;
      ClassUtil.isJacksonStdImpl(class3);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.classOf(class0);
      ClassUtil.backticked("net.sf.cglib.proxy.");
      Class<Double> class1 = Double.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findEnumType(class2);
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.isNonStaticInnerClass(class2);
      Class<Long> class3 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class3, class3, "net.sf.cglib.proxy.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Long) must override method 'net.sf.cglib.proxy.'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ZERO_LENGTH_ENUM_ARRAY", (String) null, 90, (Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLIntegrityConstraintViolationException0);
      mockRuntimeException0.getLocalizedMessage();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.getStackTrace();
      ClassUtil.throwIfRTE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0, "ZERO_LENGTH_ENUM_ARRAY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZERO_LENGTH_ENUM_ARRAY
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "S}$");
      System.setCurrentTimeMillis(306L);
      Double double0 = new Double(306L);
      ClassUtil.getClassDescription(double0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(">Ddo7QziiH~9O#=W|G");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(">Ddo7QziiH~9O#=W|G");
      sQLSyntaxErrorException0.printStackTrace((PrintStream) mockPrintStream0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(">Ddo7QziiH~9O#=W|G");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BII%+8#;~AcN;eXp]`");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("BII%+8#;~AcN;eXp]`");
      sQLRecoverableException0.getStackTrace();
      ClassUtil.throwIfRTE(sQLRecoverableException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'J';
      charArray0[1] = 'R';
      charArray0[2] = 'Y';
      charArray0[3] = 'P';
      charArray0[4] = 'f';
      charArray0[5] = '[';
      jsonFactory0.createParser(charArray0, 2, 2);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonFactory1.configure(jsonGenerator_Feature1, false);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "K@vhs0");
      Class<Float> class0 = Float.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.findClassAnnotations(class1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("K@vhs0", "ZEZzqW#7ul_\"'>I");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("K@vhs0");
      sQLSyntaxErrorException0.printStackTrace((PrintWriter) mockPrintWriter0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ZEZzqW#7ul_\"'>I");
      sQLSyntaxErrorException0.printStackTrace((PrintStream) mockPrintStream0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // K@vhs0
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BII%+8#;~AcN;eXp]`");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nonNullString("enum");
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<ArrayType>[] classArray0 = (Class<ArrayType>[]) Array.newInstance(Class.class, 6);
      Class<ArrayType> class2 = ArrayType.class;
      classArray0[0] = class2;
      Class<ArrayType> class3 = ArrayType.class;
      classArray0[1] = class3;
      Class<ArrayType> class4 = ArrayType.class;
      classArray0[2] = class4;
      Class<ArrayType> class5 = ArrayType.class;
      classArray0[3] = class5;
      Class<ArrayType> class6 = ArrayType.class;
      classArray0[4] = class6;
      Class<ArrayType> class7 = ArrayType.class;
      classArray0[5] = class7;
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BII%+8#;~AcN;eXp]`");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nonNullString("enum");
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<ArrayType>[] classArray0 = (Class<ArrayType>[]) Array.newInstance(Class.class, 6);
      Class<ArrayType> class2 = ArrayType.class;
      classArray0[0] = class2;
      Class<ArrayType> class3 = ArrayType.class;
      classArray0[1] = class3;
      Class<ArrayType> class4 = ArrayType.class;
      classArray0[2] = class4;
      Class<ArrayType> class5 = ArrayType.class;
      classArray0[3] = class5;
      Class<ArrayType> class6 = ArrayType.class;
      classArray0[4] = class6;
      Class<ArrayType> class7 = ArrayType.class;
      classArray0[5] = class7;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      batchUpdateException0.forEach(consumer0);
      Class<Character> class1 = Character.TYPE;
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.nullOrToString(class0);
      ClassUtil.isConcrete(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nameOf((Named) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException("Ja{5@R8A0z", "R1Dzw<9%nwV]");
      sQLInvalidAuthorizationSpecException0.setNextException(sQLDataException0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.isProxyType(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.findSuperTypes(class2, class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      objectMapper0.readerFor(class0);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class0);
      ClassUtil.backticked("com.fasterxml.jacks");
      Class<Double> class2 = Double.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      ClassUtil.getDeclaredMethods(class0);
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class4);
      ClassUtil.isNonStaticInnerClass(class3);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isProxyType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", (int[]) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      batchUpdateException0.forEach(consumer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      beanDeserializerFactory1.withValueInstantiators(simpleValueInstantiators0);
      ClassUtil.isProxyType(class2);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isNonStaticInnerClass(class2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.findConstructor(class0, true);
      ClassUtil.nullOrToString(class0);
      ClassUtil.isConcrete(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nameOf((Named) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException("Ja{5@R8A0z", "R1Dzw<9%nwV]");
      sQLInvalidAuthorizationSpecException0.setNextException(sQLDataException0);
      SQLException sQLException0 = new SQLException("[null]", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLException0, "[null]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [null]
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.hasEnclosingMethod(class0);
      Integer.getInteger(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", (-246));
      MockIOException mockIOException0 = new MockIOException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(mockIOException0);
      mockIOException0.initCause(sQLIntegrityConstraintViolationException0);
      ClassUtil.backticked("\"%s\"");
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0, " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes(class1, class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperTypes(class2, class1);
      ClassUtil.backticked("keyType");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Double double0 = new Double(0.0);
      ClassUtil.classNameOf(double0);
      Class<Float> class0 = Float.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class3);
      Class<Short> class4 = Short.class;
      ClassUtil.isLocalType(class4, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[2];
      intArray0[0] = 59;
      intArray0[1] = 59;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0, batchUpdateException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, batchUpdateException0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("`java.lang.Double`", (String) null, 59, map1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException2, "=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // =
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper1, byteArrayBuilder0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      JsonGenerator jsonGenerator1 = uTF8JsonGenerator0.setCodec(objectMapper0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator1);
      SQLException sQLException0 = new SQLException("Z#5|}6cX");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator1, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException: Z#5|}6cX
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(filteringGeneratorDelegate0);
      SQLException sQLException0 = new SQLException("3kUT[odD");
      ClassUtil.getDeclaredFields(class0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) sQLException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<?> class1 = ClassUtil.classOf(class0);
      Integer.getInteger(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", (-246));
      MockIOException mockIOException0 = new MockIOException();
      Class<Float> class2 = Float.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findSuperTypes(class1, class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      Class<Long> class4 = Long.class;
      ClassUtil.findSuperTypes(class4, class3);
      ClassUtil.backticked("\"%s\"");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0, " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredMethods(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Long> class1 = Long.class;
      typeFactory0.constructMapLikeType(class0, class1, class1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      ClassUtil.backticked("org.hibernate.proxy.");
      Class<Object> class2 = Object.class;
      ClassUtil.isLocalType(class2, true);
      ClassUtil.findEnumType(class2);
      ClassUtil.getDeclaredMethods(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.isCollectionMapOrArray(class3);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findEnumType(class4);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(filteringGeneratorDelegate0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.findSuperClasses(class0, class0, false);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ClassUtil.emptyIterator();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("XH6~9w}zoKx", "XH6~9w}zoKx", (-1));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sQLRecoverableException0.getStackTrace();
      ClassUtil.throwIfRTE(sQLRecoverableException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("XH6~9w}zoKx", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException: XH6~9w}zoKx
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.getConstructors(class0);
      Class<Double> class1 = Double.TYPE;
      Byte byte0 = Byte.valueOf((byte) (-73));
      ClassUtil.classNameOf(byte0);
      ClassUtil.isBogusClass(class0);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 605;
      longArray0[1] = (long) (byte) (-73);
      longArray0[2] = (long) (byte) (-73);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "5sxmmWYlV-U/UEv", (byte) (-73), longArray0, (Throwable) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Default constructor for ", "`{6G>Sn+3kw", 605, batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: Default constructor for 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.isConcrete(class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("size", "nFFf7/u4!");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.append((-191));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0, true);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
      ClassUtil.getClassMethods(class1);
      ClassUtil.nullOrToString(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      ClassUtil.isObjectOrPrimitive(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) mockPrintWriter0, (Exception) sQLIntegrityConstraintViolationException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: size
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      batchUpdateException0.forEach(consumer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.backticked("ZT9aANB*Y@A92,Jt77");
      ClassUtil.nonNullString("ZT9aANB*Y@A92,Jt77");
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getClassMethods(class0);
      SQLWarning sQLWarning0 = new SQLWarning("ZT9aANB*Y@A92,Jt77", (String) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 965;
      intArray0[1] = (-1);
      intArray0[2] = 43;
      intArray0[3] = (-2116);
      intArray0[4] = 288;
      intArray0[5] = (-5214);
      intArray0[6] = (-4);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLWarning0);
      sQLWarning0.initCause(batchUpdateException0);
      intArray0[7] = (-260);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("ZT9aANB*Y@A92,Jt77", "K_{O2[WI>d/6[**", intArray0, sQLWarning0);
      sQLWarning0.addSuppressed(batchUpdateException1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZT9aANB*Y@A92,Jt77
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isLocalType(class0, true);
      Class<Double> class1 = Double.TYPE;
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperClasses(class0, class2, false);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findSuperTypes(class1, class3);
      ClassUtil.backticked("2D5O**cm|ViMUuz");
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "2D5O**cm|ViMUuz");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Character> class0 = Character.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.getDeclaredFields(class0);
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      ClassUtil.classNameOf(type0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getConstructors(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Byte.valueOf((byte) (-72));
      Class<Short> class2 = Short.class;
      ClassUtil.isObjectOrPrimitive(class2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.backticked("ZT9aANB*Y@A92,Jt77");
      ClassUtil.nonNullString("ZT9aANB*Y@A92,Jt77");
      ClassUtil.getDeclaredFields(class0);
      Constructor<Object> constructor0 = null;
      ClassUtil.getClassMethods(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.getConstructors(class1);
      Class<Double> class2 = Double.TYPE;
      Class<Double> class3 = Double.class;
      ClassUtil.findSuperClasses(class1, class3, false);
      Byte byte0 = Byte.valueOf((byte) (-73));
      ClassUtil.classNameOf(byte0);
      ClassUtil.isBogusClass(class1);
      Class<CollectionType> class4 = CollectionType.class;
      ClassUtil.isProxyType(class4);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isLocalType(class0, true);
      Class<ArrayType> class1 = ArrayType.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.backticked("K!(IuJcWjmZq2jO");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClassUtil.emptyIterator();
      Long long0 = new Long(0L);
      Class<Long> class3 = Long.class;
      TypeBindings typeBindings0 = TypeBindings.create(class3, (JavaType[]) null);
      TypeBindings.createIfNeeded(class3, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Double double0 = new Double(0.0);
      ClassUtil.classNameOf(double0);
      Class<Float> class0 = Float.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.backticked("`java.lang.Double`");
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getConstructors(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Byte.valueOf((byte) (-72));
      Class<Short> class2 = Short.class;
      ClassUtil.isObjectOrPrimitive(class2);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.getConstructors(class0);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.findSuperClasses(class0, class1, true);
      Byte.valueOf((byte) (-73));
      ClassUtil.classNameOf((Object) null);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1536;
      longArray0[1] = (long) 1536;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 1536;
      longArray0[4] = (long) 1536;
      longArray0[5] = (-1456L);
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 1536;
      longArray0[8] = (long) 1536;
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(";1", "}E(b3!WPd%Kr", 1536, longArray0, batchUpdateException0);
      batchUpdateException1.getStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      batchUpdateException1.forEach(consumer0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(";1", ";1");
      ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<Object> class1 = Object.class;
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "serialVersionUID");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "elementType");
      ClassUtil.nameOf(class0);
      ClassUtil.findEnumType(class0);
      Class<Integer> class1 = Integer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[2];
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Double double0 = new Double(0.0);
      JavaType javaType1 = resolvedRecursiveType0.withValueHandler(double0);
      javaTypeArray0[0] = javaType1;
      javaTypeArray0[1] = javaType0;
      MapType mapType0 = MapType.construct(class1, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[0]);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = mapType1.withTypeHandler(mapType0);
      ClassUtil.rawClass(mapType2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class1 = String.class;
      Class<Annotation> class2 = Annotation.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotationsByType(class2);
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor1 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor1.getDeclaringClass();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("entrySet", "entrySet", (-3674), (int[]) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("entrySet", batchUpdateException0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3674));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(placeholderForType0, "entrySet", "NULL");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, (-605166913));
      JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, jsonMappingException_Reference0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'entrySet' as a subtype of $-3673: NULL
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isLocalType(class0, false);
      Class<Double> class1 = Double.class;
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.backticked("vals");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("vals", hashMap0);
      MockIOException mockIOException0 = new MockIOException("`vals`", sQLClientInfoException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockIOException0);
      sQLFeatureNotSupportedException0.addSuppressed(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0, "Subtype of BeanSerializerFactory (");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Subtype of BeanSerializerFactory (
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.getConstructors(class0);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.findSuperClasses(class0, class1, true);
      Byte.valueOf((byte) (-73));
      ClassUtil.nonNullString((String) null);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1455;
      intArray0[1] = 1474;
      intArray0[2] = 1536;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      batchUpdateException0.forEach(consumer0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getClassMethods(class2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "_35SpkPV\"f;1ZMt2w=";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_35SpkPV\"f;1ZMt2w=");
      System.setCurrentTimeMillis(306L);
      Double double0 = new Double(306L);
      ClassUtil.getClassDescription(double0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      ClassUtil.nonNull(accessPattern0, accessPattern1);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<String> class2 = String.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.backticked(" |OU1\b");
      Class<Double> class3 = Double.class;
      ClassUtil.isLocalType(class3, false);
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class0);
      ClassUtil.nonNullString(" |OU1\b");
      ClassUtil.isConcrete(class4);
      ClassUtil.isConcrete(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ufP&NkTK#X<QkS@$Wp", "#gI5");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.append((-191));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0, false);
      mockPrintWriter0.print('M');
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
      ClassUtil.getClassMethods(class2);
      ClassUtil.nullOrToString("#gI5");
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.nonNullString(" |OU1\b");
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.createInstance(class5, false);
      ClassUtil.backticked((String) null);
      ClassUtil.quotedOr(throwable0, "[null]");
      Class<Annotation> class6 = Annotation.class;
      ClassUtil.getPackageName(class6);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<String> class2 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.backticked(" |OU1\b");
      Class<Double> class3 = Double.class;
      ClassUtil.isLocalType(class3, false);
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class0);
      ClassUtil.backticked(" |OU1\b");
      ClassUtil.isConcrete(class4);
      ClassUtil.isConcrete(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ufP&NkTK#X<QkS@$Wp", "#gI5");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.append((-191));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0, false);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
      ClassUtil.getClassMethods(class2);
      ClassUtil.nullOrToString("#gI5");
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.nonNullString("` |OU1\b`");
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.createInstance(class5, false);
      ClassUtil.backticked((String) null);
      ClassUtil.emptyIterator();
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.isJacksonStdImpl((Object) list0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "com.fa|sterxml.jacks");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fa|sterxml.jacks
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getConstructors(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Byte.valueOf((byte) (-72));
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      Object object0 = new Object();
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class1);
      Class<String> class2 = String.class;
      ClassUtil.isLocalType(class2, true);
      ClassUtil.getConstructors(class0);
      ClassUtil.findSuperClasses(class2, class2, true);
      Byte byte0 = Byte.valueOf((byte)0);
      ClassUtil.classNameOf(byte0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = true;
      MockIOException mockIOException0 = new MockIOException();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.append(2);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0, false);
      byteArrayBuilder0.completeAndCoalesce(2);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType", batchUpdateException0);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.nullOrToString(sQLIntegrityConstraintViolationException0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.createInstance(class1, false);
      ClassUtil.backticked("java.sql.SQLIntegrityConstraintViolationException@0000000002");
      Object object0 = new Object();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator(class2, (-91));
      MockIOException mockIOException0 = new MockIOException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Object object0 = new Object();
      Class<String> class1 = String.class;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.getConstructors(class0);
      ClassUtil.findSuperClasses(class1, class1, true);
      Byte byte0 = Byte.valueOf((byte)0);
      ClassUtil.classNameOf(byte0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Double double0 = new Double(0.0);
      ClassUtil.classNameOf(double0);
      Class<Float> class0 = Float.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class2);
      Class<String> class3 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.toGenericString();
      constructor0.getParameterCount();
      Class<Annotation> class4 = Annotation.class;
      constructor0.getDeclaredAnnotation(class4);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.classOf(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getClassMethods(class1);
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, false);
      ClassUtil.primitiveType(class1);
      System.setCurrentTimeMillis(0L);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.nameOf(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory1);
      deserializerFactoryConfig0.valueInstantiators();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException((Class<?>) null, "`com.fasterxml.jackson.databind.JsonMappingException`", "`com.fasterxml.jackson.databind.JsonMappingException`");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type [null] from String \"`com.fasterxml.jackson.databind.JsonMappingException`\": `com.fasterxml.jackson.databind.JsonMappingException`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<NoClass> class1 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("bC&'z7(PlX^|", "serialVersionUID", 0);
      SQLWarning sQLWarning0 = new SQLWarning("serialVersionUID", "Hg5IQZn\"6d')uJk01'", 0, sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.addSuppressed(sQLWarning0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLTransactionRollbackException0.initCause(sQLIntegrityConstraintViolationException0);
      ClassUtil.getRootCause(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty");
      Class<Short> class0 = Short.class;
      ClassUtil.nameOf(class0);
      ClassUtil.isConcrete(class0);
      Class<NoClass> class1 = NoClass.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Void> class2 = Void.class;
      ClassUtil.findRawSuperTypes(class0, class2, false);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.isJacksonStdImpl(class3);
      ClassUtil.nameOf(class1);
      Class<ReferenceType> class4 = ReferenceType.class;
      ClassUtil.hasClass(class2, class2);
      ClassUtil.getClassMethods(class2);
      Class<AccessibleObject> class5 = AccessibleObject.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class5, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findSuperTypes(class0, class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        AbstractDeserializer.constructForNonPOJO(basicBeanDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("entrySet", "entrySet", (-3674), (int[]) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("entrySet", batchUpdateException0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3674));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(placeholderForType0, (-3674));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // entrySet (through reference chain: com.fasterxml.jackson.databind.type.PlaceholderForType[?])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ZERO_LENGTH_ENUM_ARRAY", (String) null, 90, (Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLIntegrityConstraintViolationException0);
      mockRuntimeException0.getLocalizedMessage();
      ClassUtil.quotedOr(mockRuntimeException0, "ZERO_LENGTH_ENUM_ARRAY");
      ClassUtil.getClassDescription("ZERO_LENGTH_ENUM_ARRAY");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getClassMethods(class0);
      Class<Short> class1 = Short.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLIntegrityConstraintViolationException: ZERO_LENGTH_ENUM_ARRAY\"");
      ClassUtil.findConstructor(class1, true);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Long long0 = Long.getLong("unknown", 167L);
      ClassUtil.getClassDescription(long0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "`java.lang.Long`");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.getTypeName();
      resolvedRecursiveType0.isReferenceType();
      ClassUtil.classNameOf(resolvedRecursiveType0);
      String string0 = "Hv}G@Ka3";
      int int0 = 0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("D", "`com.fasterxml.jackson.databind.type.ResolvedRecursiveType`", 0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Long long0 = Long.getLong("unknown", 167L);
      ClassUtil.getClassDescription(long0);
      String string0 = "elementType";
      String string1 = "";
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "`java.lang.Long`");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Double double0 = new Double(0.0);
      Class<String> class0 = String.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " (from class ");
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class3);
      ClassUtil.getClassDescription(class2);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getEnclosingClass(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("keyType");
      sQLTransactionRollbackException0.fillInStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("abstract type (need to add/enable type information?)", "keyType", (-155), sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        sQLSyntaxErrorException0.printStackTrace((PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3957, objectReader0, bufferedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isObjectOrPrimitive(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.spliterator();
      sQLNonTransientConnectionException0.getSuppressed();
      sQLNonTransientConnectionException0.getStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLNonTransientConnectionException0.initCause(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.getSuppressed();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DksY");
      mockPrintWriter0.write("DksY");
      sQLNonTransientConnectionException0.printStackTrace((PrintWriter) mockPrintWriter0);
      // Undeclared exception!
      try { 
        sQLNonTransientConnectionException0.setStackTrace((StackTraceElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Character character0 = new Character('t');
      int int0 = (-246);
      Integer.getInteger("vals", (-246));
      MockIOException mockIOException0 = new MockIOException();
      Class<Float> class2 = Float.class;
      ClassUtil.findSuperTypes(class2, class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class3);
      ClassUtil.backticked("vals");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0, "`vals`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `vals`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericInterfaces(class0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
      // Undeclared exception!
      try { 
        beanSerializerBuilder0.getClassInfo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanSerializerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<String> class2 = String.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.backticked(" |OU1\b");
      Class<Double> class3 = Double.class;
      ClassUtil.isLocalType(class3, false);
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class0);
      ClassUtil.backticked(" |OU1\b");
      ClassUtil.isConcrete(class4);
      ClassUtil.isConcrete(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ufP&NkTK#X<QkS@$Wp", "#gI5");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      byteArrayBuilder0.append((-191));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0, false);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
      ClassUtil.getClassMethods(class2);
      ClassUtil.nullOrToString("#gI5");
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.nonNullString("` |OU1\b`");
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.createInstance(class5, false);
      ClassUtil.backticked((String) null);
      ClassUtil.quotedOr(throwable0, "[null]");
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1455;
      intArray0[1] = 1474;
      intArray0[2] = 1536;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("m{(bMTakiZr.CAA4", intArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      batchUpdateException0.forEach(consumer0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(batchUpdateException0);
      ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Long> class1 = Long.class;
      Class<Object> class2 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class0, class2);
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forCreation((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredMethods(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Long> class1 = Long.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forCreation((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isProxyType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class2, false);
      ClassUtil.getDeclaringClass(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("=2sZ'G&8", "l#", runtimeException0);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.append((CharSequence) "l#");
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter1);
      ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "Class ", (-13));
      MockIOException mockIOException0 = new MockIOException(sQLSyntaxErrorException0);
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      String string0 = "r%*='+HFvL<V6^TPC ";
      String string1 = "net.sf.cglib.proxy.java.lang.String";
      MockIOException mockIOException0 = new MockIOException("35V0l0vKP");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(mockIOException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(filteringGeneratorDelegate0);
      SQLException sQLException0 = new SQLException("3kUT[odD");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) sQLException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DeserializationContext deserializationContext0 = null;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(372);
      // Undeclared exception!
      try { 
        placeholderForType0.withTypeHandler(class0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findClassAnnotations(class0);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getDeclaredFields(class1);
      SQLException sQLException0 = new SQLException();
      sQLException0.getStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, 1, sQLException0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        sQLTransientException0.initCause(sQLException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLException
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.backticked("ZT9aANB*Y@A92,Jt77");
      ClassUtil.nonNullString("ZT9aANB*Y@A92,Jt77");
      ClassUtil.getDeclaredFields(class0);
      Constructor<Object> constructor0 = null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<Void> class0 = Void.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Throwable throwable0 = null;
      Class<Byte> class0 = Byte.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1570));
      typeBindings0.withUnboundVariable("keyUniverse");
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      javaTypeArray0[6] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[2]);
      ReferenceType.upgradeFrom(collectionLikeType0, javaTypeArray0[0]);
      collectionLikeType0.withTypeHandler(javaTypeArray0[1]);
      // Undeclared exception!
      try { 
        collectionLikeType0.withContentTypeHandler(javaTypeArray0[2]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }
}
