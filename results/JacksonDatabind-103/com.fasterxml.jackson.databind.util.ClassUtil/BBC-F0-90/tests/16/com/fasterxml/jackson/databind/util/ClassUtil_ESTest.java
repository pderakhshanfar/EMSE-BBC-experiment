/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:42:47 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Long> class0 = Long.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      ClassUtil.classOf(object0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
      SerializationFeature serializationFeature0 = SerializationFeature.CLOSE_CLOSEABLE;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(stdSubtypeResolver0);
      ObjectMapper objectMapper4 = objectMapper3.clearProblemHandlers();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      ObjectMapper objectMapper5 = objectMapper4.enable(deserializationFeature0);
      Class<Object> class0 = Object.class;
      objectMapper5.readerFor(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
      Class<Module> class1 = Module.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Object> class0 = Object.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.nonNullString("B[{r$3+=eE=D&EaK");
      ClassUtil.canBeABeanType(class0);
      ClassUtil.findSuperClasses(class0, class0, true);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findConstructor(class2, true);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class0, class3);
      ClassUtil.getClassMethods(class1);
      ClassUtil.findEnumType(class0);
      Class<Void> class4 = Void.class;
      ClassUtil.getDeclaredMethods(class4);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<String>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "N8L;@";
      SQLWarning sQLWarning0 = new SQLWarning("N8L;@", "vE}Nk");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLWarning0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      sQLNonTransientException0.setNextException(sQLWarning0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("vE}Nk", "N8L;@", "vE}Nk", 513);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLNonTransientException0.setStackTrace(stackTraceElementArray0);
      sQLWarning0.initCause(sQLNonTransientException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.emptyIterator();
      TypeFactory.defaultInstance();
      JavaType[] javaTypeArray0 = new JavaType[9];
      JavaType javaType0 = null;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      // Undeclared exception!
      try { 
        ArrayType.construct((JavaType) null, typeBindings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.emptyIterator();
      TypeFactory.defaultInstance();
      JavaType[] javaTypeArray0 = new JavaType[9];
      TypeBindings.emptyBindings();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      // Undeclared exception!
      try { 
        ArrayType.construct((JavaType) null, typeBindings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B@6'X");
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.nonNullString((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, false);
      Class<MapLikeType> class1 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.findSuperTypes(class1, class1, list0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonGenerator jsonGenerator0 = null;
      JsonLocation jsonLocation0 = new JsonLocation(class0, (-1L), (-3080L), (-1657472572), (-1657472572));
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "I9\"K#>iQ$=OU", jsonLocation0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 622);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayType> class0 = ArrayType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      arrayType0.isTypeOrSubTypeOf(class1);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      Class<?> class2 = ClassUtil.rawClass(arrayType1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isProxyType(class2);
      Class<IOException> class3 = IOException.class;
      ClassUtil.findSuperClasses(class0, class3, false);
      ClassUtil.findEnumType(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("a;+I");
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = 'T';
      charArray0[2] = '2';
      charArray0[3] = 't';
      charArray0[4] = 'c';
      charArray0[5] = 'P';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, "JSON");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected FIELD_NAME: JSON
         //  at [Source: (char[])\"*T2tcP\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.nameOf(class0);
      String string0 = "";
      ClassUtil.quotedOr((Object) null, "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLIntegrityConstraintViolationException0.forEach(consumer1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Character> enumMap0 = new EnumMap<AccessPattern, Character>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      Class<DoubleNode> class1 = DoubleNode.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class2, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      String string0 = "U8fBY+%4KB)?R>uVY'9";
      sQLFeatureNotSupportedException0.getStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("U8fBY+%4KB)?R>uVY'9", "U8fBY+%4KB)?R>uVY'9");
      sQLFeatureNotSupportedException0.initCause(sQLSyntaxErrorException0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("U8fBY+%4KB)?R>uVY'9", "U8fBY+%4KB)?R>uVY'9", "U8fBY+%4KB)?R>uVY'9", 1477);
      stackTraceElementArray0[0] = stackTraceElement0;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.getSuppressed();
      sQLFeatureNotSupportedException0.forEach(consumer0);
      ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
      ClassUtil.emptyIterator();
      Float float0 = new Float((double) 1477);
      ClassUtil.isJacksonStdImpl((Object) float0);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.getClassMethods(class3);
      Boolean boolean0 = new Boolean(false);
      ClassUtil.getClassDescription(boolean0);
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class3, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.noneOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      Class<DoubleNode> class0 = DoubleNode.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      boolean boolean0 = true;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader1 = objectReader0.with(jsonNodeFactory0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<Boolean> class2 = Boolean.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      // Undeclared exception!
      try { 
        typeFactory1.constructCollectionLikeType(class2, (JavaType) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier Mock for TypeModifier, hashCode: 579989908 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1325923669) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Module> class0 = Module.class;
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Module>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      ClassUtil.verifyMustOverride(class0, "array", "array");
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.classOf(class1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      ClassUtil.isProxyType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Character> enumMap0 = new EnumMap<AccessPattern, Character>(class1);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Character> enumMap0 = new EnumMap<AccessPattern, Character>(class0);
      EnumMap<AccessPattern, Character> enumMap1 = new EnumMap<AccessPattern, Character>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Character character0 = new Character('-');
      enumMap1.put(accessPattern0, character0);
      ClassUtil.findEnumType(enumMap1);
      ClassUtil.findSuperClasses(class0, class0, true);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Character> enumMap0 = new EnumMap<AccessPattern, Character>(class0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      Class<Error> class2 = Error.class;
      Class<AccessPattern> class3 = AccessPattern.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) referenceType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class3, javaTypeArray0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class2, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(referenceType0, collectionLikeType0, javaTypeArray0[1]);
      MapLikeType mapLikeType1 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) mapLikeType0, javaTypeArray0[1]);
      MapLikeType mapLikeType2 = mapLikeType1.withStaticTyping();
      MapLikeType mapLikeType3 = mapLikeType2.withTypeHandler(typeFactory0);
      ClassUtil.rawClass(mapLikeType3);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Float> class0 = Float.class;
      Class<Double> class1 = Double.class;
      boolean boolean0 = false;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " has no default (no arg) constructor");
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class3);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, (String) null, (Throwable) null);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.nameOf(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findConstructor(class1, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class3);
      ClassUtil.isNonStaticInnerClass(class1);
      boolean boolean0 = new Boolean("`double`");
      ClassUtil.findSuperTypes(class2, class1);
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.findConstructor(class4, true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isConcrete(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("fyQ Q/w7");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-2459), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((-676));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class1, class0);
      MapType mapType1 = mapType0.withStaticTyping();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException(mapType1, "OP4hkcIkt4@'", "fyQ Q/w7");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'OP4hkcIkt4@'' as a subtype of [map type; class java.util.HashMap, [map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]] -> [simple type, class java.lang.Long]]: fyQ Q/w7
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Module> class0 = Module.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      ClassUtil.canBeABeanType(class0);
      Byte byte0 = new Byte((byte)77);
      ClassUtil.nonNull((Object) null, (Object) byte0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.nameOf(class1);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.classOf((Object) null);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.getClassMethods(class3);
      Class<Float> class4 = Float.class;
      ClassUtil.isProxyType(class4);
      ClassUtil.backticked("`java.lang.annotation.Annotation`");
      Class<JsonMappingException> class5 = JsonMappingException.class;
      ClassUtil.isProxyType(class5);
      ClassUtil.backticked("|oz^(sqa(");
      Class<MapType> class6 = MapType.class;
      Class<PlaceholderForType> class7 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes(class6, class7, false);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("3ug~xQR~r", "3ug~xQR~r");
      Character character0 = Character.valueOf('F');
      Class<Character> class0 = Character.class;
      ClassUtil.hasClass(character0, class0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{Ut=OBE{ar ");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaredMethods(class0);
      JavaType javaType0 = null;
      ClassUtil.rawClass((JavaType) null);
      boolean boolean0 = true;
      ClassUtil.findSuperClasses((Class<?>) null, class0, true);
      Class<Double> class1 = Double.class;
      ClassUtil.getClassMethods(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getDeclaringClass(class3);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{Ut=OBE{ar ");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.findSuperClasses((Class<?>) null, class0, false);
      Class<Double> class1 = Double.class;
      ClassUtil.getClassMethods(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getDeclaringClass(class3);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Integer> class0 = Integer.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      objectMapper0.readerFor(class1);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findSuperClasses(class0, class0, true);
      Class<Error> class1 = Error.class;
      Error error0 = ClassUtil.createInstance(class1, false);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class2);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) error0, "array");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.hasClass(class0, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("java.lang.Character");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Ln#4D", "java.lang.Character", sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findClassAnnotations(class0);
      MockIOException mockIOException0 = new MockIOException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.getStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLRecoverableException0);
      sQLSyntaxErrorException0.getSuppressed();
      sQLRecoverableException0.addSuppressed(mockIOException0);
      sQLSyntaxErrorException0.printStackTrace();
      mockIOException0.addSuppressed(sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockIOException0);
      sQLFeatureNotSupportedException0.spliterator();
      mockIOException0.initCause(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.lang.annotatio", "U%F)", mockIOException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("U%F)", "7hG+]z!M7_;", 2661, sQLTransactionRollbackException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "java.lang.annotatio");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
      // Undeclared exception!
      try { 
        beanSerializerBuilder0.getClassInfo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanSerializerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      mockRuntimeException0.toString();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockRuntimeException0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.nonNullString("\"&Yi)E");
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      mockRuntimeException0.toString();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Integer> class0 = Integer.class;
      objectMapper0.readerFor(class0);
      JavaType javaType0 = TypeFactory.unknownType();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3?&+#`@+D](\"uS4/a");
      MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      mockRuntimeException0.toString();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Integer> class0 = Integer.class;
      objectMapper0.readerFor(class0);
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      Double double0 = new Double(1043.46);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getOuterClass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isJacksonStdImpl(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("{;V+T", class1, "?rzbKU3Mm");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapLikeType` from String \"{;V+T\": ?rzbKU3Mm
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null);
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getConstructors(class1);
      Class<IOException> class2 = IOException.class;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class3, false);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.getClassMethods(class4);
      ClassUtil.isJacksonStdImpl((Object) class4);
      Class<MapType> class5 = MapType.class;
      ClassUtil.getDeclaredFields(class5);
      Class<AccessPattern> class6 = AccessPattern.class;
      ClassUtil.findSuperTypes(class4, class6, list0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1652333975));
      Class<Long> class1 = Long.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std1 = new CoreXMLDeserializers.Std(class1, (-1652333975));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std1.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.nonNullString("v20%aj`6?bkR.wjB48");
      MockThrowable mockThrowable0 = new MockThrowable("Sub-class %s (of class %s) must override method '%s'");
      MockError mockError0 = new MockError(mockThrowable0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      MockError mockError0 = new MockError();
      mockError0.toString();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "QXu=Qb7VLL.e=(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      mockRuntimeException0.toString();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "org.evosuite.runtime.mock.java.lang.MockThrowable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("3ug~xQR~r", "3ug~xQR~r");
      Class<IOException> class0 = IOException.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.String");
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isBogusClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getEnclosingClass(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
      ReferenceType referenceType2 = referenceType1.withValueHandler(javaTypeArray0[0]);
      Long long0 = new Long(0L);
      ReferenceType referenceType3 = referenceType2.withContentValueHandler(long0);
      ReferenceType referenceType4 = referenceType3.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) referenceType4, (Class<?>) null, true);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.hasClass(referenceType4, class1);
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.isConcrete(class2);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      Class<Character> class0 = Character.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findProperty((PropertyName) null);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("java.io.IOException");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      HashSet<AccessibleObject> hashSet0 = new HashSet<AccessibleObject>();
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet1 = EnumSet.of(accessPattern1);
      enumSet1.retainAll(hashSet0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-78);
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      Class<Error> class0 = Error.class;
      objectReader0.forType(class0);
      File file0 = MockFile.createTempFile("2.2250738585072012e-308", "2.2250738585072012e-308");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.nullOrToString(iterator0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.getGenericInterfaces(class2);
      Class<SimpleType> class3 = SimpleType.class;
      boolean boolean0 = true;
      MockError mockError0 = new MockError("");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, " h3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      ClassUtil.getClassMethods(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "V-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Long> class1 = Long.TYPE;
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.findRawSuperTypes(class1, class0, true);
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      Boolean boolean0 = new Boolean(false);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class0, true);
      TypeBindings.create(class0, list0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4952);
      ClassUtil.nullOrToString(boolean0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "java.lang.Boolean@0000000004");
      StringBuilder stringBuilder1 = placeholderForType0.getErasedSignature(stringBuilder0);
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.getErasedSignature(stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("a-RJm{>`cO:7*+g", "java.lang.annotatio", (-1513967666));
      ClassUtil.throwIfRTE(sQLTransactionRollbackException0);
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[4]);
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(simpleType0, javaTypeArray0[1]);
      Character character0 = Character.valueOf('M');
      ReferenceType referenceType2 = referenceType1.withTypeHandler(character0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1041);
      referenceType2.withValueHandler(placeholderForType0);
      Long long0 = new Long(0L);
      ReferenceType referenceType3 = ReferenceType.upgradeFrom(javaTypeArray0[4], javaTypeArray0[4]);
      referenceType3.withContentValueHandler(referenceType0);
      referenceType0.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class0, true);
      ClassUtil.getClassDescription(javaTypeArray0[0]);
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil.getOuterClass(class0);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.getConstructors(class2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.getGenericSuperclass(class3);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1744094291), objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(65534, 3);
      MockIOException mockIOException0 = new MockIOException("d3");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.lang.Integer", mockIOException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) "java.lang.Integer", "java.lang.Integer");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.Integer (through reference chain: java.lang.String[\"java.lang.Integer\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      MockError mockError0 = new MockError("net.sf.cglib.proxy.java.lang.Object");
      mockError0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassUtil.backticked(";,WcZ#:7A'jgF@yL},");
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.String");
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isBogusClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getEnclosingClass(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
      Character character0 = Character.valueOf('N');
      referenceType1.withValueHandler(character0);
      Long long0 = new Long(0L);
      Class<ArrayType> class2 = ArrayType.class;
      simpleType0.isTypeOrSubTypeOf(class2);
      referenceType0.withContentValueHandler(character0);
      referenceType1.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) null, false);
      ClassUtil.getClassDescription(class0);
      Class<Object> class3 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      ClassUtil.hasClass(resolvedRecursiveType0, class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Vf9zA_M;{('6r\fj");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ClassUtil.emptyIterator();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.isProxyType(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.isLocalType(class2, true);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.getClassMethods(class3);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("OBJECT_AND_NON_CONCRETE", "OBJECT_AND_NON_CONCRETE", (-1903));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("OBJECT_AND_NON_CONCRETE", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getGenericSuperclass(class1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "=we(Vr", "=we(Vr");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '=we(Vr' as a subtype of null: =we(Vr
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 15);
      coreXMLDeserializers_Std0.getEmptyAccessPattern();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("RO(%`", "array");
      MockIOException mockIOException0 = new MockIOException(sQLTransactionRollbackException0);
      ClassUtil.findEnumType(class0);
      Class<Object> class2 = Object.class;
      Class<ClientInfoStatus> class3 = ClientInfoStatus.class;
      ClassUtil.findSuperTypes(class3, class2, list0);
      Class<Short> class4 = Short.class;
      ClassUtil.isJacksonStdImpl(class4);
      Class<AccessibleObject> class5 = AccessibleObject.class;
      ClassUtil.isLocalType(class5, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      boolean boolean0 = false;
      ClassUtil.findSuperClasses(class0, class1, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      mockIOException0.getCause();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      ClassUtil.findSuperClasses(class0, class0, true);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findClassAnnotations(class1);
      Class<Long> class2 = Long.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, (-4430));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findClassAnnotations(class1);
      Class<String> class2 = String.class;
      Class<Character> class3 = Character.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
      ClassUtil.nonNullString("T}DxaY2wI'.06D");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackso");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, sQLRecoverableException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "com.fasterxml.jackso", mockRuntimeException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (int[]) null, sQLRecoverableException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)41;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 838, (ObjectCodec) null, (OutputStream) null, byteArray0, (byte)41, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(9);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.classOf((Object) null);
      HashMap<AccessPattern, RuntimeException> hashMap0 = new HashMap<AccessPattern, RuntimeException>();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Object> class1 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.hasClass(class1, class1);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isConcrete(class0);
      ClassUtil.nameOf(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.", "`java.lang.reflect.AccessibleObject`");
      sQLInvalidAuthorizationSpecException0.setNextException(sQLTransientException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLRecoverableException0);
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
      Class<SettableBeanProperty> class2 = SettableBeanProperty.class;
      ClassUtil.findClassAnnotations(class2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.nameOf(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findConstructor(class1, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class3);
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Object> class4 = Object.class;
      ClassUtil.isObjectOrPrimitive(class4);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.backticked("h");
      boolean boolean0 = new Boolean(false);
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isConcrete(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "G_~=di6c<TW>4");
      sQLNonTransientConnectionException0.getStackTrace();
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
      TypeFactory.defaultInstance();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      Double double0 = new Double((-3849.797146701701));
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      System.setCurrentTimeMillis((-1465L));
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaringClass(class0);
      MockIOException mockIOException0 = new MockIOException("Y>nhG\"[tx");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Y>nhG\"[tx", mockIOException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.nameOf(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.isBogusClass(class1);
      Class<Error> class2 = Error.class;
      ClassUtil.getGenericInterfaces(class2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[2'\"Lb |%26H,atDZ`\"");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(", problem: ", "pYSdCw7.<<QC`-r");
      sQLTransientConnectionException0.setNextException(sQLNonTransientException0);
      ClassUtil.throwIfIOE(sQLTransientConnectionException0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLTransientConnectionException0);
      Class<?> class0 = ClassUtil.classOf(sQLNonTransientException0);
      sQLNonTransientException0.getLocalizedMessage();
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.isJacksonStdImpl((Object) throwable0);
      ClassUtil.getRootCause(sQLTransientConnectionException0);
      ClassUtil.classOf(sQLNonTransientException0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isProxyType(class0);
      throwable0.getStackTrace();
      Class<String> class3 = String.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      ClassUtil.quotedOr("[2'\"Lb |%26H,atDZ`\"", "");
      Throwable throwable1 = ClassUtil.getRootCause(sQLTransientConnectionException0);
      Throwable throwable2 = ClassUtil.throwIfRTE(throwable1);
      Class<IOException> class4 = IOException.class;
      ClassUtil.getClassMethods(class4);
      ClassUtil.throwIfRTE(throwable2);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable1, "=v(qGWJ\rpF2+s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // =v(qGWJ\rpF2+s
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Character> class0 = Character.class;
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      ClassUtil.backticked((String) null);
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(": (");
      Class<String> class0 = String.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.backticked((String) null);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperClasses(class1, class1, false);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.backticked("value looks like quoted Enum index, but `MapperFeature.ALLOW_COERCION_OF_SCALARS` prevents use");
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.createInstance(class0, false);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn("=_JxqZ{7V6M").when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      ClassUtil.backticked("=_JxqZ{7V6M");
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.getPackageName(class2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ClassUtil.nullOrToString((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.nullOrToString(iterator0);
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.isLocalType(class0, false);
      HashMap<AccessPattern, RuntimeException> hashMap0 = new HashMap<AccessPattern, RuntimeException>();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      constructor0.getParameterCount();
      ClassUtil.getGenericInterfaces(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.isConcrete((Member) constructor0);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findClassAnnotations(class3);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(1628, false, true, (-1794), (-1746375819));
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("serialVersionUID", (Map<String, ClientInfoStatus>) null, sQLIntegrityConstraintViolationException0);
      MockError mockError0 = new MockError(dataTruncation0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("serialVersionUID");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLNonTransientConnectionException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) byteArrayBuilder0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) byteArrayBuilder0, (Exception) dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.DataTruncation: Data truncation
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<String> class1 = String.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.isJacksonStdImpl((Object) class1);
      ClassUtil.isLocalType(class0, true);
      HashMap<AccessPattern, RuntimeException> hashMap0 = new HashMap<AccessPattern, RuntimeException>();
      ClassUtil.isJacksonStdImpl(class0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isProxyType(class0);
      Boolean boolean0 = new Boolean(false);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.hasClass((Object) null, class1);
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperClasses(class2, class1, false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<?> class0 = ClassUtil.classOf(classUtil0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassUtil.classNameOf((Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil classUtil0 = new ClassUtil();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isProxyType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getClassMethods(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ClassUtil.findClassAnnotations(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.primitiveType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.canBeABeanType(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Long long0 = new Long(0L);
      ClassUtil.isJacksonStdImpl((Object) long0);
      ClassUtil.getClassDescription(long0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.nullOrToString(iterator0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      POJOPropertiesCollector pOJOPropertiesCollector1 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector1).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector1).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector1).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector1).getType();
      BasicBeanDescription basicBeanDescription1 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector1);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription1);
      beanSerializerBuilder0.getClassInfo();
      POJOPropertiesCollector pOJOPropertiesCollector2 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector2).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector2).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector2).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector2).getType();
      BasicBeanDescription.forSerialization(pOJOPropertiesCollector2);
      basicBeanDescription1.findPOJOBuilder();
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.canBeABeanType(class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.getGenericInterfaces(class3);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.nullOrToString(iterator0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getDeclaringClass(class1);
      int[] intArray0 = new int[8];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class2);
      Double double0 = new Double(0.0);
      CollectionType collectionType1 = collectionType0.withTypeHandler(double0);
      collectionType1.withValueHandler(typeFactory0);
      collectionType0.withContentTypeHandler(collectionType1);
      ClassUtil.rawClass(collectionType0);
      ClassUtil.nameOf(class0);
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.nullOrToString(iterator0);
      ClassUtil.nonNullString((String) null);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getPackageName(class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getStackTrace();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      collectionType0.withContentTypeHandler(class0);
      ClassUtil.rawClass(collectionType0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<Long> class1 = Long.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Character> class2 = Character.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = true;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
      ClassUtil.classNameOf(class0);
      ClassUtil.classOf(list0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-128);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf("6 U.");
      Class<MapType> class1 = MapType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.getClassDescription((Object) null);
      Class<Short> class2 = Short.class;
      ClassUtil.findClassAnnotations(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      DataTruncation dataTruncation0 = new DataTruncation((-1794), false, false, (-1794), 5546);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.hibernate.proxy.", (Map<String, ClientInfoStatus>) null, dataTruncation0);
      MockError mockError0 = new MockError(sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(mockError0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException: org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLClientInfoException: org.hibernate.proxy.
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClassUtil.nonNullString("keyType");
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getPackageName(class0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getStackTrace();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      CollectionLikeType collectionLikeType0 = collectionType0.withContentTypeHandler(typeFactory0);
      ClassUtil.rawClass(collectionLikeType0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[2'\"Lb |%26H,atDZ`\"");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(", problem: ", "pYSdCw7.<<QC`-r");
      sQLTransientConnectionException0.setNextException(sQLNonTransientException0);
      ClassUtil.throwIfIOE(sQLTransientConnectionException0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLTransientConnectionException0);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.classOf(sQLNonTransientException0);
      sQLNonTransientException0.getLocalizedMessage();
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.isJacksonStdImpl((Object) throwable0);
      ClassUtil.getRootCause(sQLTransientConnectionException0);
      ClassUtil.classOf(sQLNonTransientException0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isCollectionMapOrArray(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getDeclaringClass();
      ClassUtil.getConstructors(class2);
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.hasEnclosingMethod(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser(", copied ");
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "s]_;7{");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Failed to find default constructor of class ");
      mockRuntimeException0.initCause(jsonMappingException0);
      mockRuntimeException0.toString();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.hasClass(jsonToken0, class1);
      ClassUtil.getClassDescription(jsonFactory1);
      Boolean boolean0 = Boolean.TRUE;
      ClassUtil.classOf(boolean0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<MapType> class3 = MapType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "JSON", simpleType0);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.findSuperClasses(class0, class0, false);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getConstructors(class1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("ZERO_LENGTH_ENUM_ARRAY", "ZERO_LENGTH_ENUM_ARRAY");
      ClassUtil.getClassDescription(class0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.findClassAnnotations(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil classUtil0 = new ClassUtil();
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      Class<Float> class2 = Float.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.primitiveType(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("NULL", "com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer", (-460));
      sQLRecoverableException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLRecoverableException0);
      Class<Double> class3 = Double.class;
      ClassUtil.getDeclaredMethods(class3);
      Class<Byte> class4 = Byte.class;
      Class<AccessibleObject> class5 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class4, class5, true);
      ClassUtil.getClassDescription("com.fasterxml.jackso");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis(1L);
      Throwable throwable0 = null;
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.nullOrToString(iterator0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getDeclaringClass(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.canBeABeanType(class3);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.nullOrToString(iterator0);
      Class<SimpleType> class0 = SimpleType.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getDeclaringClass(class2);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class1, class3);
      Class<Double> class4 = Double.class;
      ClassUtil.isConcrete(class4);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      InvalidDefinitionException invalidDefinitionException0 = (InvalidDefinitionException)defaultDeserializationContext_Impl0.instantiationException((Class<?>) null, (String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(invalidDefinitionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException0, "bu{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bu{
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      long[] longArray0 = new long[3];
      longArray0[0] = 252L;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("HPq^(_voIg", "HPq^(_voIg", 1024);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLNonTransientException0);
      sQLTimeoutException0.getLocalizedMessage();
      sQLNonTransientException0.initCause(sQLTimeoutException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("HPq^(_voIg", (String) null, 2, longArray0, sQLNonTransientException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Long> class0 = Long.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.hasClass(class1, class2);
      ClassUtil.isNonStaticInnerClass(class1);
      System.setCurrentTimeMillis(0L);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      Class<String> class1 = String.class;
      Class<String> class2 = String.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.isJacksonStdImpl((Object) iOException0);
      Class<Integer> class3 = Integer.class;
      ClassUtil.findSuperTypes(class1, class3);
      ClassUtil.isConcrete(class3);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      double double0 = 598.47289826743;
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      MathContext mathContext0 = null;
      try {
        mathContext0 = new MathContext((-1746375819), roundingMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Digits < 0
         //
         verifyException("java.math.MathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.nullOrToString(iterator0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getDeclaringClass(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<ArrayType> class3 = ArrayType.class;
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotatedReceiverType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<?> class2 = classUtil_Ctor0.getDeclaringClass();
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.getPackageName(class1);
      Class<Character> class3 = Character.class;
      ClassUtil.primitiveType(class3);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class4);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getGenericInterfaces(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("non-static member class", "`java.lang.Object`", (-1));
      Throwable throwable0 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException((String) null, "6hW(,+V'P$8", (Throwable) null);
      sQLTransactionRollbackException1.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor0.getDeclaringClass();
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.getConstructors(class2);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class2);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      Class<Boolean> class3 = Boolean.class;
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class3, (JavaType) mapLikeType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Boolean with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn("=_JxqZ{7V6M").when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      ClassUtil.getClassDescription((Object) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.getPackageName(class0);
      ClassUtil.primitiveType(class0);
      Class<Float> class3 = Float.class;
      ClassUtil.isLocalType(class3, false);
      SQLDataException sQLDataException0 = new SQLDataException();
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "ZERO_LENGTH_ENUM_ARRAY");
      JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) "ZERO_LENGTH_ENUM_ARRAY", 2158);
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaringClass();
      Class<Character> class3 = Character.class;
      ClassUtil.getConstructors(class3);
      ClassUtil.getDeclaredMethods(class2);
      Class<Double> class4 = Double.class;
      ClassUtil.primitiveType(class4);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getDeclaredMethods(class3);
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn("=_JxqZ{7V6M").when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      ClassUtil.getClassDescription((Object) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.primitiveType(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.isLocalType(class3, true);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "java.lang", 3, sQLDataException0);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isLocalType(class0, false);
      HashMap<AccessPattern, RuntimeException> hashMap0 = new HashMap<AccessPattern, RuntimeException>();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("HKo?yz{y^e", "Infinite recursion (StackOverflowError)");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(" A5j", " A5j", (-2022), sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, 1536, sQLFeatureNotSupportedException0);
      MockError mockError0 = new MockError((String) null, sQLNonTransientException0);
      ClassUtil.classNameOf(mockError0);
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory(beanSerializerFactory0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper2, mockPrintStream0);
      int[] intArray0 = new int[2];
      intArray0[0] = 55296;
      intArray0[1] = 55296;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "JSON", 56319, intArray0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getDeclaredMethods(class3);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(8);
      ClassUtil.rawClass(placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotatedReceiverType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      Class<Long> class2 = Long.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1891));
      // Undeclared exception!
      try { 
        placeholderForType0.withContentTypeHandler(list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<Integer> class3 = Integer.TYPE;
      ClassUtil.getDeclaredMethods(class3);
      ClassUtil.findEnumType(class2);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.getPackageName(class4);
      Class<Double> class5 = Double.class;
      ClassUtil.primitiveType(class5);
      Class<Short> class6 = Short.class;
      ClassUtil.isLocalType(class6, false);
      Class<Integer> class7 = Integer.class;
      ClassUtil.findConstructor(class7, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.findSuperTypes(class0, class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.emptyIterator();
      String string0 = "Ueh_>)Tf/JQB";
      ClassUtil.backticked("Ueh_>)Tf/JQB");
      Class<Float> class3 = Float.TYPE;
      ClassUtil.primitiveType(class3);
      Class<Short> class4 = Short.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.findClassAnnotations(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil classUtil0 = new ClassUtil();
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<Character> class2 = Character.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.primitiveType(class1);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "ZERO_LENGTH_ENUM_ARRAY");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) "ZERO_LENGTH_ENUM_ARRAY", 2158);
      jsonMappingException0.addSuppressed(sQLTransientException0);
      ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
      ClassUtil.throwIfError(jsonMappingException0);
      ClassUtil.throwIfRTE(jsonMappingException0);
      Class<Float> class0 = Float.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findConstructor(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotatedReceiverType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)61;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<?> class2 = classUtil_Ctor0.getDeclaringClass();
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.getPackageName(class1);
      Class<Character> class3 = Character.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.isLocalType(class3, false);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.findSuperClasses(class0, class0, false);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getConstructors(class1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("ZERO_LENGTH_ENUM_ARRAY", "ZERO_LENGTH_ENUM_ARRAY");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0, "net.sf.cglib.proxy.java.lang.Error");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.java.lang.Error
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.classNameOf(class0);
      Class<?> class1 = ClassUtil.classOf(list0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("{`LWS$", "{`LWS$", 2698);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("{`LWS$", "{`LWS$", sQLTransactionRollbackException0);
      sQLTransactionRollbackException1.fillInStackTrace();
      ClassUtil.getRootCause(sQLTransactionRollbackException1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.util.Collections$EmptyList is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1877;
      intArray0[1] = 0;
      intArray0[2] = (-411);
      intArray0[3] = 2349;
      intArray0[4] = (-2189);
      intArray0[5] = 828;
      intArray0[6] = (-1857);
      intArray0[7] = 0;
      intArray0[8] = 0;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getGenericSuperclass(class1);
      Class<Integer> class2 = Integer.class;
      Class<Long> class3 = Long.class;
      ClassUtil.getDeclaredMethods(class3);
      ClassUtil.findEnumType(class2);
      Class<Integer> class4 = Integer.class;
      Class<Short> class5 = Short.class;
      ClassUtil.findSuperClasses(class4, class5, true);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(8);
      Character character0 = new Character(')');
      // Undeclared exception!
      try { 
        placeholderForType0.withContentTypeHandler(character0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      Class<String> class1 = String.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.isJacksonStdImpl((Object) class1);
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.isConcrete(class0);
      ClassUtil.throwIfError(iOException0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      Class<Double> class2 = Double.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionType0, collectionType1);
      Long long0 = new Long((-1L));
      Long long1 = new Long((-1L));
      Long long2 = Long.getLong("array", long1);
      Long long3 = new Long((-1L));
      ClassUtil.nonNull(long2, long3);
      referenceType0.withTypeHandler(javaTypeArray0[0]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class3 = HashMap.class;
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      Class<CollectionLikeType> class5 = CollectionLikeType.class;
      MapType mapType0 = typeFactory0.constructMapType(class3, class4, class5);
      MapType mapType1 = mapType0.withStaticTyping();
      ReferenceType referenceType1 = referenceType0.withTypeHandler(long1);
      MapType mapType2 = mapType1.withContentValueHandler(referenceType1);
      MapType mapType3 = mapType2.withKeyValueHandler(class1);
      ClassUtil.quotedOr(mapType3, (String) null);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("enum");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "org.hibernate.proxy.java.lang.annotation.Annotation");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaringClass(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("size", "com.fasterxml.jackson.core.json.ReaderBasedJsonParser");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("lrzBlo", "com.fasterxml.jackson.core.json.ReaderBasedJsonParser", (-35), sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning("_=&F9~AqLRmI_)v|I/h", (String) null, sQLInvalidAuthorizationSpecException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("size");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "ZERO_LENGTH_ENUM_ARRAY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sM<M2iu-;#y8;xf2");
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findEnumType(class0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1877;
      intArray0[1] = 0;
      intArray0[2] = (-411);
      intArray0[3] = 2349;
      intArray0[4] = (-2189);
      intArray0[5] = 828;
      intArray0[6] = (-1857);
      intArray0[7] = 0;
      intArray0[8] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(";v-BVKT]='*Q#WJ'Xer", "com.fasterxml.jackson.core.io.SerializedString", intArray0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "com.fasterxml.jackson.core.io.SerializedString");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.core.io.SerializedString
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.nullOrToString(iterator0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getDeclaringClass(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.canBeABeanType(class3);
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.hasClass(class3, class4);
      ClassUtil.getGenericInterfaces(class3);
      Class<SimpleType> class5 = SimpleType.class;
      boolean boolean0 = true;
      ClassUtil.findConstructor(class5, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Character character0 = Character.valueOf('E');
      ClassUtil.isJacksonStdImpl((Object) character0);
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getOuterClass(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findConstructor(class1, false);
      Class<CollectionType> class2 = CollectionType.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(73);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) referenceType0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) referenceType0;
      javaTypeArray0[1] = (JavaType) referenceType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      Class<Boolean> class3 = Boolean.class;
      Class<Long> class4 = Long.class;
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      TypeBindings typeBindings1 = TypeBindings.create(class4, list0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings1);
      Class<ArrayType> class5 = ArrayType.class;
      TypeBindings.createIfNeeded(class5, javaTypeArray0);
      JavaType javaType0 = resolvedRecursiveType0.withContentType(referenceType0);
      MapType mapType0 = MapType.construct((Class<?>) class2, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0, javaType0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, mapType0, "entrySet");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.type.MapType (of class com.fasterxml.jackson.databind.type.CollectionType) must override method 'entrySet'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      short short0 = (short)1536;
      Short short1 = new Short((short)1536);
      ClassUtil.nullOrToString(short1);
      String string0 = "";
      int int0 = 0;
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaringClass(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      Class<Annotation> class3 = Annotation.class;
      constructor0.isAnnotationPresent(class3);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaringClass();
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      Class<String> class1 = String.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.isJacksonStdImpl((Object) class1);
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.isConcrete(class0);
      String string0 = "missing type id property '%s'";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) iOException0, "missing type id property '%s'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // missing type id property '%s'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "elementType");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("}RO (", "elementType", sQLDataException0);
      SQLDataException sQLDataException1 = new SQLDataException("elementType", "elementType", (-286), sQLIntegrityConstraintViolationException0);
      sQLDataException1.printStackTrace();
      ClassUtil.getRootCause(sQLDataException1);
      ClassUtil.quotedOr(sQLDataException0, "was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.nameOf(class1);
      ClassUtil.nonNullString("entrySet");
      MockException mockException0 = new MockException();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("xE6p");
      mockPrintWriter0.write("Class ", 2, 2);
      mockException0.printStackTrace((PrintWriter) mockPrintWriter0);
      mockException0.getStackTrace();
      mockException0.toString();
      ClassUtil.getRootCause(mockException0);
      ClassUtil.getClassMethods(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ClassUtil.nonNullString("keyType");
      SQLTransientException sQLTransientException0 = new SQLTransientException("A/^n*b", "keyType");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Float float0 = new Float(0.0);
      Class<Float> class0 = Float.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class0, "A/^n*b");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) jsonMappingException0, 2158);
      jsonMappingException1.addSuppressed(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Float` from number 0.0: A/^n*b
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      Class<Module> class0 = Module.class;
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.String");
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isBogusClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getEnclosingClass(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
      ReferenceType referenceType2 = referenceType1.withValueHandler(javaTypeArray0[0]);
      Long long0 = new Long(0L);
      ReferenceType referenceType3 = referenceType2.withContentValueHandler(long0);
      ReferenceType referenceType4 = referenceType3.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) referenceType4, (Class<?>) null, true);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.hasClass(referenceType4, class1);
      ClassUtil.getOuterClass(class0);
      Class<Character> class2 = Character.class;
      ClassUtil.getConstructors(class2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.String");
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isBogusClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getEnclosingClass(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(class1);
      SimpleType simpleType1 = simpleType0.withValueHandler((Object) null);
      ReferenceType referenceType2 = ReferenceType.upgradeFrom(simpleType1, referenceType1);
      Long long0 = new Long(215L);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("net.sf.cglib.proxy.java.lang.String", "org.hibernate.proxy.java.lang.Integer", (-2762));
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Failed to instantiate class ", sQLIntegrityConstraintViolationException0);
      ReferenceType referenceType3 = referenceType1.withContentValueHandler(mockRuntimeException0);
      referenceType0.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) referenceType3, (Class<?>) class0, true);
      ClassUtil.getClassDescription(referenceType2);
      ClassUtil.hasClass((Object) null, class1);
      ClassUtil.getOuterClass(class0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getConstructors(class2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ClassUtil.throwIfError(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getOuterClass(class0);
      ClassUtil.primitiveType(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("NULL", "com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer", (-460));
      sQLRecoverableException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLRecoverableException0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      Class<Float> class2 = Float.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionType1, collectionType0);
      Long long0 = new Long((-1L));
      Long long1 = Long.getLong("array", long0);
      Long long2 = ClassUtil.nonNull(long1, long0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(long2);
      ClassUtil.quotedOr(referenceType1, "NULL");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getOuterClass(class0);
      ClassUtil.primitiveType(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\"=`b51dn7_b$ag", "\"=`b51dn7_b$ag", 1);
      sQLRecoverableException0.getLocalizedMessage();
      ClassUtil.throwIfError(iOException0);
      ClassUtil.getDeclaredMethods(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findEnumType(class1);
      Class<Byte> class2 = Byte.class;
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperClasses(class3, class2, false);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.throwIfError(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SQLException sQLException0 = new SQLException("com.fasterxml.jackson.databind.node.BigIntegerNode", "com.fasterxml.jackson.databind.node.BigIntegerNode", (-32), (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) null, (-32));
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.node.BigIntegerNode (through reference chain: UNKNOWN[?])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      Boolean boolean0 = new Boolean(false);
      Class<Annotation> class1 = Annotation.class;
      Class<Void> class2 = Void.class;
      ClassUtil.hasClass((Object) null, class2);
      ClassUtil.findSuperClasses(class2, class1, true);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class3);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLException sQLException0 = new SQLException(" has no default (no arg) constructor", " has no default (no arg) constructor");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) " has no default (no arg) constructor", "]m,hp{T6`");
      jsonMappingException0.getCause();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(jsonMappingException0, "]m,hp{T6`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      ClassUtil.getClassDescription((Object) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      deserializerFactoryConfig0.deserializers();
      Class<Short> class1 = Short.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("array", class1, "vc${I");
      SQLTransientException sQLTransientException0 = new SQLTransientException("vc${I", "array");
      jsonMappingException0.addSuppressed(sQLTransientException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Short` from String \"array\": vc${I
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.findClassAnnotations(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getOuterClass(class0);
      ClassUtil.primitiveType(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("NULL", "com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer", (-460));
      sQLRecoverableException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLRecoverableException0);
      Class<Double> class1 = Double.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findEnumType(class2);
      Class<Byte> class3 = Byte.class;
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class3, class4, true);
      ClassUtil.getClassDescription("com.fasterxml.jackso");
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.hasEnclosingMethod(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("lrzBlo");
      SQLTransientException sQLTransientException0 = new SQLTransientException("lrzBlo", "lrzBlo", (-35), sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning("size", "com.fasterxml.jackson.core.json.ReaderBasedJsonParser", sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0, "elementType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // elementType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<String> class1 = String.class;
      boolean boolean0 = false;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotatedReceiverType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<?> class2 = classUtil_Ctor0.getDeclaringClass();
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.getPackageName(class1);
      Class<SimpleType> class3 = SimpleType.class;
      try { 
        ClassUtil.createInstance(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.findSuperTypes(class0, class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.emptyIterator();
      String string0 = "Ueh_>)Tf/J1QB";
      ClassUtil.backticked("Ueh_>)Tf/J1QB");
      Class<Float> class3 = Float.class;
      ClassUtil.primitiveType(class3);
      Class<Short> class4 = Short.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.hasEnclosingMethod(class0);
      Class<Annotation> class1 = Annotation.class;
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      constructor0.isAnnotationPresent(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParamCount();
      Class<?> class3 = classUtil_Ctor0.getDeclaringClass();
      Class<Character> class4 = Character.class;
      ClassUtil.getConstructors(class4);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor1._ctor, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class2);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      // Undeclared exception!
      try { 
        TypeBindings.create(class3, (JavaType) mapLikeType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.String with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.primitiveType(class0);
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotatedReceiverType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<?> class2 = classUtil_Ctor0.getDeclaringClass();
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.getPackageName(class1);
      Class<Character> class3 = Character.class;
      ClassUtil.primitiveType(class3);
      String string0 = ClassUtil.isLocalType(class3, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isLocalType(class0, true);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<MapLikeType>[] classArray0 = (Class<MapLikeType>[]) Array.newInstance(Class.class, 5);
      Class<MapLikeType> class1 = MapLikeType.class;
      classArray0[0] = class1;
      basicBeanDescription0.findPOJOBuilder();
      Class<MapLikeType> class2 = MapLikeType.class;
      classArray0[1] = class2;
      Class<MapLikeType> class3 = MapLikeType.class;
      classArray0[2] = class3;
      Class<MapLikeType> class4 = MapLikeType.class;
      classArray0[3] = class4;
      Class<MapLikeType> class5 = MapLikeType.class;
      classArray0[4] = class5;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "J5.+?I<=ZbH1&QY");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, sQLDataException0);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLNonTransientException0);
      assertNull(throwable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getOuterClass(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "[array type, component type: ", 96);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ClassUtil.nonNullString("Cannot figure out type for EnumMap (odd JDK platform?)");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.nameOf(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      int[] intArray0 = new int[0];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientConnectionException0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getDeclaredMethods(class3);
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class2);
      Class<Integer> class5 = Integer.class;
      ClassUtil.findSuperClasses(class4, class5, true);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(8);
      // Undeclared exception!
      try { 
        placeholderForType0.withContentTypeHandler((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isConcrete(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getOuterClass(class0);
      String string0 = ClassUtil.backticked(";,WcZ#:7A'jgF@yL},");
      assertEquals("`;,WcZ#:7A'jgF@yL},`", string0);
  }
}
