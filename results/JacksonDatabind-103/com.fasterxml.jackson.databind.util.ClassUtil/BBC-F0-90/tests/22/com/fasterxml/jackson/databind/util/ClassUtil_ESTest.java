/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 16:22:39 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.defaultValue(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getPackageName(class2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<String>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.primitiveType(class0);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Long> class0 = Long.class;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", "u Qx,*N;", 8);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      SimpleType.constructUnsafe(class0);
      Class<Character> class1 = Character.TYPE;
      ClassUtil.isConcrete(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, 2740);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer (through reference chain: com.fasterxml.jackson.databind.type.ReferenceType[2740])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getOuterClass(class0);
      DataTruncation dataTruncation0 = new DataTruncation(2745, false, false, 2745, (-888));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("7", "tR+", 2745, dataTruncation0);
      ClassUtil.getRootCause(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      SimpleType.constructUnsafe(class0);
      Class<Float> class1 = Float.TYPE;
      Class<?> class2 = ClassUtil.wrapperType(class1);
      ClassUtil.isJacksonStdImpl((Object) class2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.quotedOr((Object) null, "");
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.reflect.AccessibleObject is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      EnumSet.of(clientInfoStatus0, clientInfoStatus1);
      Class<?> class0 = ClassUtil.classOf(clientInfoStatus0);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isConcrete(class0);
      Class<Module> class1 = Module.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.findRawSuperTypes(class1, class1, true);
      ClassUtil.findEnumType((Enum<?>) clientInfoStatus0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<ObjectInputStream> class1 = ObjectInputStream.class;
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0);
      HashSet<ClientInfoStatus> hashSet0 = new HashSet<ClientInfoStatus>(enumSet0);
      enumSet0.removeAll(hashSet0);
      EnumSet<ClientInfoStatus> enumSet1 = enumSet0.clone();
      ClassUtil.findEnumType(enumSet1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.nonNullString((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getClassMethods(class0);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<CollectionType> class1 = CollectionType.class;
      Class<Annotation> class2 = Annotation.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class1, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class0);
      Class<Boolean> class1 = Boolean.TYPE;
      ClassUtil.defaultValue(class1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getPackageName(class2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      Integer integer0 = new Integer(1564);
      enumMap0.put(clientInfoStatus0, integer0);
      EnumMap<ClientInfoStatus, Integer> enumMap1 = new EnumMap<ClientInfoStatus, Integer>(enumMap0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter((PrettyPrinter) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3508);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 4, objectMapper2, charArrayWriter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ArrayType> class1 = ArrayType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("Cannot figure out type for EnumSet (odd JDK platform?)", class1, "java.lang.Long");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ArrayType` from String \"Cannot figure out type for EnumSet (odd JDK platform?)\": java.lang.Long
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ClassUtil.getOuterClass(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "java.lang.annotation");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Error> class0 = Error.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getOuterClass(class0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isLocalType(class0, false);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class1);
      EnumMap<ClientInfoStatus, Integer> enumMap1 = new EnumMap<ClientInfoStatus, Integer>(enumMap0);
      ClassUtil.findEnumType(enumMap1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(3, class0, "YTIUPu");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ResolvedRecursiveType` from number 3: YTIUPu
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Short> class0 = Short.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.findSuperTypes(class0, class0, list0);
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.java.lang.Character");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockIOException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLFeatureNotSupportedException0);
      batchUpdateException0.getNextException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, " Sg-FD4tA!`o;Gr>x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  Sg-FD4tA!`o;Gr>x
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      TypeBindings.emptyBindings();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      Class<Character> class1 = Character.TYPE;
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperTypes((JavaType) simpleType1, (Class<?>) class2, true);
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.Character");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.isBogusClass(class0);
      Class<IOException> class1 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class1, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.getOuterClass(class0);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.hasEnclosingMethod(class3);
      ClassUtil.classNameOf(class2);
      ClassUtil.emptyIterator();
      try { 
        ClassUtil.throwRootCauseIfIOE(iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getOuterClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<HashMap> class0 = HashMap.class;
      Class<Short> class1 = Short.class;
      MapType mapType0 = typeFactory1.constructMapType(class0, class0, class1);
      MapType mapType1 = mapType0.withValueHandler(classLoader0);
      MapType mapType2 = mapType1.withTypeHandler((Object) null);
      ClassUtil.rawClass(mapType2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Double> class2 = Double.TYPE;
      ClassUtil.wrapperType(class2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getConstructors(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.Error");
      ClassUtil.nonNull((LinkedList<ResolvedRecursiveType>) null, (LinkedList<ResolvedRecursiveType>) null);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<Void> class2 = Void.class;
      ClassUtil.findSuperTypes(class1, class2);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, placeholderForType0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, byteArrayOutputStream0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 3;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("J9%?]YUT#s1Ak4C", "J9%?]YUT#s1Ak4C", intArray0, sQLTimeoutException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) batchUpdateException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException: java.sql.BatchUpdateException: J9%?]YUT#s1Ak4C
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory1.constructMapLikeType(class0, class1, class0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(mapLikeType0, "w'k>T ABRv42(^zt,C:");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [map-like type; class java.lang.Object, [simple type, class java.lang.Integer] -> [simple type, class java.lang.Object]]: w'k>T ABRv42(^zt,C:
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeBindings.emptyBindings();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.withStaticTyping();
      Class<Character> class1 = Character.TYPE;
      MockError mockError0 = new MockError("java.lang.reflect.Ac");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("EfYZ_", "EfYZ_", intArray0, (Throwable) null);
      ClassUtil.throwIfRTE(batchUpdateException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.withArray("EfYZ_");
      JsonParser jsonParser0 = arrayNode0.traverse();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap1);
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) hashMap0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      InjectableValues.Std injectableValues_Std2 = injectableValues_Std1.addValue("^izD", (Object) collectionType0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.createInstance((DeserializationConfig) null, jsonParser0, injectableValues_Std2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isLocalType(class0, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("n{Pj,ErR-n5;h");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "n{Pj,ErR-n5;h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)51;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      Byte byte0 = new Byte((byte)24);
      ClassUtil.nullOrToString(byte0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = Character.valueOf('#');
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-3019));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, (ObjectCodec) null, byteArrayBuilder0, byteArray0, (-492), true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("''");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(iOContext0, "''");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, jsonMappingException_Reference0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) accessPattern0, 1);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // '' (through reference chain: com.fasterxml.jackson.databind.util.AccessPattern[1]->com.fasterxml.jackson.core.io.IOContext[\"''\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.nameOf(class0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1653544906);
      intArray0[1] = (-1653544906);
      intArray0[2] = 767;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`com.fasterxml.jackson.databind.type.CollectionLikeType`", "`com.fasterxml.jackson.databind.type.CollectionLikeType`", intArray0, (Throwable) null);
      batchUpdateException0.getNextException();
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isConcrete(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.hasEnclosingMethod(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("H'c.UJWZ_.&Z~WP?L", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<String> class1 = String.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern[] accessPatternArray0 = new AccessPattern[3];
      accessPatternArray0[0] = accessPattern0;
      accessPatternArray0[1] = accessPattern0;
      accessPatternArray0[2] = accessPattern0;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = '5';
      charArray0[2] = ';';
      charArray0[3] = 'n';
      charArray0[4] = 'a';
      charArray0[5] = '3';
      charArray0[6] = 'W';
      charArray0[1] = 'I';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, 1024, (-1));
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "JSON");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JsonDeserializer) null).when(beanDeserializerModifier0).modifyDeserializer(any(com.fasterxml.jackson.databind.DeserializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.JsonDeserializer.class));
      doReturn((BeanDeserializerBuilder) null).when(beanDeserializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.DeserializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.class));
      doReturn((List) null).when(beanDeserializerModifier0).updateProperties(any(com.fasterxml.jackson.databind.DeserializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      String string0 = "1J0sK";
      Throwable throwable0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        objectMapper0.readerFor(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<String> class1 = String.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern[] accessPatternArray0 = new AccessPattern[3];
      accessPatternArray0[0] = accessPattern0;
      accessPatternArray0[1] = accessPattern0;
      accessPatternArray0[2] = accessPattern0;
      ClassUtil.rawClass((JavaType) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory2.disable(jsonFactory_Feature0);
      try { 
        MockURI.URI("_ysw(AbY)@`2G`sfVw", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: _ysw(AbY)@`2G`sfVw:#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("K@T0?k");
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException(mockRuntimeException0);
      String string0 = "''3& M+q Zm~^nr";
      SQLException sQLException0 = new SQLException("K@T0?k", "''3& M+q Zm~^nr", (-1853514379));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLException0);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(mockRuntimeException1);
      ClassUtil.throwRootCauseIfIOE(sQLException0);
      ClassUtil.emptyIterator();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("K@T0?k", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", 8, throwable0);
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.abstractTypeResolvers();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Double> class0 = Double.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, ",v8i#j]5'{_[B`gk^", "$we");
      ClassUtil.quotedOr(jsonMappingException0, " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1);
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      EnumSet<AccessPattern> enumSet2 = EnumSet.complementOf(enumSet1);
      ClassUtil.findEnumType(enumSet2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      MockError mockError0 = new MockError("java.lang.reflect.A");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "}p mLSTq%[_\"B");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Method method0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "elementType");
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isConcrete(class1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Throwable throwable0 = ClassUtil.getRootCause(sQLNonTransientException0);
      ClassUtil.throwIfIOE(throwable0);
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
      ClassUtil.emptyIterator();
      Class<MapType> class2 = MapType.class;
      ClassUtil.isBogusClass(class2);
      sQLNonTransientException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLNonTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getClassDescription(class0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.isProxyType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.isLocalType(class1, false);
      Class<Void> class2 = Void.class;
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.instantiationException((Class<?>) null, "FMBSD7bn.5kGzVy");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of [null]: FMBSD7bn.5kGzVy
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getOuterClass(class1);
      ArrayList<Class<Integer>> arrayList0 = new ArrayList<Class<Integer>>();
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "annotation");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.getEnclosingClass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Boolean boolean0 = new Boolean(false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<String> class1 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "org.hibernate.proxy.java.lang.Boolean", "org.hibernate.proxy.java.lang.Boolean");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.String` from String \"org.hibernate.proxy.java.lang.Boolean\": org.hibernate.proxy.java.lang.Boolean
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaringClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes((JavaType) null, class1, false);
      String string0 = "org.hibernate.proxy.java.lang.Object";
      ClassUtil.isJacksonStdImpl((Object) "org.hibernate.proxy.java.lang.Object");
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findConstructor(class2, true);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      Object[] objectArray0 = new Object[9];
      Class<Object> class2 = Object.class;
      Object object0 = ClassUtil.createInstance(class2, false);
      objectArray0[0] = object0;
      objectArray0[1] = (Object) constructor0;
      objectArray0[2] = null;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = null;
      objectArray0[5] = (Object) class1;
      objectArray0[6] = (Object) class0;
      objectArray0[7] = (Object) constructor0;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      DataTruncation dataTruncation0 = new DataTruncation((-1062), false, false, (-1062), (-1062));
      dataTruncation0.getNextWarning();
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) constructor0;
      objectArray0[1] = (Object) constructor0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) constructor0;
      objectArray0[4] = (Object) class0;
      Class<Object> class1 = Object.class;
      Object object0 = ClassUtil.createInstance(class1, true);
      objectArray0[5] = object0;
      objectArray0[6] = (Object) constructor0;
      try { 
        constructor0.newInstance(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil classUtil0 = new ClassUtil();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getClassMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      Class<Void> class0 = Void.TYPE;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.getPackageName(class1);
      ClassUtil.quotedOr((Object) null, "net.sf.cglib.proxy.java.util.HashMap");
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.throwIfError(sQLWarning0);
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.isProxyType(class4);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericParameterTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      String string0 = "\\;LR%/Ey\"mP";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, ";LR%/Ey\"mP", (Throwable) sQLNonTransientConnectionException0);
      ClassUtil.hasClass(jsonMappingException0, class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Byte> class0 = Byte.class;
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Double double0 = new Double(0.8);
      ClassUtil.isJacksonStdImpl((Object) double0);
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassUtil.classNameOf(");/fk;?^_-0Wl/Y");
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.getDeclaredMethods(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.hasEnclosingMethod(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TypeBindings.emptyBindings();
      TypeFactory.defaultInstance();
      TypeFactory.unknownType();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLException sQLException0 = new SQLException("net.sf.cglib.proxy.java.lang.reflect.AccessibleObject", sQLNonTransientException0);
      ClassUtil.throwIfIOE(sQLException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.getRootCause(sQLException0);
      Class<Error> class0 = Error.class;
      ClassUtil.isProxyType(class0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<ArrayType> class1 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, true);
      ClassUtil.findSuperTypes(class0, class1, list0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<CollectionType> class1 = CollectionType.class;
      boolean boolean0 = false;
      ClassUtil.findConstructor(class1, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[3];
      annotationMapArray0[0] = annotationMap0;
      Class<SimpleType> class2 = SimpleType.class;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findDefaultConstructor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer((-1518));
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "Yw7kjsY]ELzq", (Throwable) sQLClientInfoException0);
      sQLClientInfoException0.initCause(jsonMappingException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericParameterTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, ";LR%/Ey\"mP", (Throwable) sQLNonTransientConnectionException0);
      ClassUtil.hasClass(jsonMappingException0, class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findClassAnnotations(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class2 = Annotation.class;
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      beanProperty_Bogus1.getContextAnnotation(class2);
      ClassUtil.classOf(objectMapper1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(";LR%/Ey\"mP", ";LR%/Ey\"mP", 96);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class3);
      ClassUtil.throwRootCauseIfIOE(throwable0);
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      DataTruncation dataTruncation0 = new DataTruncation((-1520607108), true, true, (-266), (-1868));
      MockException mockException0 = new MockException(dataTruncation0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", "9X=f8g9%{", (-1520607108), mockException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", (-266), sQLNonTransientConnectionException0);
      ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLDataException sQLDataException1 = new SQLDataException();
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      ClassUtil.isJacksonStdImpl((Object) sQLDataException1);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TypeBindings.emptyBindings();
      Class<AccessPattern> class0 = AccessPattern.class;
      TypeBindings.emptyBindings();
      SimpleType.constructUnsafe(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      serializationFeatureArray0[3] = serializationFeature1;
      serializationFeatureArray0[4] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("d|eT5u1fzZ0N#*Fj(Yr");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("_:Xp#Dwm7G2PG", "com.fasterxml.jackson.core.json.JsonGeneratorImpl", (-2341), sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "net.sf.cglib.proxy.java.lang.Integer", (Throwable) sQLFeatureNotSupportedException0);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // net.sf.cglib.proxy.java.lang.Integer
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getEnclosingClass(class0);
      TypeBindings.emptyBindings();
      TypeFactory.defaultInstance();
      TypeFactory.unknownType();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fasterxml.jacks");
      DataTruncation dataTruncation0 = new DataTruncation(37, true, true, 37, (-1549), sQLSyntaxErrorException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.enableDefaultTyping();
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      Class<String> class1 = String.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getGenericParameterTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.hasClass(class0, class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findClassAnnotations(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.getDeclaringClass(class1);
      classUtil_Ctor0.getDeclaredAnnotations();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null);
      Class<NoClass> class0 = NoClass.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<Void> class0 = Void.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      TypeBindings.emptyBindings();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      TypeBindings.emptyBindings();
      TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TypeFactory.unknownType();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("; failed to set access: ");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException("com.fastexm.jacks", class0);
      DataTruncation dataTruncation0 = new DataTruncation(2, true, true, (-2309), (-3844), jsonMappingException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      MockFile mockFile0 = new MockFile("; failed to set access: ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionLikeType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.String`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.getClassDescription("com.fasterxml.jacks");
      ClassUtil.isProxyType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getEnclosingClass(class0);
      TypeBindings.emptyBindings();
      TypeFactory.defaultInstance();
      TypeFactory.unknownType();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fasterxml.jacks");
      DataTruncation dataTruncation0 = new DataTruncation(37, true, true, 37, (-1549), sQLSyntaxErrorException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      sQLSyntaxErrorException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jacks
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getConstructors(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class2, true);
      int[] intArray0 = new int[8];
      intArray0[0] = 8;
      intArray0[1] = (-1591);
      intArray0[2] = (-1513967666);
      intArray0[3] = (-3317);
      intArray0[4] = 1257;
      intArray0[5] = (-1622);
      intArray0[6] = (-10);
      intArray0[7] = 2894;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0, "H7c8|oZ`og B^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // H7c8|oZ`og B^
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isObjectOrPrimitive(class0);
      LinkedList<NoClass> linkedList0 = new LinkedList<NoClass>();
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      linkedList0.add(noClass0);
      NoClass noClass1 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass1).toString();
      linkedList0.push(noClass1);
      NoClass noClass2 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass2).toString();
      linkedList0.push(noClass2);
      ClassUtil.nonNull(linkedList0, linkedList0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(" DVH`/1v9CHoKOfA");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StackTraceElement stackTraceElement0 = new StackTraceElement(" DVH`/1v9CHoKOfA", "java.lang.RuntimeEx", " DVH`/1v9CHoKOfA", 126);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("%~~IN&9_v QXJi", "<t", "Type-wrapped deserializer's deserializeWithType should never get called", 2);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("org.hibernate.proxy.", "java.lang.RuntimeEx", "Failed to instantiate class ", 2);
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0, " DVH`/1v9CHoKOfA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  DVH`/1v9CHoKOfA
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Boolean boolean0 = new Boolean(true);
      Class<Float> class0 = Float.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getEnclosingClass(class0);
      TypeBindings.emptyBindings();
      TypeFactory.defaultInstance();
      TypeFactory.unknownType();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fasterxml.jacks");
      DataTruncation dataTruncation0 = new DataTruncation(37, true, true, 37, (-1549), sQLSyntaxErrorException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      MockFile mockFile0 = new MockFile("com.fasterxml.jacks");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.DataTruncation: Data truncation
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Void> class0 = Void.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getPackageName(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "java.lang");
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "[null]", (Throwable) jsonMappingException0);
      ClassUtil.nonNull("java.lang", "[null]");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getEnclosingClass(class0);
      TypeFactory.defaultInstance();
      TypeBindings.emptyBindings();
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getClassDescription(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      Boolean boolean0 = Boolean.TRUE;
      ClassUtil.isJacksonStdImpl((Object) class2);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
      referenceType1.getSuperClass();
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      ClassUtil.getClassDescription(referenceType2);
      ClassUtil.isJacksonStdImpl((Object) class1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getEnclosingClass(class0);
      TypeBindings.emptyBindings();
      TypeFactory.unknownType();
      Class<String> class1 = String.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.getPackageName(class0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      ClassUtil.quotedOr(resolvedRecursiveType0, "TU!~@|c7FL");
      Class<Double> class3 = Double.class;
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.findSuperClasses(class3, class4, false);
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.throwIfError(sQLWarning0);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      ClassUtil.findSuperTypes(javaType0, class1, false);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<Character> class5 = Character.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class5, "java.lang", javaType0);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeBindings.emptyBindings();
      Class<MapType> class0 = MapType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      Locale locale0 = Locale.CANADA;
      ObjectReader objectReader1 = objectReader0.with(locale0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader2 = objectReader1.with((InjectableValues) injectableValues_Std0);
      TypeFactory typeFactory0 = objectReader2.getTypeFactory();
      Class<Long> class1 = Long.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      simpleType0.withValueHandler(collectionLikeType0);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class2, false);
      ClassUtil.backticked("Gr>8Y='6L:6KUOcFo2<");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.getPackageName(class0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      ClassUtil.quotedOr(resolvedRecursiveType0, "TU!~@|c7FL");
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.throwIfError(sQLWarning0);
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, true);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      AnnotationIntrospector.nopInstance();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory.defaultInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<Double> class3 = Double.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class3, "W", resolvedRecursiveType0);
      POJOPropertiesCollector pOJOPropertiesCollector1 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector1).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector1).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector1).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector1).getType();
      BasicBeanDescription.forSerialization(pOJOPropertiesCollector1);
      VirtualAnnotatedMember virtualAnnotatedMember1 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "[collection-like type; class ", resolvedRecursiveType0);
      virtualAnnotatedMember1.getAnnotated();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isConcrete(class1);
      ClassUtil classUtil0 = new ClassUtil();
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Void> class0 = Void.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.getPackageName(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "net.sf.cglib.proxy.");
      defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "net.sf.cglib.proxy.", (Throwable) jsonMappingException0);
      DataTruncation dataTruncation0 = new DataTruncation(1114111, true, false, 1114111, (-6410), jsonMappingException1);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // net.sf.cglib.proxy.
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.classNameOf(class1);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isObjectOrPrimitive(class0);
      Boolean boolean0 = new Boolean(false);
      Class<Float> class2 = Float.class;
      ClassUtil.getConstructors(class2);
      Class<Long> class3 = Long.class;
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.getPackageName(class0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      ClassUtil.quotedOr(resolvedRecursiveType0, "TU!~@|c7FL");
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.findSuperClasses((Class<?>) null, class3, false);
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.throwIfError(sQLWarning0);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      ClassUtil.findSuperTypes(javaType0, class1, true);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<Character> class4 = Character.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class4, "java.lang", javaType0);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.getPackageName(class0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      ClassUtil.quotedOr(resolvedRecursiveType0, "TU!~@|c7FL");
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.findSuperClasses((Class<?>) null, class3, false);
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.throwIfError(sQLWarning0);
      resolvedRecursiveType0.withStaticTyping();
      Class<ReferenceType> class4 = ReferenceType.class;
      ClassUtil.getConstructors(class4);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.hasClass((Object) null, class0);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.nameOf(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 3);
      Class<Double> class1 = Double.class;
      classArray0[0] = class1;
      Class<Double> class2 = Double.class;
      classArray0[1] = class2;
      Class<Double> class3 = Double.class;
      classArray0[2] = class3;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericParameterTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      objectMapper1.getSerializerProviderInstance();
      Class<Object> class1 = Object.class;
      ClassUtil.findClassAnnotations(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class2 = Annotation.class;
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      beanProperty_Bogus1.getContextAnnotation(class2);
      ClassUtil.classOf(objectMapper1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(";LR%/Ey\"mP", ";LR%/Ey\"mP", 96);
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class3);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, true);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isConcrete(class0);
      TypeBindings.emptyBindings();
      Class<Error> class1 = Error.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      simpleType0.withValueHandler((Object) null);
      Class<Double> class2 = Double.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class3 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class3, class3);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) collectionType1, (Class<?>) class2, true);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<SimpleType> class1 = SimpleType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType javaType1 = typeFactory0.constructReferenceType(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class1, typeBindings0, javaType1, javaTypeArray0, javaType1, javaType1);
      MapType mapType1 = mapType0.withValueHandler(javaType0);
      ClassUtil.findSuperTypes((JavaType) mapType1, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      TypeBindings.emptyBindings();
      Class<AccessPattern> class1 = AccessPattern.class;
      TypeBindings.emptyBindings();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      SimpleType simpleType1 = simpleType0.withValueHandler(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperTypes((JavaType) simpleType1, (Class<?>) class2, true);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.getPackageName(class0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      ClassUtil.quotedOr(resolvedRecursiveType0, "TU!~@|c7FL");
      Class<Double> class3 = Double.class;
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.findSuperClasses(class3, class4, false);
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.throwIfError(sQLWarning0);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      ClassUtil.findSuperTypes(javaType0, class1, true);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<Character> class5 = Character.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class5, "java.lang", javaType0);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.hasEnclosingMethod(class0);
      Class<String> class1 = String.class;
      ClassUtil.quotedOr(class1, "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      ClassUtil.findSuperClasses(class1, class1, false);
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.throwIfError(sQLWarning0);
      JavaType javaType0 = TypeFactory.unknownType();
      ClassUtil.findSuperTypes(javaType0, class0, false);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getConstructors(class2);
      Class<Integer> class3 = Integer.class;
      Class<ReferenceType> class4 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class3, class4, false);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getPackageName(class0);
      ClassUtil.quotedOr(class0, (String) null);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.throwIfError(sQLWarning0);
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Double> class0 = Double.class;
      ClassUtil.getPackageName(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isLocalType(class1, false);
      SQLWarning sQLWarning0 = new SQLWarning("java.lang", (String) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataException0.addSuppressed(sQLWarning0);
      sQLWarning0.addSuppressed(sQLDataException0);
      SQLDataException sQLDataException1 = new SQLDataException((String) null, (String) null);
      sQLWarning0.addSuppressed(sQLDataException1);
      ClassUtil.throwIfIOE(sQLWarning0);
      Double double0 = new Double(0.0);
      Class<Double> class2 = Double.class;
      ClassUtil.hasClass(double0, class2);
      ClassUtil.isLocalType(class1, true);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", referenceType1);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      SQLDataException sQLDataException0 = new SQLDataException("Wi", "Wi", 125);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.throwIfRTE(sQLDataException0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.backticked("keyUniverse");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("keyUniverse");
      sQLNonTransientException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericParameterTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.throwIfError(sQLWarning0);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.findSuperTypes(javaType0, class3, true);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 3171);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
      classUtil_Ctor0.getParamCount();
      Constructor<String> constructor1 = ClassUtil.findConstructor(class2, false);
      Class<Annotation> class3 = Annotation.class;
      constructor1.getDeclaredAnnotationsByType(class3);
      ClassUtil.throwRootCauseIfIOE(throwable0);
      ClassUtil.classOf(throwable0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("no suitable creator method found to deserialize from Number value (%s)", "no suitable creator method found to deserialize from Number value (%s)", 0);
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      // Undeclared exception!
      try { 
        BasicBeanDescription.forDeserialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
      Boolean boolean0 = new Boolean(true);
      ArrayList<Class<Integer>> arrayList0 = new ArrayList<Class<Integer>>();
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.getGenericSuperclass(class0);
      Class<Byte> class2 = Byte.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Byte has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericParameterTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.hasClass(class0, class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findClassAnnotations(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericParameterTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.hasClass(class0, class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findClassAnnotations(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class2);
      ClassUtil.classOf((Object) null);
      classUtil_Ctor0.getParameterAnnotations();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("keyUniverse", "keyUniverse", 96);
      ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class3);
      Class<Long> class4 = Long.class;
      ClassUtil.getConstructors(class4);
      Class<Float> class5 = Float.class;
      ClassUtil.isJacksonStdImpl(class5);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findClassAnnotations(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class2);
      ClassUtil.classOf(class2);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("keyUniverse", "elementType", (-71));
      ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.nameOf(class1);
      Class<Character> class2 = Character.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      ClassUtil.rawClass(javaType0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedReceiverType();
      constructor0.getAnnotatedExceptionTypes();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Long.getLong("EZ");
      ClassUtil.quotedOr((Object) null, "EZ");
      Class<Short> class2 = Short.TYPE;
      Class<ReferenceType> class3 = ReferenceType.class;
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class3, class4, false);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLWarning sQLWarning1 = new SQLWarning("EZ", sQLWarning0);
      ClassUtil.throwIfError(sQLWarning0);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<IOException> class5 = IOException.class;
      ClassUtil.findSuperTypes(javaType0, class5, false);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.hasClass(class0, class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findClassAnnotations(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class2);
      Long long0 = new Long((-1312L));
      ClassUtil.classOf(long0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fasterxml.jackson.databind.ser.std.JsonValueSerializer", "com.fasterxml.jackson.databind.util.ClassUtil", 96);
      ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
      Class<MapType> class3 = MapType.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[4];
      intArray0[0] = (-743);
      intArray0[1] = (-743);
      intArray0[2] = (-2550);
      intArray0[3] = (-743);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("x>F/#Wm02_", "x>F/#Wm02_", (-743), batchUpdateException0);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("x>F/#Wm02_", hashMap0, throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericParameterTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, ";LR%/Ey\"mP", (Throwable) sQLNonTransientConnectionException0);
      ClassUtil.hasClass(jsonMappingException0, class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findClassAnnotations(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class2 = Annotation.class;
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      beanProperty_Bogus1.getContextAnnotation(class2);
      ClassUtil.classOf(objectMapper1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(";LR%/Ey\"mP", ";LR%/Ey\"mP", 96);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class3);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException1);
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isConcrete(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.empty();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      jsonInclude_Value0.withContentInclusion(jsonInclude_Include0);
      Class<RuntimeException> class1 = RuntimeException.class;
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn(jsonInclude_Include0).when(jsonInclude0).content();
      doReturn(class1).when(jsonInclude0).contentFilter();
      doReturn(jsonInclude_Include0).when(jsonInclude0).value();
      doReturn(class0).when(jsonInclude0).valueFilter();
      JsonInclude.Include jsonInclude_Include1 = JsonInclude.Include.NON_DEFAULT;
      jsonInclude_Value0.withValueInclusion(jsonInclude_Include1);
      JsonInclude.Value.from(jsonInclude0);
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition((AnnotationIntrospector) null, (AnnotatedMember) null, propertyName0, propertyMetadata0, jsonInclude_Value0);
      simpleBeanPropertyDefinition0.getNonConstructorMutator();
      ClassUtil.nameOf((Named) simpleBeanPropertyDefinition0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("``", sQLNonTransientException0);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
      Throwable throwable1 = ClassUtil.getRootCause(throwable0);
      simpleBeanPropertyDefinition0.getConstructorParameter();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)91;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[3] = (byte)96;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ALshBX*5e");
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "ALshBX*5e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("no suitable creator method found to deserialize from Number value (%s)", "no suitable creator method found to deserialize from Number value (%s)", 0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Class<Void> class0 = Void.class;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientException0.forEach(consumer0);
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.throwIfError(sQLTransientException0);
      ClassUtil.emptyIterator();
      Class<Integer> class1 = Integer.class;
      ClassUtil.getDeclaredFields(class1);
      Class<IOException> class2 = IOException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, (TypeBindings) null);
      ClassUtil.nonNull(resolvedRecursiveType0, resolvedRecursiveType0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getGenericInterfaces(class0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.withValueHandler(class0);
      simpleType0.toCanonical();
      ClassUtil.rawClass(simpleType0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ClassUtil.nonNullString("org.hibernate.proxy.");
      ClassUtil.backticked("TOL~t,RbJYTF;o@f");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Unexpected tokens after complete type");
      MockException mockException0 = new MockException("org.hibernate.proxy.");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.hibernate.proxy.
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<Float> class2 = Float.TYPE;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.hasEnclosingMethod(class2);
      Class<Error> class3 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-641314725));
      TypeBindings.emptyBindings();
      List<JavaType> list0 = new Stack<JavaType>();
      TypeBindings.create(class0, list0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        defaultDeserializationContext_Impl0.resolveSubType(placeholderForType0, "~;rLZVFw.^,'(FgJ!");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '~;rLZVFw.^,'(FgJ!' as a subtype of $-641314724: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Iterator<PlaceholderForType> iterator0 = ClassUtil.emptyIterator();
      Class<Object> class0 = Object.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.getConstructors(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.nonNull((Object) null, (Object) iterator0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getPackageName(class0);
      Class<NoClass> class1 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ClassUtil.emptyIterator();
      JavaType[] javaTypeArray0 = new JavaType[8];
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findSuperTypes(javaTypeArray0[7], class0, false);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Boolean boolean0 = new Boolean(true);
      ArrayList<Class<Integer>> arrayList0 = new ArrayList<Class<Integer>>();
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Boolean boolean0 = new Boolean(true);
      ArrayList<Class<Integer>> arrayList0 = new ArrayList<Class<Integer>>();
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getClassMethods(class2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isConcrete(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      JavaType[] javaTypeArray0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IOException> class3 = IOException.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class3, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class3, (JavaType) placeholderForType0, (JavaType) mapLikeType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.io.IOException with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nameOf((Named) null);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.getPackageName(class0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isJacksonStdImpl(class2);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getClassDescription(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.isJacksonStdImpl((Object) class2);
      TypeResolutionContext typeResolutionContext0 = null;
      Class<Float> class3 = Float.class;
      // Undeclared exception!
      try { 
        MapLikeType.upgradeFrom((JavaType) null, (JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Short> class0 = Short.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.quotedOr(list0, ", problem: ");
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTransientException sQLTransientException0 = new SQLTransientException("java.lang.RuntimeEx", sQLWarning0);
      ClassUtil.throwIfError(sQLTransientException0);
      JavaType javaType0 = TypeFactory.unknownType();
      ClassUtil.findSuperTypes(javaType0, class0, true);
      Byte byte0 = new Byte((byte) (-6));
      ClassUtil.quotedOr(byte0, "java.lang.RuntimeEx");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod((Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isConcrete(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getEnclosingClass(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getPackageName(class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotatedReceiverType();
      constructor0.getAnnotatedExceptionTypes();
      constructor0.getAnnotationsByType(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Integer integer0 = new Integer(6000);
      ClassUtil.quotedOr(integer0, "com.fasterxml.jackson.databind.type");
      Class<Short> class3 = Short.TYPE;
      ClassUtil.findSuperClasses(class2, class3, true);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLWarning sQLWarning1 = new SQLWarning("com.fasterxml.jackson.databind.type", sQLWarning0);
      ClassUtil.throwIfError(sQLWarning1);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[4];
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes(javaType0, class4, true);
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isBogusClass(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.toGenericString();
      constructor0.getExceptionTypes();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class1;
      objectArray0[1] = (Object) class1;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) "public java.lang.Object()";
      objectArray0[4] = (Object) "public java.lang.Object()";
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) class0;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isLocalType(class0, false);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.isJacksonStdImpl(class2);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isConcrete(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isObjectOrPrimitive(class0);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.hasClass(class0, class3);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getPackageName(class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotatedReceiverType();
      constructor0.getAnnotatedExceptionTypes();
      constructor0.getAnnotationsByType(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Integer integer0 = new Integer(6000);
      ClassUtil.quotedOr(integer0, "com.fasterxml.jackson.databind.type");
      Class<Short> class3 = Short.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLWarning sQLWarning1 = new SQLWarning("com.fasterxml.jackson.databind.type", sQLWarning0);
      ClassUtil.throwIfError(sQLWarning1);
      Class<RuntimeException> class4 = RuntimeException.class;
      Class<String> class5 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        TypeBindings.create(class3, javaType0, javaType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Short with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ClassUtil.nonNull(resolvedRecursiveType0, resolvedRecursiveType0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      String string0 = "size";
      ClassUtil.nonNullString("size");
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<ArrayType> class1 = ArrayType.class;
      boolean boolean0 = false;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.getClassDescription(class0);
      String string0 = "SUXNeDp7.";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class1, "SUXNeDp7.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.type.ArrayType) must override method 'SUXNeDp7.'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Object> class2 = Object.class;
      ClassUtil.getConstructors(class2);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class3);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getEnclosingClass(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      MockPrintStream mockPrintStream0 = new MockPrintStream("s<\"NE");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "s<\"NE");
      sQLRecoverableException0.printStackTrace(printStream0);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericParameterTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.hasClass(class0, class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findClassAnnotations(class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class2);
      ClassUtil.classOf((Object) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("keyUniverse", "keyUniverse", 96);
      ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class3);
      Class<Character> class4 = Character.class;
      Double double0 = new Double(0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class4, double0, "keyUniverse");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Double (of class java.lang.Character) must override method 'keyUniverse'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.nullOrToString(class0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.findEnumType(class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[8];
      accessibleObjectArray0[0] = (AccessibleObject) classUtil_Ctor0._ctor;
      accessibleObjectArray0[1] = (AccessibleObject) classUtil_Ctor0._ctor;
      Class<Double> class2 = Double.class;
      ClassUtil.findConstructor(class2, false);
      accessibleObjectArray0[2] = (AccessibleObject) null;
      accessibleObjectArray0[3] = (AccessibleObject) classUtil_Ctor0._ctor;
      accessibleObjectArray0[4] = (AccessibleObject) constructor0;
      accessibleObjectArray0[5] = (AccessibleObject) constructor0;
      accessibleObjectArray0[6] = (AccessibleObject) constructor0;
      accessibleObjectArray0[7] = (AccessibleObject) constructor0;
      // Undeclared exception!
      try { 
        AccessibleObject.setAccessible(accessibleObjectArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.AccessibleObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.nameOf((Named) null);
      Class<Void> class1 = Void.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.getPackageName(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "java.lang");
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "[null]", (Throwable) jsonMappingException0);
      DataTruncation dataTruncation0 = new DataTruncation((-4), false, false, (-6410), (-4), jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.DataTruncation: Data truncation
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getPackageName(class0);
      Object object0 = new Object();
      ClassUtil.isProxyType(class0);
      ClassUtil.findSuperTypes(class0, class0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findSuperTypes(class0, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nameOf((Named) null);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.getPackageName(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "[null]");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "java.lang", (Throwable) jsonMappingException0);
      DataTruncation dataTruncation0 = new DataTruncation((-6410), true, true, 1408, 2252, jsonMappingException1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.DataTruncation: Data truncation
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Double double0 = new Double(2320.347);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, double0, "Must call method with a container or reference type (got ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Double (of class java.lang.Integer) must override method 'Must call method with a container or reference type (got '
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getConstructors(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.classNameOf(class0);
      ClassUtil.isLocalType((Class<?>) null, false);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isConcrete(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isProxyType(class1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      // Undeclared exception!
      try { 
        BasicBeanDescription.forSerialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Integer> class0 = Integer.class;
      ClassUtil.isProxyType(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getClassMethods(class1);
      Class<Double> class2 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<Error> class2 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      TypeBindings.create(class4, list0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "entrySet";
      try { 
        defaultDeserializationContext_Impl0.resolveSubType(placeholderForType0, "entrySet");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'entrySet' as a subtype of $1: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<Void> class1 = Void.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.isConcrete(class2);
      ClassUtil.backticked((String) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1270);
      intArray0[3] = 1727;
      intArray0[4] = 2689;
      intArray0[5] = (-821);
      intArray0[6] = (-2416);
      intArray0[7] = 0;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[null]", sQLSyntaxErrorException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransactionRollbackException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "[null]", intArray0, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isConcrete(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isProxyType(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<JsonMappingException>[] classArray0 = (Class<JsonMappingException>[]) Array.newInstance(Class.class, 7);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      classArray0[0] = class2;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      basicBeanDescription0.findProperties();
      basicBeanDescription0.findBackReferences();
      classArray0[1] = class3;
      Class<JsonMappingException> class4 = JsonMappingException.class;
      classArray0[2] = class4;
      Class<JsonMappingException> class5 = JsonMappingException.class;
      POJOPropertiesCollector pOJOPropertiesCollector1 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector1).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector1).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector1).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector1).getType();
      BasicBeanDescription.forDeserialization(pOJOPropertiesCollector1);
      classArray0[3] = class5;
      Class<JsonMappingException> class6 = JsonMappingException.class;
      classArray0[4] = class6;
      Class<JsonMappingException> class7 = JsonMappingException.class;
      classArray0[5] = class7;
      Class<JsonMappingException> class8 = JsonMappingException.class;
      classArray0[6] = class8;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findSingleArgConstructor(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getClassDescription(class0);
      ClassUtil.isProxyType(class0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.getPackageName(class1);
      Class<Character> class2 = Character.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      ClassUtil.rawClass(javaType0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isLocalType(class0, true);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.classNameOf((Object) null);
      Class<Error> class2 = Error.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = null;
      ClassUtil.nonNullString((String) null);
      ClassUtil.backticked((String) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      sQLNonTransientException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = false;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }
}
