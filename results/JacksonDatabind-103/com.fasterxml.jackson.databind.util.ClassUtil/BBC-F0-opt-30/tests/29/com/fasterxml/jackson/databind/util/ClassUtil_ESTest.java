/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 06:08:20 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.core.util.Separators;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8KYMS;QLzV75JeQp");
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
      Random.setNextRandom(6);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.getOuterClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 0;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      objectReader0.with(deserializationFeature0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<AccessPattern>[] classArray0 = (Class<AccessPattern>[]) Array.newInstance(Class.class, 6);
      Class<AccessPattern> class1 = AccessPattern.class;
      classArray0[0] = class1;
      Class<AccessPattern> class2 = AccessPattern.class;
      classArray0[1] = class2;
      Class<AccessPattern> class3 = AccessPattern.class;
      classArray0[2] = class3;
      Class<AccessPattern> class4 = AccessPattern.class;
      classArray0[3] = class4;
      Class<AccessPattern> class5 = AccessPattern.class;
      classArray0[4] = class5;
      Class<AccessPattern> class6 = AccessPattern.class;
      classArray0[5] = class6;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findMethod("KGaJy[`K", classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassUtil.isBogusClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(class0);
      ClassUtil.rawClass(arrayType1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "mt:rT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // mt:rT
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.Double");
      Class<RuntimeException> class0 = RuntimeException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, true);
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      // Undeclared exception!
      try { 
        ClassUtil.quotedOr(decimalNode0, "+zNsEx3U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      MockIOException mockIOException0 = new MockIOException((String) null, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockIOException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      dataOutputStream0.writeBytes("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      dataOutputStream0.close();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "%0PVI#Y~0k9f7RD2S");
      dataOutputStream0.writeBoolean(true);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // %0PVI#Y~0k9f7RD2S
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.RuntimeException`", string0);
      
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(1, fieldArray0.length);
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, true);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      Class<MapType> class2 = MapType.class;
      boolean boolean2 = ClassUtil.hasClass(class0, class2);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ClassUtil.findSuperClasses(class1, class0, true);
      MockError mockError0 = new MockError("com.fasterxml.jackson.core.filter.TokenFilter", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      MockFile mockFile0 = new MockFile("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("JSON", class0, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `double` from String \"JSON\": JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.TYPE;
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getConstructors(class2);
      ClassUtil.rawClass(simpleType0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.isProxyType(class1);
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Error> enumMap0 = new EnumMap<AccessPattern, Error>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      MockError mockError0 = new MockError("])@{|OkGs9]mad)~u2");
      mockError0.fillInStackTrace();
      enumMap0.put(accessPattern0, (Error) mockError0);
      ClassUtil.findEnumType(enumMap0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.isProxyType(class0);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getConstructors(class2);
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, false);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.isLocalType(class3, false);
      Class<Byte> class4 = Byte.class;
      ClassUtil.getGenericInterfaces(class4);
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class5);
      System.setCurrentTimeMillis(80L);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Double double0 = new Double(225.288978445);
      Double double1 = new Double((-4238.72416));
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, sQLTransactionRollbackException0);
      MockIOException mockIOException0 = new MockIOException((String) null, sQLRecoverableException0);
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<ArrayType> class1 = ArrayType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class0, class1, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Error> enumMap0 = new EnumMap<AccessPattern, Error>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, Error> enumMap0 = new EnumMap<AccessPattern, Error>(class2);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "zO4,'$y\"F:U PZ%x=");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.lang.Integer", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "x4B;+o#r[TUWR{nc{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      ClassUtil.classNameOf(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern1, accessPattern2);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AccessPattern accessPattern3 = AccessPattern.ALWAYS_NULL;
      enumSet0.add(accessPattern3);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructType(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[6];
      annotationMapArray0[0] = annotationMap0;
      annotationMapArray0[1] = annotationMap0;
      annotationMapArray0[2] = annotationMap0;
      annotationMapArray0[3] = annotationMap0;
      annotationMapArray0[4] = annotationMap0;
      annotationMapArray0[5] = annotationMap0;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, annotationMap0, annotationMapArray0);
      Member member0 = annotatedConstructor0.getMember();
      ClassUtil.checkAndFixAccess(member0, false);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte) (-19);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      Character character0 = Character.valueOf('\"');
      Character character1 = new Character('B');
      Character character2 = ClassUtil.nonNull(character0, character1);
      enumSet0.remove(character2);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      enumSet0.retainAll(linkedList0);
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.getOuterClass(class0);
      Character character3 = Character.valueOf('<');
      ClassUtil.quotedOr(character3, (String) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      Class<Long> class0 = Long.class;
      ClassUtil.isConcrete(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      Class<Object> class2 = Object.class;
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumSet0.add(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getPackageName(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "java.lang", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("java.lang", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, true);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      Separators separators0 = new Separators('S', 'S', 'S');
      MinimalPrettyPrinter minimalPrettyPrinter1 = minimalPrettyPrinter0.setSeparators(separators0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, objectMapper0, (Writer) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.hibernate.proxy.", "org.hibernate.proxy.", 2);
      MockIOException mockIOException0 = new MockIOException("@s_*A", sQLInvalidAuthorizationSpecException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.allOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SQLWarning sQLWarning0 = new SQLWarning();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLWarning0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockRuntimeException0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[2];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      ObjectReader objectReader1 = objectReader0.withFormatDetection(dataFormatReaders0);
      File file0 = MockFile.createTempFile("EBzpxW", "EBzpxW");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)46;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1512), objectReader1, mockFileOutputStream0, byteArray0, 10, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      String string0 = "v]lOkE\"V02BX1)X}!";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("v]lOkE\"V02BX1)X}!", "com.fasterxml.jackson.annotation.OptBoolean", 1, (Throwable) null);
      sQLTransactionRollbackException0.getLocalizedMessage();
      ClassUtil.throwIfRTE(sQLTransactionRollbackException0);
      Class<Character> class0 = Character.class;
      Class<ArrayType> class1 = ArrayType.class;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern", "com.fasterxml.jackson.annotation.OptBoolean");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // com.fasterxml.jackson.annotation.OptBoolean
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      Locale locale0 = Locale.US;
      EnumSet.copyOf((Collection<AccessPattern>) enumSet0);
      MockError mockError0 = new MockError("org.hibernate.proxy.com.fasterxml.jackson.core.json.UTF8JsonGenerator");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
      TypeBindings.emptyBindings();
      JavaType javaType0 = null;
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      javaTypeArray0[3] = null;
      javaTypeArray0[4] = null;
      Class<String> class1 = String.class;
      Class<ReferenceType> class2 = ReferenceType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaTypeArray0);
      JavaType[] javaTypeArray1 = new JavaType[6];
      javaTypeArray1[0] = null;
      javaTypeArray1[1] = null;
      javaTypeArray1[2] = null;
      javaTypeArray1[3] = null;
      javaTypeArray1[4] = null;
      javaTypeArray1[5] = null;
      // Undeclared exception!
      try { 
        ReferenceType.construct(class1, typeBindings0, javaTypeArray0[2], javaTypeArray1, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Double double0 = new Double((-1073.9130102));
      ClassUtil.quotedOr(double0, "jT:t");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Default constructor for ");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockIOException mockIOException0 = new MockIOException("Sai[tf%Rl76X");
      mockIOException0.getCause();
      mockIOException0.printStackTrace();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Double double0 = new Double(2286.9088987);
      Class<Float> class0 = Float.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(817);
      ObjectReader objectReader0 = objectMapper1.readerFor((JavaType) placeholderForType0);
      MockError mockError0 = new MockError();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("q?+KUIX'3M5.cCt2w4", "q?+KUIX'3M5.cCt2w4", 3133, mockError0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("g2B0d_'L@,VH%", sQLNonTransientException0);
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(mockRuntimeException0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      ObjectReader objectReader2 = objectReader1.withFeatures(jsonParser_FeatureArray0);
      TypeFactory typeFactory0 = objectReader2.getTypeFactory();
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<Byte> class2 = Byte.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      Double double0 = new Double(909.4356);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class3);
      MapLikeType mapLikeType0 = mapType0.withKeyValueHandler((Object) null);
      Class<Integer> class4 = Integer.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class4, false);
      ClassUtil.nonNullString("q?+KUIX'3M5.cCt2w4");
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isLocalType(class0, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<NoClass> class1 = NoClass.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("C+$&5_", class1, (String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "C+$&5_", (-57), jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.annotation.NoClass` from String \"C+$&5_\": null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.getClassDescription(class0);
      ClassUtil.isJacksonStdImpl(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.isLocalType(class2, true);
      Class<Object> class3 = Object.class;
      Class<MapLikeType> class4 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class3, class4, false);
      ClassUtil.getDeclaredFields(class4);
      ClassUtil.findClassAnnotations(class4);
      Class<Integer> class5 = Integer.class;
      ClassUtil.getDeclaredMethods(class5);
      Class<NoClass> class6 = NoClass.class;
      Class<Double> class7 = Double.class;
      ClassUtil.findSuperTypes(class6, class7, list0);
      Class<Short> class8 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.backticked((String) null);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "m2f]|'");
      Object object0 = null;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(byte[].class) , anyInt() , anyInt());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-105);
      byteArray0[8] = (byte) (-21);
      jsonFactory3.createParser(byteArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true, "com.fasterxml.jackson.databind.jsontype.TypeSerializer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      Long.getLong((String) null);
      ClassUtil.classOf((Object) null);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      Locale locale0 = Locale.US;
      EnumSet.copyOf((Collection<AccessPattern>) enumSet0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      enumSet0.retainAll(set0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("l%8", "l%8");
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getClassDescription(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<NoClass> class0 = NoClass.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "sd7Irh%", mapLikeType0);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class0);
      Class<String> class1 = String.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.getOuterClass(class1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-14);
      byteArray0[8] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<DecimalNode> class2 = DecimalNode.class;
      ClassUtil.findClassAnnotations(class2);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(";wd2q)ZM\"", ";wd2q)ZM\"");
      Class<Short> class0 = Short.TYPE;
      Class<String> class1 = String.class;
      ClassUtil.verifyMustOverride(class1, ";wd2q)ZM\"", "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      MockFile mockFile0 = new MockFile("[null]", "#scTO*n\":}=.lDpsJ+");
      MockFile mockFile1 = new MockFile(mockFile0, "java.lang.RuntimeExc");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory1.createGenerator((OutputStream) mockFileOutputStream0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.canBeABeanType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Error> class1 = Error.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getGenericInterfaces(class0);
      Class<Byte> class2 = Byte.class;
      ClassUtil.findSuperTypes(class2, class1, list0);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class1, class3, false);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double double0 = new Double(0.0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MapType> class0 = MapType.class;
      Class<HashMap> class1 = HashMap.class;
      Class<Object> class2 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
      MapType mapType1 = mapType0.withStaticTyping();
      Double double1 = new Double(0.0);
      ClassUtil.nonNull(double1, double0);
      mapType1.withKeyValueHandler(typeFactory0);
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class3, false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.backticked((String) null);
      Class<MapType> class0 = MapType.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.classOf(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.canBeABeanType(class1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isConcrete(class1);
      System.setCurrentTimeMillis(0L);
      MockException mockException0 = new MockException(") out of range of int");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Still have %d undecoded bytes, should not call 'feedInput'", mockException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[null]", ") out of range of int", (-1744094291), mockRuntimeException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, ", problem: ", (Throwable) sQLNonTransientConnectionException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // , problem: 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.nameOf((Named) null);
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<MapType> class2 = MapType.class;
      Class<HashMap> class3 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class3, class2, class0);
      mapType0.withKeyValueHandler(typeFactory0);
      ClassUtil.nonNull((Double) null, (Double) null);
      mapType0.withKeyValueHandler(class3);
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class1, false);
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getClassMethods(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(simpleValueInstantiators0, class0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.annotation.NoClass` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.module.SimpleValueInstantiators`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertEquals(1, list0.size());
      
      ClassUtil.classOf(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1536;
      intArray0[1] = 1536;
      intArray0[2] = 1536;
      SQLTransientException sQLTransientException0 = new SQLTransientException("/`-'chUtL)A7");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "j375?,b0;ij", 1578, intArray0, sQLTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(1536, false, false, 1536, (-224), batchUpdateException0);
      dataTruncation0.getNextWarning();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double double0 = new Double((-262.59365410067295));
      Class<AccessPattern> class0 = AccessPattern.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<MapType> class2 = MapType.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class1, class2);
      mapType0.withKeyValueHandler(typeFactory0);
      ClassUtil.nonNull(double0, (Double) null);
      MapLikeType mapLikeType0 = mapType0.withKeyValueHandler(class2);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class0, false);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Double> class3 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class3, false);
      Class<Module> class4 = Module.class;
      try { 
        ClassUtil.createInstance(class4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "com.fasterxml.jacks");
      Class<Error> class0 = Error.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.emptyIterator();
      ClassUtil.isConcrete(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null);
      MockIOException mockIOException0 = new MockIOException("withFilterId", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Double double0 = new Double((-262.59365410067295));
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<MapType> class1 = MapType.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      mapType0.withKeyValueHandler(typeFactory0);
      Class<Character> class2 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class2, true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getPackageName(class0);
      ClassUtil.isProxyType(class0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.getSuppressed();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("net.sf.cglib.proxy.java.lang.Character", ";Cd2CxZM\"", 1536, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLTransientConnectionException0);
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0, ";Cd2CxZM\"");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float((-991.0));
      ClassUtil.isJacksonStdImpl((Object) float0);
      ClassUtil.emptyIterator();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("net.sf.cglib.proxy.java.lang.Integer");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findEnumType(class0);
      DataTruncation dataTruncation0 = new DataTruncation(57, true, true, 6000, 2);
      dataTruncation0.getNextWarning();
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler((Object) null);
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes(javaType0, class1, true);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Float float0 = new Float((-991.0));
      ClassUtil.isJacksonStdImpl((Object) float0);
      MockError mockError0 = new MockError();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}|8sD", "^M&JYI", (-3348), mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "lFRTmnd");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot use FormatSchema of type ");
      ClassUtil.isBogusClass(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getEnclosingClass(class0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.hibernate.proxy.void");
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileOutputStream0, (String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(" has no default (no arg) constructor", (int[]) null, jsonMappingException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.hibernate.proxy.void", batchUpdateException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G<EkUEpFx'");
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.backticked((String) null);
      ClassUtil.getDeclaredFields(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Float> class1 = Float.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.getDeclaredFields(class1);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericParameterTypes();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      ClassUtil.getOuterClass(class1);
      Class<Long> class3 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getPackageName(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Float> class1 = Float.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.getDeclaredFields(class1);
      Class<IOException> class2 = IOException.class;
      Class<IOException> class3 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getGenericParameterTypes();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      ClassUtil.getOuterClass(class2);
      Class<ArrayType> class4 = ArrayType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = ',';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader1 = objectReader0.withHandler(deserializationProblemHandler0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, charArrayReader0, objectReader1, charsToNameCanonicalizer1, charArray0, 520, 1264, false);
      objectReader1.createObjectNode();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Float> class0 = Float.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = null;
      int int0 = 96;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      PropertyName propertyName0 = PropertyName.construct((String) null, "JSON");
      objectReader0.withRootName(propertyName0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getPackageName(class0);
      boolean boolean0 = new Boolean("com.fasterxml.jackson.databind.type");
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Character character0 = new Character('R');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Short> class0 = Short.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isConcrete(class0);
      Character character0 = new Character('\\');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<?> class1 = ClassUtil.classOf(character0);
      ClassUtil.getDeclaredFields(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.primitiveType(class2);
      Integer.getInteger("");
      ClassUtil.getClassDescription((Object) null);
      MockError mockError0 = new MockError();
      ClassUtil.throwRootCauseIfIOE(mockError0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isLocalType((Class<?>) null, true);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findConstructor(class0, true);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getLocalizedMessage();
      mockRuntimeException0.toString();
      MockRuntimeException mockRuntimeException1 = (MockRuntimeException)ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      Class<SimpleType> class0 = SimpleType.class;
      mockRuntimeException1.getLocalizedMessage();
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.classNameOf(mockRuntimeException1);
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      System.setCurrentTimeMillis(0L);
      ClassUtil.nameOf((Class<?>) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getClassMethods(class1);
      SQLWarning sQLWarning0 = new SQLWarning("-.$", "#1W/|>?#Ru8", 1346);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0, "Must call method with a container or reference type (got ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must call method with a container or reference type (got 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "Failed to instantiate class ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<IOException> class0 = IOException.class;
      Float float0 = new Float(0.0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(simpleType0, "HDNg");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [simple type, class java.io.IOException]: HDNg
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<MapLikeType> class0 = MapLikeType.class;
      classLoader0.setPackageAssertionStatus("y&4C~CNQiAhqK`'17e", false);
      CollectionLikeType collectionLikeType0 = typeFactory1.constructRawCollectionLikeType(class0);
      ClassUtil.rawClass(collectionLikeType0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Long> class2 = Long.class;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.nonNullString((String) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "net.sf.cglib.proxy.java.lang.Float");
      ClassUtil.quotedOr((Object) null, (String) null);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.nonNullString((String) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "net.sf.cglib.proxy.java.lang.Float");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // net.sf.cglib.proxy.java.lang.Float
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaredMethods(class0);
      boolean boolean0 = false;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      String string0 = "UVW`<bc>QOtF5";
      MockException mockException0 = new MockException();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      mockException0.getMessage();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "UVW`<bc>QOtF5", (Throwable) mockException0);
      mockException0.initCause(jsonMappingException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("UVW`<bc>QOtF5", "UVW`<bc>QOtF5", 722, (int[]) null, mockException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("UVW`<bc>QOtF5", "UVW`<bc>QOtF5", batchUpdateException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Double double0 = new Double((-252.7439));
      Class<AccessPattern> class0 = AccessPattern.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      ClassUtil.throwIfIOE(sQLTransientConnectionException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<MapType> class2 = MapType.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class1, class2);
      mapType0.withKeyValueHandler(typeFactory0);
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      ClassUtil.rawClass(collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<Character> class0 = Character.class;
      Double double0 = new Double(2.2250738585072014E-308);
      ClassUtil.nonNull((Double) null, double0);
      Class<Double> class1 = Double.class;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, (JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Character with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getPackageName(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.isConcrete(class2);
      ClassUtil.nameOf(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "java.lang", true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)6;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1261), objectMapper0, mockFileOutputStream0, byteArray0, 1611, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SQLException sQLException0 = new SQLException("java.lang", (String) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      objectMapper0.configure(deserializationFeature0, false);
      SQLException sQLException1 = new SQLException("`com.fasterxml.jackson.databind.type.MapType`", ":UGKRNCgjh*cO$3l", sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException: `com.fasterxml.jackson.databind.type.MapType`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getLocalizedMessage();
      mockRuntimeException0.toString();
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.isProxyType(class1);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.isConcrete(class1);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<String>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      mockError0.getLocalizedMessage();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      mockError0.setStackTrace(stackTraceElementArray0);
      mockError0.getLocalizedMessage();
      mockError0.toString();
      MockError mockError1 = (MockError)ClassUtil.nonNull((Error) mockError0, (Error) mockError0);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError1, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = new Object();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("&l", (String) null, 5);
      sQLIntegrityConstraintViolationException0.addSuppressed(mockRuntimeException0);
      mockRuntimeException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      mockRuntimeException0.toString();
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.isProxyType(class1);
      ClassUtil classUtil0 = new ClassUtil();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "&l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      Double double0 = new Double(0.0);
      ClassUtil.nonNull(double0, (Double) null);
      Class<HashMap> class1 = HashMap.class;
      Class<Annotation> class2 = Annotation.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
      MapType mapType1 = mapType0.withContentTypeHandler(typeFactory0);
      MapType mapType2 = mapType1.withValueHandler(typeFactory0);
      MapType mapType3 = mapType2.withTypeHandler(typeFactory0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, (String) null, mapType0);
      virtualAnnotatedMember0.getAnnotated();
      mapType3.withContentValueHandler((Object) null);
      mapType2.withKeyValueHandler(typeFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1024);
      placeholderForType0.getContentType();
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Sa", "Sa");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.getSelfReferencedType();
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes((JavaType) null, class1, false);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Void> class0 = Void.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class1 = Object.class;
      ClassUtil.isBogusClass((Class<?>) null);
      ClassUtil.getClassMethods(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findSuperTypes(class0, class2);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = new Object();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("elementType", "com.fasterxml.jackson.databind.BeanProperty$Bogus", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", (-1007));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "` Fxw", (-1007));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("-FM|k", "` Fxw", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern", 17);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("com.fasterxml.jackson.databind.node.ShortNode", "-FM|k", "` Fxw", 17);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("com.fasterxml.jackson.databind.BeanProperty$Bogus", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "Fq", (-1007));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("Fq", "org.hibernate.proxy.", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType", (-1360));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "Fq", "331l)s$M/c0qo", 17);
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("D$\"uNsY @I", "Cannot refine serialization type %s into %s; types not related", (String) null, (-1007));
      stackTraceElementArray0[7] = stackTraceElement7;
      StackTraceElement stackTraceElement8 = new StackTraceElement("-FM|k", "331l)s$M/c0qo", "com.fasterxml.jackson.databind.BeanProperty$Bogus", 11);
      stackTraceElementArray0[8] = stackTraceElement8;
      mockRuntimeException0.setStackTrace(stackTraceElementArray0);
      mockRuntimeException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("&l", (String) null, 5);
      sQLIntegrityConstraintViolationException0.addSuppressed(mockRuntimeException0);
      mockRuntimeException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Object>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getEnclosingClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, true);
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Character> class0 = Character.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class0, false);
      ClassUtil.classOf(typeFactory0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Throwable throwable0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getEnclosingClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory3.enable(jsonGenerator_Feature0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false, " of 4-char base64 unit: padding only legal as 3rd or 4th character");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("zT;lp3=Sn7h", "_cshX7CY{Z{0b!2jtI", 3);
      SQLWarning sQLWarning1 = new SQLWarning("zT;lp3=Sn7h", "_cshX7CY{Z{0b!2jtI", 3);
      ClassUtil.throwIfRTE(sQLWarning1);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isBogusClass(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getClassMethods(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class2, false);
      Class<Void> class3 = Void.class;
      Class<Object> class4 = Object.class;
      ClassUtil.findSuperTypes(class3, class4, list0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Float float0 = new Float((-814.9555262003));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("=JxMF-{,%[Z", "[TNH5.]FvPCZ", 3222);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("=JxMF-{,%[Z", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TypeFactory.defaultInstance();
      Long.getLong("entrySet", (-3530L));
      Integer.getInteger("oD");
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Double> class0 = Double.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Double double0 = new Double((-3890.5629351668));
      assertNotNull(double0);
      assertEquals((-3890.5629351668), (double)double0, 0.01);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      
      boolean boolean0 = ClassUtil.hasClass(double0, class0);
      assertTrue(boolean0);
      
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNotNull(sQLDataException0);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      assertNotNull(sQLDataException1);
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException1.getMessage());
      assertNull(sQLDataException1.getSQLState());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean1 = ClassUtil.isProxyType(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<String> class1 = String.class;
      boolean boolean2 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = ClassUtil.nonNull("sBlFY\"QK;", "_(2( vaO");
      assertNotNull(string0);
      assertEquals("sBlFY\"QK;", string0);
      
      String string1 = ClassUtil.backticked("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType");
      assertNotNull(string1);
      assertEquals("`net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType`", string1);
      assertFalse(string1.equals((Object)string0));
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class2, class0);
      assertNotNull(mapType0);
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      assertNotNull(referenceType0);
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      
      ReferenceType referenceType1 = referenceType0.withValueHandler("sBlFY\"QK;");
      assertNotNull(referenceType1);
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.hasHandlers());
      assertEquals(2, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isInterface());
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      
      ReferenceType referenceType2 = referenceType0.withValueHandler(referenceType1);
      assertNotNull(referenceType2);
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.hasHandlers());
      assertEquals(2, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isInterface());
      assertEquals(2, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.useStaticType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isCollectionLikeType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isInterface());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.hasHandlers());
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType2.equals((Object)referenceType0));
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) referenceType2, (Class<?>) class0, false);
      assertNotNull(list0);
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertEquals(2, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.hasContentType());
      assertTrue(referenceType1.hasHandlers());
      assertEquals(2, referenceType1.containedTypeCount());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isInterface());
      assertEquals(2, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isAbstract());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.useStaticType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isCollectionLikeType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isInterface());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.hasHandlers());
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType2.equals((Object)referenceType0));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      assertNotNull(collectionLikeType0);
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertTrue(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      
      Class<?> class1 = ClassUtil.rawClass(collectionLikeType0);
      assertNotNull(class1);
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertTrue(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals(1537, class1.getModifiers());
      assertTrue(class1.isInterface());
      assertEquals("interface java.lang.annotation.Annotation", class1.toString());
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.backticked("1g8Qn");
      assertNotNull(string0);
      assertEquals("`1g8Qn`", string0);
      
      Float float0 = new Float((-814.9555262003));
      assertNotNull(float0);
      assertEquals((-814.9555F), (float)float0, 0.01F);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) float0);
      assertFalse(boolean0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      assertSame(annotationArray1, annotationArray0);
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReceiverType();
      assertNotNull(annotatedType0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor1);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      
      Class<?> class2 = classUtil_Ctor1.getDeclaringClass();
      assertNotNull(class2);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.io.IOException", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      
      Class<String> class3 = String.class;
      Class<?> class4 = ClassUtil.getEnclosingClass(class3);
      assertNull(class4);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "EV'}(.pDT9k\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Sn", "Sn", 96);
      assertNotNull(sQLWarning0);
      assertEquals(96, sQLWarning0.getErrorCode());
      assertEquals("Sn", sQLWarning0.getSQLState());
      assertEquals("Sn", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: Sn", sQLWarning0.toString());
      
      SQLWarning sQLWarning1 = (SQLWarning)ClassUtil.throwIfRTE(sQLWarning0);
      assertNotNull(sQLWarning1);
      assertEquals(96, sQLWarning0.getErrorCode());
      assertEquals("Sn", sQLWarning0.getSQLState());
      assertEquals("Sn", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: Sn", sQLWarning0.toString());
      assertEquals("Sn", sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLWarning: Sn", sQLWarning1.toString());
      assertEquals(96, sQLWarning1.getErrorCode());
      assertEquals("Sn", sQLWarning1.getMessage());
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning1, sQLWarning0);
      
      Class<Float> class0 = Float.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      Class<CollectionType> class2 = CollectionType.class;
      String string0 = ClassUtil.isLocalType(class2, false);
      assertNull(string0);
      
      List<Class<?>> list1 = ClassUtil.findSuperClasses(class0, class2, false);
      assertNotNull(list1);
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list1.equals((Object)list0));
      
      Class<Character> class3 = Character.class;
      Class<?> class4 = ClassUtil.primitiveType(class3);
      assertNotNull(class4);
      assertEquals(1041, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertTrue(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertEquals("char", class4.toString());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 57343;
      intArray0[1] = 3167;
      intArray0[2] = (-716);
      intArray0[3] = (-4589);
      intArray0[4] = 15;
      intArray0[5] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, (Throwable) null);
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {57343, 3167, (-716), (-4589), 15, (-1)}, intArray0);
      assertEquals(6, intArray0.length);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, batchUpdateException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertArrayEquals(new int[] {57343, 3167, (-716), (-4589), 15, (-1)}, intArray0);
      assertEquals(6, intArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Float float0 = new Float((-252.7439));
      assertNotNull(float0);
      assertEquals((-252.7439F), (float)float0, 0.01F);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<Short> class1 = Short.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReceiverType();
      assertNotNull(annotatedType0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, true);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor1);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      
      Class<?> class3 = classUtil_Ctor1.getDeclaringClass();
      assertNotNull(class3);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      assertEquals("class java.io.IOException", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("zv;lp3=Sn7h", "_cshX7CY{Z{0b!2jtI", 3);
      assertNotNull(sQLWarning0);
      assertEquals("zv;lp3=Sn7h", sQLWarning0.getMessage());
      assertEquals(3, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: zv;lp3=Sn7h", sQLWarning0.toString());
      assertEquals("_cshX7CY{Z{0b!2jtI", sQLWarning0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      
      SQLWarning sQLWarning1 = (SQLWarning)sQLWarning0.initCause(sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLWarning1);
      assertEquals("zv;lp3=Sn7h", sQLWarning0.getMessage());
      assertEquals(3, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: zv;lp3=Sn7h", sQLWarning0.toString());
      assertEquals("_cshX7CY{Z{0b!2jtI", sQLWarning0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLWarning: zv;lp3=Sn7h", sQLWarning1.toString());
      assertEquals("_cshX7CY{Z{0b!2jtI", sQLWarning1.getSQLState());
      assertEquals("zv;lp3=Sn7h", sQLWarning1.getMessage());
      assertEquals(3, sQLWarning1.getErrorCode());
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning1, sQLWarning0);
      
      SQLWarning sQLWarning2 = (SQLWarning)ClassUtil.throwIfRTE(sQLWarning0);
      assertNotNull(sQLWarning2);
      assertEquals("zv;lp3=Sn7h", sQLWarning0.getMessage());
      assertEquals(3, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: zv;lp3=Sn7h", sQLWarning0.toString());
      assertEquals("_cshX7CY{Z{0b!2jtI", sQLWarning0.getSQLState());
      assertEquals("zv;lp3=Sn7h", sQLWarning2.getMessage());
      assertEquals("java.sql.SQLWarning: zv;lp3=Sn7h", sQLWarning2.toString());
      assertEquals(3, sQLWarning2.getErrorCode());
      assertEquals("_cshX7CY{Z{0b!2jtI", sQLWarning2.getSQLState());
      assertSame(sQLWarning0, sQLWarning2);
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning2, sQLWarning1);
      assertSame(sQLWarning2, sQLWarning0);
      
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(94, methodArray0.length);
      
      Class<Character> class1 = Character.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertSame(class1, class0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "zT;lp3=Sn7h";
      SQLWarning sQLWarning0 = new SQLWarning("zT;lp3=Sn7h", "_cshX7CY{Z{0b!2jtI", 3);
      assertNotNull(sQLWarning0);
      assertEquals("_cshX7CY{Z{0b!2jtI", sQLWarning0.getSQLState());
      assertEquals("zT;lp3=Sn7h", sQLWarning0.getMessage());
      assertEquals(3, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: zT;lp3=Sn7h", sQLWarning0.toString());
      
      SQLWarning sQLWarning1 = (SQLWarning)ClassUtil.throwIfRTE(sQLWarning0);
      assertNotNull(sQLWarning1);
      assertEquals("_cshX7CY{Z{0b!2jtI", sQLWarning0.getSQLState());
      assertEquals("zT;lp3=Sn7h", sQLWarning0.getMessage());
      assertEquals(3, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: zT;lp3=Sn7h", sQLWarning0.toString());
      assertEquals("zT;lp3=Sn7h", sQLWarning1.getMessage());
      assertEquals("_cshX7CY{Z{0b!2jtI", sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLWarning: zT;lp3=Sn7h", sQLWarning1.toString());
      assertEquals(3, sQLWarning1.getErrorCode());
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning1, sQLWarning0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertNotNull(jsonpCharacterEscapes0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertNotNull(jsonFactory2);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      JsonFactory jsonFactory3 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertNotNull(jsonFactory3);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory4);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory4.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      assertNotNull(uTF8JsonGenerator0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory1);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: zT;lp3=Sn7h
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(2, methodArray0.length);
      
      String string0 = ClassUtil.nonNullString("3T.P%$RF_");
      assertNotNull(string0);
      assertEquals("3T.P%$RF_", string0);
      
      Class<NoClass> class1 = NoClass.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
      assertSame(class1, class0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
      
      Class<String> class1 = String.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(77, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Short> class1 = Short.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class1);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int1);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertTrue(int1 == int0);
      
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
      
      Class<AccessibleObject> class5 = AccessibleObject.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class5);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.backticked("1g8Qn");
      assertNotNull(string0);
      assertEquals("`1g8Qn`", string0);
      
      Float float0 = new Float((-814.9555262003));
      assertNotNull(float0);
      assertEquals((-814.9555F), (float)float0, 0.01F);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) float0);
      assertFalse(boolean0);
      
      Class<Annotation> class0 = Annotation.class;
      boolean boolean1 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Long> class1 = Long.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertNotNull(methodArray0);
      assertEquals(52, methodArray0.length);
      
      boolean boolean2 = ClassUtil.isJacksonStdImpl((Object) "1g8Qn");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "M)%Y~H/.CN{'9;%G.");
      assertNotNull(jsonMappingException0);
      
      String string1 = ClassUtil.getClassDescription(jsonMappingException0);
      assertNotNull(string1);
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<Object> class2 = Object.class;
      boolean boolean3 = ClassUtil.hasClass((Object) null, class2);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      DataTruncation dataTruncation0 = new DataTruncation((-1653959476), true, true, (-1653959476), (-1653959476));
      assertNotNull(dataTruncation0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      SQLWarning sQLWarning0 = dataTruncation0.getNextWarning();
      assertNull(sQLWarning0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      
      StackTraceElement stackTraceElement0 = new StackTraceElement("serialVersionUID", "serialVersionUID", "serialVersionUID", (-524));
      assertNotNull(stackTraceElement0);
      assertEquals("serialVersionUID", stackTraceElement0.getMethodName());
      assertEquals("serialVersionUID.serialVersionUID(serialVersionUID)", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("serialVersionUID", stackTraceElement0.getFileName());
      assertEquals((-524), stackTraceElement0.getLineNumber());
      assertEquals("serialVersionUID", stackTraceElement0.getClassName());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JAa'*1g/@e4", "&Ay=[!2j2Z'(n", dataTruncation0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: JAa'*1g/@e4", sQLFeatureNotSupportedException0.toString());
      assertEquals("&Ay=[!2j2Z'(n", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("JAa'*1g/@e4", sQLFeatureNotSupportedException0.getMessage());
      
      sQLFeatureNotSupportedException0.setNextException((SQLException) null);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: JAa'*1g/@e4", sQLFeatureNotSupportedException0.toString());
      assertEquals("&Ay=[!2j2Z'(n", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("JAa'*1g/@e4", sQLFeatureNotSupportedException0.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) dataTruncation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data truncation
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = "1g8Qn";
      String string1 = ClassUtil.backticked("1g8Qn");
      assertNotNull(string1);
      assertEquals("`1g8Qn`", string1);
      assertFalse(string1.equals((Object)string0));
      
      Float float0 = new Float((-814.9555262003));
      assertNotNull(float0);
      assertEquals((-814.9555F), (float)float0, 0.01F);
      
      Class<IOException> class0 = IOException.class;
      String string2 = ClassUtil.getPackageName(class0);
      assertNotNull(string2);
      assertEquals("java.io", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Class<IOException> class1 = IOException.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class1);
      assertFalse(boolean0);
      assertSame(class1, class0);
      
      Class<?> class2 = ClassUtil.classOf((Object) null);
      assertNull(class2);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "1g8Qn", false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      String string3 = null;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      
      String string0 = ClassUtil.quotedOr(class0, "QN:QFNg*UvYc>qag'/");
      assertNotNull(string0);
      assertEquals("\"class java.lang.Void\"", string0);
      
      Class<Float> class2 = Float.class;
      Constructor<Float> constructor1 = ClassUtil.findConstructor(class2, false);
      assertNull(constructor1);
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor1);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, classUtil_Ctor0, false);
      assertNotNull(iOContext0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      MockFile mockFile0 = new MockFile("M6fNr6JiLUi'=%Y`");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, mockFileOutputStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(mockFile0.getParent());
      assertEquals("M6fNr6JiLUi'=%Y`", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("M6fNr6JiLUi'=%Y`", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCodec(objectMapper0);
      assertNotNull(uTF8JsonGenerator1);
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(mockFile0.getParent());
      assertEquals("M6fNr6JiLUi'=%Y`", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("M6fNr6JiLUi'=%Y`", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("M6fNr6JiLUi'=%Y`", "\"class java.lang.Void\"");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("M6fNr6JiLUi'=%Y`", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: M6fNr6JiLUi'=%Y`", sQLNonTransientConnectionException0.toString());
      assertEquals("\"class java.lang.Void\"", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(uTF8JsonGenerator1, "\"class java.lang.Void\"", sQLNonTransientConnectionException0);
      assertNotNull(jsonMappingException0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.getRootCause(jsonMappingException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(mockFile0.getParent());
      assertEquals("M6fNr6JiLUi'=%Y`", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("M6fNr6JiLUi'=%Y`", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals("M6fNr6JiLUi'=%Y`", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: M6fNr6JiLUi'=%Y`", sQLNonTransientConnectionException0.toString());
      assertEquals("\"class java.lang.Void\"", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("M6fNr6JiLUi'=%Y`", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: M6fNr6JiLUi'=%Y`", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("\"class java.lang.Void\"", sQLNonTransientConnectionException1.getSQLState());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Float float0 = new Float((-2083.397F));
      assertNotNull(float0);
      assertEquals((-2083.397F), (float)float0, 0.01F);
      
      String string0 = ClassUtil.quotedOr(float0, "{`brBBP$c\"r#z@;q9XX");
      assertNotNull(string0);
      assertEquals("\"-2083.397\"", string0);
      
      Class<Long> class1 = Long.TYPE;
      assertNotNull(class1);
      assertEquals("long", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      
      String string1 = ClassUtil.nameOf(class1);
      assertNotNull(string1);
      assertEquals("`long`", string1);
      assertEquals("long", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = ClassUtil.classNameOf(class0);
      assertNotNull(string2);
      assertEquals("`java.lang.Class`", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = ClassUtil.getPackageName(class0);
      assertNotNull(string3);
      assertEquals("java.lang", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
      
      Class<?> class2 = ClassUtil.classOf("`long`");
      assertNotNull(class2);
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, class2, true);
      assertNotNull(iOContext0);
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`long`");
      assertNotNull(mockFileOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, mockFileOutputStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(0);
      assertNotNull(uTF8JsonGenerator1);
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(2, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("TS`li", ":_'Kzr[T$I", (Map<String, ClientInfoStatus>) null);
      assertNotNull(sQLClientInfoException0);
      assertEquals(":_'Kzr[T$I", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException0.toString());
      assertEquals("TS`li", sQLClientInfoException0.getMessage());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNull(map0);
      assertEquals(":_'Kzr[T$I", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException0.toString());
      assertEquals("TS`li", sQLClientInfoException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("TS`li", "1", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException1);
      assertEquals(":_'Kzr[T$I", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException0.toString());
      assertEquals("TS`li", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException1.toString());
      assertEquals("TS`li", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("1", sQLClientInfoException1.getSQLState());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("GRis", sQLClientInfoException1);
      assertNotNull(sQLTransientException0);
      assertEquals(":_'Kzr[T$I", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException0.toString());
      assertEquals("TS`li", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException1.toString());
      assertEquals("TS`li", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("1", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: GRis", sQLTransientException0.toString());
      assertEquals("GRis", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      MockException mockException0 = new MockException("GRis", sQLTransientException0);
      assertNotNull(mockException0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: GRis
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Float float0 = new Float((-2083.397F));
      assertNotNull(float0);
      assertEquals((-2083.397F), (float)float0, 0.01F);
      
      String string0 = ClassUtil.quotedOr(float0, "{`brBBP$c\"r#z@;q9XX");
      assertNotNull(string0);
      assertEquals("\"-2083.397\"", string0);
      
      Class<Long> class1 = Long.class;
      String string1 = ClassUtil.nameOf(class1);
      assertNotNull(string1);
      assertEquals("`java.lang.Long`", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = ClassUtil.classNameOf(class0);
      assertNotNull(string2);
      assertEquals("`java.lang.Class`", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = ClassUtil.getPackageName(class0);
      assertNotNull(string3);
      assertEquals("java.lang", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
      
      Class<?> class2 = ClassUtil.classOf("`java.lang.Long`");
      assertNotNull(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isPrimitive());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, class2, true);
      assertNotNull(iOContext0);
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isPrimitive());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ObjectMapper objectMapper1 = objectMapper0.copy();
      assertNotNull(objectMapper1);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`java.lang.Long`");
      assertNotNull(mockFileOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, mockFileOutputStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isPrimitive());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(0);
      assertNotNull(uTF8JsonGenerator1);
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isPrimitive());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("TS`li", ":_'Kzr[T$I", (Map<String, ClientInfoStatus>) null);
      assertNotNull(sQLClientInfoException0);
      assertEquals(":_'Kzr[T$I", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("TS`li", sQLClientInfoException0.getMessage());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNull(map0);
      assertEquals(":_'Kzr[T$I", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("TS`li", sQLClientInfoException0.getMessage());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("TS`li", "1", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException1);
      assertEquals(":_'Kzr[T$I", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("TS`li", sQLClientInfoException0.getMessage());
      assertEquals("1", sQLClientInfoException1.getSQLState());
      assertEquals("TS`li", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("GRis", sQLClientInfoException1);
      assertNotNull(sQLTransientException0);
      assertEquals(":_'Kzr[T$I", sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("TS`li", sQLClientInfoException0.getMessage());
      assertEquals("1", sQLClientInfoException1.getSQLState());
      assertEquals("TS`li", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("GRis", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: GRis", sQLTransientException0.toString());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      MockException mockException0 = new MockException("GRis", sQLTransientException0);
      assertNotNull(mockException0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: GRis
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<AccessPattern> class0 = AccessPattern.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNotNull(type0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(boolean0);
      assertSame(class1, class0);
      
      String string0 = ClassUtil.backticked("1g8Qn");
      assertNotNull(string0);
      assertEquals("`1g8Qn`", string0);
      
      Float float0 = new Float((-814.9555262003));
      assertNotNull(float0);
      assertEquals((-814.9555F), (float)float0, 0.01F);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) float0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Void> class2 = Void.class;
      ClassUtil.createInstance(class2, true);
      assertEquals(java.lang.Void@1bd40d5e, (Void)void0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      String string0 = ClassUtil.quotedOr(class0, "QN:QFNg*UvYc>qag'/");
      assertNotNull(string0);
      assertEquals("\"class java.lang.Void\"", string0);
      
      Class<Float> class2 = Float.class;
      Constructor<Float> constructor1 = ClassUtil.findConstructor(class2, false);
      assertNull(constructor1);
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor1);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray1);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertSame(annotationArray1, annotationArray0);
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.backticked("1g8Qn");
      assertNotNull(string0);
      assertEquals("`1g8Qn`", string0);
      
      Float float0 = new Float((-814.9555262003));
      assertNotNull(float0);
      assertEquals((-814.9555F), (float)float0, 0.01F);
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(0, methodArray0.length);
      
      Class<Character> class1 = Character.class;
      Constructor<Character> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("W", "W");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("W", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("W", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: W", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("W", sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals("W", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("W", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: W", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: W", sQLFeatureNotSupportedException1.toString());
      assertEquals("W", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLFeatureNotSupportedException1.setNextException(sQLFeatureNotSupportedException0);
      assertEquals("W", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("W", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: W", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: W", sQLFeatureNotSupportedException1.toString());
      assertEquals("W", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Cannot access ", "Cannot access ", "Cannot access ", (-524));
      assertNotNull(stackTraceElement0);
      assertEquals((-524), stackTraceElement0.getLineNumber());
      assertEquals("Cannot access ", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("Cannot access ", stackTraceElement0.getMethodName());
      assertEquals("Cannot access ", stackTraceElement0.getClassName());
      assertEquals("Cannot access .Cannot access (Cannot access )", stackTraceElement0.toString());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      String string0 = "5Ry.er|m;\\u";
      StackTraceElement stackTraceElement1 = new StackTraceElement("W", "Gl#rP`E", string0, (-6));
      assertNotNull(stackTraceElement1);
      assertEquals("5Ry.er|m;\\u", stackTraceElement1.getFileName());
      assertEquals("Gl#rP`E", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("W.Gl#rP`E(5Ry.er|m;\\u)", stackTraceElement1.toString());
      assertEquals((-6), stackTraceElement1.getLineNumber());
      assertEquals("W", stackTraceElement1.getClassName());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      assertEquals("W", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("W", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: W", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(2, stackTraceElementArray0.length);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      
      sQLFeatureNotSupportedException0.setNextException(sQLFeatureNotSupportedException1);
      assertEquals("W", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("W", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: W", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: W", sQLFeatureNotSupportedException1.toString());
      assertEquals("W", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = (SQLFeatureNotSupportedException)sQLFeatureNotSupportedException0.initCause(sQLFeatureNotSupportedException1);
      assertNotNull(sQLFeatureNotSupportedException2);
      assertEquals("W", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("W", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: W", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: W", sQLFeatureNotSupportedException1.toString());
      assertEquals("W", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("W", sQLFeatureNotSupportedException2.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: W", sQLFeatureNotSupportedException2.toString());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("W", sQLFeatureNotSupportedException2.getMessage());
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException2);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException2);
      assertNotSame(sQLFeatureNotSupportedException2, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException2, sQLFeatureNotSupportedException0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      
      sQLFeatureNotSupportedException1.addSuppressed(sQLFeatureNotSupportedException0);
      assertEquals("W", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("W", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: W", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: W", sQLFeatureNotSupportedException1.toString());
      assertEquals("W", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException2);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException2);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException2));
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class<NoClass> class1 = NoClass.class;
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      boolean boolean1 = ClassUtil.isProxyType(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<IOException> class3 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotationArray0.length);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int1);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(int1 == int0);
      
      Class<Short> class4 = Short.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class4);
      assertNotNull(methodArray0);
      assertEquals(23, methodArray0.length);
      
      Class<Boolean> class5 = Boolean.class;
      Class<?> class6 = ClassUtil.getOuterClass(class5);
      assertNull(class6);
      
      boolean boolean2 = ClassUtil.isCollectionMapOrArray(class3);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Tx^#kds`=y");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Tx^#kds`=y", sQLFeatureNotSupportedException0.toString());
      assertEquals("Tx^#kds`=y", sQLFeatureNotSupportedException0.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tx^#kds`=y
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(0, fieldArray0.length);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2135);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      
      Class<Character> class2 = Character.class;
      boolean boolean1 = ClassUtil.hasClass(placeholderForType0, class2);
      assertFalse(boolean1);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(boolean1 == boolean0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      String string0 = ClassUtil.backticked("HAFu");
      assertNotNull(string0);
      assertEquals("`HAFu`", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.backticked("1g8Qn");
      assertNotNull(string0);
      assertEquals("`1g8Qn`", string0);
      
      Float float0 = new Float((-814.9555262003));
      assertNotNull(float0);
      assertEquals((-814.9555F), (float)float0, 0.01F);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) float0);
      assertFalse(boolean0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int1);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertTrue(int1 == int0);
      
      Class<Object> class2 = Object.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = ClassUtil.getPackageName(class1);
      assertNotNull(string1);
      assertEquals("java.io", string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(16, classUtil_CtorArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      assertNull(annotatedClass0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      assertNotNull(referenceType0);
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, (String) null, referenceType0);
      assertNotNull(virtualAnnotatedMember0);
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertNull(virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      
      Field field0 = virtualAnnotatedMember0.getAnnotated();
      assertNull(field0);
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertNull(virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertNotNull(annotationMap0);
      assertEquals(0, annotationMap0.size());
      
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      assertNotNull(annotationMap1);
      assertEquals(0, annotationMap0.size());
      assertEquals(0, annotationMap1.size());
      assertSame(annotationMap0, annotationMap1);
      assertSame(annotationMap1, annotationMap0);
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap1);
      assertNotNull(annotatedField0);
      assertEquals(0, annotationMap0.size());
      assertEquals(0, annotationMap1.size());
      assertEquals(0, annotatedField0.getAnnotationCount());
      
      Member member0 = virtualAnnotatedMember0.getMember();
      assertNull(member0);
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertNull(virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.backticked("1g8Qn");
      assertNotNull(string0);
      assertEquals("`1g8Qn`", string0);
      
      Float float0 = new Float((-814.9555262003));
      assertNotNull(float0);
      assertEquals((-814.9555F), (float)float0, 0.01F);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) float0);
      assertFalse(boolean0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReceiverType();
      assertNotNull(annotatedType0);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor1);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      
      Class<?> class2 = classUtil_Ctor1.getDeclaringClass();
      assertNotNull(class2);
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.io.IOException", class2.toString());
      assertFalse(class2.isEnum());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      Constructor<ResolvedRecursiveType> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      Class<CollectionType> class1 = CollectionType.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      
      CollectionLikeType collectionLikeType0 = typeFactory1.constructRawCollectionLikeType(class1);
      assertNotNull(collectionLikeType0);
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isAbstract());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      
      boolean boolean1 = collectionLikeType0.isThrowable();
      assertFalse(boolean1);
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isAbstract());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(boolean1 == boolean0);
      
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler(typeFactory1);
      assertNotNull(collectionLikeType1);
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType1.isInterface());
      assertTrue(collectionLikeType1.isConcrete());
      assertFalse(collectionLikeType1.isArrayType());
      assertTrue(collectionLikeType1.isFinal());
      assertTrue(collectionLikeType1.isContainerType());
      assertFalse(collectionLikeType1.isAbstract());
      assertFalse(collectionLikeType1.useStaticType());
      assertTrue(collectionLikeType1.hasHandlers());
      assertEquals(0, collectionLikeType1.containedTypeCount());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertFalse(collectionLikeType1.hasValueHandler());
      assertFalse(collectionLikeType1.isPrimitive());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertTrue(collectionLikeType1.hasContentType());
      assertFalse(collectionLikeType1.isEnumType());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
      
      Class<?> class3 = ClassUtil.rawClass(collectionLikeType1);
      assertNotNull(class3);
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType1.isInterface());
      assertTrue(collectionLikeType1.isConcrete());
      assertFalse(collectionLikeType1.isArrayType());
      assertTrue(collectionLikeType1.isFinal());
      assertTrue(collectionLikeType1.isContainerType());
      assertFalse(collectionLikeType1.isAbstract());
      assertFalse(collectionLikeType1.useStaticType());
      assertTrue(collectionLikeType1.hasHandlers());
      assertEquals(0, collectionLikeType1.containedTypeCount());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertFalse(collectionLikeType1.hasValueHandler());
      assertFalse(collectionLikeType1.isPrimitive());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertTrue(collectionLikeType1.hasContentType());
      assertFalse(collectionLikeType1.isEnumType());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionType", class3.toString());
      assertFalse(class3.isPrimitive());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isAnnotation());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(collectionLikeType0.equals((Object)collectionLikeType1));
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      Class<CollectionType> class1 = CollectionType.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      
      CollectionLikeType collectionLikeType0 = typeFactory1.constructRawCollectionLikeType(class1);
      assertNotNull(collectionLikeType0);
      assertFalse(collectionLikeType0.isEnumType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      
      boolean boolean1 = collectionLikeType0.isThrowable();
      assertFalse(boolean1);
      assertFalse(collectionLikeType0.isEnumType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(boolean1 == boolean0);
      
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory2 = typeFactory0.withModifier(typeModifier0);
      assertNotNull(typeFactory2);
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory2, typeFactory1);
      assertNotSame(typeFactory2, typeFactory0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler(typeFactory1);
      assertNotNull(collectionLikeType1);
      assertFalse(collectionLikeType0.isEnumType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType1.hasHandlers());
      assertTrue(collectionLikeType1.isConcrete());
      assertTrue(collectionLikeType1.hasContentType());
      assertFalse(collectionLikeType1.isPrimitive());
      assertFalse(collectionLikeType1.isArrayType());
      assertFalse(collectionLikeType1.isEnumType());
      assertFalse(collectionLikeType1.isInterface());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertFalse(collectionLikeType1.hasValueHandler());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertEquals(0, collectionLikeType1.containedTypeCount());
      assertFalse(collectionLikeType1.useStaticType());
      assertFalse(collectionLikeType1.isAbstract());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertTrue(collectionLikeType1.isContainerType());
      assertTrue(collectionLikeType1.isFinal());
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory1.equals((Object)typeFactory2));
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
      
      Class<?> class3 = ClassUtil.rawClass(collectionLikeType1);
      assertNotNull(class3);
      assertFalse(collectionLikeType0.isEnumType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType1.hasHandlers());
      assertTrue(collectionLikeType1.isConcrete());
      assertTrue(collectionLikeType1.hasContentType());
      assertFalse(collectionLikeType1.isPrimitive());
      assertFalse(collectionLikeType1.isArrayType());
      assertFalse(collectionLikeType1.isEnumType());
      assertFalse(collectionLikeType1.isInterface());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertFalse(collectionLikeType1.hasValueHandler());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertEquals(0, collectionLikeType1.containedTypeCount());
      assertFalse(collectionLikeType1.useStaticType());
      assertFalse(collectionLikeType1.isAbstract());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertTrue(collectionLikeType1.isContainerType());
      assertTrue(collectionLikeType1.isFinal());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionType", class3.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory1.equals((Object)typeFactory2));
      assertTrue(collectionLikeType0.equals((Object)collectionLikeType1));
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
      
      Class<ArrayType> class0 = ArrayType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(16, classUtil_CtorArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Constructor<JsonMappingException> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Long long0 = new Long((-592L));
      assertNotNull(long0);
      assertEquals((-592L), (long)long0);
      
      String string0 = ClassUtil.quotedOr(long0, "vals");
      assertNotNull(string0);
      assertEquals("\"-592\"", string0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("g|tomkogSg?UJ", "elementType", sQLTransactionRollbackException0);
      assertNotNull(sQLTransactionRollbackException1);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("elementType", sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("g|tomkogSg?UJ", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: g|tomkogSg?UJ", sQLTransactionRollbackException1.toString());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      SQLException sQLException0 = new SQLException("g|tomkogSg?UJ", "V}je-QPI", sQLTransactionRollbackException1);
      assertNotNull(sQLException0);
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("elementType", sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertEquals("g|tomkogSg?UJ", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: g|tomkogSg?UJ", sQLTransactionRollbackException1.toString());
      assertEquals("V}je-QPI", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: g|tomkogSg?UJ", sQLException0.toString());
      assertEquals("g|tomkogSg?UJ", sQLException0.getMessage());
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      MockError mockError0 = new MockError("vals", sQLException0);
      assertNotNull(mockError0);
      assertFalse(sQLTransactionRollbackException0.equals((Object)sQLTransactionRollbackException1));
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.RuntimeException`", string0);
      
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(1, fieldArray0.length);
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      String string1 = mockError0.toString();
      assertNotNull(string1);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", string1);
      assertFalse(string1.equals((Object)string0));
      
      MockError mockError1 = new MockError((String) null, mockError0);
      assertNotNull(mockError1);
      assertFalse(mockError1.equals((Object)mockError0));
      
      Error error0 = ClassUtil.nonNull((Error) mockError0, (Error) mockError1);
      assertNotNull(error0);
      assertNotSame(mockError0, mockError1);
      assertSame(mockError0, error0);
      assertNotSame(mockError1, mockError0);
      assertNotSame(mockError1, error0);
      assertNotSame(error0, mockError1);
      assertSame(error0, mockError0);
      assertFalse(mockError0.equals((Object)mockError1));
      assertFalse(mockError1.equals((Object)mockError0));
      assertFalse(error0.equals((Object)mockError1));
      
      Class<Character> class2 = Character.class;
      String string2 = ClassUtil.canBeABeanType(class2);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      Double double0 = new Double((-252.7439));
      assertNotNull(double0);
      assertEquals((-252.7439), (double)double0, 0.01);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)ClassUtil.throwIfIOE(sQLTransientConnectionException0);
      assertNotNull(sQLTransientConnectionException1);
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(0, fieldArray0.length);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2135);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      
      Class<Character> class2 = Character.class;
      boolean boolean0 = ClassUtil.hasClass(placeholderForType0, class2);
      assertFalse(boolean0);
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class2);
      assertFalse(boolean0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      
      StackTraceElement[] stackTraceElementArray0 = sQLNonTransientException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(13, stackTraceElementArray0.length);
      
      SQLNonTransientException sQLNonTransientException1 = (SQLNonTransientException)ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
      assertNotNull(sQLNonTransientException1);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException1.toString());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertNull(sQLNonTransientException1.getSQLState());
      assertNull(sQLNonTransientException1.getMessage());
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException1, sQLNonTransientException0);
      
      String string0 = ClassUtil.classNameOf(sQLNonTransientException1);
      assertNotNull(string0);
      assertEquals("`java.sql.SQLNonTransientException`", string0);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException1.toString());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertNull(sQLNonTransientException1.getSQLState());
      assertNull(sQLNonTransientException1.getMessage());
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException1, sQLNonTransientException0);
      
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Long> class3 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      Constructor<JsonMappingException> constructor1 = ClassUtil.findConstructor(class4, false);
      assertNull(constructor1);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      assertNotNull(mockError0);
      
      String string0 = mockError0.getLocalizedMessage();
      assertNull(string0);
      
      String string1 = ClassUtil.quotedOr((Object) null, "no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (%s)");
      assertNotNull(string1);
      assertEquals("no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (%s)", string1);
      
      Class<MapType> class0 = MapType.class;
      String string2 = ClassUtil.getPackageName(class0);
      assertNotNull(string2);
      assertEquals("com.fasterxml.jackson.databind.type", string2);
      assertFalse(string2.equals((Object)string1));
      
      Class<IOException> class1 = IOException.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("elementType", (String) null, (Throwable) null);
      assertNotNull(sQLTransactionRollbackException1);
      assertEquals("java.sql.SQLTransactionRollbackException: elementType", sQLTransactionRollbackException1.toString());
      assertEquals("elementType", sQLTransactionRollbackException1.getMessage());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      SQLException sQLException0 = new SQLException("elementType", "V}je-QPI", sQLTransactionRollbackException1);
      assertNotNull(sQLException0);
      assertEquals("java.sql.SQLTransactionRollbackException: elementType", sQLTransactionRollbackException1.toString());
      assertEquals("elementType", sQLTransactionRollbackException1.getMessage());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("V}je-QPI", sQLException0.getSQLState());
      assertEquals("elementType", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: elementType", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      MockError mockError1 = new MockError("g|tomkogSg?UJ", sQLException0);
      assertNotNull(mockError1);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      assertFalse(mockError1.equals((Object)mockError0));
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("JsonNode not of type ObjectNode (but ", "com.fasterxml.jackson.databind.type", sQLException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLTransactionRollbackException: elementType", sQLTransactionRollbackException1.toString());
      assertEquals("elementType", sQLTransactionRollbackException1.getMessage());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("V}je-QPI", sQLException0.getSQLState());
      assertEquals("elementType", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: elementType", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.type", sQLRecoverableException0.getSQLState());
      assertEquals("JsonNode not of type ObjectNode (but ", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: JsonNode not of type ObjectNode (but ", sQLRecoverableException0.toString());
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)ClassUtil.throwIfError(sQLRecoverableException0);
      assertNotNull(sQLRecoverableException1);
      assertEquals("java.sql.SQLTransactionRollbackException: elementType", sQLTransactionRollbackException1.toString());
      assertEquals("elementType", sQLTransactionRollbackException1.getMessage());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals("V}je-QPI", sQLException0.getSQLState());
      assertEquals("elementType", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: elementType", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.type", sQLRecoverableException0.getSQLState());
      assertEquals("JsonNode not of type ObjectNode (but ", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: JsonNode not of type ObjectNode (but ", sQLRecoverableException0.toString());
      assertEquals("JsonNode not of type ObjectNode (but ", sQLRecoverableException1.getMessage());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.type", sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: JsonNode not of type ObjectNode (but ", sQLRecoverableException1.toString());
      assertNotSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      assertFalse(sQLTransactionRollbackException1.equals((Object)sQLTransactionRollbackException0));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<SimpleType> class1 = SimpleType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<Character> class2 = Character.class;
      String string0 = ClassUtil.nameOf(class2);
      assertNotNull(string0);
      assertEquals("`java.lang.Character`", string0);
      
      Class<Double> class3 = Double.class;
      Constructor<Double> constructor0 = ClassUtil.findConstructor(class3, true);
      assertNull(constructor0);
      
      Class<ReferenceType> class4 = ReferenceType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class4);
      assertNotNull(fieldArray0);
      assertEquals(3, fieldArray0.length);
      
      String string1 = ClassUtil.getPackageName(class4);
      assertNotNull(string1);
      assertEquals("com.fasterxml.jackson.databind.type", string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<Character> class5 = Character.class;
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class5);
      assertFalse(boolean1);
      assertSame(class5, class2);
      assertFalse(boolean1 == boolean0);
      
      Class<Object> class6 = Object.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class6);
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      
      String string2 = ClassUtil.nullOrToString(class2);
      assertNotNull(string2);
      assertSame(class2, class5);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Class<Object> class7 = Object.class;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-815);
      intArray0[2] = 1558;
      intArray0[3] = 1066;
      intArray0[4] = Integer.MIN_VALUE;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`java.lang.Character`", intArray0);
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: `java.lang.Character`", batchUpdateException0.toString());
      assertEquals("`java.lang.Character`", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {0, (-815), 1558, 1066, Integer.MIN_VALUE}, intArray0);
      assertEquals(5, intArray0.length);
      
      MockThrowable mockThrowable0 = new MockThrowable(batchUpdateException0);
      assertNotNull(mockThrowable0);
      assertArrayEquals(new int[] {0, (-815), 1558, 1066, Integer.MIN_VALUE}, intArray0);
      assertEquals(5, intArray0.length);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("com.fasterxml.jackson.databind.type", intArray0, mockThrowable0);
      assertNotNull(batchUpdateException1);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: `java.lang.Character`", batchUpdateException0.toString());
      assertEquals("`java.lang.Character`", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: `java.lang.Character`", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.BatchUpdateException: `java.lang.Character`", mockThrowable0.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.type", batchUpdateException1.getMessage());
      assertEquals("java.sql.BatchUpdateException: com.fasterxml.jackson.databind.type", batchUpdateException1.toString());
      assertNull(batchUpdateException1.getSQLState());
      assertArrayEquals(new int[] {0, (-815), 1558, 1066, Integer.MIN_VALUE}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      batchUpdateException0.forEach(consumer0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: `java.lang.Character`", batchUpdateException0.toString());
      assertEquals("`java.lang.Character`", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {0, (-815), 1558, 1066, Integer.MIN_VALUE}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      
      MockError mockError0 = new MockError("java.lang.Class@0000000001", batchUpdateException1);
      assertNotNull(mockError0);
      assertArrayEquals(new int[] {0, (-815), 1558, 1066, Integer.MIN_VALUE}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      
      Class<ResolvedRecursiveType> class8 = ResolvedRecursiveType.class;
      Class<?> class9 = ClassUtil.getDeclaringClass(class8);
      assertNull(class9);
      assertSame(class8, class0);
      
      boolean boolean2 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean2);
      assertSame(class0, class8);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class7, mockError0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class org.evosuite.runtime.mock.java.lang.MockError (of class java.lang.Object) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte) (-52);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)70, (byte) (-6), (byte) (-108), (byte)71, (byte) (-11), (byte)56, (byte) (-65), (byte) (-52)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.backticked("1g8Qn");
      assertNotNull(string0);
      assertEquals("`1g8Qn`", string0);
      
      Float float0 = new Float((-814.9555262003));
      assertNotNull(float0);
      assertEquals((-814.9555F), (float)float0, 0.01F);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) float0);
      assertFalse(boolean0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("/$@C", ".TkJLM}", 2);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("/$@C", sQLNonTransientConnectionException0.getMessage());
      assertEquals(2, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: /$@C", sQLNonTransientConnectionException0.toString());
      assertEquals(".TkJLM}", sQLNonTransientConnectionException0.getSQLState());
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor1);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      
      int int0 = classUtil_Ctor1.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotationArray0.length);
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.getRootCause(sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("/$@C", sQLNonTransientConnectionException0.getMessage());
      assertEquals(2, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: /$@C", sQLNonTransientConnectionException0.toString());
      assertEquals(".TkJLM}", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: /$@C", sQLNonTransientConnectionException1.toString());
      assertEquals(".TkJLM}", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("/$@C", sQLNonTransientConnectionException1.getMessage());
      assertEquals(2, sQLNonTransientConnectionException1.getErrorCode());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      assertNotNull(classUtil_Ctor2);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor2.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor2.equals((Object)classUtil_Ctor0));
      
      Annotation[][] annotationArray1 = classUtil_Ctor2.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(0, annotationArray1.length);
      assertNotSame(classUtil_Ctor0, classUtil_Ctor2);
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertNotSame(classUtil_Ctor2, classUtil_Ctor1);
      assertNotSame(classUtil_Ctor2, classUtil_Ctor0);
      assertNotSame(annotationArray1, annotationArray0);
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor2));
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor2.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor2.equals((Object)classUtil_Ctor0));
      assertFalse(annotationArray1.equals((Object)annotationArray0));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      assertNotNull(mockError0);
      
      String string0 = mockError0.getLocalizedMessage();
      assertNull(string0);
      
      String string1 = ClassUtil.quotedOr((Object) null, "no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (%s)");
      assertNotNull(string1);
      assertEquals("no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (%s)", string1);
      
      Class<MapType> class0 = MapType.class;
      String string2 = ClassUtil.getPackageName(class0);
      assertNotNull(string2);
      assertEquals("com.fasterxml.jackson.databind.type", string2);
      assertFalse(string2.equals((Object)string1));
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (%s)", (Throwable) null);
      assertNotNull(mockRuntimeException0);
      
      String string3 = mockRuntimeException0.getLocalizedMessage();
      assertNotNull(string3);
      assertEquals("no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (%s)", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("elementType", (String) null, 5);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: elementType", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("elementType", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(5, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      mockRuntimeException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: elementType", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("elementType", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(5, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      String string4 = mockRuntimeException0.toString();
      assertNotNull(string4);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (%s)", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      RuntimeException runtimeException0 = ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      assertNotNull(runtimeException0);
      assertSame(mockRuntimeException0, runtimeException0);
      assertSame(runtimeException0, mockRuntimeException0);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<Object> class1 = Object.class;
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Object> class2 = Object.class;
      boolean boolean2 = ClassUtil.isProxyType(class2);
      assertFalse(boolean2);
      assertSame(class2, class1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<Character> class3 = Character.class;
      boolean boolean3 = ClassUtil.isConcrete(class3);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-1756), (Throwable) null);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals((-1756), sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      Throwable[] throwableArray0 = sQLInvalidAuthorizationSpecException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals((-1756), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(0, throwableArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicIntegerSerializer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicIntegerSerializer
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      assertNotNull(mockError0);
      
      String string0 = mockError0.getLocalizedMessage();
      assertNull(string0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      mockError0.setStackTrace(stackTraceElementArray0);
      assertEquals(0, stackTraceElementArray0.length);
      
      String string1 = mockError0.getLocalizedMessage();
      assertNull(string1);
      
      String string2 = mockError0.toString();
      assertNotNull(string2);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", string2);
      
      Error error0 = ClassUtil.nonNull((Error) mockError0, (Error) mockError0);
      assertNotNull(error0);
      assertSame(mockError0, error0);
      assertSame(error0, mockError0);
      
      Class<ArrayType> class0 = ArrayType.class;
      String string3 = ClassUtil.canBeABeanType(class0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("'f0w3A9,jwxrZA1 ", "V:O");
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 'f0w3A9,jwxrZA1 ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("'f0w3A9,jwxrZA1 ", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("V:O", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLInvalidAuthorizationSpecException1);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 'f0w3A9,jwxrZA1 ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("'f0w3A9,jwxrZA1 ", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("V:O", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: 'f0w3A9,jwxrZA1 ", sQLInvalidAuthorizationSpecException1.toString());
      assertEquals("'f0w3A9,jwxrZA1 ", sQLInvalidAuthorizationSpecException1.getMessage());
      assertEquals("V:O", sQLInvalidAuthorizationSpecException1.getSQLState());
      assertSame(sQLInvalidAuthorizationSpecException0, sQLInvalidAuthorizationSpecException1);
      assertSame(sQLInvalidAuthorizationSpecException1, sQLInvalidAuthorizationSpecException0);
      
      Class<SimpleType> class1 = SimpleType.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Cannot figure out type for EnumMap (odd JDK platform?)", "boolean", 1783);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("Cannot figure out type for EnumMap (odd JDK platform?)", sQLNonTransientConnectionException0.getMessage());
      assertEquals("boolean", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: Cannot figure out type for EnumMap (odd JDK platform?)", sQLNonTransientConnectionException0.toString());
      assertEquals(1783, sQLNonTransientConnectionException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Float> class0 = Float.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertFalse(boolean0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(13, fieldArray0.length);
      
      Class<Short> class1 = Short.class;
      String string1 = "elementType";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "elementType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      Iterator<JsonMappingException> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class2);
      assertFalse(boolean0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = sQLNonTransientException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals(13, stackTraceElementArray0.length);
      
      SQLNonTransientException sQLNonTransientException1 = (SQLNonTransientException)ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
      assertNotNull(sQLNonTransientException1);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertNull(sQLNonTransientException1.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException1.toString());
      assertNull(sQLNonTransientException1.getSQLState());
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException1, sQLNonTransientException0);
      
      String string0 = ClassUtil.classNameOf(sQLNonTransientException1);
      assertNotNull(string0);
      assertEquals("`java.sql.SQLNonTransientException`", string0);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertNull(sQLNonTransientException1.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException1.toString());
      assertNull(sQLNonTransientException1.getSQLState());
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException1, sQLNonTransientException0);
      
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Long> class3 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      Constructor<JsonMappingException> constructor1 = ClassUtil.findConstructor(class4, false);
      assertNull(constructor1);
      
      Class<Object> class5 = Object.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class5);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<NoClass> class2 = NoClass.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      boolean boolean1 = ClassUtil.isProxyType(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = ClassUtil.quotedOr(class2, "9]@%(");
      assertNotNull(string0);
      assertEquals("\"class com.fasterxml.jackson.databind.annotation.NoClass\"", string0);
      
      Class<Integer> class4 = Integer.class;
      String string1 = ClassUtil.getPackageName(class4);
      assertNotNull(string1);
      assertEquals("java.lang", string1);
      assertFalse(string1.equals((Object)string0));
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("9]@%(", (Throwable) null);
      assertNotNull(mockRuntimeException0);
      
      String string2 = mockRuntimeException0.getLocalizedMessage();
      assertNotNull(string2);
      assertEquals("9]@%(", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        mockRuntimeException0.addSuppressed((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot suppress a null exception.
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      assertNull(jsonGenerator0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Type id handling not implemented for type %s (by serializer of type %s)", "serialVersionUID");
      assertNotNull(sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: Type id handling not implemented for type %s (by serializer of type %s)", sQLNonTransientException0.toString());
      assertEquals("serialVersionUID", sQLNonTransientException0.getSQLState());
      assertEquals("Type id handling not implemented for type %s (by serializer of type %s)", sQLNonTransientException0.getMessage());
      
      SQLWarning sQLWarning0 = new SQLWarning("oZ!I.mbC", "oZ!I.mbC", sQLNonTransientException0);
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: Type id handling not implemented for type %s (by serializer of type %s)", sQLNonTransientException0.toString());
      assertEquals("serialVersionUID", sQLNonTransientException0.getSQLState());
      assertEquals("Type id handling not implemented for type %s (by serializer of type %s)", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLWarning: oZ!I.mbC", sQLWarning0.toString());
      assertEquals("oZ!I.mbC", sQLWarning0.getSQLState());
      assertEquals("oZ!I.mbC", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      sQLNonTransientException0.addSuppressed(sQLWarning0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: Type id handling not implemented for type %s (by serializer of type %s)", sQLNonTransientException0.toString());
      assertEquals("serialVersionUID", sQLNonTransientException0.getSQLState());
      assertEquals("Type id handling not implemented for type %s (by serializer of type %s)", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLWarning: oZ!I.mbC", sQLWarning0.toString());
      assertEquals("oZ!I.mbC", sQLWarning0.getSQLState());
      assertEquals("oZ!I.mbC", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: Type id handling not implemented for type %s (by serializer of type %s)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Object`", string0);
      
      String string1 = ClassUtil.canBeABeanType(class0);
      assertNull(string1);
      
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(16, classUtil_CtorArray0.length);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Constructor<JsonMappingException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
      
      Class<IOException> class1 = IOException.class;
      String string0 = ClassUtil.canBeABeanType(class1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      DataTruncation dataTruncation0 = new DataTruncation(4, false, true, 0, 0, (Throwable) null);
      assertNotNull(dataTruncation0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      
      DataTruncation dataTruncation1 = (DataTruncation)ClassUtil.throwIfIOE(dataTruncation0);
      assertNotNull(dataTruncation1);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertSame(dataTruncation0, dataTruncation1);
      assertSame(dataTruncation1, dataTruncation0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("com.fasterxml.jackson.databind.util.ClassUtil");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.append('d');
      assertNotNull(mockPrintWriter1);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter1, mockPrintWriter0);
      
      dataTruncation0.printStackTrace((PrintWriter) mockPrintWriter1);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertSame(dataTruncation0, dataTruncation1);
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter1, mockPrintWriter0);
      
      Class<NoClass> class1 = NoClass.class;
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) dataTruncation1, "hb^5h.e+PR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hb^5h.e+PR
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("zT;lp3=Sn7h", "_cshX7CY{Z{0b!2jtI", 3);
      assertNotNull(sQLWarning0);
      assertEquals("_cshX7CY{Z{0b!2jtI", sQLWarning0.getSQLState());
      assertEquals("zT;lp3=Sn7h", sQLWarning0.getMessage());
      assertEquals(3, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: zT;lp3=Sn7h", sQLWarning0.toString());
      
      SQLWarning sQLWarning1 = (SQLWarning)ClassUtil.throwIfRTE(sQLWarning0);
      assertNotNull(sQLWarning1);
      assertEquals("_cshX7CY{Z{0b!2jtI", sQLWarning0.getSQLState());
      assertEquals("zT;lp3=Sn7h", sQLWarning0.getMessage());
      assertEquals(3, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: zT;lp3=Sn7h", sQLWarning0.toString());
      assertEquals("_cshX7CY{Z{0b!2jtI", sQLWarning1.getSQLState());
      assertEquals("java.sql.SQLWarning: zT;lp3=Sn7h", sQLWarning1.toString());
      assertEquals("zT;lp3=Sn7h", sQLWarning1.getMessage());
      assertEquals(3, sQLWarning1.getErrorCode());
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning1, sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
      assertNotNull(batchUpdateException1);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException1.getSQLState());
      assertNull(batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertSame(batchUpdateException0, batchUpdateException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<Float> class0 = Float.class;
      TypeBindings typeBindings0 = null;
      JavaType javaType0 = null;
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Float float0 = new Float((-2083.397F));
      assertNotNull(float0);
      assertEquals((-2083.397F), (float)float0, 0.01F);
      
      String string0 = ClassUtil.quotedOr(float0, "{`brBBP$c\"r#z@;q9XX");
      assertNotNull(string0);
      assertEquals("\"-2083.397\"", string0);
      
      Class<Long> class1 = Long.class;
      String string1 = ClassUtil.nameOf(class1);
      assertNotNull(string1);
      assertEquals("`java.lang.Long`", string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = ClassUtil.classNameOf(class0);
      assertNotNull(string2);
      assertEquals("`java.lang.Class`", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = ClassUtil.getPackageName(class0);
      assertNotNull(string3);
      assertEquals("java.lang", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
      
      Class<?> class2 = ClassUtil.classOf("`java.lang.Long`");
      assertNotNull(class2);
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isArray());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, class2, true);
      assertNotNull(iOContext0);
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isArray());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`java.lang.Long`");
      assertNotNull(mockFileOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, mockFileOutputStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isArray());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setHighestNonEscapedChar(0);
      assertNotNull(uTF8JsonGenerator1);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isArray());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("TS`li", ":_'Kzr[T$I", (Map<String, ClientInfoStatus>) null);
      assertNotNull(sQLClientInfoException0);
      assertEquals(":_'Kzr[T$I", sQLClientInfoException0.getSQLState());
      assertEquals("TS`li", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException0.toString());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNull(map0);
      assertEquals(":_'Kzr[T$I", sQLClientInfoException0.getSQLState());
      assertEquals("TS`li", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException0.toString());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("TS`li", "1", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException1);
      assertEquals(":_'Kzr[T$I", sQLClientInfoException0.getSQLState());
      assertEquals("TS`li", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException0.toString());
      assertEquals("1", sQLClientInfoException1.getSQLState());
      assertEquals("TS`li", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException1.toString());
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("GRis", sQLClientInfoException1);
      assertNotNull(sQLTransientException0);
      assertEquals(":_'Kzr[T$I", sQLClientInfoException0.getSQLState());
      assertEquals("TS`li", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException0.toString());
      assertEquals("1", sQLClientInfoException1.getSQLState());
      assertEquals("TS`li", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: TS`li", sQLClientInfoException1.toString());
      assertEquals("java.sql.SQLTransientException: GRis", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("GRis", sQLTransientException0.getMessage());
      assertNull(sQLTransientException0.getSQLState());
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      MockException mockException0 = new MockException("GRis", sQLTransientException0);
      assertNotNull(mockException0);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: GRis
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertNull(annotation0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.String`", string0);
      
      Class<Short> class2 = Short.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertNotNull(methodArray0);
      assertEquals(23, methodArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(2, methodArray0.length);
      
      Class<Boolean> class1 = Boolean.class;
      Constructor<Boolean> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(4, fieldArray0.length);
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.isBogusClass(class1);
      assertFalse(boolean0);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<?> class3 = ClassUtil.getEnclosingClass(class2);
      assertNull(class3);
      
      Class<IOException> class4 = IOException.class;
      Class<?> class5 = ClassUtil.getEnclosingClass(class4);
      assertNull(class5);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      JavaType javaType0 = typeBindings0.findBoundType("^h}iJ\"!Y'Vt,339A");
      assertNull(javaType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      JavaType javaType1 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
      assertNull(javaType1);
      
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      
      Class<LinkedList> class6 = LinkedList.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructCollectionType(class6, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.backticked("1g8Qn");
      Float float0 = new Float((-814.9555262003));
      ClassUtil.isJacksonStdImpl((Object) float0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.getDeclaredMethods(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getOuterClass(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.isCollectionMapOrArray(class3);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<?> class4 = ClassUtil.primitiveType(class2);
      assertNull(class4);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.nullOrToString(class1);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Boolean> class2 = Boolean.class;
      Class<Double> class3 = Double.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      Class<MapType> class4 = MapType.class;
      ClassUtil.isLocalType(class4, false);
      ClassUtil.backticked("#object-ref");
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "3mfiYE+F& \"kz";
      ClassUtil.backticked("3mfiYE+F& \"kz");
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      Double double0 = new Double(0);
      ClassUtil.nullOrToString(double0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Double> class1 = Double.class;
      Class<Double> class2 = Double.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.isLocalType(class3, true);
      String string0 = "#object-ref";
      ClassUtil.backticked((String) null);
      Class<Long> class4 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.getDeclaringClass(class0);
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getClassMethods(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getDeclaredFields(class2);
      Class<Double> class3 = Double.class;
      Class<Float> class4 = Float.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class3, class4, false);
      assertEquals(3, list0.size());
      
      Double double0 = new Double((-1.0));
      boolean boolean1 = ClassUtil.hasClass(double0, (Class<?>) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.isConcrete(class0);
      Class<Character> class2 = Character.class;
      ClassUtil.nameOf(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.findConstructor(class3, true);
      Class<ReferenceType> class4 = ReferenceType.class;
      ClassUtil.getDeclaredFields(class4);
      ClassUtil.getPackageName(class4);
      Class<Character> class5 = Character.class;
      ClassUtil.isObjectOrPrimitive(class5);
      Class<Object> class6 = Object.class;
      ClassUtil.getGenericInterfaces(class6);
      ClassUtil.nullOrToString(class2);
      Class<Object> class7 = Object.class;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-815);
      intArray0[2] = 1558;
      intArray0[3] = 1066;
      intArray0[4] = Integer.MIN_VALUE;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`java.lang.Character`", intArray0);
      MockThrowable mockThrowable0 = new MockThrowable(batchUpdateException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("com.fasterxml.jackson.databind.type", intArray0, mockThrowable0);
      MockError mockError0 = new MockError("java.lang.Class@0000000001", batchUpdateException1);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class7, mockError0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class org.evosuite.runtime.mock.java.lang.MockError (of class java.lang.Object) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getClassDescription(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.canBeABeanType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findConstructor(class2, true);
      Class<Float> class3 = Float.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
