/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 05:47:45 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassDescription(class0);
      ClassUtil.wrapperType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.canBeABeanType(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED", sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0, "h:C|D&c(>S");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      MockFile mockFile0 = new MockFile("x+,EuO[:Hhr,^,J;;P");
      MockFile mockFile1 = new MockFile("x+,EuO[:Hhr,^,J;;P", "x+,EuO[:Hhr,^,J;;P");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      jsonFactory1.setCodec(objectMapper0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("a");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ClassUtil.backticked("JSON");
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) jsonGenerator_Feature0);
      ClassUtil.isNonStaticInnerClass(class0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.quotedOr((Object) null, "");
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isConcrete(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class1);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectReader objectReader1 = objectReader0.with(jsonFactory0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-721483190), objectReader1, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(0, 1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "JSON", (Throwable) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      Class<ArrayType> class3 = ArrayType.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3248));
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class3, (JavaType) placeholderForType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(class0);
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      ClassUtil.rawClass(arrayType0);
      SQLWarning sQLWarning0 = new SQLWarning("C04[1sS a*.i596");
      ClassUtil.throwRootCauseIfIOE(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.isNonStaticInnerClass(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "net.sf.cglib.proxy.java.util.HashMap");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // net.sf.cglib.proxy.java.util.HashMap
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<DataInputStream> class0 = DataInputStream.class;
      ClassUtil.isNonStaticInnerClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockError mockError0 = new MockError();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, objectReader0, outputStreamWriter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<DataInputStream> class1 = DataInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("`*W8", class1, "bg");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.io.DataInputStream` from String \"`*W8\": bg
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w{&>jL(I6xG");
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.quotedOr((Object) null, "lT=&l&2;|\u0000A#j");
      ClassUtil.nullOrToString(list0);
      ClassUtil.getEnclosingClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.hasEnclosingMethod(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class0, (Class<?>) null, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JsonGenerator jsonGenerator0 = null;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "com.fasterxml.jacks";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jacks");
      deserializerFactoryConfig0.deserializerModifiers();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Object> class0 = Object.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("rW|i", class0, "rW|i");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from String \"rW|i\": rW|i
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isConcrete(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      ClassUtil.canBeABeanType(class0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      ClassUtil.isLocalType(class1, false);
      Character character0 = new Character(' ');
      ClassUtil.classNameOf(character0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      Class<LinkedList> class3 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class3);
      mapType0.withValueHandler(collectionType0);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class1, (JavaType) mapType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<Short> class1 = Short.TYPE;
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.backticked("dk<}Z*W1I:{");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std((Class<?>) null, 248);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      Class<?> class1 = ClassUtil.classOf(accessPattern0);
      ClassUtil.getGenericInterfaces(class0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class2, true);
      ClassUtil.getDeclaringClass(class1);
      Class<InputStream> class3 = InputStream.class;
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.findSuperClasses(class3, class4, false);
      SQLDataException sQLDataException0 = new SQLDataException("dk<}Z*W1I:{");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "`dk<}Z*W1I:{`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `dk<}Z*W1I:{`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Short> enumMap0 = new EnumMap<ClientInfoStatus, Short>(class0);
      HashMap<ClientInfoStatus, Short> hashMap0 = new HashMap<ClientInfoStatus, Short>();
      enumMap0.putAll(hashMap0);
      ClassUtil.findEnumType(enumMap0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isConcrete(class0);
      System.setCurrentTimeMillis(1971L);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = '\"';
      charArray0[2] = 't';
      charArray0[3] = '(';
      charArray0[4] = '1';
      charArray0[5] = 'F';
      charArray0[6] = '.';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_FALSE: JSON
         //  at [Source: (char[])\"!\"t(1F.\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("net.sf.cglib.proxy.java.lang.String");
      sQLFeatureNotSupportedException0.getSuppressed();
      ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nameOf((Class<?>) null);
      Class<Long> class1 = Long.class;
      ClassUtil.findClassAnnotations(class1);
      Character character0 = Character.valueOf('v');
      ClassUtil.quotedOr(character0, "net.sf.cglib.proxy.java.lang.String");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      String string0 = "org.hibernate.proxy.java.lang.Integer";
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "3|u~VkxC{OA");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionLikeType` from String \"\": 3|u~VkxC{OA
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<ClientInfoStatus, AccessibleObject> hashMap0 = new HashMap<ClientInfoStatus, AccessibleObject>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      hashMap0.put(clientInfoStatus0, constructor1);
      EnumMap<ClientInfoStatus, AccessibleObject> enumMap0 = new EnumMap<ClientInfoStatus, AccessibleObject>(hashMap0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      ClassUtil.getClassDescription(class1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Error> enumMap0 = new EnumMap<AccessPattern, Error>(class0);
      EnumMap<AccessPattern, Error> enumMap1 = new EnumMap<AccessPattern, Error>(enumMap0);
      ClassUtil.findEnumType(enumMap1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getGenericInterfaces(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      MockFile mockFile0 = new MockFile("YD7:uo};5!rb^fq");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2353, objectMapper1, mockPrintStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      SQLException sQLException0 = new SQLException((String) null, "[]");
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "org.hibernate.proxy.java.lang.String", (Throwable) sQLTransientException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.hibernate.proxy.java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes(class1, class0);
      Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      ClassUtil.isCollectionMapOrArray(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[null]", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("[null]", "", map1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLClientInfoException2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockError mockError0 = new MockError("^Ud");
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, "^Ud");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      MockFile mockFile0 = new MockFile("x+,EuO[:Hhr,^,J;;P", "x+,EuO[:Hhr,^,J;;P");
      MockFile mockFile1 = new MockFile("a");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory5 = jsonFactory4.disable(jsonFactory_Feature1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      jsonFactory5.createGenerator((File) mockFile1, jsonEncoding0);
      ClassUtil.backticked("JSON");
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) jsonGenerator_Feature0);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.findSuperTypes(class0, class0);
      Short short0 = new Short((short)455);
      ClassUtil.getClassDescription(short0);
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("7\"k~zxK6PM=6'Q", "7\"k~zxK6PM=6'Q", (-2223), sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLSyntaxErrorException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class1, class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      Class<AccessibleObject> class3 = AccessibleObject.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class0, class3);
      MapType mapType1 = mapType0.withContentTypeHandler(class3);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      MapType mapType2 = typeFactory0.constructMapType(class2, class3, class4);
      MapLikeType mapLikeType0 = mapType1.withKeyValueHandler(mapType2);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class0, false);
      Class<Boolean> class5 = Boolean.class;
      ClassUtil.findSuperClasses(class5, class4, false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getConstructors(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findConstructor(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.getLocalizedMessage();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLRecoverableException0);
      sQLRecoverableException0.initCause(sQLInvalidAuthorizationSpecException0);
      sQLRecoverableException0.setNextException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.hibernate.proxy.double", hashMap0);
      sQLClientInfoException0.setNextException(sQLInvalidAuthorizationSpecException0);
      ClassUtil.getRootCause(sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nameOf(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonParser jsonParser0 = jsonFactory2.createParser("8mK,Ndw.");
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, "");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_OBJECT: 
         //  at [Source: (String)\"8mK,Ndw.\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isJacksonStdImpl(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      deserializationFeatureArray0[4] = deserializationFeature2;
      ObjectReader objectReader1 = objectReader0.without(deserializationFeature0, deserializationFeatureArray0);
      DeserializationFeature deserializationFeature3 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader2 = objectReader1.without(deserializationFeature3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('*');
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 22, objectReader2, printWriter0);
      MockIOException mockIOException0 = new MockIOException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) mockPrintWriter0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.primitiveType(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.classOf(class1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) jsonEncoding0);
      ClassUtil.hasClass(jsonEncoding0, class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader1 = objectReader0.with((InjectableValues) injectableValues_Std0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      objectReader1.forType((JavaType) placeholderForType0);
      int int0 = (-4347);
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-4347));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -4347
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "F9S}%w+";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("F9S}%w+", "S", (-1690));
      sQLNonTransientException0.printStackTrace();
      MockFile mockFile0 = new MockFile("F9S}%w+", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.SimpleType");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      sQLNonTransientException0.printStackTrace((PrintStream) mockPrintStream0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLNonTransientException0);
      mockRuntimeException0.getCause();
      sQLNonTransientException0.getSuppressed();
      mockRuntimeException0.toString();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("java.sql.ClientInfo", "java.sql.ClientInfo", 69, mockRuntimeException0);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, "java.sql.ClientInfo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getGenericSuperclass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ClassUtil.findEnumType((Enum<?>) jsonEncoding0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.backticked("/xzHC]");
      SQLWarning sQLWarning0 = new SQLWarning("4", "`/xzHC]`", 1536, (Throwable) null);
      MockError mockError0 = new MockError(sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte) (-31);
      byteArray0[8] = (byte)107;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Short> class0 = Short.TYPE;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      CollectionLikeType.upgradeFrom(collectionLikeType1, collectionLikeType1);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType1, (Class<?>) class1, false);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getOuterClass(class2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("net.sf.cglib.proxy.java.lang.Integer");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      sQLTransientConnectionException0.fillInStackTrace();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, false, true);
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) filteringGeneratorDelegate0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException: net.sf.cglib.proxy.java.lang.Integer
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findConstructor(class0, true);
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = new Stack<Class<Error>>();
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.primitiveType(class3);
      Class<Character> class4 = Character.class;
      ClassUtil.isObjectOrPrimitive(class4);
      ClassUtil.nullOrToString(list0);
      Class<Void> class5 = Void.class;
      ClassUtil.createInstance(class5, true);
      Class<Object> class6 = Object.class;
      ClassUtil.getConstructors(class6);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Default constructor for ", "java.util.Stack@0000000001", (-6338));
      ClassUtil.throwIfIOE(sQLTransientConnectionException0);
      Class<RuntimeException> class7 = RuntimeException.class;
      ClassUtil.createInstance(class7, true);
      Class<MapLikeType> class8 = MapLikeType.class;
      ClassUtil.isProxyType(class8);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class9 = HashMap.class;
      Class<AccessPattern> class10 = AccessPattern.class;
      Class<AccessPattern> class11 = AccessPattern.class;
      MapType mapType0 = typeFactory0.constructMapType(class9, class10, class11);
      Class<Error> class12 = Error.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapType0, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class12, typeBindings0, (JavaType) arrayType0, javaTypeArray0, (JavaType) arrayType0);
      mapType0.withKeyType(referenceType0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<Byte> class1 = Byte.TYPE;
      ClassUtil.findSuperTypes(class0, class1);
      MockError mockError0 = new MockError();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class1, (-705045486));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockError0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      ClassUtil.getClassMethods(class0);
      try { 
        ClassUtil.throwRootCauseIfIOE(iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("org.hibernate.proxy.com.fasterxml.jackson.core.io.OutputDecorator");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[8];
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature1;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(jsonGenerator_FeatureArray0);
      ObjectMapper objectMapper3 = objectMapper2.copy();
      JsonFactory jsonFactory4 = jsonFactory3.setCodec(objectMapper3);
      MockFile mockFile0 = new MockFile("JSON", "IrG<IC8=\"}!B9xZrR");
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((File) mockFile0, jsonEncoding0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getGenericInterfaces(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      mockRuntimeException0.getMessage();
      mockRuntimeException0.getLocalizedMessage();
      ClassUtil.getClassDescription(mockRuntimeException0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.canBeABeanType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.findConstructor(class0, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.com.fasterxml.jackson.core.ObjectCodec", "java.lang.Long", (-305));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ArrayList<Module> arrayList0 = new ArrayList<Module>();
      ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<? extends Module>) arrayList0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)68;
      byteArray0[5] = (byte)0;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)8;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectMapper1, byteArrayOutputStream0, byteArray0, 1095, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException: org.hibernate.proxy.com.fasterxml.jackson.core.ObjectCodec
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Character character0 = new Character('u');
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("xU_>?pg;$Um5|!9u3>`");
      ClassUtil.throwIfError(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<IOException>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getPackageName(class1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("net.sf.cglib.proxy.java.lang.Integer", (String) null, 8);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<IOException>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findEnumType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.getGenericSuperclass(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.getOuterClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isProxyType(class0);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException("RNcV5H%V");
      mockRuntimeException1.getLocalizedMessage();
      mockRuntimeException1.getLocalizedMessage();
      mockRuntimeException0.addSuppressed(mockRuntimeException1);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("\"p: ;%6YyDZ}wNfAC", "RNcV5H%V", "RNcV5H%V", (-2531));
      stackTraceElementArray0[0] = stackTraceElement0;
      mockRuntimeException0.setStackTrace(stackTraceElementArray0);
      mockRuntimeException0.getLocalizedMessage();
      mockRuntimeException0.toString();
      ClassUtil.classOf(mockRuntimeException0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getDeclaringClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("net.sf.cglib.proxy.java.lang.Integer");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, true, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) null, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, true);
      Class<Float> class1 = Float.class;
      ClassUtil.getOuterClass(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.isBogusClass(class1);
      Class<Double> class3 = Double.class;
      ClassUtil.hasClass(class2, class3);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Character character0 = new Character('u');
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<LinkedList> class0 = LinkedList.class;
      Class<Short> class1 = Short.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory1.constructMapType(class2, class1, class1);
      Class<Integer> class3 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.create(class3, (JavaType[]) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "**[CZ|lE?,Upu.Vcw!u", (Throwable) null);
      typeBindings0.equals(jsonMappingException0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class3, typeBindings0, (JavaType) collectionType0, (JavaType[]) null, (JavaType) collectionType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      MapType mapType1 = mapType0.withKeyValueHandler(referenceType1);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(mapType1);
      ClassUtil.isJacksonStdImpl((Object) collectionType1);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // **[CZ|lE?,Upu.Vcw!u
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassUtil.nonNullString("^T`|WX>e4f");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.getEnclosingClass(class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short) (-82));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Long> class1 = Long.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
      Class<CollectionType> class3 = CollectionType.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Class<Double> class4 = Double.class;
      ClassUtil.findRawSuperTypes(class3, class4, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, bufferedOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      MockIOException mockIOException0 = new MockIOException((String) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) uTF8JsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassUtil.getClassDescription("uZn.(1V,O:Wr");
      Class<Long> class0 = Long.class;
      ClassUtil.canBeABeanType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getClassMethods(class1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Long> class2 = Long.TYPE;
      ClassUtil.nameOf(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class3);
      ClassUtil.getGenericInterfaces(class2);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getClassDescription(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getPackageName(class1);
      Class<NoClass> class2 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isBogusClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      ClassUtil.isJacksonStdImpl(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassUtil.nonNullString("^T`|WX>e4f");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Class<MapLikeType> class3 = MapLikeType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class3);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      typeFactory0.constructType((Type) class2, typeBindings0);
      Class<AccessPattern> class4 = AccessPattern.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class2, class4);
      collectionLikeType0.withStaticTyping();
      Class<Object> class5 = Object.class;
      ClassUtil.getGenericInterfaces(class5);
      Class<AccessPattern> class6 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class6);
      System.setCurrentTimeMillis(0L);
      Class<Void> class7 = Void.class;
      ClassUtil.getEnclosingClass(class7);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short) (-82));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1024);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, pipedOutputStream0);
      SerializedString serializedString0 = new SerializedString("JSON");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-53);
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, "^T`|WX>e4f");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_TRUE: ^T`|WX>e4f
         //  at [Source: (byte[])\"\uFFFD<\uFFFDJ)\uFFFD\uFFFD\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Double double0 = new Double((-1808.073994927127));
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.hasClass(double0, class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = Character.valueOf('m');
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-1732), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassUtil.nonNullString("^T`|WX>e4f");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Class<AccessPattern> class3 = AccessPattern.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class2, class3);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      CollectionLikeType collectionLikeType2 = CollectionLikeType.upgradeFrom(collectionLikeType1, collectionLikeType1);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType2, (Class<?>) class4, true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Character character0 = new Character('u');
      MockFile mockFile0 = new MockFile("for type ", "3D'UPcy");
      MockFile mockFile1 = new MockFile("3D'UPcy");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      ClassUtil.backticked("iJMzs");
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) jsonEncoding0);
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassUtil.emptyIterator();
      SQLWarning sQLWarning0 = new SQLWarning("G1JI @_xO({W:7@", "G1JI @_xO({W:7@", 8);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getExceptionTypes();
      classUtil_Ctor0.getParamCount();
      Class<IOException> class1 = IOException.class;
      Class<Long> class2 = Long.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.findSuperTypes(class3, class3, list0);
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class4);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Double> class0 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.emptyIterator();
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isBogusClass(class1);
      Class<POJONode> class2 = POJONode.class;
      ClassUtil.findSuperClasses(class0, class2, false);
      ClassUtil.emptyIterator();
      ClassUtil.nameOf((Named) null);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.canBeABeanType(class3);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getExceptionTypes();
      constructor0.getAnnotations();
      ClassUtil.isProxyType(class0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.isBogusClass((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findClassAnnotations(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.setRootValueSeparator("NULL");
      MockFile mockFile0 = new MockFile("qgze\"%-", "x+,EuO[:Hhr,^,J;;P");
      MockFile mockFile1 = new MockFile("JSON");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<Long> class1 = Long.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      JavaType javaType0 = referenceType0.getContentType();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "x+,EuO[:Hhr,^,J;;P", javaType0);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isBogusClass(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findClassAnnotations(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("NULL");
      MockFile mockFile0 = new MockFile("B9VoqF/byg", "NULL");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      jsonFactory1.createGenerator((File) mockFile0, jsonEncoding0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
      Boolean boolean0 = new Boolean(true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<RuntimeException> class2 = RuntimeException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionType collectionType0 = CollectionType.construct(class2, typeBindings0, javaType0, javaTypeArray0, javaType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionType0, javaType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      Class<MapType> class3 = MapType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(referenceType1, class3);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.type.ReferenceType`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.MapperFeature", ";e6QV", (-1853514379));
      ClassUtil.throwIfError(sQLTimeoutException0);
      Class<Object> class1 = Object.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.primitiveType(class1);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, true);
      Boolean boolean0 = new Boolean(true);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("enum", "enum", (-337));
      sQLFeatureNotSupportedException0.spliterator();
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getExceptionTypes();
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotations();
      ClassUtil.nullOrToString(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<Short> class2 = Short.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<Float> class3 = Float.class;
      ClassUtil.isNonStaticInnerClass(class3);
      System.setCurrentTimeMillis((-3875L));
      Class<Object> class4 = Object.class;
      ClassUtil.getEnclosingClass(class4);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.emptyIterator();
      ClassUtil.isBogusClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperClasses((Class<?>) null, class2, false);
      ClassUtil.backticked("net.sf.cglib.proxy.java.io.IOException");
      ClassUtil.emptyIterator();
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getEnclosingClass(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("a)9t~UHnouN", "a)9t~UHnouN", (-26), map0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Void> class2 = Void.class;
      ClassUtil.findRawSuperTypes(class2, class1, false);
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Character character0 = Character.valueOf('J');
      ClassUtil.isJacksonStdImpl((Object) character0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.canBeABeanType(class0);
      Class<IOException> class1 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class1, true);
      ClassUtil.isBogusClass(class0);
      ClassUtil.hasClass(class0, class0);
      Class<Double> class2 = Double.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.canBeABeanType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl1, iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<SimpleType> class0 = SimpleType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("r{;|)0AVj[@I?B", "r{;|)0AVj[@I?B", 5);
      sQLTransientException0.fillInStackTrace();
      ClassUtil.throwIfError(sQLTransientException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<IOException> class1 = IOException.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("enum", "enum", (-337));
      sQLFeatureNotSupportedException0.spliterator();
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.emptyIterator();
      ClassUtil.isBogusClass(class0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Class<Float> class3 = Float.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      ClassUtil.backticked("enum");
      ClassUtil.nonNull((JsonMappingException) null, (JsonMappingException) null);
      ClassUtil.primitiveType(class3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassUtil.nonNullString("^T`|WX>e4f");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("^T`|WX>e4f", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("^T`|WX>e4f", hashMap0, (Throwable) null);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ClassUtil.isBogusClass(class0);
      Double double0 = new Double(0.0);
      Double double1 = ClassUtil.nonNull((Double) null, double0);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.hasClass(double1, class3);
      ClassUtil.getDeclaredFields(class3);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassUtil.emptyIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G1JI @_xO({W:7@");
      Class<Double> class0 = Double.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.emptyIterator();
      ClassUtil.isBogusClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      ClassUtil.backticked("G1JI @_xO({W:7@");
      ClassUtil.nonNull((JsonMappingException) null, (JsonMappingException) null);
      Class<?> class3 = ClassUtil.primitiveType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      ClassUtil.canBeABeanType(class3);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findClassAnnotations(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("NULL");
      MockFile mockFile0 = new MockFile("B9VoqF/byg", "NULL");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      jsonFactory1.createGenerator((File) mockFile0, jsonEncoding0);
      MockFile mockFile1 = new MockFile("qgze\"%-", "x+,EuO[:Hhr,^,J;;P");
      File file0 = MockFile.createTempFile("JSON", "JSON", (File) mockFile1);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator(file0, jsonEncoding1);
      mockFile1.getCanonicalPath();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/}4J<+l;.NQ^/*^");
      ClassUtil.findEnumType((Enum<?>) jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException: /}4J<+l;.NQ^/*^
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getPackageName(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.fasterxml.jackson.databind.type", hashMap0, (Throwable) null);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor1.getDeclaredAnnotations();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.isBogusClass(class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findClassAnnotations(class3);
      ClassUtil.nonNullString("primitive");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClassUtil.emptyIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G1JI _xO({W:7@");
      Class<Double> class0 = Double.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.emptyIterator();
      ClassUtil.isBogusClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      ClassUtil.backticked("G1JI _xO({W:7@");
      ClassUtil.emptyIterator();
      ClassUtil.nameOf((Named) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<RuntimeException> class3 = RuntimeException.class;
      Class<MapType> class4 = MapType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class3, class4);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(collectionLikeType0, "java.lang.Long", "\"`B6}oJ-%By2}w%Ulq!");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'java.lang.Long' as a subtype of [collection-like type; class java.lang.RuntimeException, contains [simple type, class com.fasterxml.jackson.databind.type.MapType]]: \"`B6}oJ-%By2}w%Ulq!
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      ClassUtil.throwIfError(mockThrowable0);
      Class<Object> class0 = Object.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<IOException> class1 = IOException.class;
      ClassUtil.isBogusClass(class0);
      Class<POJONode> class2 = POJONode.class;
      ClassUtil.hasClass(class1, class2);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Iterator<JsonMappingException> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.isBogusClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.getGenericInterfaces(class2);
      Class<String> class3 = String.class;
      ClassUtil.isNonStaticInnerClass(class3);
      System.setCurrentTimeMillis(3055L);
      Class<MapLikeType> class4 = MapLikeType.class;
      ClassUtil.hasClass(iterator0, class4);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "|\"kg:@S5{s");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0, "1T`HW=t~NfQx}ESN}y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1T`HW=t~NfQx}ESN}y
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassUtil.getClassDescription("uZn.(1V,O:Wr");
      Class<Long> class0 = Long.class;
      ClassUtil.canBeABeanType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getClassMethods(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.nameOf(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class3);
      ClassUtil.getGenericInterfaces(class2);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ClassUtil.getClassDescription("uZn.(1V,O:Wr");
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getExceptionTypes();
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      Class<String> class2 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) referenceType0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[3] = (JavaType) referenceType0;
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      JavaType[] javaTypeArray1 = new JavaType[3];
      javaTypeArray1[0] = javaType0;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType1 = resolvedRecursiveType0.getSuperClass();
      javaTypeArray1[1] = null;
      javaTypeArray1[2] = (JavaType) referenceType0;
      javaType0.getErasedSignature();
      CollectionType collectionType0 = CollectionType.construct(class3, typeBindings0, javaType1, javaTypeArray1, javaTypeArray1[2]);
      referenceType0.withValueHandler(collectionType0);
      javaTypeArray0[1] = (JavaType) referenceType0;
      javaTypeArray0[3] = (JavaType) referenceType0;
      javaTypeArray0[4] = javaType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaTypeArray0[4]);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClassUtil.nonNullString("^T`|WX>e4f");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("^T`|WX>e4f", hashMap0, (Throwable) null);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      ClassUtil.isBogusClass(class0);
      ClassUtil.isJacksonStdImpl((Object) classUtil_Ctor0);
      Integer integer0 = new Integer(0);
      classUtil_Ctor1.getDeclaredAnnotations();
      ClassUtil.hasClass(integer0, class0);
      Class<IOException> class3 = IOException.class;
      ClassUtil.getDeclaredFields(class3);
      classUtil_Ctor1.getDeclaringClass();
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Byte> class0 = Byte.class;
      ClassUtil.isProxyType(class0);
      Class<Boolean> class1 = Boolean.TYPE;
      ClassUtil.findSuperClasses(class1, class1, false);
      ClassUtil.isConcrete(class1);
      ClassUtil.defaultValue(class1);
      TypeFactory.unknownType();
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Byte> class0 = Byte.class;
      ClassUtil.isProxyType(class0);
      Class<Boolean> class1 = Boolean.class;
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.isBogusClass(class2);
      Class<Object> class3 = Object.class;
      Class<Object> class4 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getExceptionTypes();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      Short short0 = new Short((short)8107);
      POJONode pOJONode0 = new POJONode(short0);
      ClassUtil.nullOrToString(pOJONode0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      ClassUtil.findEnumType(class3);
      Byte byte0 = new Byte((byte) (-5));
      Class<Long> class5 = Long.class;
      ClassUtil.hasClass("com.fasterxml.jackson.databind.node.POJONode@0000000002", class5);
      classUtil_Ctor0.getParamCount();
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isBogusClass(class1);
      ClassUtil.findClassAnnotations(class3);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.node.POJONode@0000000002");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ClassUtil.nonNullString("^T`|WX>e4f");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Throwable throwable0 = null;
      ClassUtil.isConcrete(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Byte byte0 = new Byte((byte)6);
      ClassUtil.getClassDescription(byte0);
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getExceptionTypes();
      Class<Annotation> class1 = Annotation.class;
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      Class<String> class3 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("Unrecognized mutator type for any setter: %s");
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      Class<AccessibleObject> class5 = AccessibleObject.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class5, typeBindings0);
      Class<Character> class6 = Character.class;
      ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class6, typeBindings0);
      JavaType javaType1 = resolvedRecursiveType1.getSuperClass();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType1;
      javaTypeArray0[3] = (JavaType) referenceType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class3, typeBindings1, (JavaType) resolvedRecursiveType1, javaTypeArray0, javaType0);
      referenceType0.withValueHandler(class4);
      Class<String> class7 = String.class;
      CollectionType collectionType1 = collectionType0.withTypeHandler(javaTypeArray0[3]);
      CollectionLikeType.construct((Class<?>) class7, typeBindings0, (JavaType) referenceType0, javaTypeArray0, (JavaType) collectionType1);
      ClassUtil.findSuperTypes(javaType1, class1, true);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      SQLDataException sQLDataException0 = new SQLDataException("keyUniverse", "@ -<Zo2)FPPp");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("keyUniverse", "Should have gotten ", sQLDataException0);
      SQLException sQLException0 = new SQLException("net.sf.cglib.proxy.java.lang.RuntimeException", "net.sf.cglib.proxy.java.lang.RuntimeException", (-136), sQLFeatureNotSupportedException0);
      Class<MapLikeType> class1 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class0);
      Class<Error> class2 = Error.class;
      ClassUtil.findClassAnnotations(class2);
      Class<Short> class3 = Short.class;
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class3, class4, list0);
      Class<Object> class5 = Object.class;
      ClassUtil.hasEnclosingMethod(class5);
      ClassUtil.canBeABeanType(class5);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ClassUtil.nonNullString("^T`|WX>e4f");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Throwable throwable0 = null;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("^T`|WX>e4f", hashMap0, (Throwable) null);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.putIfAbsent("/v@qb", clientInfoStatus0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.canBeABeanType(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.backticked((String) null);
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      HashMap<String, ClientInfoStatus> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, ClientInfoStatus>((-753));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -753
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isLocalType(class0, true);
      Class<String> class1 = String.class;
      ClassUtil.nameOf(class1);
      Class<?> class2 = ClassUtil.classOf("`java.lang.String`");
      ClassUtil.emptyIterator();
      Double double0 = new Double(0.0);
      Class<Character> class3 = Character.class;
      Class<Long> class4 = Long.class;
      ClassUtil.findRawSuperTypes(class3, class4, false);
      ClassUtil.emptyIterator();
      ClassUtil.isBogusClass(class2);
      Class<NoClass> class5 = NoClass.class;
      Class<JsonMappingException> class6 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class5, class6, false);
      ClassUtil.backticked((String) null);
      ClassUtil.emptyIterator();
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ClassUtil.nonNullString("^T`|WX>e4f");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<String> class1 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class0);
      Class<Short> class2 = Short.class;
      ClassUtil.findClassAnnotations(class2);
      Class<SimpleType> class3 = SimpleType.class;
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.findSuperTypes(class3, class4, list0);
      Class<IOException> class5 = IOException.class;
      ClassUtil.hasEnclosingMethod(class5);
      ClassUtil.canBeABeanType(class5);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ClassUtil.nonNullString("^T`|WX>e4f");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("^T`|WX>e4f", hashMap0, (Throwable) null);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.putIfAbsent("/v@qb", clientInfoStatus0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      sQLClientInfoException0.spliterator();
      sQLClientInfoException0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      hashMap0.put("size", clientInfoStatus1);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.getSuppressed();
      Class<Double> class2 = Double.class;
      Class<MapLikeType> class3 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class3);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.findSuperTypes(class3, class0, list0);
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.canBeABeanType(class3);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ClassUtil.nonNullString("^T`|WX>e4f");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("^T`|WX>e4f", hashMap0, (Throwable) null);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      List<Class<?>> list0 = ClassUtil.findSuperTypes((Class<?>) null, class1);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findClassAnnotations(class3);
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes(class3, class4, list0);
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class5);
      Class<String> class6 = String.class;
      ClassUtil.canBeABeanType(class6);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ClassUtil.nonNullString("^T`|WX>e4f");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("^T`|WX>e4f", hashMap0, (Throwable) null);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParamCount();
      ClassUtil.isBogusClass(class0);
      ClassUtil.isJacksonStdImpl((Object) classUtil_Ctor0);
      Integer integer0 = new Integer((-2195));
      ClassUtil.hasClass(integer0, class0);
      Class<IOException> class3 = IOException.class;
      ClassUtil.getDeclaredFields(class3);
      classUtil_Ctor1.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ClassUtil.emptyIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G1JI @_xO({W:7@");
      Class<Double> class0 = Double.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.emptyIterator();
      ClassUtil.isBogusClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      ClassUtil.backticked("G1JI @_xO({W:7@");
      ClassUtil.nonNull((JsonMappingException) null, (JsonMappingException) null);
      ClassUtil.primitiveType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findClassAnnotations(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory0.disable(jsonFactory_Feature0);
      Class<Object> class1 = Object.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.emptyIterator();
      ClassUtil.isBogusClass(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      Class<Double> class4 = Double.class;
      ClassUtil.findSuperClasses(class3, class4, true);
      ClassUtil.backticked("d:;92E<P");
      ClassUtil.emptyIterator();
      ClassUtil.nameOf((Named) null);
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 3;
      intArray0[4] = 3;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateException0.spliterator();
      ClassUtil.getRootCause(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isLocalType(class0, true);
      Class<String> class1 = String.class;
      ClassUtil.nameOf(class1);
      Class<?> class2 = ClassUtil.classOf("`java.lang.String`");
      ClassUtil.emptyIterator();
      Double double0 = new Double(0.0);
      ClassUtil.getClassDescription(double0);
      ClassUtil.isLocalType(class1, false);
      ClassUtil.classOf(class2);
      Class<Character> class3 = Character.class;
      try { 
        ClassUtil.createInstance(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.canBeABeanType(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getClassMethods(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.nameOf(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.getEnclosingClass(class4);
      ClassUtil.isProxyType(class3);
      Class<Float> class5 = Float.class;
      ClassUtil.getGenericInterfaces(class5);
      Class<String> class6 = String.class;
      ClassUtil.isNonStaticInnerClass(class6);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLException sQLException0 = new SQLException("ZERO_LENGTH_ENUM_ARRAY", sQLInvalidAuthorizationSpecException0);
      ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException0);
      System.setCurrentTimeMillis(3055L);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ClassUtil.emptyIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G1JI @_xO({W:7@");
      Class<Double> class0 = Double.class;
      ClassUtil.quotedOr((Object) null, "G1JI @_xO({W:7@");
      ClassUtil.nameOf(class0);
      ClassUtil.getGenericInterfaces(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "gS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getGenericInterfaces(class0);
      MockException mockException0 = new MockException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Strange Collection type ");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransientConnectionException0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2162);
      Short short0 = new Short((short)8);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) "?])S<?O=6<+4#v+", (-1));
      ClassUtil.nonNull(jsonMappingException0, (JsonMappingException) null);
      Class<Short> class1 = Short.class;
      ClassUtil.primitiveType(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      defaultDeserializationContext_Impl0.with((DeserializerFactory) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ClassUtil.nonNullString("^T`|WX>e4f");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.findEnumType(class0);
      ClassUtil.primitiveType(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      Class<Character> class3 = Character.class;
      ClassUtil.findSuperTypes(class2, class3);
      Class<Float> class4 = Float.class;
      ClassUtil.isNonStaticInnerClass(class4);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getGenericSuperclass(class0);
      TypeFactory.defaultInstance();
      ClassUtil.getDeclaringClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.isNonStaticInnerClass(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(744);
      placeholderForType0.actualType();
      Class<?> class2 = ClassUtil.rawClass(placeholderForType0);
      Class<Object> class3 = Object.class;
      ClassUtil.isCollectionMapOrArray(class3);
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.isProxyType(class2);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class4);
      Class<IOException> class5 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class5, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ClassUtil.nonNullString("^T`|WX>e4f");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("^T`|WX>e4f", hashMap0, (Throwable) null);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.putIfAbsent("/v@qb", clientInfoStatus0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      sQLClientInfoException0.spliterator();
      sQLClientInfoException0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      hashMap0.put("size", clientInfoStatus1);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, true);
      Class<Long> class2 = Long.class;
      Class<Long> class3 = Long.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
      Class<SimpleType> class4 = SimpleType.class;
      Class<AccessibleObject> class5 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class4, class5);
      ClassUtil.canBeABeanType(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      Class<Integer> class6 = Integer.class;
      classArray0[0] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[1] = class7;
      Class<Integer> class8 = Integer.class;
      classArray0[2] = class8;
      Class<Integer> class9 = Integer.class;
      classArray0[3] = class9;
      Class<Integer> class10 = Integer.class;
      classArray0[4] = class10;
      Class<Integer> class11 = Integer.class;
      classArray0[5] = class11;
      Class<Integer> class12 = Integer.class;
      classArray0[6] = class12;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClassUtil.nonNullString("^T`|WX>e4f");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.findRawSuperTypes((Class<?>) null, class2, false);
      ClassUtil.emptyIterator();
      Class<Double> class3 = Double.class;
      ClassUtil.isBogusClass(class3);
      Class<Error> class4 = Error.class;
      ClassUtil.findSuperClasses(class4, (Class<?>) null, false);
      ClassUtil.backticked("^T`|WX>e4f");
      JsonMappingException jsonMappingException0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "com.fasterxml.jackso");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ClassUtil.emptyIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G1JI @_xO({W:7@");
      Class<Double> class0 = Double.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.emptyIterator();
      ClassUtil.isBogusClass(class0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findSuperClasses(class2, class0, false);
      ClassUtil.backticked("G1JI @_xO({W:7@");
      ClassUtil.nameOf((Named) null);
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = 3;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("r/:KO=c'ySw;/{n", "`G1JI @_xO({W:7@`", 3, batchUpdateException0);
      batchUpdateException0.initCause(sQLTransientException0);
      batchUpdateException0.spliterator();
      // Undeclared exception!
      ClassUtil.getRootCause(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = Boolean.TRUE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_pZBKCPpqye$Fse4");
      Boolean boolean2 = ClassUtil.nonNull(boolean0, boolean1);
      ClassUtil.classNameOf(boolean2);
      ClassUtil.nullOrToString((Object) null);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      ClassUtil.nonNull(accessPattern0, accessPattern1);
      Class<Integer> class0 = Integer.class;
      ClassUtil.isProxyType(class0);
      Float float0 = new Float(0.6F);
      ClassUtil.classOf(float0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory2.configure(jsonGenerator_Feature0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("enum", "enum", (-337));
      sQLFeatureNotSupportedException0.spliterator();
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getExceptionTypes();
      classUtil_Ctor0.getParamCount();
      ClassUtil.nullOrToString(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.findEnumType(class0);
      Byte byte0 = new Byte((byte) (-5));
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.hasClass(byte0, class2);
      classUtil_Ctor0.getParamCount();
      Class<AccessibleObject> class3 = AccessibleObject.class;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isBogusClass(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.findClassAnnotations(class4);
      ClassUtil.nonNullString("java.lang.RuntimeEx");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      TypeFactory.defaultInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Class<Object> class0 = Object.class;
      classArray0[1] = class0;
      Class<Object> class1 = Object.class;
      classArray0[2] = class1;
      AnnotationIntrospector.nopInstance();
      Class<Double> class2 = Double.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.nullOrToString(propertyNamingStrategy_KebabCaseStrategy0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      ClassUtil.classNameOf(class0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getGenericSuperclass(class0);
      TypeFactory.defaultInstance();
      ClassUtil.getDeclaringClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2));
      placeholderForType0.actualType();
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.isProxyType(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<IOException> class3 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("org.hibernate.proxy.java.lang.Byte");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "keyType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findClassAnnotations(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      jsonFactory1.setRootValueSeparator("NULL");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(803);
      placeholderForType0.getTypeName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      placeholderForType0.isReferenceType();
      Class<AccessPattern> class1 = AccessPattern.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class1, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, mapLikeType0);
      referenceType0.withContentTypeHandler(jsonFactory0);
      placeholderForType0.withHandlersFrom(referenceType0);
      placeholderForType0.getTypeName();
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.getDeclaringClass(class2);
      Class<Error> class3 = Error.class;
      ClassUtil.getConstructors(class3);
      Class<Annotation> class4 = Annotation.class;
      ClassUtil.getClassMethods(class4);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ClassUtil.emptyIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G1JI @_xO({W:7@");
      Class<Double> class0 = Double.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.emptyIterator();
      ClassUtil.isBogusClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      ClassUtil.backticked("G1JI @_xO({W:7@");
      ClassUtil.emptyIterator();
      ClassUtil.nameOf((Named) null);
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateException0.spliterator();
      ClassUtil.getRootCause(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getPackageName(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.abstractTypeResolvers();
      deserializerFactoryConfig0.abstractTypeResolvers();
      deserializerFactoryConfig0.valueInstantiators();
      IOException iOException0 = null;
      Class<IOException> class1 = IOException.class;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.fasterxml.jackson.databind.type");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "keyType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.quotedOr(class1, ":f!'2");
      ClassUtil.nameOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      TypeFactory.defaultInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Class<Object> class0 = Object.class;
      classArray0[1] = class0;
      Class<Object> class1 = Object.class;
      classArray0[2] = class1;
      Class<Object> class2 = Object.class;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      classArray0[3] = class2;
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClassUtil.getClassDescription("uZn.(1V,O:Wr");
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getExceptionTypes();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      Class<String> class2 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) referenceType0);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("`java.lang.String`");
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      JavaType[] javaTypeArray1 = new JavaType[3];
      javaTypeArray1[0] = javaType0;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      resolvedRecursiveType0.getSuperClass();
      javaTypeArray1[1] = null;
      javaTypeArray1[2] = (JavaType) referenceType0;
      CollectionType collectionType0 = CollectionType.construct(class3, typeBindings1, javaTypeArray0[0], javaTypeArray1, javaTypeArray1[2]);
      referenceType0.withValueHandler(collectionType0);
      javaTypeArray0[1] = (JavaType) referenceType0;
      javaTypeArray0[2] = (JavaType) referenceType0;
      javaTypeArray0[3] = (JavaType) referenceType0;
      javaTypeArray0[4] = javaType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, javaType0, javaTypeArray0, (JavaType) referenceType0);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
      ClassUtil.nonNull((IOException) null, (IOException) null);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.quotedOr(class1, ":f!'2");
      ClassUtil.nameOf(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Class<IOException> class0 = IOException.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Long> class1 = Long.class;
      ClassUtil.isBogusClass(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getParameterCount();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getParameterAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(constructor1);
      ClassUtil.Ctor classUtil_Ctor3 = new ClassUtil.Ctor(classUtil_Ctor2._ctor);
      classUtil_Ctor3.getParamCount();
      classUtil_Ctor3.getDeclaringClass();
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.canBeABeanType(class3);
      ClassUtil.canBeABeanType(class3);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperTypes(class3, class3, list0);
      String string0 = "p5Q<FMMon";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("p5Q<FMMon", "p5Q<FMMon");
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      ClassUtil.throwIfIOE(sQLInvalidAuthorizationSpecException0);
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getPackageName(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.abstractTypeResolvers();
      deserializerFactoryConfig0.abstractTypeResolvers();
      deserializerFactoryConfig0.valueInstantiators();
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findConstructor(class2, true);
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("keyType");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "keyType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getGenericSuperclass(class0);
      TypeFactory.defaultInstance();
      ClassUtil.getDeclaringClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<String> class2 = String.class;
      ClassUtil.isBogusClass(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<Character> class2 = Character.class;
      Class<Short> class3 = Short.class;
      ClassUtil.findSuperTypes(class2, class3);
      Class<Object> class4 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class4, false);
      Class<Annotation> class5 = Annotation.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) constructor0;
      objectArray0[1] = (Object) constructor0;
      objectArray0[2] = (Object) class1;
      objectArray0[3] = (Object) class4;
      objectArray0[4] = (Object) class0;
      try { 
        constructor0.newInstance(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getPackageName(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      deserializerFactoryConfig0.abstractTypeResolvers();
      deserializerFactoryConfig0.abstractTypeResolvers();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      deserializerFactoryConfig0.valueInstantiators();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.quotedOr(class1, ":f!g2");
      ClassUtil.nameOf(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-686);
      intArray0[1] = (-686);
      intArray0[2] = (-686);
      intArray0[3] = (-686);
      intArray0[4] = (-686);
      intArray0[5] = (-686);
      intArray0[6] = (-686);
      intArray0[7] = (-686);
      intArray0[8] = (-1755);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("RM'U\"jCL", "RM'U\"jCL", (-686), intArray0);
      batchUpdateException0.setNextException((SQLException) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // RM'U\"jCL
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<POJONode> class2 = POJONode.class;
      Class<Short> class3 = Short.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      ClassUtil.emptyIterator();
      ClassUtil.isBogusClass(class3);
      Class<IOException> class4 = IOException.class;
      Class<Character> class5 = Character.class;
      ClassUtil.findSuperClasses(class4, class5, true);
      ClassUtil.backticked("/1>+C3]i&j");
      ClassUtil.emptyIterator();
      ClassUtil.nameOf((Named) null);
      int[] intArray0 = new int[2];
      intArray0[0] = 3;
      intArray0[1] = 3;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateException0.spliterator();
      ClassUtil.getRootCause(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ClassUtil.getClassDescription("uZn.(1V,O:Wr");
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getExceptionTypes();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      Class<String> class2 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) referenceType0);
      typeBindings0.withUnboundVariable("`java.lang.String`");
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      Double double0 = new Double(130.0);
      Double double1 = ClassUtil.nonNull(double0, double0);
      referenceType0.withValueHandler(double1);
      Byte byte0 = new Byte((byte)74);
      ClassUtil.classNameOf(byte0);
      ClassUtil.nonNullString("`java.lang.String`");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLException sQLException0 = new SQLException("serialVersionUID", sQLInvalidAuthorizationSpecException0);
      ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException0);
      ClassUtil.throwRootCauseIfIOE(sQLException0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ClassUtil.nonNullString("^T`|WX>e4f");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("^T`|WX>e4f", hashMap0, (Throwable) null);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.putIfAbsent("/v@qb", clientInfoStatus0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      sQLClientInfoException0.spliterator();
      sQLClientInfoException0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer0);
      hashMap0.put("size", clientInfoStatus1);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLClientInfoException0.forEach(consumer1);
      sQLClientInfoException0.getSuppressed();
      ClassUtil.throwRootCauseIfIOE(sQLClientInfoException0);
      Class<Double> class2 = Double.class;
      Class<MapLikeType> class3 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class3);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.findSuperTypes(class3, class0, list0);
      ClassUtil.hasEnclosingMethod(class1);
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.findSuperClasses(class1, class4, false);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ^T`|WX>e4f
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.isBogusClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.canBeABeanType(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.createInstance(class1, true);
      Constructor<RuntimeException> constructor0 = null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getConstructors(class0);
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        MapLikeType.upgradeFrom((JavaType) null, (JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ClassUtil.nonNullString("^T`|WX>e4f");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericInterfaces(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("^T`|WX>e4f", hashMap0, (Throwable) null);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      ClassUtil.emptyIterator();
      ClassUtil.nameOf((Named) null);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[]");
      assertEquals("java.sql.SQLTimeoutException: []", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("[]", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLTimeoutException0.getStackTrace();
      assertEquals("java.sql.SQLTimeoutException: []", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("[]", sQLTimeoutException0.getMessage());
      assertNotNull(stackTraceElementArray0);
      assertEquals(13, stackTraceElementArray0.length);
      
      StackTraceElement[] stackTraceElementArray1 = sQLTimeoutException0.getStackTrace();
      assertEquals("java.sql.SQLTimeoutException: []", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("[]", sQLTimeoutException0.getMessage());
      assertNotNull(stackTraceElementArray1);
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      assertEquals(13, stackTraceElementArray1.length);
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)sQLTimeoutException0.fillInStackTrace();
      assertEquals("java.sql.SQLTimeoutException: []", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("[]", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("[]", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: []", sQLTimeoutException1.toString());
      assertNotNull(sQLTimeoutException1);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      
      SQLTimeoutException sQLTimeoutException2 = (SQLTimeoutException)ClassUtil.getRootCause(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: []", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("[]", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: []", sQLTimeoutException2.toString());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertNull(sQLTimeoutException2.getSQLState());
      assertEquals("[]", sQLTimeoutException2.getMessage());
      assertNotNull(sQLTimeoutException2);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException0, sQLTimeoutException2);
      assertSame(sQLTimeoutException2, sQLTimeoutException0);
      assertSame(sQLTimeoutException2, sQLTimeoutException1);
      
      String string0 = ClassUtil.nonNullString("[]");
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      URI uRI0 = MockURI.aFTPURI;
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp", uRI0.getScheme());
      assertNotNull(uRI0);
      
      URI uRI1 = MockURI.resolve(uRI0, "elementType");
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("ftp://foo.barelementType", uRI1.toString());
      assertEquals("elementType", uRI1.getRawPath());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("foo.bar", uRI1.getHost());
      assertEquals("ftp", uRI1.getScheme());
      assertEquals((-1), uRI1.getPort());
      assertTrue(uRI1.isAbsolute());
      assertFalse(uRI1.isOpaque());
      assertEquals("foo.bar", uRI1.getRawAuthority());
      assertNotNull(uRI1);
      assertFalse(uRI1.equals((Object)uRI0));
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      
      URI uRI2 = MockURI.relativize(uRI0, uRI1);
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("ftp://foo.barelementType", uRI1.toString());
      assertEquals("elementType", uRI1.getRawPath());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("foo.bar", uRI1.getHost());
      assertEquals("ftp", uRI1.getScheme());
      assertEquals((-1), uRI1.getPort());
      assertTrue(uRI1.isAbsolute());
      assertFalse(uRI1.isOpaque());
      assertEquals("foo.bar", uRI1.getRawAuthority());
      assertEquals("foo.bar", uRI2.getHost());
      assertEquals("ftp", uRI2.getScheme());
      assertNull(uRI2.getRawUserInfo());
      assertEquals("ftp://foo.barelementType", uRI2.toString());
      assertEquals("elementType", uRI2.getRawPath());
      assertNull(uRI2.getRawQuery());
      assertNull(uRI2.getRawFragment());
      assertTrue(uRI2.isAbsolute());
      assertEquals((-1), uRI2.getPort());
      assertFalse(uRI2.isOpaque());
      assertEquals("foo.bar", uRI2.getRawAuthority());
      assertNotNull(uRI2);
      assertFalse(uRI0.equals((Object)uRI1));
      assertFalse(uRI1.equals((Object)uRI0));
      assertFalse(uRI2.equals((Object)uRI0));
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI0, uRI2);
      assertNotSame(uRI1, uRI0);
      assertSame(uRI1, uRI2);
      assertSame(uRI2, uRI1);
      assertNotSame(uRI2, uRI0);
      
      URL uRL0 = MockURI.toURL(uRI2);
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("ftp://foo.barelementType", uRI1.toString());
      assertEquals("elementType", uRI1.getRawPath());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("foo.bar", uRI1.getHost());
      assertEquals("ftp", uRI1.getScheme());
      assertEquals((-1), uRI1.getPort());
      assertTrue(uRI1.isAbsolute());
      assertFalse(uRI1.isOpaque());
      assertEquals("foo.bar", uRI1.getRawAuthority());
      assertEquals("foo.bar", uRI2.getHost());
      assertEquals("ftp", uRI2.getScheme());
      assertNull(uRI2.getRawUserInfo());
      assertEquals("ftp://foo.barelementType", uRI2.toString());
      assertEquals("elementType", uRI2.getRawPath());
      assertNull(uRI2.getRawQuery());
      assertNull(uRI2.getRawFragment());
      assertTrue(uRI2.isAbsolute());
      assertEquals((-1), uRI2.getPort());
      assertFalse(uRI2.isOpaque());
      assertEquals("foo.bar", uRI2.getRawAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("foo.barelementType", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("foo.barelementType", uRL0.getAuthority());
      assertEquals("", uRL0.getPath());
      assertEquals("ftp://foo.barelementType", uRL0.toString());
      assertEquals("ftp://foo.barelementType", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      assertFalse(uRI0.equals((Object)uRI1));
      assertFalse(uRI0.equals((Object)uRI2));
      assertFalse(uRI1.equals((Object)uRI0));
      assertFalse(uRI2.equals((Object)uRI0));
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI0, uRI2);
      assertNotSame(uRI1, uRI0);
      assertSame(uRI1, uRI2);
      assertSame(uRI2, uRI1);
      assertNotSame(uRI2, uRI0);
      
      // Undeclared exception!
      try { 
        jsonFactory1.createParser(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 115;
      intArray0[1] = 96;
      intArray0[2] = 96;
      intArray0[3] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertArrayEquals(new int[] {115, 96, 96, 0}, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(4, intArray0.length);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("hBmK2]$+0X", (String) null, batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("hBmK2]$+0X", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: hBmK2]$+0X", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertArrayEquals(new int[] {115, 96, 96, 0}, intArray0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(4, intArray0.length);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("hBmK2]$+0X", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: hBmK2]$+0X", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: hBmK2]$+0X", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLTransactionRollbackException: hBmK2]$+0X", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertArrayEquals(new int[] {115, 96, 96, 0}, intArray0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(4, intArray0.length);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertNotNull(placeholderForType0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) placeholderForType0, 0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("hBmK2]$+0X", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: hBmK2]$+0X", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: hBmK2]$+0X", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLTransactionRollbackException: hBmK2]$+0X", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertArrayEquals(new int[] {115, 96, 96, 0}, intArray0);
      assertNotNull(jsonMappingException0);
      assertEquals(4, intArray0.length);
      
      JsonMappingException jsonMappingException1 = ClassUtil.nonNull(jsonMappingException0, jsonMappingException0);
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("hBmK2]$+0X", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: hBmK2]$+0X", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: hBmK2]$+0X", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLTransactionRollbackException: hBmK2]$+0X", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertArrayEquals(new int[] {115, 96, 96, 0}, intArray0);
      assertNotNull(jsonMappingException1);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertEquals(4, intArray0.length);
      
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl1, (IOException) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.sql.SQLTransactionRollbackException: hBmK2]$+0X (through reference chain: com.fasterxml.jackson.databind.type.PlaceholderForType[0])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.backticked("a)9t~UHnouN");
      assertNotNull(string0);
      assertEquals("`a)9t~UHnouN`", string0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("a)9t~UHnouN", "a)9t~UHnouN", 0, map0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("a)9t~UHnouN", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("a)9t~UHnouN", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: a)9t~UHnouN", sQLClientInfoException1.toString());
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      
      SQLClientInfoException sQLClientInfoException2 = (SQLClientInfoException)ClassUtil.throwIfIOE(sQLClientInfoException1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("a)9t~UHnouN", sQLClientInfoException1.getMessage());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("a)9t~UHnouN", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: a)9t~UHnouN", sQLClientInfoException1.toString());
      assertEquals("java.sql.SQLClientInfoException: a)9t~UHnouN", sQLClientInfoException2.toString());
      assertEquals(0, sQLClientInfoException2.getErrorCode());
      assertEquals("a)9t~UHnouN", sQLClientInfoException2.getMessage());
      assertEquals("a)9t~UHnouN", sQLClientInfoException2.getSQLState());
      assertNotNull(sQLClientInfoException2);
      assertFalse(sQLClientInfoException0.equals((Object)sQLClientInfoException1));
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertFalse(sQLClientInfoException2.equals((Object)sQLClientInfoException0));
      assertNotSame(sQLClientInfoException0, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException0, sQLClientInfoException2);
      assertNotSame(sQLClientInfoException1, sQLClientInfoException0);
      assertSame(sQLClientInfoException1, sQLClientInfoException2);
      assertSame(sQLClientInfoException2, sQLClientInfoException1);
      assertNotSame(sQLClientInfoException2, sQLClientInfoException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      String string0 = constructor0.getName();
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(string0);
      assertEquals("java.lang.Object", string0);
      
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(typeArray0);
      assertEquals(0, typeArray0.length);
      
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[3];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      accessibleObjectArray0[1] = (AccessibleObject) constructor0;
      accessibleObjectArray0[2] = (AccessibleObject) constructor0;
      AccessibleObject.setAccessible(accessibleObjectArray0, true);
      assertEquals(3, accessibleObjectArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      assertEquals(0, annotationArray1.length);
      
      Annotation[] annotationArray2 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(annotationArray2);
      assertSame(annotationArray2, annotationArray0);
      assertSame(annotationArray2, annotationArray1);
      assertEquals(0, annotationArray2.length);
      
      Annotation[] annotationArray3 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(annotationArray3);
      assertSame(annotationArray3, annotationArray0);
      assertSame(annotationArray3, annotationArray2);
      assertSame(annotationArray3, annotationArray1);
      assertEquals(0, annotationArray3.length);
      
      String string1 = null;
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "elementType", (-2089));
      assertNull(sQLWarning0.getMessage());
      assertEquals((-2089), sQLWarning0.getErrorCode());
      assertEquals("elementType", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, " (from class ", (-2089), sQLWarning0);
      assertEquals((-2089), sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(" (from class ", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals((-2089), sQLWarning0.getErrorCode());
      assertEquals("elementType", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      String string2 = sQLSyntaxErrorException0.getLocalizedMessage();
      assertEquals((-2089), sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(" (from class ", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals((-2089), sQLWarning0.getErrorCode());
      assertEquals("elementType", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(string2);
      
      sQLWarning0.setNextException(sQLSyntaxErrorException0);
      assertEquals((-2089), sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals(" (from class ", sQLSyntaxErrorException0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals((-2089), sQLWarning0.getErrorCode());
      assertEquals("elementType", sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertNotNull(class2);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertNotNull(placeholderForType0);
      
      String string0 = placeholderForType0.getTypeName();
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertNotNull(string0);
      assertEquals("$1", string0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class3, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isConcrete());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertNotNull(mapLikeType0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, placeholderForType0);
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isConcrete());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.useStaticType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertNotNull(referenceType0);
      
      // Undeclared exception!
      try { 
        referenceType0.withContentTypeHandler(placeholderForType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      String string0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.type.ArrayType) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Integer> class1 = Integer.class;
      Method[] methodArray1 = ClassUtil.getDeclaredMethods(class1);
      assertNotNull(methodArray1);
      assertFalse(methodArray1.equals((Object)methodArray0));
      assertNotSame(methodArray1, methodArray0);
      assertEquals(52, methodArray1.length);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      String string0 = ClassUtil.quotedOr(mockRuntimeException0, "NULL");
      assertNotNull(string0);
      assertEquals("\"org.evosuite.runtime.mock.java.lang.MockThrowable\"", string0);
      
      Class<ArrayType> class2 = ArrayType.class;
      String string1 = ClassUtil.nameOf(class2);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`com.fasterxml.jackson.databind.type.ArrayType`", string1);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      Class<?> class4 = ClassUtil.getEnclosingClass(class3);
      assertNull(class4);
      
      Class<AccessibleObject> class5 = AccessibleObject.class;
      boolean boolean0 = ClassUtil.isProxyType(class5);
      assertFalse(boolean0);
      
      Class<JsonMappingException> class6 = JsonMappingException.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class6);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      Class<IOException> class7 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class7, false);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertNotNull(classUtil_Ctor0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("local/anonymous");
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: local/anonymous", sQLTransientConnectionException0.toString());
      assertEquals("local/anonymous", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("entrySet", mockRuntimeException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: entrySet", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("entrySet", sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "NULL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NULL", "serialVersionUID");
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("serialVersionUID", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("NULL", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: NULL", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      String string0 = "";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Fm7+5I{", "", 0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Fm7+5I{", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Fm7+5I{", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Fm7+5I{", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Fm7+5I{", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      sQLNonTransientConnectionException0.setNextException(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("serialVersionUID", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("NULL", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: NULL", sQLNonTransientConnectionException0.toString());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: Fm7+5I{", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("Fm7+5I{", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Fm7+5I{", sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("serialVersionUID", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("NULL", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: NULL", sQLNonTransientConnectionException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Fm7+5I{", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Fm7+5I{", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer1);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("serialVersionUID", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("NULL", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: NULL", sQLNonTransientConnectionException0.toString());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) list0, (-478));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("serialVersionUID", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("NULL", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: NULL", sQLNonTransientConnectionException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Fm7+5I{", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Fm7+5I{", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(jsonMappingException0);
      
      Throwable throwable0 = ClassUtil.throwIfError(jsonMappingException0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("serialVersionUID", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("NULL", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: NULL", sQLNonTransientConnectionException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Fm7+5I{", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Fm7+5I{", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(throwable0);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertNotNull(constructor0);
      assertSame(class1, class0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertNotNull(classUtil_Ctor0);
      
      Class<Object> class2 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockThrowable0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.util.ClassUtil$Ctor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<Float> class1 = Float.class;
      Class<Integer> class2 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("NULL");
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("NULL", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("NULL", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("NULL", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      boolean boolean0 = false;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("NULL", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("NULL", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("NULL", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("NULL", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      
      MockFile mockFile0 = new MockFile("qgze\"%-", "x+,EuO[:Hhr,^,J;;P");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("JSON", "JSON", (File) mockFile0);
      assertEquals("x+,EuO[:Hhr,^,J;;P", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/qgze\"%-", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/qgze\"%-/x+,EuO[:Hhr,^,J;;P", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/experiment/qgze\"%-/x+,EuO[:Hhr,^,J;;P/JSON0JSON", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("JSON0JSON", file0.getName());
      assertEquals("/experiment/qgze\"%-/x+,EuO[:Hhr,^,J;;P", file0.getParent());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator(file0, jsonEncoding0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("NULL", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("NULL", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("NULL", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("NULL", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals("x+,EuO[:Hhr,^,J;;P", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/experiment/qgze\"%-", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/qgze\"%-/x+,EuO[:Hhr,^,J;;P", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/experiment/qgze\"%-/x+,EuO[:Hhr,^,J;;P/JSON0JSON", file0.toString());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("JSON0JSON", file0.getName());
      assertEquals("/experiment/qgze\"%-/x+,EuO[:Hhr,^,J;;P", file0.getParent());
      assertEquals(0L, file0.length());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(writerBasedJsonGenerator0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/}4J<+l;.NQ^/*^");
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: /}4J<+l;.NQ^/*^", sQLTransientConnectionException0.toString());
      assertEquals("/}4J<+l;.NQ^/*^", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException: /}4J<+l;.NQ^/*^
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Constructor<MapLikeType> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      boolean boolean0 = true;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Byte> class2 = Byte.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertNotNull(javaType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<Object> class3 = Object.class;
      Object object1 = ClassUtil.createInstance(class3, true);
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object1, object0);
      
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, object0, object1);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertNotNull(arrayType0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class2, typeBindings0, (JavaType) arrayType0, (JavaType[]) null, (JavaType) arrayType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isAbstract());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertNotNull(collectionLikeType0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      CollectionLikeType collectionLikeType1 = CollectionLikeType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isAbstract());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertTrue(collectionLikeType1.isContainerType());
      assertFalse(collectionLikeType1.isInterface());
      assertFalse(collectionLikeType1.isArrayType());
      assertTrue(collectionLikeType1.hasHandlers());
      assertTrue(collectionLikeType1.hasContentType());
      assertFalse(collectionLikeType1.useStaticType());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertFalse(collectionLikeType1.hasValueHandler());
      assertFalse(collectionLikeType1.isPrimitive());
      assertFalse(collectionLikeType1.isAbstract());
      assertFalse(collectionLikeType1.isEnumType());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertEquals(0, collectionLikeType1.containedTypeCount());
      assertTrue(collectionLikeType1.isConcrete());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertTrue(collectionLikeType1.isFinal());
      assertNotNull(collectionLikeType1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(collectionLikeType1.equals((Object)collectionLikeType0));
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionLikeType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isAbstract());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertNotNull(valueInstantiator_Base0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(collectionLikeType0.equals((Object)collectionLikeType1));
      
      AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isAbstract());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertNull(annotatedParameter0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(collectionLikeType0.equals((Object)collectionLikeType1));
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      
      // Undeclared exception!
      try { 
        valueInstantiator_Base0.createFromObjectWith((DeserializationContext) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.ValueInstantiator", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<ArrayType> class1 = ArrayType.class;
      boolean boolean1 = ClassUtil.isProxyType(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockError mockError0 = new MockError((Throwable) null);
      assertNotNull(mockError0);
      
      String string0 = "}";
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "}");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Iterator<ResolvedRecursiveType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<Boolean> class1 = Boolean.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class1, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      boolean boolean2 = ClassUtil.isNonStaticInnerClass(class2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class<Error> class3 = Error.class;
      Error error0 = ClassUtil.createInstance(class3, true);
      assertNull(error0.getMessage());
      assertEquals("java.lang.Error", error0.toString());
      assertNotNull(error0);
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNull(class3);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        simpleAbstractTypeResolver0.addMapping(class0, (Class<? extends Double>) class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add mapping from class to itself
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Iterator<ResolvedRecursiveType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<ArrayType> class0 = ArrayType.class;
      boolean boolean0 = true;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Character character0 = Character.valueOf('Q');
      assertNotNull(character0);
      assertEquals('Q', (char)character0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) character0);
      assertFalse(boolean0);
      
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(12, methodArray0.length);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.reflect.AccessibleObject is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<Long> class1 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ClassUtil.getClassDescription("uZn.(1V,O:Wr");
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getExceptionTypes();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      Class<String> class2 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) referenceType0);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("`java.lang.String`");
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) referenceType0;
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      JavaType[] javaTypeArray1 = new JavaType[3];
      javaTypeArray1[0] = javaType0;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      resolvedRecursiveType0.getSuperClass();
      javaTypeArray1[1] = null;
      javaTypeArray1[2] = (JavaType) referenceType0;
      CollectionType collectionType0 = CollectionType.construct(class3, typeBindings1, javaTypeArray0[0], javaTypeArray1, javaTypeArray1[2]);
      referenceType0.withValueHandler(collectionType0);
      javaTypeArray0[1] = (JavaType) referenceType0;
      javaTypeArray0[2] = (JavaType) referenceType0;
      javaTypeArray0[3] = (JavaType) referenceType0;
      javaTypeArray0[4] = javaType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, javaType0, javaTypeArray0, (JavaType) referenceType0);
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
      assertTrue(list0.isEmpty());
  }
}
