/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:46:05 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Spliterator;
import java.util.TimeZone;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isLocalType(class0, false);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      Class<Object> class1 = Object.class;
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class2, "Cton\"2HG\"");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.SimpleType` from number null: Cton\"2HG\"
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.getDeclaringClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      MockFile mockFile0 = new MockFile("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((File) mockFile0, jsonEncoding0);
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.nameOf(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionType0, (JavaType[]) null, (JavaType) collectionType0);
      JavaType javaType0 = referenceType0.withContentType(collectionType0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, true);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findConstructor(class1, true);
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ClassUtil.findRawSuperTypes(class2, class1, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      ClassUtil.getOuterClass(class0);
      TypeFactory.defaultInstance();
      JavaType[] javaTypeArray0 = new JavaType[6];
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1809238660));
      // Undeclared exception!
      try { 
        placeholderForType0.withTypeHandler((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findEnumType(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      ClassUtil.isLocalType(class1, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null, (-9), sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLRecoverableException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "IPV6", (-9), sQLTimeoutException0);
      sQLTimeoutException0.getSuppressed();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "IPV6");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // IPV6
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      ClassUtil.isLocalType(class1, false);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.createInstance(class0, false);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet1 = EnumSet.allOf(class1);
      enumSet1.containsAll(enumSet0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Error>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ClassUtil.getClassDescription(integer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/Q@YwSXx8D.1S)", "6&`&", 1297);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLNonTransientConnectionException0);
      sQLFeatureNotSupportedException0.setNextException(sQLNonTransientConnectionException0);
      sQLFeatureNotSupportedException0.spliterator();
      sQLFeatureNotSupportedException0.getSuppressed();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("4BclPFB,", (int[]) null, sQLFeatureNotSupportedException0);
      batchUpdateException0.getLocalizedMessage();
      batchUpdateException0.getSuppressed();
      batchUpdateException0.printStackTrace();
      sQLFeatureNotSupportedException0.addSuppressed(batchUpdateException0);
      // Undeclared exception!
      ClassUtil.getRootCause(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.emptyIterator();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<ArrayType> class2 = ArrayType.class;
      ObjectMapper objectMapper2 = objectMapper1.addMixIn(class1, class2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper2, objectOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<InputStream> class0 = InputStream.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      TimeZone timeZone0 = TimeZone.getTimeZone("JSON");
      ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
      ObjectMapper objectMapper2 = objectMapper1.clearProblemHandlers();
      Version version0 = new Version(712, (-1255), 712, "6mq[B)", "JSON", "Cannot construct instance of %s: %s");
      SimpleModule simpleModule0 = new SimpleModule(version0);
      Class<String> class1 = String.class;
      SimpleModule simpleModule1 = simpleModule0.setMixInAnnotation(class0, class1);
      ObjectMapper objectMapper3 = objectMapper2.registerModule(simpleModule1);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<Object> class2 = Object.class;
      objectMapper3.readerFor(class2);
      MockIOException mockIOException0 = new MockIOException("Cannot construct instance of %s: %s", mockThrowable0);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of %s: %s
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1715);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("; illegal combination", "Z%");
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("O@RHI", "1kZj", intArray0, throwable0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("O@RHI", "O@RHI", batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.primitiveType(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findClassAnnotations(class1);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "java.lang.RuntimeEx");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      ClassUtil.canBeABeanType(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.canBeABeanType(class2);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.getEnclosingClass(class3);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.toString();
      mockRuntimeException0.fillInStackTrace();
      mockRuntimeException0.printStackTrace();
      mockRuntimeException0.getStackTrace();
      ClassUtil.nullOrToString(mockRuntimeException0);
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.hasEnclosingMethod(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, NullNode> enumMap0 = new EnumMap<AccessPattern, NullNode>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-50);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectNode objectNode0 = objectMapper0.createObjectNode();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "JSON";
      stringArray0[1] = "JSON";
      stringArray0[2] = "JSON";
      stringArray0[3] = "JSON";
      stringArray0[4] = "w`{$l`Q$S,s";
      ObjectNode objectNode1 = objectNode0.retain(stringArray0);
      ArrayNode arrayNode0 = objectNode1.withArray("w`{$l`Q$S,s");
      NullNode nullNode0 = arrayNode0.nullNode();
      enumMap0.put(accessPattern0, nullNode0);
      BiFunction<Object, Object, NullNode> biFunction0 = (BiFunction<Object, Object, NullNode>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      enumMap0.replaceAll(biFunction0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, String> enumMap0 = new EnumMap<ClientInfoStatus, String>(class0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      HashMap<ClientInfoStatus, String> hashMap0 = new HashMap<ClientInfoStatus, String>();
      enumMap0.putAll(hashMap0);
      enumMap0.put(clientInfoStatus0, "6,");
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isLocalType(class1, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, NullNode> enumMap0 = new EnumMap<AccessPattern, NullNode>(class2);
      BiFunction<AccessPattern, NullNode, NullNode> biFunction0 = (BiFunction<AccessPattern, NullNode, NullNode>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      enumMap0.replaceAll(biFunction0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, NullNode> enumMap0 = new EnumMap<AccessPattern, NullNode>(class0);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("R3JUi m;?%", mockRuntimeException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("R3JUi m;?%", " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "R3JUi m;?%", (Throwable) sQLTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("R3JUi m;?%", "R3JUi m;?%", jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0, "org.hibernate.proxy.java.sql.ClientInfoStatus");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      MockError mockError0 = new MockError(".$Ib3XtG");
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      ClassUtil.isJacksonStdImpl(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.java.lang.Error");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("[]", sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<Error> class0 = Error.class;
      ClassUtil.createInstance(class0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      MockFile mockFile0 = new MockFile("Multiple 'any-setter' methods defined (%s vs %s)", "com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      EnumSet.of(clientInfoStatus0, clientInfoStatus0, clientInfoStatus0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", "JSON", 2127);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLNonTransientException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "elementType");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Error error0 = ClassUtil.createInstance(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) error0, "org.hibernate.proxy.double");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1512867866));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.classOf(accessPattern0);
      Class<String> class1 = String.class;
      ClassUtil.getConstructors(class1);
      Float float0 = new Float((-28.793554890072));
      ClassUtil.isJacksonStdImpl((Object) float0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<IOException> class1 = IOException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      SimpleType simpleType1 = simpleType0.withValueHandler(resolvedRecursiveType0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findSuperTypes((JavaType) simpleType1, (Class<?>) class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.isProxyType(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p2g`}hOCzM-;#.}4Y:<");
      SQLTransientException sQLTransientException0 = new SQLTransientException("p2g`}hOCzM-;#.}4Y:<");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", sQLTransientException0);
      sQLTransientException0.setNextException(sQLTransientConnectionException0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("p2g`}hOCzM-;#.}4Y:<", "p2g`}hOCzM-;#.}4Y:<", (-710));
      MockPrintStream mockPrintStream0 = new MockPrintStream("p2g`}hOCzM-;#.}4Y:<");
      mockPrintStream0.print('Z');
      mockPrintStream0.print((-710));
      sQLRecoverableException0.initCause(sQLTransientException0);
      sQLRecoverableException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLTransientException0.initCause(sQLRecoverableException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.quotedOr((Object) null, "");
      ClassUtil.backticked("java.lang.Object");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Module> class0 = Module.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Error> class0 = Error.class;
      String string0 = "7LThFWG";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7LThFWG");
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.primitiveType(class0);
      MockFile mockFile0 = new MockFile("M{VYq:U[J^i!gFT~v=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintStream0, "com.fasterxml.jackson.databind.ser.std.NumberSerializers$FloatSerializer");
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "M{VYq:U[J^i!gFT~v=";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) jsonMappingException0;
      objectArray0[3] = (Object) jsonMappingException0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) mockPrintStream0;
      mockPrintStream0.format(locale0, "java.lang.RuntimeExc", objectArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("=[eBKN-3/Jw(0YLHZ", "M{VYq:U[J^i!gFT~v=", 3, jsonMappingException0);
      SQLException sQLException0 = new SQLException("java.lang.RuntimeExc", "=[eBKN-3/Jw(0YLHZ", sQLFeatureNotSupportedException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isConcrete((Member) constructor0);
      MockIOException mockIOException0 = new MockIOException("oHZ#J2Q;+WWc[?");
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot figure out type for EnumMap (odd JDK platform?)");
      Class<Byte> class0 = Byte.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.backticked("LgI8iz^q07u)h4xMh;");
      ClassUtil.getClassMethods(class0);
      ClassUtil.getDeclaredMethods(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class1);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CollectionType collectionType2 = collectionType1.withTypeHandler("Cannot figure out type for EnumMap (odd JDK platform?)");
      CollectionType collectionType3 = collectionType2.withContentValueHandler((Object) null);
      collectionType2.withContentValueHandler(collectionType0);
      ClassUtil.findSuperTypes((JavaType) collectionType3, (Class<?>) class1, true);
      ClassUtil.getEnclosingClass(class1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) collectionType2);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<Character> class2 = Character.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class2, "`LgI8iz^q07u)h4xMh;`", collectionType1);
      virtualAnnotatedMember0.getMember();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-36);
      byteArray0[8] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.io.InputStream");
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2171), (Reader) null, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      Class<SimpleType> class2 = SimpleType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class2, jsonToken0, "7X0dt]/8U^@%*2");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_INT: 7X0dt]/8U^@%*2
         //  at [Source: (DataInputStream); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3471), (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("I%[|", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", 2);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) mockFileReader0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException: I%[|
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType");
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = false;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<String> class1 = String.class;
      Class<Double> class2 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class1, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isConcrete(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(class1);
      ReferenceType referenceType2 = referenceType1.withContentValueHandler(class1);
      ReferenceType referenceType3 = referenceType2.withStaticTyping();
      ClassUtil.rawClass(referenceType3);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getClassDescription(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn("com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer").when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) objectOutputStream0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JSON", "java.io.InputStream", 2542);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<CollectionType> class1 = CollectionType.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.Double");
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.classOf(class0);
      ClassUtil.classNameOf("java.lang.Double");
      Class<SimpleType> class2 = SimpleType.class;
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
      Class<MapLikeType> class4 = MapLikeType.class;
      Class<Float> class5 = Float.class;
      ClassUtil.findSuperTypes(class4, class5);
      Class<Annotation> class6 = Annotation.class;
      ClassUtil.isBogusClass(class6);
      Class<RuntimeException> class7 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class7);
      ClassUtil.getEnclosingClass(class7);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("~yt_^d", "NONE", (-878), batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientConnectionException0, "java.lang.Double");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.Double
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4N?T& %[SOG(%");
      Class<RuntimeException> class0 = RuntimeException.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      mapLikeType0.getTypeName();
      mapLikeType0.toString();
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class1, true);
      // Undeclared exception!
      try { 
        Long.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("X]nGA9vgaAy)97--");
      sQLFeatureNotSupportedException0.addSuppressed(sQLSyntaxErrorException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLFeatureNotSupportedException0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerForUpdating(iOContext0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[4];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CollectionType collectionType2 = collectionType1.withContentValueHandler("X]nGA9vgaAy)97--");
      CollectionLikeType collectionLikeType0 = collectionType0.withTypeHandler(constructor0);
      CollectionLikeType collectionLikeType1 = collectionType2.withValueHandler(collectionLikeType0);
      // Undeclared exception!
      try { 
        objectMapper0.readerFor((JavaType) collectionLikeType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("]6g", "]6g");
      SQLException sQLException0 = new SQLException("]6g", "]6g", sQLTransientConnectionException0);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(throwable0);
      sQLFeatureNotSupportedException0.addSuppressed(sQLException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, throwable0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerForUpdating(class0);
      Class<Short> class1 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      EnumSet.of(clientInfoStatus0, clientInfoStatus0, clientInfoStatus0);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.findEnumType((Enum<?>) clientInfoStatus0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      SQLException sQLException0 = new SQLException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.SimpleType");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.SimpleType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Double> class0 = Double.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      IOContext iOContext0 = new IOContext(bufferRecycler0, accessPattern0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLSyntaxErrorException0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(mockRuntimeException0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[3];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      ObjectReader objectReader1 = objectReader0.withFeatures(formatFeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      objectReader0.with(deserializationFeature0, deserializationFeatureArray0);
      objectReader1.withFormatDetection((ObjectReader[]) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 22, objectMapper1, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 114, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockPrintStream0, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
      ObjectMapper objectMapper2 = objectMapper1.setConfig((SerializationConfig) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-65);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper2, (OutputStream) null, byteArray0, 2049, false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EEE, dd MMM yyyy HH:mm:ss zzz");
      ClassUtil.classOf((Object) null);
      Class<Character> class0 = Character.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
      ClassUtil.backticked("com.sun.org.apache.bcel.internal.util.ClassLoader");
      System.setCurrentTimeMillis(0L);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.getConstructors(class3);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLException0);
      Throwable throwable0 = ClassUtil.throwIfIOE(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(throwable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isBogusClass(class0);
      Class<NoClass> class1 = NoClass.class;
      MockIOException mockIOException0 = new MockIOException();
      MockException mockException0 = new MockException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, (-6));
      JsonMappingException.wrapWithPath((Throwable) mockException0, jsonMappingException_Reference0);
      Class<?> class2 = ClassUtil.classOf(class1);
      ClassUtil.findRawSuperTypes(class2, class0, false);
      Class<SimpleType> class3 = SimpleType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isConcrete(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("70G#]pM-X");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.hasClass(jsonMappingException0, class0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockException mockException0 = new MockException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Class<Integer> class0 = Integer.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1809238660), objectReader0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-946), false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter((PrettyPrinter) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "R1>MytmK&nB\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0, clientInfoStatus1);
      ClassUtil.findEnumType(enumSet0);
      System.setCurrentTimeMillis(1L);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(47);
      placeholderForType0.getContentType();
      Class<Character> class0 = Character.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Double");
      Class<Double> class0 = Double.TYPE;
      ClassUtil.throwIfError((Throwable) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 583);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.lang.Double", "java.lang.Double", 2);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException: java.lang.Double
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findConstructor(class0, true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("X]nGA9vgaAy)97--");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException1.addSuppressed(sQLSyntaxErrorException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLFeatureNotSupportedException0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerForUpdating(iOContext0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findConstructor(class0, true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("X]nGA9vgaAy)97--");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException1.addSuppressed(sQLSyntaxErrorException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLFeatureNotSupportedException0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(iOContext0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[4];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      formatFeatureArray0[3] = formatFeature0;
      ObjectReader objectReader1 = objectReader0.withFeatures(formatFeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader2 = objectReader1.with(deserializationFeature0, deserializationFeatureArray0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[2];
      objectReaderArray0[0] = objectReader1;
      objectReaderArray0[1] = objectReader2;
      ObjectReader objectReader3 = objectReader2.withFormatDetection(objectReaderArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectReader3, filterOutputStream0, byteArrayBuilder0.NO_BYTES, 2, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) byteArrayBuilder0, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.isConcrete(class0);
      ClassUtil.isJacksonStdImpl((Object) class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getConstructors(class2);
      Integer integer0 = new Integer(2285);
      ClassUtil.nullOrToString(integer0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      ClassUtil.hasClass(class0, class1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.hibernate.proxy.java.lang.Integer");
      sQLFeatureNotSupportedException0.addSuppressed(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<String> class2 = String.class;
      ClassUtil.hasClass(class1, class2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ").C{Z7+y$3A4'#R");
      Class<Double> class0 = Double.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ").C{Z7+y$3A4'#R");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.classNameOf(").C{Z7+y$3A4'#R");
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class3, false);
      constructor0.getAnnotatedParameterTypes();
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O\"u?N#Q");
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.isObjectOrPrimitive(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Number is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassUtil.isProxyType(class0);
      Iterator<JsonMappingException> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.getPackageName(class0);
      ClassUtil.getClassDescription("java.lang");
      ClassUtil.hasClass(iterator0, class0);
      ClassUtil.getEnclosingClass(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLRecoverableException0);
      ClassUtil.emptyIterator();
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, true);
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Character> class2 = Character.class;
      ClassUtil.nameOf(class2);
      Class<Byte> class3 = Byte.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.hasClass(class0, class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ClassUtil.throwIfError(sQLTransactionRollbackException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Float float0 = new Float(508.50581187);
      Class<SimpleType> class0 = SimpleType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class0, "gYK^-k/&#a}g1");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.SimpleType` from number 508.5058: gYK^-k/&#a}g1
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.hasClass(class0, class0);
      Class<Error> class1 = Error.class;
      ClassUtil.createInstance(class1, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-9));
      placeholderForType0.actualType();
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      NullNode nullNode0 = NullNode.instance;
      Class<Short> class0 = Short.TYPE;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!HdJ(k");
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedParameterTypes();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      constructor0.getAnnotatedParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.nullOrToString("!HdJ(k");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Float> class0 = Float.class;
      ClassUtil.getOuterClass(class0);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(65535, 1266);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<Integer> class1 = Integer.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class1);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      Character character0 = Character.valueOf('{');
      ArrayType arrayType2 = arrayType1.withContentValueHandler(character0);
      ClassUtil.rawClass(arrayType2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<NoClass>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.isLocalType(class0, false);
      String string0 = "net.sf.cglib.proxy.java.lang.Byte";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Byte");
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nullOrToString(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Class@0000000001");
      Class<Byte> class1 = Byte.class;
      ClassUtil.isObjectOrPrimitive(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      int[] intArray0 = new int[8];
      intArray0[0] = 35;
      intArray0[1] = 1;
      intArray0[2] = 234;
      intArray0[3] = (-605);
      intArray0[4] = (-228);
      intArray0[5] = 826;
      intArray0[6] = 3;
      intArray0[7] = 4364;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLRecoverableException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) class0, "enum");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(batchUpdateException0, "enum");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.sql.SQLRecoverableException (through reference chain: java.sql.BatchUpdateException[\"enum\"]->java.lang.Integer[\"enum\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("z8U", "z8U");
      sQLNonTransientException0.printStackTrace();
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isObjectOrPrimitive(class0);
      MockError mockError0 = new MockError((String) null, (Throwable) null);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("primitive", "tnO68SIM.");
      Class<Integer> class0 = Integer.class;
      ClassUtil.isConcrete(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("primitive", "primitive");
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getClassMethods(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isConcrete(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getDeclaredFields(class2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isBogusClass(class0);
      Class<NoClass> class1 = NoClass.class;
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      enumSet0.add(clientInfoStatus0);
      EnumSet<ClientInfoStatus> enumSet1 = EnumSet.noneOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet1);
      Byte byte0 = new Byte((byte) (-32));
      Byte byte1 = new Byte((byte) (-7));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      Float float0 = new Float(1016.3734570905817);
      ClassUtil.nonNull((Float) null, float0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn("NjO$b").when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.emptyIterator();
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperClasses(class2, class3, false);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getDeclaredAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperClasses(class1, class0, false);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      enumSet0.add(clientInfoStatus0);
      ClassUtil.findEnumType(enumSet0);
      Byte byte0 = new Byte((byte) (-32));
      Byte byte1 = new Byte((byte) (-7));
      Class<Error> class1 = Error.class;
      ClassUtil.isCollectionMapOrArray(class1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("f5_9*8XDe;b$;p#?MU", "Unexpected byte 0x%02x following 0xEF; should get 0xBB as second byte UTF-8 BOM", 3331);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(throwable0, (-393805500));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath(throwable0, jsonMappingException_Reference0);
      ClassUtil.classOf(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.findSuperTypes(class0, class1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("wuRMs-x`%`vAo=$", (String) null);
      MockIOException mockIOException0 = new MockIOException("elementType", sQLNonTransientConnectionException0);
      mockIOException0.printStackTrace();
      sQLNonTransientConnectionException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("E8OFz", "E8OFz", 1, hashMap0);
      sQLClientInfoException0.getFailedProperties();
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      ClassUtil.hasClass(class0, class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null);
      MockIOException mockIOException0 = new MockIOException("", sQLNonTransientConnectionException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Q%w;f*\"$@}xDV", " with 1 type parameter: class expects ", 8, sQLClientInfoException0);
      sQLClientInfoException0.setNextException(sQLSyntaxErrorException0);
      sQLClientInfoException0.getFailedProperties();
      MockError mockError0 = new MockError("");
      ClassUtil.throwIfRTE(mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.noneOf(class2);
      ClassUtil.findEnumType(enumSet0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "3l=C3");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) class0, "3l=C3");
      ClassUtil.nonNull(jsonMappingException2, jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getClassMethods(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, true);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.emptyIterator();
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(91);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[0]);
      String string0 = "";
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(mapType0, "", "");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findConstructor(class0, true);
      Class<Object> class1 = Object.class;
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.backticked("UJNZ");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 4000);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.getClassDescription("X'C");
      Class<Error> class0 = Error.class;
      Class<String> class1 = String.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.findEnumType(class0);
      Class<Short> class2 = Short.class;
      ClassUtil.getEnclosingClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isLocalType(class0, false);
      Class<Object> class1 = Object.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.getGenericInterfaces(class2);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Current token (%s) not of boolean type", "Unsuitable method (", 3182);
      MockThrowable.getDefaultStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionException0.getStackTrace();
      sQLTransientConnectionException0.getLocalizedMessage();
      sQLNonTransientConnectionException0.setNextException(sQLTransientConnectionException0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException("elementType", "Current token (%s) not of boolean type", throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Current token (%s) not of boolean type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.hasClass((Object) null, class1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nameOf((Named) null);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isBogusClass(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer", "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer");
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Double> class0 = Double.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.findEnumType(class0);
      Object object0 = new Object();
      ClassUtil.nonNull((Double) null, (Double) null);
      ClassUtil.classNameOf(object0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      Double double0 = new Double(2669.2892452981);
      Double double1 = new Double(2669.2892452981);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class0);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findEnumType(class0);
      Object object0 = new Object();
      ClassUtil.nonNull((Double) null, (Double) null);
      ClassUtil.quotedOr((Object) null, (String) null);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<Annotation> class1 = Annotation.class;
      Class<Long> class2 = Long.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<MapType> class3 = MapType.class;
      ClassUtil.findClassAnnotations(class3);
      ClassUtil.hasClass(class1, class1);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Integer> class2 = Integer.class;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-68);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isLocalType(class2, false);
      Class<Double> class3 = Double.class;
      ClassUtil.isObjectOrPrimitive(class3);
      ClassUtil.nonNullString("ee");
      System.setCurrentTimeMillis(9223372036854775807L);
      Class<Character> class4 = Character.class;
      ClassUtil.isBogusClass(class4);
      ClassUtil.quotedOr(class0, "ee");
      Class<Character> class5 = Character.class;
      ClassUtil.isBogusClass(class5);
      Class<IOException> class6 = IOException.class;
      ClassUtil.isObjectOrPrimitive(class6);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("ee");
      ClassUtil.nonNull((Object) class1, (Object) mockRuntimeException0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("ee", "RW!joro!5");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // RW!joro!5
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Short short0 = new Short((short)2087);
      ClassUtil.nonNull(short0, short0);
      ClassUtil.isBogusClass(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer", "Multiple 'as-value' properties defined (%s vs %s)");
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Object> class1 = Object.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<Long> class2 = Long.TYPE;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.nameOf(class2);
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isLocalType(class0, false);
      int[] intArray0 = new int[7];
      intArray0[0] = 13;
      intArray0[1] = 100;
      intArray0[2] = (-1);
      intArray0[3] = 1;
      intArray0[4] = 13;
      intArray0[5] = (-2);
      intArray0[6] = (-705045486);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(".HuDsoWg.3", ".HuDsoWg.3", intArray0);
      batchUpdateException0.getNextException();
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1912);
      intArray0[2] = (-859);
      intArray0[3] = (-1368);
      intArray0[4] = 1;
      intArray0[5] = (-3341);
      intArray0[6] = 1114111;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3341));
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException(collectionLikeType0, "charOffset", "Not implemented for ObjectReader");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'charOffset' as a subtype of [collection-like type; class java.lang.Object, contains $-3340]: Not implemented for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from number 10: com.fasterxml.jackson.databind.util.ClassUtil$Ctor
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaredFields(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<Character> class2 = Character.class;
      Class<Short> class3 = Short.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "NULL", (Throwable) sQLIntegrityConstraintViolationException0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // NULL
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[Lg[irY_Jd7at^+wS=n", "[Lg[irY_Jd7at^+wS=n", 1229, hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("keyUniverse", map0, sQLClientInfoException0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException(map1);
      sQLClientInfoException0.initCause(sQLClientInfoException1);
      hashMap0.keySet();
      ClassUtil.throwIfRTE(sQLClientInfoException1);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      TypeBindings typeBindings1 = TypeBindings.create(class0, (JavaType[]) null);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings1, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      MockError mockError0 = new MockError();
      referenceType0.withContentValueHandler(typeBindings0);
      referenceType0.getContentType();
      ClassUtil.rawClass(simpleType0);
      ClassUtil.getDeclaringClass(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(mockError0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Error> class1 = Error.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.nonNullString((String) null);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getPackageName(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.primitiveType(class2);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.getDeclaredMethods(class3);
      SQLException sQLException0 = new SQLException((String) null, "32P{-#DDX_%");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Short short0 = new Short((short) (-970));
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findClassAnnotations(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.hasClass("java.lang.Object", class2);
      ClassUtil.nonNullString("");
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Throwable throwable0 = null;
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getConstructors(class1);
      Class<Float> class2 = Float.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Object> class3 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class2);
      Float float0 = new Float(1990.0F);
      ClassUtil.nameOf((Class<?>) null);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Object> class1 = Object.class;
      ClassUtil.throwIfRTE((Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(", problem: ", ", problem: ", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // , problem: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<String> class2 = String.class;
      ClassUtil.findClassAnnotations(class2);
      SQLWarning sQLWarning0 = new SQLWarning("rYF!F]m^zCD7?)Y", "rYF!F]m^zCD7?)Y");
      ClassUtil classUtil1 = new ClassUtil();
      Class<Float> class3 = Float.class;
      ClassUtil.isLocalType(class3, false);
      ClassUtil.nameOf(class0);
      ClassUtil.isBogusClass(class0);
      Class<IOException> class4 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      Class<Object> class5 = Object.class;
      ClassUtil.findRawSuperTypes(class3, class5, false);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Short short0 = new Short((short) (-970));
      ClassUtil.isJacksonStdImpl((Object) short0);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.verifyMustOverride(class0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "@4'y|L{>~$K0u");
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.hasClass(class0, class0);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      Float float0 = new Float((-1360.0F));
      Float float1 = new Float((-124.1262593));
      ClassUtil.nonNull(float0, float1);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getConstructors(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.emptyIterator();
      ClassUtil.canBeABeanType(class0);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getPackageName(class3);
      Byte byte0 = new Byte((byte) (-65));
      ClassUtil.nullOrToString(byte0);
      ClassUtil.nonNullString("L&'RwfedL~`^H04tG");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Character> class1 = Character.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.getOuterClass(class0);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.getConstructors(class3);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory1.disable(jsonFactory_Feature0);
      Class<MapType> class4 = MapType.class;
      ClassUtil.primitiveType(class4);
      Class<Double> class5 = Double.class;
      ClassUtil.getDeclaredMethods(class5);
      SQLException sQLException0 = new SQLException("JSON", "JSON");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("byte[]", "byte[]");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLRecoverableException0);
      sQLRecoverableException0.setNextException(sQLTransientConnectionException0);
      SQLException sQLException0 = new SQLException("net.sf.cglib.proxy.double", "byte[]", (-1), sQLRecoverableException0);
      sQLRecoverableException0.initCause(sQLException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0, "byte[]");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<Long> class2 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1]);
      MockError mockError0 = new MockError();
      referenceType0.getContentType();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Character> class1 = Character.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.findSuperClasses(class0, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getGenericInterfaces(class0);
      NullNode nullNode0 = NullNode.instance;
      // Undeclared exception!
      try { 
        nullNode0.withArray("Cannot figure out type for EnumSet (odd JDK platform?)");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JsonNode not of type ObjectNode (but com.fasterxml.jackson.databind.node.NullNode), cannot call withArray() on it
         //
         verifyException("com.fasterxml.jackson.databind.JsonNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ClassUtil.getClassDescription("-Ay");
      Character character0 = new Character('d');
      ClassUtil.quotedOr(character0, "32P{-#DDX_%");
      Class<Character> class0 = Character.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      Class<String> class1 = String.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      ClassUtil.getOuterClass(class0);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.getConstructors(class3);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory2.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("`java.lang.String`");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonFactory0.enable(jsonGenerator_Feature0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("<w`K");
      mockPrintStream0.append((CharSequence) "`java.lang.String`");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(796);
      jsonFactory3.createGenerator((OutputStream) byteArrayBuilder0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ClassUtil.getClassDescription("-Ay");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "keyUniverse", 1297);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      sQLNonTransientConnectionException0.fillInStackTrace();
      sQLFeatureNotSupportedException0.setNextException(sQLNonTransientConnectionException0);
      sQLFeatureNotSupportedException0.spliterator();
      sQLFeatureNotSupportedException0.getSuppressed();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("4BclPFB,", (int[]) null, sQLFeatureNotSupportedException0);
      batchUpdateException0.getLocalizedMessage();
      batchUpdateException0.getSuppressed();
      sQLFeatureNotSupportedException0.addSuppressed(batchUpdateException0);
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      Class<Long> class0 = Long.class;
      ClassUtil.hasEnclosingMethod(class0);
      Long long0 = new Long(0);
      ClassUtil.isJacksonStdImpl((Object) "(q/#ri6r6;$;$ZW3");
      ClassUtil.isJacksonStdImpl(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<MapType> class1 = MapType.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "serialVersionUID", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.verifyMustOverride(class0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "@4'y|L{>~$|0u");
      ClassUtil.findClassAnnotations(class0);
      Class<String> class1 = String.class;
      ClassUtil.hasClass(class0, class1);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.getSuppressed();
      ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0, "@4'y|L{>~$|0u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @4'y|L{>~$|0u
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ClassUtil.getClassDescription("-Ay");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "com.fasterxml.jackso", 1297);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.setNextException(sQLNonTransientConnectionException0);
      sQLFeatureNotSupportedException0.spliterator();
      sQLFeatureNotSupportedException0.getSuppressed();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("-Ay", (int[]) null, sQLNonTransientConnectionException0);
      ClassUtil.nonNullString("");
      batchUpdateException0.getSuppressed();
      sQLFeatureNotSupportedException0.addSuppressed(batchUpdateException0);
      ClassUtil.getRootCause(sQLNonTransientConnectionException0);
      Class<Long> class0 = Long.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.hasEnclosingMethod(class1);
      Long long0 = new Long(602L);
      ClassUtil.isJacksonStdImpl((Object) "keyUniverse");
      ClassUtil.isJacksonStdImpl(class0);
      Class<Long> class2 = Long.class;
      ClassUtil.findConstructor(class2, false);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.isObjectOrPrimitive(class3);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Integer integer0 = new Integer(1);
      ClassUtil.getClassDescription(integer0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/Q@YwSXx8D.1S)", "6&`&", 1297);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.setNextException(sQLNonTransientConnectionException0);
      sQLFeatureNotSupportedException0.spliterator();
      sQLFeatureNotSupportedException0.getSuppressed();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("4BclPFB,", (int[]) null, sQLFeatureNotSupportedException0);
      batchUpdateException0.getLocalizedMessage();
      batchUpdateException0.getSuppressed();
      sQLFeatureNotSupportedException0.addSuppressed(batchUpdateException0);
      ClassUtil.getRootCause(batchUpdateException0);
      Class<Long> class0 = Long.class;
      ClassUtil.hasEnclosingMethod(class0);
      Long long0 = new Long(1);
      ClassUtil.isJacksonStdImpl((Object) "`java.lang.Integer`");
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.quotedOr(class0, "32P{-#DDX_%");
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Character> class1 = Character.class;
      Class<IOException> class2 = IOException.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.getOuterClass(class0);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.getConstructors(class3);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory1.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("net.sf.cglib.proxy.java.lang.RuntimeException");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "JSON");
      jsonFactory3.createGenerator((OutputStream) printStream0);
      Class<MapType> class4 = MapType.class;
      ClassUtil.findSuperClasses((Class<?>) null, class4, true);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ClassUtil.getClassDescription("-Ay");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "keyUniverse", 1297);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.setNextException(sQLNonTransientConnectionException0);
      sQLFeatureNotSupportedException0.spliterator();
      sQLFeatureNotSupportedException0.getSuppressed();
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.getPackageName(class2);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.getGenericSuperclass(class3);
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class3);
      ClassUtil.isJacksonStdImpl((Object) class3);
      Class<ReferenceType> class5 = ReferenceType.class;
      ClassUtil.getDeclaredMethods(class5);
      System.setCurrentTimeMillis((-2147483648L));
      Class<Object> class6 = Object.class;
      ClassUtil.getDeclaredFields(class6);
      ClassUtil.classNameOf(class0);
      ClassUtil.isJacksonStdImpl(class4);
      Class<IOException> class7 = IOException.class;
      ClassUtil.getGenericInterfaces(class7);
      ClassUtil.findSuperClasses(class7, class3, false);
      ClassUtil.getConstructors(class0);
      Class<MapType> class8 = MapType.class;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.findRawSuperTypes(class6, class8, false);
      Class<MapType> class9 = MapType.class;
      ClassUtil.nameOf(class9);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.quotedOr(class0, "32P{-#DDX_%");
      Class<Character> class1 = Character.class;
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Object> class2 = Object.class;
      ClassUtil.getConstructors(class2);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.primitiveType(class3);
      Class<String> class4 = String.class;
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.getDeclaredFields(class4);
      Class<Short> class5 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Short short0 = new Short((short)2087);
      ClassUtil.nonNull(short0, short0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.emptyIterator();
      ClassUtil.findSuperClasses(class0, class0, false);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findEnumType(class0);
      Object object0 = new Object();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.hasEnclosingMethod(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("keyUniverse");
      mockRuntimeException0.getStackTrace();
      ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findEnumType(class0);
      Object object0 = new Object();
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.hasEnclosingMethod(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("keyUniverse");
      mockRuntimeException0.getStackTrace();
      ClassUtil.throwRootCauseIfIOE(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.verifyMustOverride(class0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "@4'y|L{>~$K0u");
      ClassUtil.findClassAnnotations(class0);
      Class<String> class1 = String.class;
      ClassUtil.hasClass(class0, class1);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", "");
      sQLNonTransientConnectionException0.printStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("2BEZp]<?y^Y?");
      sQLTransactionRollbackException0.getSuppressed();
      sQLNonTransientConnectionException0.initCause(sQLTransactionRollbackException0);
      StackTraceElement[] stackTraceElementArray0 = sQLNonTransientConnectionException0.getStackTrace();
      sQLNonTransientConnectionException0.getStackTrace();
      ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      Class<Double> class0 = Double.class;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      ClassUtil.getDeclaredFields(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl1.copy();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "unknown");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.classNameOf((Object) null);
      ClassUtil.getClassDescription(classUtil0);
      Class<Integer> class2 = Integer.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      int[] intArray0 = new int[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(">oZ`.7yzH}\"?B_k_P", "(q/#ri6r6;$;$ZW3", 0);
      sQLFeatureNotSupportedException1.setNextException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.addSuppressed(sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedException0.spliterator();
      intArray0[0] = 3338;
      intArray0[1] = 33;
      intArray0[2] = 0;
      intArray0[3] = 1798;
      intArray0[4] = 0;
      intArray0[5] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ZERO_LENGTH_ENUM_ARRAY", intArray0, sQLFeatureNotSupportedException0);
      batchUpdateException0.getLocalizedMessage();
      batchUpdateException0.getSuppressed();
      sQLFeatureNotSupportedException0.addSuppressed(batchUpdateException0);
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      Class<Long> class0 = Long.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getClassMethods(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("; failed to set access: ");
      MockIOException mockIOException0 = new MockIOException("a");
      mockRuntimeException0.addSuppressed(mockIOException0);
      ClassUtil.nullOrToString(mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Short short0 = new Short((short) (-970));
      ClassUtil.isJacksonStdImpl((Object) short0);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      MockThrowable mockThrowable0 = new MockThrowable("D");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockThrowable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // D
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getPackageName(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class3);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getClassMethods(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("d]h9REJ[Vg");
      MockIOException mockIOException0 = new MockIOException("a");
      mockRuntimeException0.addSuppressed(mockIOException0);
      ClassUtil.nullOrToString(mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Character> class0 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "I");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Character) must override method 'I'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Long long0 = new Long(0L);
      String string0 = "elementType";
      ClassUtil.quotedOr(long0, "elementType");
      Class<Float> class0 = Float.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isObjectOrPrimitive(class1);
      int int0 = 0;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("\"", "\"0\"", 0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0, "elementType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // elementType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ClassUtil.getClassDescription("-Ay");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "keyUniverse", 1297);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.setNextException(sQLNonTransientConnectionException0);
      sQLFeatureNotSupportedException0.spliterator();
      sQLFeatureNotSupportedException0.getSuppressed();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("4BclPFB,", (int[]) null, sQLFeatureNotSupportedException0);
      batchUpdateException0.getLocalizedMessage();
      batchUpdateException0.getSuppressed();
      sQLFeatureNotSupportedException0.addSuppressed(batchUpdateException0);
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      Class<Long> class0 = Long.class;
      ClassUtil.hasEnclosingMethod(class0);
      Long long0 = new Long(0);
      ClassUtil.isJacksonStdImpl((Object) "(q/#ri6r6;$;$ZW3");
      ClassUtil.isJacksonStdImpl(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.createInstance(class1, false);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      CharacterEscapes.standardAsciiEscapesForJSON();
      jsonFactory2.enable(jsonFactory_Feature0);
      CharacterEscapes.standardAsciiEscapesForJSON();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("K8~ZM,Gz#-I", "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      sQLClientInfoException1.initCause(sQLClientInfoException0);
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLClientInfoException1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getGenericInterfaces(class1);
      Float float0 = new Float(1.0);
      ClassUtil.classNameOf(float0);
      ClassUtil.getClassDescription(class0);
      Class<Integer> class2 = Integer.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isLocalType(class0, true);
      Class<Void> class1 = Void.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.isNonStaticInnerClass(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.hibernate.proxy.java.lang.Object", "org.hibernate.proxy.java.lang.Object", 2179);
      MockThrowable.getDefaultStackTrace();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLNonTransientConnectionException0.setNextException(sQLTransientConnectionException0);
      Class<String> class2 = String.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<String> class3 = String.class;
      ClassUtil.canBeABeanType(class3);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.getGenericInterfaces(class1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 2179);
      MockThrowable.getDefaultStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      sQLTransientConnectionException0.getLocalizedMessage();
      sQLNonTransientConnectionException0.setNextException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<Long> class2 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1]);
      MockError mockError0 = new MockError();
      referenceType0.withContentValueHandler(mockError0);
      JavaType javaType0 = referenceType0.getContentType();
      ClassUtil.rawClass(javaType0);
      ClassUtil.getDeclaringClass(class1);
      Class<Void> class3 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class3, true);
      constructor0.getAnnotatedReceiverType();
      Class<Annotation> class4 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class4);
      constructor0.getParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      Class<Object> class5 = Object.class;
      ClassUtil.isProxyType(class5);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.getGenericInterfaces(class1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 2179);
      sQLNonTransientConnectionException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "6T(", 2179, sQLNonTransientConnectionException0);
      sQLTransientConnectionException0.getLocalizedMessage();
      sQLNonTransientConnectionException0.setNextException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      String string0 = "vP3";
      ClassUtil.backticked("vP3");
      ClassUtil.emptyIterator();
      ClassUtil.findSuperClasses(class0, class0, true);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes(class1, class0, list0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getOuterClass(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.canBeABeanType(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.canBeABeanType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Short short0 = new Short((short)2087);
      ClassUtil.nonNull(short0, short0);
      Class<NoClass> class1 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Error> class1 = Error.class;
      Constructor<LinkedList<HashMap>> constructor0 = ClassUtil.findConstructor((Class<LinkedList<HashMap>>) class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getDeclaringClass(class0);
      Float float0 = new Float(685.3052);
      ClassUtil.classOf(float0);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ClassUtil.getClassDescription("-Ay");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "`java.lang.String`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = ClassUtil.getClassDescription("-Ay");
      assertEquals("`java.lang.String`", string0);
      assertNotNull(string0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<MapType> class0 = MapType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.databind.type.MapLikeType", class1.toString());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("JSON");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonGenerator_Feature0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "`java.lang.String`");
      jsonFactory4.createGenerator((OutputStream) printStream0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals("class java.lang.Number", class1.toString());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Number is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = false;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Constructor<Double> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      int[] intArray0 = new int[6];
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(">oZ`.7yzH}\"?B_k_P", "(q/#ri6r6;$;$ZW3", 0);
      assertEquals("(q/#ri6r6;$;$ZW3", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: >oZ`.7yzH}\"?B_k_P", sQLFeatureNotSupportedException1.toString());
      assertEquals(">oZ`.7yzH}\"?B_k_P", sQLFeatureNotSupportedException1.getMessage());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      assertNotNull(sQLFeatureNotSupportedException1);
      
      sQLFeatureNotSupportedException1.setNextException(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("(q/#ri6r6;$;$ZW3", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: >oZ`.7yzH}\"?B_k_P", sQLFeatureNotSupportedException1.toString());
      assertEquals(">oZ`.7yzH}\"?B_k_P", sQLFeatureNotSupportedException1.getMessage());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      sQLFeatureNotSupportedException0.addSuppressed(sQLFeatureNotSupportedException1);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("(q/#ri6r6;$;$ZW3", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: >oZ`.7yzH}\"?B_k_P", sQLFeatureNotSupportedException1.toString());
      assertEquals(">oZ`.7yzH}\"?B_k_P", sQLFeatureNotSupportedException1.getMessage());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      Spliterator<Throwable> spliterator0 = sQLFeatureNotSupportedException0.spliterator();
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertNotNull(spliterator0);
      
      intArray0[0] = 3338;
      intArray0[1] = 33;
      intArray0[2] = 0;
      intArray0[3] = 1798;
      Throwable[] throwableArray0 = sQLFeatureNotSupportedException0.getSuppressed();
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertNotNull(throwableArray0);
      assertEquals(1, throwableArray0.length);
      
      intArray0[4] = 0;
      intArray0[5] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ZERO_LENGTH_ENUM_ARRAY", intArray0, sQLFeatureNotSupportedException0);
      assertArrayEquals(new int[] {3338, 33, 0, 1798, 0, 0}, intArray0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ZERO_LENGTH_ENUM_ARRAY", batchUpdateException0.toString());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", batchUpdateException0.getMessage());
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertNotNull(batchUpdateException0);
      assertEquals(6, intArray0.length);
      
      String string0 = batchUpdateException0.getLocalizedMessage();
      assertArrayEquals(new int[] {3338, 33, 0, 1798, 0, 0}, intArray0);
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", string0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ZERO_LENGTH_ENUM_ARRAY", batchUpdateException0.toString());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", batchUpdateException0.getMessage());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertNotNull(string0);
      assertEquals(6, intArray0.length);
      
      Throwable[] throwableArray1 = batchUpdateException0.getSuppressed();
      assertArrayEquals(new int[] {3338, 33, 0, 1798, 0, 0}, intArray0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ZERO_LENGTH_ENUM_ARRAY", batchUpdateException0.toString());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", batchUpdateException0.getMessage());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(throwableArray1, throwableArray0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(throwableArray1.equals((Object)throwableArray0));
      assertNotNull(throwableArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, throwableArray1.length);
      
      sQLFeatureNotSupportedException0.addSuppressed(batchUpdateException0);
      assertArrayEquals(new int[] {3338, 33, 0, 1798, 0, 0}, intArray0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: ZERO_LENGTH_ENUM_ARRAY", batchUpdateException0.toString());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", batchUpdateException0.getMessage());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertEquals(6, intArray0.length);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = (SQLFeatureNotSupportedException)ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException2.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException2.toString());
      assertNull(sQLFeatureNotSupportedException2.getSQLState());
      assertNull(sQLFeatureNotSupportedException2.getMessage());
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException2);
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException2, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException2, sQLFeatureNotSupportedException0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException2.equals((Object)sQLFeatureNotSupportedException1));
      assertNotNull(sQLFeatureNotSupportedException2);
      
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Long long0 = new Long(0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) long0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<Error> class0 = Error.class;
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.Error`", string0);
      assertNotNull(string0);
      
      try { 
        Short.decode("&/|b>rh?o");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"&/|b>rh?o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Double double0 = new Double(191.138938699449);
      assertEquals(191.138938699449, (double)double0, 0.01);
      assertNotNull(double0);
      
      String string0 = ClassUtil.nullOrToString(double0);
      assertNotNull(string0);
      
      Class<Error> class0 = Error.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertSame(batchUpdateException0, batchUpdateException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      assertNotNull(batchUpdateException1);
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      Constructor<ResolvedRecursiveType> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.quotedOr(class0, "32P{-#DDX_%");
      assertEquals("\"class java.io.IOException\"", string0);
      assertNotNull(string0);
      
      Class<Character> class2 = Character.class;
      boolean boolean0 = ClassUtil.isBogusClass(class2);
      assertFalse(boolean0);
      
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
      
      Class<NoClass> class3 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class3, class2, false);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.backticked("com.fasterxml.jackson.core.io.DataOutputAsStream");
      assertEquals("`com.fasterxml.jackson.core.io.DataOutputAsStream`", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }
}
