/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:48:56 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      HashSet<NoClass> hashSet0 = new HashSet<NoClass>();
      enumSet0.retainAll(hashSet0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FloatNode> class0 = FloatNode.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.findSuperClasses((Class<?>) null, class0, false);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.getInterfaces();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory1, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "{j.y1");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(deserializerFactoryConfig0, 0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      objectMapper0.readerForUpdating(jsonMappingException1);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.primitiveType(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.isConcrete(class2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Long long0 = new Long((-455L));
      enumMap0.put(accessPattern0, long0);
      ClassUtil.findEnumType(enumMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class0);
      ClassUtil.findEnumType(enumMap0);
      Class<String> class1 = String.class;
      ClassUtil.createInstance(class1, false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Long> enumMap0 = new EnumMap<AccessPattern, Long>(class0);
      ClassUtil.findEnumType(enumMap0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<NoClass>[] classArray0 = (Class<NoClass>[]) Array.newInstance(Class.class, 4);
      Class<NoClass> class1 = NoClass.class;
      classArray0[0] = class1;
      basicBeanDescription0.findPOJOBuilderConfig();
      Class<NoClass> class2 = NoClass.class;
      classArray0[1] = class2;
      Class<NoClass> class3 = NoClass.class;
      classArray0[2] = class3;
      Class<NoClass> class4 = NoClass.class;
      classArray0[3] = class4;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isConcrete(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedReader pipedReader0 = new PipedReader(2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'V';
      charArray0[2] = 'M';
      charArray0[3] = '\\';
      charArray0[4] = 'T';
      charArray0[5] = 'P';
      charArray0[6] = '2';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1512867866), pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 1, (-4696), true);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(2, 3);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      placeholderForType0.getContentType();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) null, jsonToken0, "id");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_STRING: id
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Void> class0 = Void.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, resolvedRecursiveType0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(iOContext0);
      String string0 = "net.sf.cglib.proxy.java.lang.String";
      // Undeclared exception!
      try { 
        objectReader0.at("net.sf.cglib.proxy.java.lang.String");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"net.sf.cglib.proxy.java.lang.String\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      MockError mockError0 = new MockError("org.hibernate.proxy.java.lang.Long");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<String>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
      FloatNode floatNode0 = FloatNode.valueOf(1.0F);
      ClassUtil.getClassDescription(floatNode0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassUtil.nonNullString((String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1536, (ObjectCodec) null, bufferedOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, true);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("!8VxLScmn", "~J_pQiwg>V=wd", (-671959283), hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("!8VxLScmn", map0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException((String) null, "~J_pQiwg>V=wd", map1, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) bufferedOutputStream0, (Exception) sQLClientInfoException2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      objectMapper0.readerFor(javaType0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      ReferenceType.upgradeFrom(javaType0, javaType0);
      Class<Short> class1 = Short.TYPE;
      Class<Error> class2 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findConstructor(class0, true);
      Class<IOException> class1 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class1, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      MockFile mockFile0 = new MockFile("JSON", "8r1}BY7e}L7>D@^_t/");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) null, (Exception) iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<NoClass>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "Failed to find default constructor of class ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Float float0 = new Float(0.0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class1, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.JsonMappingException` from number 0.0: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      EnumSet.complementOf(enumSet0);
      enumSet0.add(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isLocalType(class0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isLocalType(class1, true);
      Class<Void> class2 = Void.class;
      ClassUtil.findClassAnnotations(class2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getPackageName(class3);
      ClassUtil.findEnumType(class0);
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.toString();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Module> class1 = Module.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class0, class1, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findClassAnnotations(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("$Z[k=^($", sQLRecoverableException0);
      sQLRecoverableException0.initCause(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeBindings typeBindings0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
      try { 
        typeFactory0.constructType((Type) null, (TypeBindings) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      Class<Error> class1 = Error.class;
      Error error0 = ClassUtil.createInstance(class1, true);
      ClassUtil.nonNullString("[3A#5HyEBq[KTb");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) error0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      JsonFactory jsonFactory0 = new JsonFactory();
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockError mockError0 = new MockError();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("key serializer");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.annotation.JsonInclude$Value");
      mockError0.initCause(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JavaType javaType0 = objectMapper0.constructType(type0);
      ReferenceType.upgradeFrom(javaType0, javaType0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ClassUtil.hasClass(resolvedRecursiveType0, class0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<Long> class0 = Long.TYPE;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.findSuperTypes(class0, class0, list0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<SimpleModule> class2 = SimpleModule.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.isBogusClass(class0);
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.primitiveType(class0);
      Class<InputStream> class1 = InputStream.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getConstructors(class0);
      ClassUtil.emptyIterator();
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.classOf(constructor0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("@|{b,yZ<T");
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<String> class0 = String.class;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ClassUtil.getEnclosingClass(class0);
      System.setCurrentTimeMillis((-1L));
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nameOf(class1);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory4 = jsonFactory3.setRootValueSeparator("JSON");
      MockFile mockFile0 = new MockFile("net.sf.cglib.proxy.java.lang.RuntimeException", "adBU[#2NC^2@");
      File file0 = MockFile.createTempFile("JSON", "8ePTkThk<\"ES@", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((DataOutput) dataOutputStream0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-2);
      intArray0[3] = (-1);
      intArray0[4] = 0;
      intArray0[5] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("net.sf.cglib.proxy.java.lang.RuntimeException", "JSON", intArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "8ePTkThk<\"ES@", (Throwable) batchUpdateException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 8ePTkThk<\"ES@
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class0);
      Class<?> class2 = ClassUtil.classOf(list0);
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Long> class0 = Long.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-3), true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.hibernate.proxy.java.lang.Exception", "org.hibernate.proxy.java.lang.Exception");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: org.hibernate.proxy.java.lang.Exception
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Void> class1 = Void.class;
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class1, class2);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(class1);
      Class<FloatNode> class3 = FloatNode.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType1, (Class<?>) class3, false);
      ClassUtil.classOf(class0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.hasClass(class0, class0);
      ClassUtil.primitiveType(class0);
      Class<String> class1 = String.class;
      ClassUtil.nameOf(class1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = new Vector<Class<JsonMappingException>>();
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getPackageName(class2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isConcrete(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) mockFileOutputStream0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "!b @+(g]?$w");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O/WRM<|m-z");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassUtil.getDeclaringClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isConcrete(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.getEnclosingClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.classOf(classUtil_Ctor0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("array", "array");
      MockIOException mockIOException0 = new MockIOException("array", sQLTransientConnectionException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // array
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getDeclaringClass(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y");
      Class<Integer> class1 = Integer.class;
      ClassUtil.isConcrete(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      mockRuntimeException0.getCause();
      ClassUtil.hasClass(mockRuntimeException0, class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaringClass(class0);
      String string0 = "unknown";
      ClassUtil.getDeclaredMethods(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std((Class<?>) null, (-1807672430));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.classOf(accessPattern0);
      Class<Double> class1 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, true);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) constructor0);
      Double double0 = new Double(0.0);
      ClassUtil.classNameOf(double0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      Class<ArrayType> class2 = ArrayType.class;
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class2, (JavaType) placeholderForType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.type.ArrayType with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-1807672430));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1670;
      intArray0[1] = 3;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateException0.getNextException();
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isProxyType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ClassUtil.nameOf((Named) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "%ris>KZ", (Throwable) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // %ris>KZ
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getPackageName(class0);
      Class<SimpleType> class1 = SimpleType.class;
      Class<Annotation> class2 = Annotation.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.quotedOr(class2, "com.fasterxml.jackson.databind.util");
      Class<FloatNode> class3 = FloatNode.class;
      ClassUtil.findRawSuperTypes(class3, class1, false);
      ClassUtil.getConstructors(class2);
      ClassUtil.canBeABeanType(class1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("\"interface java.lang.annotation.Annotation\"");
      sQLTransientException0.getStackTrace();
      ClassUtil.throwRootCauseIfIOE(sQLTransientException0);
      ClassUtil.getDeclaredFields(class2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType");
      Boolean.valueOf("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType");
      Character character0 = new Character(',');
      ClassUtil.classOf((Object) null);
      ClassUtil.classOf("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType");
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      JavaType javaType0 = objectMapper1.constructType(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class0, false);
      ClassUtil.getGenericInterfaces(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(128);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-2927));
      coreXMLDeserializers_Std0.getNullAccessPattern();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.defaultValue(class1);
      ClassUtil.isJacksonStdImpl((Object) class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow", "jKa*fPL#iiZ?6iqs8", (-2));
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0, "vt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vt
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "H");
      Class<String> class0 = String.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.createInstance(class2, false);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.hasClass(list0, class0);
      ClassUtil.getEnclosingClass(class0);
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      FloatNode floatNode0 = new FloatNode(525.6468F);
      Byte byte0 = new Byte((byte)69);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, (Object) floatNode0, (Object) byte0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(arrayType0, javaType0, arrayType0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyType(javaType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType1, mapLikeType0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (byte)69);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ReferenceType referenceType1 = referenceType0.withTypeHandler(accessPattern0);
      ClassUtil.rawClass(referenceType1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Integer integer0 = new Integer((-7));
      ClassUtil.verifyMustOverride(class0, integer0, (String) null);
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("&*gh{L}6aZ>");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "ZERO_LENGTH_ENUM_ARRAY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Cannot figure out type for EnumMap (odd JDK platform?)", (String) null, 10, sQLTimeoutException0);
      Throwable throwable0 = sQLTimeoutException0.initCause(sQLNonTransientException0);
      sQLTimeoutException0.printStackTrace();
      MockError mockError0 = new MockError("K!f{ /1v$HC", sQLNonTransientException0);
      mockError0.addSuppressed(throwable0);
      // Undeclared exception!
      ClassUtil.getRootCause(mockError0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Bmo|EMuTVd;6/rJ");
      boolean boolean0 = false;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.nameOf((Named) null);
      Class<Short> class1 = Short.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-2927));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) ",L");
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      ClassUtil.classNameOf((Object) null);
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isBogusClass(class0);
      Class<FloatNode> class1 = FloatNode.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperTypes(class1, class2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]x;'m/Dnn$*WOw");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("]x;'m/Dnn$*WOw", sQLInvalidAuthorizationSpecException0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("]x;'m/Dnn$*WOw", "]x;'m/Dnn$*WOw");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ]x;'m/Dnn$*WOw
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1746839910));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<IOException> class0 = IOException.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getDeclaringClass(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", map0, sQLClientInfoException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", "Simple types have no content types; cannot call withContenValueHandler()", sQLClientInfoException1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{&7");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1511, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((-1746839910));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(56320, class0, "_9kc,BrI6{lc");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapType` from number 56320: _9kc,BrI6{lc
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Float> class0 = Float.TYPE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "W,", ",L");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "net.sf.cglib.proxy.com.fasterxml.jackson.core.JsonProcessingException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.core.JsonProcessingException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]{&7");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1511, (ObjectCodec) null, mockFileOutputStream0, byteArray0, (-749), true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((-670));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Double> class1 = Double.class;
      Class<Float> class2 = Float.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) collectionLikeType0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      Class<AccessPattern> class3 = AccessPattern.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, javaType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      JavaType javaType1 = referenceType0.getAnchorType();
      ClassUtil.findSuperTypes(javaType1, class1, true);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findConstructor(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.emptyIterator();
      Class<NoClass> class1 = NoClass.class;
      Class<MapType> class2 = MapType.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<Character> class0 = Character.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaringClass(class0);
      String string0 = "unknown";
      ClassUtil.getDeclaredMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.findConstructor(class0, true);
      Class<Void> class1 = Void.class;
      ClassUtil.getClassMethods(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getPackageName(class2);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Integer> class3 = Integer.TYPE;
      TypeBindings.create(class3, (List<JavaType>) null);
      typeBindings0.findBoundType("java.lang");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class3, (JavaType) null);
      ClassUtil.rawClass(collectionLikeType0);
      ClassUtil.nonNullString("java.lang");
      MockError mockError0 = new MockError("%hMgJn]R`");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("%$&MtKyZm-s>wF", "com.fasterxml.jackso", mockError0);
      SQLWarning sQLWarning0 = new SQLWarning("java.lang", "%$&MtKyZm-s>wF", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: java.lang
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)18;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      ClassUtil.findEnumType(class1);
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isConcrete(class0);
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isBogusClass(class2);
      Class<Short> class3 = Short.class;
      ClassUtil.findSuperTypes(class3, class3, list0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<String> class0 = String.class;
      ClassUtil.getClassMethods(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getPackageName(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings.create(class1, (List<JavaType>) null);
      typeBindings0.findBoundType("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.nonNullString("java.lang");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.getConstructors(class0);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedParameterTypes();
      constructor0.getName();
      constructor0.getTypeParameters();
      ClassUtil.isConcrete((Member) constructor0);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.getPackageName(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.canBeABeanType(class2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedParameterTypes();
      constructor0.getName();
      constructor0.getTypeParameters();
      ClassUtil.isConcrete((Member) constructor0);
      Class<Long> class1 = Long.class;
      ClassUtil.getPackageName(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.canBeABeanType(class2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      StringWriter stringWriter0 = new StringWriter();
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) stringWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getPackageName(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.findBoundType("java.lang.RuntimeExc");
      ClassUtil.rawClass((JavaType) null);
      StringWriter stringWriter0 = new StringWriter();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      Class<Character> class1 = Character.class;
      ObjectReader objectReader1 = objectReader0.withView(class1);
      ObjectReader[] objectReaderArray0 = new ObjectReader[2];
      objectReaderArray0[0] = objectReader1;
      objectReaderArray0[1] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      ObjectReader objectReader2 = objectReader1.withFormatDetection(dataFormatReaders0);
      JsonFactory jsonFactory1 = new JsonFactory(objectReader2);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((Writer) stringWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findConstructor(class1, true);
      Class<MapType> class2 = MapType.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.getDeclaredFields(class1);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findConstructor(class1, true);
      Class<MapType> class2 = MapType.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.getDeclaredFields(class2);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonFactory1.disable(jsonGenerator_Feature1);
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isLocalType(class1, false);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class2);
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DeserializationContext deserializationContext0 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLException sQLException0 = new SQLException();
      sQLTransactionRollbackException0.setNextException(sQLException0);
      JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) null, "entrySet");
      Class<Integer> class0 = Integer.class;
      ClassUtil.isConcrete(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.classNameOf(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isLocalType(class2, false);
      ClassUtil.backticked("com.fasterxml.jacks");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getClassDescription(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      sQLException0.getStackTrace();
      ClassUtil.throwIfRTE(sQLException0);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getClassMethods(class0);
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdStringException("Simple types have no content types; cannot call withContenValueHandler()", class1, "Simple types have no content types; cannot call withContenValueHandler()");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) invalidFormatException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from String \"Simple types have no content types; cannot call withContenValueHandler()\": Simple types have no content types; cannot call withContenValueHandler()
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isProxyType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.classNameOf(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findConstructor(class2, false);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.getClassMethods(class3);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getPackageName(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.findBoundType("java.lang.RuntimeExc");
      ClassUtil.rawClass((JavaType) null);
      Class<String> class1 = String.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "org.hibernate.proxy.java.lang.Double", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      Class<SimpleType> class2 = SimpleType.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Class<Annotation> class3 = Annotation.class;
      annotationMap1.get(class3);
      AnnotationMap annotationMap2 = AnnotationMap.of(class2, (Annotation) null);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap2);
      annotatedField0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      List<Class<?>> list0 = new Stack<Class<Byte>>();
      Class<Double> class0 = Double.class;
      ClassUtil.getClassMethods(class0);
      Class<Long> class1 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class2, "+@,b{SLWd@y-<k", simpleType0);
      virtualAnnotatedMember0.getAnnotated();
      Class<RuntimeException> class3 = RuntimeException.class;
      PropertyName propertyName0 = new PropertyName("+@,b{SLWd@y-<k");
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, simpleType0, propertyName0, virtualAnnotatedMember0, propertyMetadata0);
      Class<Annotation> class4 = Annotation.class;
      propertyName0.internSimpleName();
      beanProperty_Std0.getContextAnnotation(class4);
      AnnotationMap annotationMap0 = AnnotationMap.of(class3, (Annotation) null);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      annotatedField0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findConstructor(class1, false);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getClassMethods(class2);
      Class<Short> class3 = Short.class;
      ClassUtil.findSuperTypes(class3, class0);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      Class<Short> class5 = Short.class;
      ClassUtil.findSuperClasses(class4, class5, false);
      Class<AccessPattern> class6 = AccessPattern.class;
      ClassUtil.isJacksonStdImpl(class6);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isConcrete(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getPackageName(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.findBoundType("");
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.nonNullString("");
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.emptyIterator();
      Class<MapType> class1 = MapType.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.isNonStaticInnerClass(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isBogusClass(class2);
      ClassUtil.getPackageName(class0);
      ClassUtil.isLocalType(class0, true);
      Class<Short> class3 = Short.class;
      ClassUtil.getClassMethods(class3);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<AccessPattern> class0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.getClassMethods(class0);
      String string0 = ClassUtil.nonNullString(" has no default (no arg) constructor");
      assertEquals(" has no default (no arg) constructor", string0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getGenericSuperclass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Character> class1 = Character.TYPE;
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<IOException> class0 = IOException.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.getPackageName(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(16384);
      placeholderForType0.getContentType();
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, false);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.getConstructors(class0);
      Class<Object> class2 = Object.class;
      Class<Character> class3 = Character.class;
      ClassUtil.findSuperTypes(class2, class3);
      ClassUtil.findClassAnnotations(class2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      InjectableValues.Std injectableValues_Std1 = new InjectableValues.Std(hashMap0);
      objectMapper0.setInjectableValues(injectableValues_Std1);
      objectMapper1.constructType(class1);
      Class<Long> class4 = Long.class;
      ClassUtil.getPackageName(class4);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.findClassAnnotations(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLException sQLException0 = new SQLException("Nx&R", mockRuntimeException0);
      mockRuntimeException0.addSuppressed(sQLException0);
      Throwable throwable0 = ClassUtil.throwIfError(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getClassMethods(class0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.getClassMethods(class0);
      Class<IOException> class3 = IOException.class;
      ClassUtil.findSuperTypes(class3, class3);
      Class<Integer> class4 = Integer.class;
      Class<Annotation> class5 = Annotation.class;
      ClassUtil.findSuperClasses(class4, class5, false);
      Class<Integer> class6 = Integer.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile((File) null, "No 'injectableValues' configured, cannot inject value with id [%s]");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "POJO");
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class6, jsonMappingException0, "POJO");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.JsonMappingException (of class java.lang.Integer) must override method 'POJO'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.findSuperTypes((Class<?>) null, (Class<?>) null);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.getConstructors(class0);
      EnumSet<AccessPattern> enumSet0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("com.fasterxml.jacks", class0, "com.fasterxml.jacks");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from String \"com.fasterxml.jacks\": com.fasterxml.jacks
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isProxyType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.getPackageName(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.findBoundType("java.lang");
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.nonNullString("java.lang");
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2033));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      int int0 = new Integer(0);
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      Class<Error> class0 = Error.class;
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      jsonFactory3.enable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory1.enable(jsonFactory_Feature0);
      Class<Short> class2 = Short.class;
      ClassUtil.getGenericInterfaces(class2);
      HashMap<AccessPattern, CollectionType> hashMap0 = new HashMap<AccessPattern, CollectionType>();
      EnumMap<AccessPattern, Object> enumMap0 = null;
      try {
        enumMap0 = new EnumMap<AccessPattern, Object>(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified map is empty
         //
         verifyException("java.util.EnumMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-990));
      ClassUtil.classOf(class1);
      ClassUtil.getPackageName(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.canBeABeanType(class2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isProxyType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getParameterCount();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getParameterTypes();
      classUtil_Ctor0.getParameterAnnotations();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      String string0 = "Nd hKe}/";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Nd hKe}/");
      ClassUtil.nonNullString("|:rNh*UR%{IIO8so");
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.hasClass(class0, class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findSuperTypes(class3, class2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class3, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructSpecializedType(collectionType0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      ClassUtil.getClassMethods(class0);
      Class<ArrayType> class2 = ArrayType.class;
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperTypes(class2, class3);
      Class<Byte> class4 = Byte.class;
      Class<Long> class5 = Long.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class4, class5, false);
      Class<Double> class6 = Double.class;
      ClassUtil.findSuperTypes(class6, class3, list0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory0.enable(jsonGenerator_Feature0);
      Class<Error> class0 = Error.class;
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.getClassMethods(class2);
      Class<Error> class3 = Error.class;
      Class<Object> class4 = Object.class;
      ClassUtil.findSuperTypes(class3, class4);
      Class<AccessPattern> class5 = AccessPattern.class;
      Class<Integer> class6 = Integer.class;
      ClassUtil.findSuperClasses(class5, class6, false);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class1, class1, true);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class2);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("h");
      mockRuntimeException0.fillInStackTrace();
      mockRuntimeException0.getMessage();
      int int0 = 4;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Object> class3 = Object.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.instantiationException(class3, "h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      Throwable throwable0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      ClassUtil.getClassMethods(class0);
      Class<ArrayType> class2 = ArrayType.class;
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperTypes(class2, class3);
      SQLWarning sQLWarning0 = new SQLWarning();
      ClassUtil.throwIfIOE(sQLWarning0);
      ClassUtil.getPackageName(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.findBoundType("java.io");
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.nonNullString("wB,RPr6M");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findConstructor(class0, true);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1389);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonFactory2.disable(jsonParser_Feature0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1848));
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      MockThrowable mockThrowable0 = new MockThrowable("serialVersionUID", mockIOException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "entrySet", mockThrowable0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class1, class0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(1842);
      ClassUtil.nullOrToString(integer0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.findEnumType(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isConcrete(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 5);
      Class<Double> class2 = Double.class;
      classArray0[0] = class2;
      Class<Double> class3 = Double.class;
      classArray0[1] = class3;
      Class<Double> class4 = Double.class;
      classArray0[2] = class4;
      Class<Double> class5 = Double.class;
      classArray0[3] = class5;
      Class<Double> class6 = Double.class;
      classArray0[4] = class6;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<Module> class0 = Module.class;
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.backticked("/iw");
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.backticked("/iw");
      ClassUtil.findClassAnnotations(class0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      SQLWarning sQLWarning0 = new SQLWarning("g\"~vkP", "entrySet");
      SQLException sQLException0 = new SQLException("entrySet", "g\"~vkP", sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getName();
      constructor0.getTypeParameters();
      ClassUtil.nullOrToString((Object) null);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      Class<Object> class2 = Object.class;
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getDeclaringClass(class3);
      ClassUtil.classOf(class2);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Float> class1 = Float.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(13);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) referenceType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) referenceType0;
      javaTypeArray0[6] = (JavaType) placeholderForType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, javaTypeArray0[3], javaTypeArray0, (JavaType) placeholderForType0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(referenceType0, collectionType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      MapLikeType mapLikeType2 = mapLikeType1.withTypeHandler(javaTypeArray0[5]);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      MapLikeType mapLikeType3 = mapLikeType2.withKeyTypeHandler(resolvedRecursiveType0);
      MapLikeType mapLikeType4 = mapLikeType3.withKeyType(javaTypeArray0[2]);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType4, (Class<?>) class2, false);
      ClassUtil.getGenericInterfaces(class1);
      HashMap<AccessPattern, CollectionType> hashMap0 = new HashMap<AccessPattern, CollectionType>();
      EnumMap<AccessPattern, Object> enumMap0 = null;
      try {
        enumMap0 = new EnumMap<AccessPattern, Object>(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified map is empty
         //
         verifyException("java.util.EnumMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory0.enable(jsonGenerator_Feature0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getClassMethods(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Class<Error> class3 = Error.class;
      ClassUtil.findSuperTypes(class2, class3);
      Class<Long> class4 = Long.class;
      Class<Character> class5 = Character.class;
      ClassUtil.findSuperClasses(class4, class5, true);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isBogusClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLDataException sQLDataException0 = new SQLDataException("S+q,B:8-x5I[", "S+q,B:8-x5I[");
      sQLDataException0.getSuppressed();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLDataException0);
      sQLTimeoutException0.addSuppressed(sQLDataException0);
      ClassUtil.quotedOr((Object) null, "T$R:&Ax5:4WK@242Fd");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[NamedType, class ", "D|H", (-1));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\"fQI", "mzWj~$'&I:Y=");
      SQLWarning sQLWarning0 = new SQLWarning("\"fQI", "vals", (-1), sQLTimeoutException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("mzWj~$'&I:Y=", "[NamedType, class ", sQLWarning0);
      ClassUtil.throwIfRTE(sQLRecoverableException0);
      ClassUtil.emptyIterator();
      ClassUtil.findClassAnnotations(class0);
      boolean boolean0 = new Boolean(false);
      Class<Error> class1 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.hasClass((Object) null, class1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "vals");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLException sQLException0 = new SQLException("entrySet", sQLTransactionRollbackException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", sQLException0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      Locale locale0 = Locale.forLanguageTag(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) sQLTimeoutException0;
      Object object0 = ClassUtil.nonNull((Object) mockPrintWriter0, (Object) fileDescriptor0);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "ZERO_LENGTH_ENUM_ARRAY";
      objectArray0[3] = (Object) sQLTimeoutException0;
      objectArray0[4] = (Object) " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type";
      objectArray0[5] = (Object) "ZERO_LENGTH_ENUM_ARRAY";
      objectArray0[6] = (Object) sQLTimeoutException0;
      mockPrintWriter0.format(locale0, "entrySet", objectArray0);
      sQLTimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLTransactionRollbackException0);
      Class<MapType> class0 = MapType.class;
      SQLWarning sQLWarning0 = new SQLWarning("C=:l-WA6|).1mS");
      sQLWarning0.getSuppressed();
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.throwIfRTE(throwable0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Failed to instantiate class ", "Failed to instantiate class ", 15, sQLTransactionRollbackException0);
      ClassUtil.nonNullString("Failed to instantiate class ");
      Throwable throwable0 = ClassUtil.throwIfError(sQLTimeoutException0);
      sQLTransactionRollbackException0.printStackTrace();
      sQLTransactionRollbackException0.initCause(throwable0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) null, "entrySet");
      ClassUtil.nonNullString("entrySet");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.sql.SQLTransactionRollbackException) (through reference chain: UNKNOWN[\"entrySet\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = null;
      ClassUtil.nonNullString((String) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class1, class1, true);
      ClassUtil.findSuperClasses(class0, class0, true);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("]x;'m/Dnn$*WOw");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ]x;'m/Dnn$*WOw
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      SimpleType simpleType0 = (SimpleType)objectMapper1.constructType(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      Class<Short> class2 = Short.class;
      ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class2, false);
      ClassUtil.getGenericInterfaces(class0);
      HashMap<AccessPattern, CollectionType> hashMap1 = new HashMap<AccessPattern, CollectionType>();
      Class<Object> class3 = Object.class;
      ClassUtil.isLocalType(class3, true);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.TypeBase is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Zt#TpMy&n", "Zt#TpMy&n", (-1860));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("/NgC},", "Zt#TpMy&n");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      StackTraceElement stackTraceElement0 = new StackTraceElement("'; no FilterProvider configured", "keyUniverse", "'; no FilterProvider configured", (-1860));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("com.fasterxml.jackson.core.type.WritableTypeId$Inclusion", "Split surrogate on writeRaw() input (last character): first character 0x%4x", "Cannot access ", (-1860));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("keyUniverse", "/NgC},", "Zt#TpMy&n", (-3470));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("Split surrogate on writeRaw() input (last character): first character 0x%4x", "non-static member class", "/NgC},", 8);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("T9$]MF]SS`wbXW4]Bd{", "'; no FilterProvider configured", "G3}", (-1));
      stackTraceElementArray0[4] = stackTraceElement4;
      sQLNonTransientException0.setStackTrace(stackTraceElementArray0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLNonTransientException0);
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      SQLException sQLException0 = new SQLException(sQLInvalidAuthorizationSpecException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLException0.forEach(consumer0);
      sQLException0.fillInStackTrace();
      sQLException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLException0);
      ClassUtil.isBogusClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.getConstructors(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isProxyType(class2);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isProxyType(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<NoClass> class2 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.hasClass(class0, class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "vals");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperTypes(class0, class1);
      System.setCurrentTimeMillis(2381L);
      ClassUtil.getGenericInterfaces(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) null, "entrySet");
      jsonMappingException0.getPathReference();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.sql.SQLTransactionRollbackException) (through reference chain: UNKNOWN[\"entrySet\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) null, "entrySet");
      jsonMappingException0.getPathReference();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.sql.SQLTransactionRollbackException) (through reference chain: UNKNOWN[\"entrySet\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) ",L");
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1055);
      ClassUtil.classOf(placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findEnumType(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class1, class1, true);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class2);
      String string0 = "h";
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("h");
      mockRuntimeException0.fillInStackTrace();
      mockRuntimeException0.printStackTrace();
      mockRuntimeException0.getMessage();
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      String string1 = "JacksonInject.Value(id=%s,useInput=%s)";
      StackTraceElement stackTraceElement0 = new StackTraceElement("JacksonInject.Value(id=%s,useInput=%s)", "h", "JacksonInject.Value(id=%s,useInput=%s)", (-2873));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("ORDER_MAP_ENTRIES_BY_KEYS", "h", "h", 1114111);
      stackTraceElementArray0[1] = stackTraceElement1;
      String string2 = "1Ef&H;ZAVaV0";
      StackTraceElement stackTraceElement2 = new StackTraceElement("xnM12I;(V#M_;1za", "1Ef&H;ZAVaV0", (String) null, (-2873));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = null;
      try {
        stackTraceElement3 = new StackTraceElement((String) null, (String) null, "h", 2238);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.hibernate.proxy.");
      MockError mockError0 = new MockError(sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.hibernate.proxy.", "org.hibernate.proxy.", mockError0);
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isBogusClass(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Long> class0 = Long.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      JavaType javaType0 = typeFactory0.constructType((Type) class1, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[5];
      Class<String> class2 = String.class;
      JavaType javaType1 = typeFactory0.constructReferenceType(class2, javaType0);
      javaTypeArray0[0] = javaType1;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[1]);
      ReferenceType referenceType1 = referenceType0.withValueHandler(javaTypeArray0[2]);
      referenceType1.getTypeName();
      Class<Integer> class3 = Integer.class;
      ClassUtil.findSuperTypes((JavaType) referenceType1, (Class<?>) class3, true);
      Class<Short> class4 = Short.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      JavaType javaType0 = objectMapper1.constructType(type0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class1, false);
      ClassUtil.getGenericInterfaces(class0);
      HashMap<AccessPattern, CollectionType> hashMap1 = new HashMap<AccessPattern, CollectionType>();
      EnumMap<AccessPattern, Object> enumMap0 = null;
      try {
        enumMap0 = new EnumMap<AccessPattern, Object>(hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified map is empty
         //
         verifyException("java.util.EnumMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findConstructor(class1, true);
      Class<Float> class2 = Float.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getPackageName(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findClassAnnotations(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.nameOf(class2);
      boolean boolean0 = true;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.classNameOf(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.getClassDescription("`java.lang.Class`");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ClassUtil.nullOrToString("ZERO_LENGTH_ENUM_ARRAY");
      ClassUtil.nullOrToString("ZERO_LENGTH_ENUM_ARRAY");
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.classOf("ZERO_LENGTH_ENUM_ARRAY");
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isLocalType(class1, false);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "vZ";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("vZ");
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Class<Annotation> class0 = Annotation.class;
      annotationMap1.get(class0);
      annotationMap1.annotations();
      AnnotationMap.merge(annotationMap1, annotationMap1);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath(throwable0, (Object) null, (-644));
      jsonMappingException0.getMessage();
      ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.backticked("/iw");
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.getClassDescription(class0);
      ClassUtil.findClassAnnotations(class0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.getConstructors(class3);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonFactory2.disable(jsonParser_Feature0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = true;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getName();
      constructor0.getTypeParameters();
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.getClassDescription(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, false);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2033));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaringClass(class0);
      String string0 = "unknown";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, class0, "unknown");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isConcrete(class0);
      try { 
        Integer.valueOf(";rGP");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";rGP\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getConstructors(class0);
      String string0 = "entrySet";
      String string1 = "9x|0R#G}z;\\$EB}a?";
      Throwable throwable0 = null;
      SQLTransientException sQLTransientException0 = new SQLTransientException("entrySet", "9x|0R#G}z;$EB}a?", (Throwable) null);
      // Undeclared exception!
      try { 
        sQLTransientException0.initCause((Throwable) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with a null
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getDeclaredFields(class0);
      Class<NoClass> class1 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.hasEnclosingMethod(class0);
      String string0 = null;
      Throwable throwable0 = null;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "vals", (Throwable) null);
      sQLNonTransientException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.reflect.AccessibleObject is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.setAccessible(false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.classNameOf(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      String string0 = "vals";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnknownTypeId((JavaType) null, "not a valid double value (as String to convert)", classNameIdResolver0, "vals");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.emptyIterator();
      Class<String> class1 = String.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      Class<ArrayType> class2 = ArrayType.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class2);
      assertFalse(boolean0);
      
      Class<Error> class3 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class3, true);
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertSame(annotationArray1, annotationArray0);
      assertTrue(constructor0.isAccessible());
      assertNotNull(annotationArray1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ClassUtil.emptyIterator();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      HashMap<String, SettableBeanProperty> hashMap0 = new HashMap<String, SettableBeanProperty>();
      AbstractDeserializer abstractDeserializer0 = null;
      try {
        abstractDeserializer0 = new AbstractDeserializer(beanDeserializerBuilder0, basicBeanDescription0, hashMap0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      ClassUtil.quotedOr(class0, "uyI;OJ|daZr");
      Class<String> class1 = String.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperTypes(class1, class2);
      SQLDataException sQLDataException0 = new SQLDataException("ki w[v?0wlltK5.:f6");
      MockFile mockFile0 = new MockFile("\"class java.lang.Object\"");
      mockFile0.setExecutable(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      sQLDataException0.printStackTrace((PrintStream) mockPrintStream0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("\"class java.lang.Object\"", (String) null, sQLDataException0);
      sQLTransientException0.spliterator();
      sQLTransientException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // >
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getClassDescription(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("h17/DJF`xI.(1mLt#", "elementType", (-496));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`java.lang.Long`", "h17/DJF`xI.(1mLt#", (-496), (int[]) null, sQLNonTransientException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("elementType", batchUpdateException0);
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      assertNull(sQLTransactionRollbackException1.getSQLState());
  }
}
