/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:50:26 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.URISyntaxException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionLikeType> enumMap0 = new EnumMap<AccessPattern, CollectionLikeType>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionLikeType> enumMap0 = new EnumMap<AccessPattern, CollectionLikeType>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class1 = List.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, javaType0);
      enumMap0.put(accessPattern0, (CollectionLikeType) collectionType0);
      ClassUtil.findEnumType(enumMap0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getOuterClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionLikeType> enumMap0 = new EnumMap<AccessPattern, CollectionLikeType>(class1);
      ClassUtil.findEnumType(enumMap0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class2);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(")}He?dL/[m\"U", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", 13);
      ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<ArrayNode> class0 = ArrayNode.class;
      ClassUtil.isConcrete(class0);
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "Current context not Object but ", javaTypeArray0[1]);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, (PropertyName) null, virtualAnnotatedMember0, (PropertyMetadata) null);
      Class<ReferenceType> class1 = ReferenceType.class;
      CollectionType collectionType0 = CollectionType.construct(class0, typeBindings0, javaTypeArray0[3], javaTypeArray0, javaTypeArray0[0]);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, javaTypeArray0[4], javaTypeArray0, javaTypeArray0[0], (JavaType) collectionType0);
      MapType mapType1 = mapType0.withValueHandler(virtualAnnotatedMember0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, mapType1);
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) beanProperty_Std1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanProperty$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<PropertyName> class0 = PropertyName.class;
      ClassUtil.canBeABeanType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = new Boolean(false);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, objectMapper1, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException((JavaType) null, (String) null, "net.sf.cglib.proxy.java.lang.Void");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'null' as a subtype of null: net.sf.cglib.proxy.java.lang.Void
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*");
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      MockError mockError0 = new MockError("*");
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, "; failed to set access: ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<List> class0 = List.class;
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
      Class<Double> class1 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = new Long(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      ArrayDeque<Module> arrayDeque0 = new ArrayDeque<Module>(439);
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) arrayDeque0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.printf("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", (Object[]) serializationFeatureArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper2, printStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<Double> class0 = Double.TYPE;
      JavaType javaType0 = objectMapper2.constructType(class0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(javaType0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType' as a subtype of [simple type, class double]: org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<InputStream> class1 = InputStream.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<ArrayNode> class0 = ArrayNode.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Void> class1 = Void.class;
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackson.databind.node.TextNode");
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class1, (Throwable) sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<AccessPattern> class0 = AccessPattern.class;
      objectMapper0.readerFor(class0);
      ClassUtil.canBeABeanType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      Class<AccessPattern> class1 = AccessPattern.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("; failed to set access: ", class1, "enum");
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0, (Object) jsonMappingException0, (Object) jsonMappingException0);
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.invalidTypeIdException(arrayType0, "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException", "com.fasterxml.jackson.databind.JsonSerializable$Base");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException' as a subtype of [array type, component type: $0]: com.fasterxml.jackson.databind.JsonSerializable$Base
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getGenericSuperclass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.defaultValue(class0);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.isBogusClass(class2);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findSuperClasses(class3, class0, false);
      Class<CollectionType> class4 = CollectionType.class;
      ClassUtil.isLocalType(class4, true);
      Class<ArrayType> class5 = ArrayType.class;
      ClassUtil.findConstructor(class5, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, accessPattern0, false);
      int int0 = 1391;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Double> class0 = Double.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException(arrayType0, "yV~y%pi$|LePGdU%", "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("yV~y%pi$|LePGdU%", "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException", jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'yV~y%pi$|LePGdU%' as a subtype of [array type, component type: [simple type, class java.lang.Object]]: org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isLocalType(class0, false);
      Class<SimpleType> class1 = SimpleType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      simpleType0.hasGenericTypes();
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class2, false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = true;
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      SQLException sQLException0 = new SQLException();
      MockError mockError0 = new MockError("#h5I", sQLException0);
      sQLException0.getSuppressed();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isConcrete((Member) constructor0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("X PUJ:Nk");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("X PUJ:Nk", sQLRecoverableException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("X PUJ:Nk", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<IOException>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      JavaType[] javaTypeArray0 = new JavaType[9];
      ObjectMapper objectMapper0 = new ObjectMapper();
      int int0 = 9;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(9);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[4];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectReader objectReader2 = objectReader1.without(deserializationFeature0);
      TypeFactory typeFactory0 = objectReader2.getTypeFactory();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      // Undeclared exception!
      try { 
        mapType0.withStaticTyping();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      JavaType[] javaTypeArray0 = new JavaType[13];
      ObjectMapper objectMapper0 = new ObjectMapper();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(9);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[4];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      ObjectReader objectReader1 = objectReader0.withFormatDetection(objectReaderArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectReader objectReader2 = objectReader1.without(deserializationFeature0);
      TypeFactory typeFactory0 = objectReader2.getTypeFactory();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      // Undeclared exception!
      try { 
        mapType0.withStaticTyping();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getConstructors(class0);
      Class<Double> class1 = Double.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-2085));
      coreXMLDeserializers_Std0.getNullAccessPattern();
      Float float0 = new Float(339.0032);
      ClassUtil.hasClass(float0, class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getConstructors(class2);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("=a[:_7{vr%Aqhz@\"W%m", "=a[:_7{vr%Aqhz@\"W%m", (-393805500), mockRuntimeException0);
      sQLDataException0.initCause(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerFor(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      EnumSet.copyOf(enumSet1);
      ClassUtil.findEnumType(enumSet1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Module> class0 = Module.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
      Class<BufferedInputStream> class1 = BufferedInputStream.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern1, accessPattern0);
      EnumSet<AccessPattern> enumSet1 = EnumSet.copyOf(enumSet0);
      ClassUtil.findEnumType(enumSet1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Void> class1 = Void.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.isBogusClass(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<HashMap> class2 = HashMap.class;
      Class<AccessPattern> class3 = AccessPattern.class;
      Class<RuntimeException> class4 = RuntimeException.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructMapType(class2, class3, class4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier Mock for TypeModifier, hashCode: 186355834 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$2065118146) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<Void> class2 = Void.class;
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(2651L);
      Class<ArrayType> class0 = ArrayType.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonFactory_Feature0);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Object[] objectArray0 = new Object[1];
      ClassUtil.nonNull((Object) "e#@~ob{@[23% {", (Object) list0);
      objectArray0[0] = (Object) "e#@~ob{@[23% {";
      PrintWriter printWriter0 = mockPrintWriter0.format("JSON", objectArray0);
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((Writer) printWriter0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("JSON", "JSON", 1023);
      MockIOException mockIOException0 = new MockIOException("JSON", sQLTransientConnectionException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      JsonGenerator jsonGenerator0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
      String string0 = "4jbp7NfztBH0G}~wg3";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("4jbp7NfztBH0G}~wg3");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("4jbp7NfztBH0G}~wg3", hashMap0, sQLFeatureNotSupportedException0);
      SQLWarning sQLWarning0 = new SQLWarning("4jbp7NfztBH0G}~wg3", "Yf;']xX@!", sQLFeatureNotSupportedException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("\bSE", "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", "Yf;']xX@!", 1536);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Yf;']xX@!", "\bSE", "org.hibernate.proxy.", (-1841));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("4jbp7NfztBH0G}~wg3", "+A0C(?F6Q8S}tb`|K", "4jbp7NfztBH0G}~wg3", (-1));
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)38;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[7] = (byte) (-3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.classNameOf("com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type");
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.getOuterClass(class0);
      MockError mockError0 = new MockError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Void> class1 = Void.class;
      ClassUtil.isLocalType(class1, false);
      Class<Module> class2 = Module.class;
      ClassUtil.isBogusClass(class2);
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.java.io.IOException");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(mockIOException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isBogusClass(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1949);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      Long long0 = new Long(3L);
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler(long0);
      ClassUtil.rawClass(javaType0);
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Float float0 = new Float(1.0F);
      ClassUtil.primitiveType(class0);
      ClassUtil.verifyMustOverride(class0, float0, "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "net.sf.cglib.proxy.java.lang.Void");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(javaType0, "V1U", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.exc.InvalidTypeIdException): Could not resolve type id 'V1U' as a subtype of [simple type, class java.lang.Object]: org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonFactory0.configure(jsonParser_Feature0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isBogusClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class0);
      Class<Short> class2 = Short.class;
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      JsonGenerator jsonGenerator0 = null;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
      String string0 = "4jbp7NfztBH0G}~wg3";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      String string1 = "fhf-";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fhf-");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("4jbp7NfztBH0G}~wg3", hashMap0, sQLFeatureNotSupportedException0);
      SQLWarning sQLWarning0 = new SQLWarning("4jbp7NfztBH0G}~wg3", "Yf;']xX@!", sQLFeatureNotSupportedException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("\bSE", "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", "Yf;']xX@!", 1536);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Yf;']xX@!", "\bSE", "org.hibernate.proxy.", (-1841));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("4jbp7NfztBH0G}~wg3", "+A0C(A?F6Q8S}tb`|K", "4jbp7NfztBH0G}~wg3", (-1));
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) filteringGeneratorDelegate0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: 4jbp7NfztBH0G}~wg3
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = true;
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      SQLException sQLException0 = new SQLException();
      MockError mockError0 = new MockError("#h5I", sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1722));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      coreXMLDeserializers_Std0.getEmptyValue((DeserializationContext) defaultDeserializationContext_Impl0);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.quotedOr((Object) null, "");
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      placeholderForType0.getContentType();
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, true);
      Class<Double> class3 = Double.class;
      ClassUtil.getPackageName(class3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isLocalType(class0, true);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.canBeABeanType(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) null, (-598));
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.sql.SQLNonTransientConnectionException (through reference chain: UNKNOWN[?])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameterCount();
      constructor0.getGenericParameterTypes();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findConstructor(class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.nameOf(class0);
      ClassUtil.quotedOr("`java.lang.Float`", "`java.lang.Float`");
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<Double> class1 = Double.class;
      Class<CollectionType> class2 = CollectionType.class;
      JavaType[] javaTypeArray0 = new JavaType[4];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class3 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class3);
      javaTypeArray0[0] = (JavaType) collectionType0;
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionType0, javaTypeArray0[0], collectionType0);
      javaTypeArray0[1] = (JavaType) mapLikeType0;
      Class<LinkedList> class4 = LinkedList.class;
      CollectionType collectionType1 = typeFactory0.constructCollectionType(class4, javaTypeArray0[0]);
      javaTypeArray0[2] = (JavaType) collectionType1;
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(class4);
      javaTypeArray0[3] = (JavaType) mapLikeType1;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      MapType mapType0 = MapType.construct((Class<?>) class2, typeBindings0, javaTypeArray0[2], javaTypeArray0, (JavaType) mapLikeType0, (JavaType) collectionType0);
      Byte byte0 = new Byte((byte)62);
      MapLikeType mapLikeType2 = mapType0.withKeyValueHandler(byte0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "\"`java.lang.Float`\"", mapLikeType2);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = mapType1.withKeyType(mapType0);
      ClassUtil.isJacksonStdImpl((Object) mapType2);
      DataTruncation dataTruncation0 = new DataTruncation((-690247282), false, false, 9, (-1728));
      dataTruncation0.getNextWarning();
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IOException> class0 = IOException.class;
      ClassUtil.findConstructor(class0, true);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.getClassDescription(typeFactory0);
      ClassUtil.nonNullString("mqs");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isBogusClass(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonFactory0.disable(jsonGenerator_Feature0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<NoClass> class2 = NoClass.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class2);
      objectReader0.forType(class1);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Void> class0 = Void.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      deserializationFeatureArray0[4] = deserializationFeature4;
      ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      objectReader1.forType(class1);
      Class<Void> class2 = Void.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findEnumType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)ClassUtil.throwIfRTE(sQLTransientConnectionException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) sQLTransientConnectionException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Class<Float> class0 = Float.class;
      ClassUtil.hasClass(float0, class0);
      Class<ArrayType> class1 = ArrayType.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class1, class2, false);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-2085));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      Float float0 = new Float((double) (-2085));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Float> class1 = Float.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<AccessPattern> class1 = AccessPattern.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      ObjectReader objectReader1 = objectReader0.forType(class0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      objectReader0.withValueToUpdate(deserializationFeature0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-10), objectReader1, pipedOutputStream0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      uTF8JsonGenerator0.writeRawValue((SerializableString) serializedString0);
      SQLException sQLException0 = new SQLException();
      Class<Short> class2 = Short.class;
      ClassUtil.getOuterClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) pipedOutputStream0, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer.createRoot();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isProxyType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-82);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 831, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, (byte) (-29), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SQLException sQLException0 = new SQLException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.canBeABeanType(class0);
      Double double0 = new Double((-1.0));
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findEnumType(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getDeclaredFields(class2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getClassDescription(class0);
      Class<Annotation> class1 = Annotation.class;
      Boolean boolean0 = new Boolean("`int`");
      ClassUtil.hasClass("`int`", class1);
      ClassUtil.emptyIterator();
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class2, class2, false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      MockException mockException0 = new MockException("7l*uLbE%:(rn/Hl");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[]", "[]", (-5719), mockException0);
      DataTruncation dataTruncation0 = new DataTruncation(1377, false, false, 1377, 1377, sQLTransactionRollbackException0);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getClassDescription(class0);
      Class<Annotation> class1 = Annotation.class;
      Boolean boolean0 = new Boolean("`java.lang.Integer`");
      ClassUtil.hasClass("`java.lang.Integer`", class1);
      ClassUtil.emptyIterator();
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class2, class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor1.getParameterAnnotations();
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor2.getParamCount();
      Float float0 = new Float(1968.46F);
      Float float1 = new Float(1478.0F);
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<AccessPattern> class1 = AccessPattern.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      ObjectReader objectReader1 = objectReader0.forType(class0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      // Undeclared exception!
      try { 
        objectReader1.with(deserializationFeature0, deserializationFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.forType(class0);
      ObjectReader objectReader2 = objectReader1.at((JsonPointer) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+yb!NaBhFjt\"r8.%'g");
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature1;
      objectReader2.with(deserializationFeature1, deserializationFeatureArray0);
      objectReader1.with(deserializationFeature1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("JSON");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockRuntimeException0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper0, pipedOutputStream0);
      SQLException sQLException0 = new SQLException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassUtil.backticked("ZERO_LENGTH_ENUM_ARRAY");
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getOuterClass(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<Short> class3 = Short.TYPE;
      ClassUtil.getGenericInterfaces(class0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.isProxyType(class4);
      ClassUtil.primitiveType(class1);
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.isConcrete(class5);
      ClassUtil.primitiveType(class3);
      ClassUtil.isNonStaticInnerClass(class4);
      ClassUtil.findClassAnnotations(class3);
      Class<IOException> class6 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class6, false);
      Class<Annotation> class7 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class7);
      Class<Long> class8 = Long.class;
      ClassUtil.findConstructor(class8, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.getOuterClass(class8);
      ClassUtil.getDeclaredFields(class7);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor1.getParameterAnnotations();
      Float float0 = new Float((float) 0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(sequenceInputStream0, "Cannot access ");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      ClassUtil.getRootCause(jsonMappingException1);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): Cannot access 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "5}hHUTH|!MLvH0zKKX0";
      ClassUtil.backticked("5}hHUTH|!MLvH0zKKX0");
      Class<Object> class0 = Object.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`5}hHUTH|!MLvH0zKKX0`");
      ClassUtil.isCollectionMapOrArray(class0);
      Class<IOException> class1 = IOException.class;
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class3);
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.getPackageName(class4);
      Class<Void> class5 = Void.class;
      try { 
        ClassUtil.findConstructor(class5, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      Class<Object> class3 = Object.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class2, class3);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler((Object) null);
      CollectionType collectionType2 = collectionType1.withValueHandler(class1);
      CollectionType collectionType3 = collectionType2.withStaticTyping();
      Class<Character> class4 = Character.class;
      ClassUtil.findSuperTypes((JavaType) collectionType3, (Class<?>) class4, false);
      Class<Character> class5 = Character.class;
      ClassUtil.getDeclaredFields(class5);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      HashMap<String, SettableBeanProperty> hashMap0 = new HashMap<String, SettableBeanProperty>();
      AbstractDeserializer abstractDeserializer0 = null;
      try {
        abstractDeserializer0 = new AbstractDeserializer(beanDeserializerBuilder0, basicBeanDescription0, hashMap0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<IOException> class1 = IOException.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-33));
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) placeholderForType0, (JavaType[]) null, (JavaType) placeholderForType0);
      Character character0 = Character.valueOf('k');
      CollectionLikeType collectionLikeType0 = collectionType0.withValueHandler(character0);
      ClassUtil.rawClass(collectionLikeType0);
      Class<Double> class2 = Double.class;
      ClassUtil.getGenericInterfaces(class2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isLocalType(class0, false);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Class<Byte> class2 = Byte.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.getPackageName(class2);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(mockRuntimeException0);
      mockRuntimeException0.initCause(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "java.lang");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.getPackageName(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<Double> class0 = Double.TYPE;
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getExceptionTypes();
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Byte> class1 = Byte.class;
      ClassUtil.isConcrete(class1);
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, true);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.getPackageName(class3);
      Class<NoClass> class4 = NoClass.class;
      Class<PlaceholderForType> class5 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class4, class5, list0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 142);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Short");
      ClassUtil.hasClass(accessPattern0, class0);
      ClassUtil.emptyIterator();
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.nonNullString("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Float float0 = new Float((float) 2087);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class1, "net.sf.cglib.proxy.java.lang.Short");
      ClassUtil.nonNull(jsonMappingException0, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getClassMethods(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.RuntimeException) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getConstructors(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("o[$d9{JlO7n", "o[$d9{JlO7n", (-4436));
      sQLIntegrityConstraintViolationException0.printStackTrace();
      sQLIntegrityConstraintViolationException0.fillInStackTrace();
      sQLIntegrityConstraintViolationException0.spliterator();
      sQLIntegrityConstraintViolationException0.printStackTrace();
      ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.classNameOf("o[$d9{JlO7n");
      Double double0 = new Double((-434.4915141192533));
      ClassUtil.nonNull(double0, double0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("^JC|wi<(?A!r4C-34", "^JC|wi<(?A!r4C-34", sQLWarning0);
      ClassUtil.throwIfIOE(sQLTimeoutException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CollectionType collectionType2 = collectionType1.withValueHandler(typeFactory0);
      Double double0 = new Double(1.0);
      CollectionType collectionType3 = collectionType2.withTypeHandler(double0);
      ClassUtil.findSuperTypes((JavaType) collectionType3, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<String> class1 = String.class;
      ClassUtil.getConstructors(class1);
      Class<Boolean> class2 = Boolean.TYPE;
      ClassUtil.isConcrete(class2);
      ClassUtil.getOuterClass(class0);
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.quotedOr(class2, "FRQ2}TA");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getClassDescription(class0);
      Class<Object> class1 = Object.class;
      Object object0 = ClassUtil.createInstance(class1, false);
      Class<Void> class2 = Void.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(object0, class2);
      ClassUtil.throwIfRTE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.forType(class0);
      ObjectReader objectReader2 = objectReader1.at((JsonPointer) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader3 = objectReader2.with(deserializationFeature0, deserializationFeatureArray0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      ObjectReader objectReader4 = objectReader3.with(deserializationFeature1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectReader4, pipedOutputStream0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-559));
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(placeholderForType0, class0);
      ClassUtil.throwIfRTE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(", problem: ", ", problem: ", sQLWarning0);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getConstructors(class0);
      Class<CollectionType> class1 = CollectionType.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findRawSuperTypes(class2, class1, true);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.findClassAnnotations(class0);
      Class<Long> class3 = Long.TYPE;
      ClassUtil.defaultValue(class3);
      Class<Integer> class4 = Integer.class;
      ClassUtil.isProxyType(class4);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.hasClass((Object) null, (Class<?>) null);
      ClassUtil.emptyIterator();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isLocalType(class1, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException("%@hy(UDlOsDOSpAg", mockRuntimeException0);
      SQLWarning sQLWarning0 = new SQLWarning("net.sf.cglib.proxy.java.lang.Float", "net.sf.cglib.proxy.java.lang.Float", mockRuntimeException1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0, "q6:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.createInstance(class1, false);
      Class<Void> class2 = Void.class;
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std((Class<?>) null, 3206);
      coreXMLDeserializers_Std0.getNullAccessPattern();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class0);
      ClassUtil.throwIfRTE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class0);
      ClassUtil.throwIfRTE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("^JC|wi<(?A!r4C-34", "^JC|wi<(?A!r4C-34", sQLWarning0);
      Class<Double> class1 = Double.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getEnclosingClass(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SQLWarning sQLWarning0 = new SQLWarning();
      String string0 = null;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "^JC|wi<(?A!r4C-34", sQLWarning0);
      Class<Double> class1 = Double.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.nonNull((Boolean) null, (Boolean) null);
      ClassUtil.getClassDescription((Object) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      Class<Annotation> class2 = Annotation.class;
      Class<Long> class3 = Long.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      ClassUtil.isProxyType(class1);
      Float float0 = new Float(1036.5996F);
      ClassUtil.isJacksonStdImpl((Object) class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Cannot figure out type for EnumMap (odd JDK platform?)");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-112);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectReader0, mockPrintStream0, byteArray0, (byte) (-2), false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext1, 5444, objectMapper1, mockPrintStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getConstructors(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isConcrete(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.getEnclosingClass(class2);
      Class<Byte> class3 = Byte.class;
      ClassUtil.isLocalType(class3, true);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std((Class<?>) null, 16384);
      coreXMLDeserializers_Std0.getNullAccessPattern();
      Long long0 = new Long(0L);
      ClassUtil.hasClass(long0, class0);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getConstructors(class0);
      Class<Double> class1 = Double.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-2085));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      Float float0 = new Float(339.0032);
      ClassUtil.hasClass(float0, class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getConstructors(class2);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getConstructors(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getOuterClass(class1);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.quotedOr((Object) null, "FRQ2}TA");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findRawSuperTypes(class2, (Class<?>) null, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Wn'X&xGEMFn)aP88", "%!Fex7", sQLWarning0);
      Class<String> class1 = String.class;
      ClassUtil.isLocalType(class1, true);
      SQLDataException sQLDataException0 = new SQLDataException(sQLWarning0);
      sQLDataException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "%!Fex7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // %!Fex7
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ClassUtil.emptyIterator();
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarning0.getStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Q", "org.hibernate.proxy.java.lang.Object", sQLWarning0);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      ClassUtil.getClassDescription(consumer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.deserializers();
      deserializerFactoryConfig0.keyDeserializers();
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      deserializerFactoryConfig0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      Double double0 = new Double(1166.8632726448);
      ClassUtil.quotedOr(class0, "!*x{g_f-}@$b>5");
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      Double double0 = new Double(1166.8632726448);
      Class<Double> class1 = Double.class;
      ClassUtil.getOuterClass(class1);
      Character character0 = Character.valueOf('i');
      ClassUtil.classOf(character0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class2);
      Class<IOException> class3 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.findClassAnnotations(class1);
      Class<Long> class4 = Long.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class3, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getClassDescription((Object) null);
      Object object0 = new Object();
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getClassDescription(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.createInstance(class1, false);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.getOuterClass(class0);
      Class<Void> class3 = Void.class;
      ClassUtil.hasEnclosingMethod(class3);
      Class<Short> class4 = Short.class;
      ClassUtil.findConstructor(class4, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`java.lang.Integer`", "java.lang.Float", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Character> class1 = Character.class;
      ClassUtil.getClassMethods(class1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(",?/veKe", "", 16);
      ClassUtil.nameOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "serialVersionUID");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // serialVersionUID
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.hasClass((Object) null, (Class<?>) null);
      ClassUtil.emptyIterator();
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperClasses((Class<?>) null, class2, false);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getClassDescription(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.createInstance(class1, false);
      Class<Void> class2 = Void.class;
      ClassUtil.isObjectOrPrimitive(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Double> class0 = Double.TYPE;
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getDeclaringClass(class1);
      Class<Void> class2 = Void.TYPE;
      ClassUtil.isObjectOrPrimitive(class2);
      Object object0 = new Object();
      ClassUtil.getPackageName(class1);
      Class<Error> class3 = Error.class;
      ClassUtil.getOuterClass(class3);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<String> class1 = String.class;
      boolean boolean0 = true;
      ClassUtil.findConstructor(class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getDeclaredMethods(class0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<String> class1 = String.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.isConcrete(class1);
      Class<Float> class2 = Float.class;
      ClassUtil.getClassMethods(class2);
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameterCount();
      constructor0.getAnnotatedReceiverType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      Float float0 = new Float((float) 0);
      Float float1 = new Float((float) 0);
      Float float2 = new Float((double) 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "nHGnYIG\r49y", intArray0);
      ClassUtil.getRootCause(batchUpdateException0);
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.primitiveType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findEnumType(class2);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.getOuterClass(class3);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getClassMethods(class1);
      Double double0 = new Double(0.0);
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockIOException mockIOException0 = new MockIOException();
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[6];
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredMethods(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<Long> class2 = Long.class;
      ClassUtil.isProxyType(class2);
      Float float0 = new Float(0.0F);
      ClassUtil.isJacksonStdImpl((Object) class1);
      ClassUtil.isBogusClass(class0);
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Integer> class0 = Integer.class;
      ClassUtil.canBeABeanType(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getClassMethods(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.nullOrToString(class1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.getClassDescription(mockRuntimeException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      deserializerFactoryConfig0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      Class<Boolean> class1 = null;
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getClassDescription("A^LY[_:nX*+T%Wl=C[3");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      deserializerFactoryConfig0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ClassUtil.canBeABeanType(class0);
      Double double0 = new Double(0.8);
      SQLTransientException sQLTransientException0 = new SQLTransientException("size", "`java.lang.String`", 60000);
      sQLTransientException0.fillInStackTrace();
      MockError mockError0 = new MockError(sQLTransientException0);
      mockError0.printStackTrace();
      ClassUtil.quotedOr(mockError0, "WQ");
      Class<Double> class1 = Double.class;
      ClassUtil.isLocalType(class1, true);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      MockIOException mockIOException0 = new MockIOException();
      Locale locale0 = Locale.CHINESE;
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaredMethods(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class0, class2, false);
      Class<Long> class3 = Long.class;
      ClassUtil.isProxyType(class1);
      Float float0 = new Float(0.0F);
      ClassUtil.isJacksonStdImpl((Object) class3);
      JsonGenerator jsonGenerator0 = null;
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getConstructors(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.isConcrete(class1);
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("X;", "X;", (int[]) null);
      ClassUtil.getRootCause(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.isConcrete(class1);
      Class<Float> class2 = Float.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ioSic.QUDcn/;Y)");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isBogusClass(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.getConstructors(class3);
      System.setCurrentTimeMillis(1L);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("WWkfyitUC");
      sQLTransientConnectionException0.printStackTrace();
      sQLTransientConnectionException0.getLocalizedMessage();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null, sQLTransientConnectionException0);
      sQLWarning0.setNextException(sQLTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver", sQLWarning0);
      sQLTransientConnectionException0.setNextException(sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientConnectionException0, "ioSic.QUDcn/;Y)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ioSic.QUDcn/;Y)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockIOException mockIOException0 = new MockIOException();
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[6];
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.getDeclaringClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<RuntimeException> class3 = RuntimeException.class;
      defaultDeserializationContext_Impl0.weirdStringException("Cannot use includeAs of ", class3, "only \"true\" or \"false\" recognized");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.node.NumericNode", (String) null, mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockIOException mockIOException0 = new MockIOException();
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "A^LY[_:nX*+T%Wl=C[3";
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getDeclaredMethods(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isLocalType(class1, true);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "Q", sQLRecoverableException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.fillInStackTrace();
      sQLRecoverableException0.setNextException(sQLFeatureNotSupportedException0);
      ClassUtil.throwIfIOE(sQLRecoverableException0);
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<IOException> class1 = IOException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class1, (String) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.io.IOException` from String [N/A]: null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockIOException mockIOException0 = new MockIOException();
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) null;
      Class<Object> class0 = Object.class;
      Object object0 = ClassUtil.createInstance(class0, true);
      objectArray0[2] = object0;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.with(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class1);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException(mapType0, (String) null, "entrySet");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'null' as a subtype of [map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]: entrySet
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MapType> class0 = MapType.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = null;
      ClassUtil.emptyIterator();
      ClassUtil.rawClass((JavaType) null);
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getClassMethods(class1);
      Double double0 = new Double(1166.8632726448);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.isProxyType(class2);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(".Id&&k(re[:){}", "net.sf.cglib.proxy.java.lang.Object", sQLDataException0);
      Throwable throwable0 = ClassUtil.getRootCause(sQLNonTransientConnectionException0);
      Character character0 = new Character(',');
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(character0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath(throwable0, jsonMappingException_Reference0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, jsonMappingException0);
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotation(class2);
      constructor0.getGenericExceptionTypes();
      constructor0.getAnnotations();
      ClassUtil.isNonStaticInnerClass(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class3);
      Class<IOException> class4 = IOException.class;
      Constructor<IOException> constructor1 = ClassUtil.findConstructor(class4, false);
      constructor1.getDeclaredAnnotationsByType(class2);
      Class<Long> class5 = Long.class;
      ClassUtil.findConstructor(class5, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getClassDescription(class0);
      String string0 = "znh{g]fX~#@";
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withValueInstantiators((ValueInstantiators) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null resolver
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ClassUtil.backticked("ZERO_LENGTH_ENUM_ARRAY");
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getOuterClass(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<Short> class3 = Short.TYPE;
      ClassUtil.getGenericInterfaces(class0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.isProxyType(class4);
      ClassUtil.primitiveType(class1);
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.isConcrete(class5);
      ClassUtil.primitiveType(class3);
      Class<PlaceholderForType> class6 = PlaceholderForType.class;
      ClassUtil.primitiveType(class6);
      Class<RuntimeException> class7 = RuntimeException.class;
      ClassUtil.findEnumType(class7);
      int[] intArray0 = new int[19];
      intArray0[0] = (-835);
      intArray0[1] = 1;
      intArray0[2] = 95;
      intArray0[3] = 31;
      intArray0[4] = (-896);
      intArray0[5] = 2973;
      intArray0[6] = (-3);
      intArray0[7] = (-756);
      intArray0[8] = 3;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`ZERO_LENGTH_ENUM_ARRAY`", "org.hibernate.proxy.", intArray0);
      ClassUtil.getRootCause(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getConstructors(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.findRawSuperTypes(class1, class1, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, false);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.getPackageName(class3);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameterCount();
      constructor0.getAnnotatedReceiverType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      Float float0 = new Float((float) 0);
      Float float1 = new Float((float) 0);
      Float float2 = new Float((double) 0);
      ClassUtil.nonNull((Float) null, float2);
      ClassUtil.nameOf((Named) null);
      ClassUtil.isProxyType(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockIOException mockIOException0 = new MockIOException();
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "A^LY[_:nX*+T%Wl=C[3";
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredMethods(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<Long> class2 = Long.class;
      ClassUtil.isProxyType(class2);
      Float float0 = new Float(0.0F);
      ClassUtil.isJacksonStdImpl((Object) class1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "Q", sQLRecoverableException0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.fillInStackTrace();
      sQLRecoverableException0.setNextException(sQLFeatureNotSupportedException0);
      ClassUtil.getRootCause(sQLRecoverableException0);
      ClassUtil.throwIfIOE(sQLRecoverableException0);
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaredMethods(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<ReferenceType> class1 = ReferenceType.class;
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isProxyType(class3);
      Float float0 = new Float(0.0F);
      ClassUtil.isJacksonStdImpl((Object) float0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 142);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.hasClass(accessPattern0, class0);
      ClassUtil.emptyIterator();
      ClassUtil.nonNullString("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isProxyType(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Cannot figure out type for EnumMap (odd JDK platform?)", mockThrowable0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Cannot figure out type for EnumMap (odd JDK platform?)");
      sQLIntegrityConstraintViolationException0.setNextException(sQLTimeoutException0);
      mockThrowable0.addSuppressed(sQLIntegrityConstraintViolationException0);
      ClassUtil.throwIfRTE(mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getClassDescription(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      deserializerFactoryConfig0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ClassUtil.canBeABeanType(class0);
      Double double0 = new Double(1166.8632726448);
      ClassUtil.quotedOr("znh{g]fX~#@", "kSO6jVC*GgH!>");
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertEquals(17, methodArray0.length);
      assertNotNull(methodArray0);
      
      Double double0 = new Double(1166.8632726448);
      assertEquals(1166.8632726448, (double)double0, 0.01);
      assertNotNull(double0);
      
      String string1 = ClassUtil.quotedOr(double0, " (from class ");
      assertEquals("\"1166.8632726448\"", string1);
      assertNotNull(string1);
      
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isLocalType(class2, true);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "Q", sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals("Q", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)sQLFeatureNotSupportedException0.fillInStackTrace();
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals("Q", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Q", sQLFeatureNotSupportedException1.getSQLState());
      assertNull(sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException1.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      
      sQLRecoverableException0.setNextException(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals("Q", sQLFeatureNotSupportedException0.getSQLState());
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)ClassUtil.getRootCause(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertEquals("", sQLRecoverableException1.getSQLState());
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNotNull(sQLRecoverableException1);
      
      SQLRecoverableException sQLRecoverableException2 = (SQLRecoverableException)ClassUtil.throwIfIOE(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException2.toString());
      assertEquals(0, sQLRecoverableException2.getErrorCode());
      assertEquals("", sQLRecoverableException2.getMessage());
      assertEquals("", sQLRecoverableException2.getSQLState());
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException0, sQLRecoverableException2);
      assertSame(sQLRecoverableException2, sQLRecoverableException0);
      assertSame(sQLRecoverableException2, sQLRecoverableException1);
      assertNotNull(sQLRecoverableException2);
      
      Class<Character> class0 = Character.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(94, methodArray0.length);
      assertNotNull(methodArray0);
      
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      assertNotNull(basicClassIntrospector0);
      
      SQLRecoverableException sQLRecoverableException3 = (SQLRecoverableException)sQLRecoverableException0.initCause(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals("Q", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException3.toString());
      assertEquals(0, sQLRecoverableException3.getErrorCode());
      assertEquals("", sQLRecoverableException3.getSQLState());
      assertEquals("", sQLRecoverableException3.getMessage());
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException0, sQLRecoverableException3);
      assertSame(sQLRecoverableException0, sQLRecoverableException2);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLRecoverableException3, sQLRecoverableException1);
      assertSame(sQLRecoverableException3, sQLRecoverableException0);
      assertSame(sQLRecoverableException3, sQLRecoverableException2);
      assertNotNull(sQLRecoverableException3);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      String string0 = ClassUtil.isLocalType(class1, true);
      assertNull(string0);
      
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<String> class0 = String.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(77, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class1);
      assertEquals(1, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      Class<?> class2 = ClassUtil.classOf(class0);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Class", class2.toString());
      assertEquals(17, class2.getModifiers());
      assertNotNull(class2);
      
      SQLWarning sQLWarning0 = new SQLWarning("kfW-bLy~8VF-", "x");
      assertEquals("java.sql.SQLWarning: kfW-bLy~8VF-", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("kfW-bLy~8VF-", sQLWarning0.getMessage());
      assertEquals("x", sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      MockException mockException0 = new MockException("x", sQLWarning0);
      assertNotNull(mockException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("x", mockException0);
      assertEquals("java.sql.SQLWarning: kfW-bLy~8VF-", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("kfW-bLy~8VF-", sQLWarning0.getMessage());
      assertEquals("x", sQLWarning0.getSQLState());
      assertEquals("x", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: x", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLTransactionRollbackException0.addSuppressed(mockException0);
      assertEquals("java.sql.SQLWarning: kfW-bLy~8VF-", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("kfW-bLy~8VF-", sQLWarning0.getMessage());
      assertEquals("x", sQLWarning0.getSQLState());
      assertEquals("x", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: x", sQLTransactionRollbackException0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLWarning0.forEach(consumer0);
      assertEquals("java.sql.SQLWarning: kfW-bLy~8VF-", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("kfW-bLy~8VF-", sQLWarning0.getMessage());
      assertEquals("x", sQLWarning0.getSQLState());
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.forEach(consumer1);
      assertEquals("java.sql.SQLWarning: kfW-bLy~8VF-", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("kfW-bLy~8VF-", sQLWarning0.getMessage());
      assertEquals("x", sQLWarning0.getSQLState());
      assertEquals("x", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: x", sQLTransactionRollbackException0.toString());
      
      SQLDataException sQLDataException0 = new SQLDataException(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLWarning: kfW-bLy~8VF-", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("kfW-bLy~8VF-", sQLWarning0.getMessage());
      assertEquals("x", sQLWarning0.getSQLState());
      assertEquals("x", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: x", sQLTransactionRollbackException0.toString());
      assertEquals("java.sql.SQLDataException: java.sql.SQLTransactionRollbackException: x", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: x", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.sql.SQLTransactionRollbackException: x
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.at((JsonPointer) null);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertNotNull(objectReader2);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader3 = objectReader2.with(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader2);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertSame(objectReader1, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertNotNull(objectReader3);
      
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      ObjectReader objectReader4 = objectReader3.with(deserializationFeature1);
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader4);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader4);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader4);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader4);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader3);
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertNotNull(objectReader4);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectReader4, pipedOutputStream0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader4));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader4));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader4));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader4));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      ObjectReader objectReader5 = objectReader4.withoutFeatures(jsonParser_FeatureArray0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertEquals(9, jsonParser_FeatureArray0.length);
      assertNotSame(objectReader5, objectReader1);
      assertNotSame(objectReader5, objectReader4);
      assertNotSame(objectReader5, objectReader0);
      assertNotSame(objectReader5, objectReader2);
      assertNotSame(objectReader5, objectReader3);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader4);
      assertSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader5);
      assertNotSame(objectReader1, objectReader5);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader4);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader4);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader5);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader4);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader5);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader1);
      assertNotSame(objectReader4, objectReader5);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader3);
      assertFalse(objectReader5.equals((Object)objectReader1));
      assertFalse(objectReader5.equals((Object)objectReader4));
      assertFalse(objectReader5.equals((Object)objectReader0));
      assertFalse(objectReader5.equals((Object)objectReader2));
      assertFalse(objectReader5.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader4));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader4));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader4));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader4));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader3));
      assertNotNull(objectReader5);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(31, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = constructor0.getAnnotation(class3);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNull(annotation0);
      
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertEquals(0, typeArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(typeArray0);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotationArray0);
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class3);
      assertFalse(boolean0);
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      Annotation[] annotationArray1 = ClassUtil.findClassAnnotations(class4);
      assertEquals(0, annotationArray1.length);
      assertSame(annotationArray1, annotationArray0);
      assertNotNull(annotationArray1);
      
      Class<IOException> class5 = IOException.class;
      Constructor<IOException> constructor1 = ClassUtil.findConstructor(class5, false);
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertNotNull(constructor1);
      
      Annotation[] annotationArray2 = constructor1.getDeclaredAnnotationsByType(class3);
      assertEquals(0, annotationArray2.length);
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertNotSame(annotationArray2, annotationArray0);
      assertNotSame(annotationArray2, annotationArray1);
      assertFalse(annotationArray2.equals((Object)annotationArray0));
      assertFalse(annotationArray2.equals((Object)annotationArray1));
      assertNotNull(annotationArray2);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor1);
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      Iterator<CollectionLikeType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Double double0 = new Double(3860.296060095468);
      assertEquals(3860.296060095468, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(3860.296060095468);
      assertEquals(3860.296060095468, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = ClassUtil.nonNull(double0, double1);
      assertEquals(3860.296060095468, (double)double2, 0.01);
      assertEquals((double)double0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      SQLDataException sQLDataException0 = new SQLDataException("(k6L6p1wZ!mXG$", (Throwable) null);
      assertEquals("java.sql.SQLDataException: (k6L6p1wZ!mXG$", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("(k6L6p1wZ!mXG$", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "(k6L6p1wZ!mXG$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = ClassUtil.backticked("ZERO_LENGTH_ENUM_ARRAY");
      assertEquals("`ZERO_LENGTH_ENUM_ARRAY`", string0);
      assertNotNull(string0);
      
      Class<Object> class0 = Object.class;
      Object object0 = ClassUtil.createInstance(class0, true);
      assertNotNull(object0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean0);
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class3);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Short> class4 = Short.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<JsonMappingException> class5 = JsonMappingException.class;
      boolean boolean2 = ClassUtil.isProxyType(class5);
      assertFalse(boolean2);
      assertSame(class5, class1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Class<?> class6 = ClassUtil.primitiveType(class1);
      assertSame(class1, class5);
      assertNull(class6);
      
      Class<RuntimeException> class7 = RuntimeException.class;
      boolean boolean3 = ClassUtil.isConcrete(class7);
      assertTrue(boolean3);
      assertSame(class7, class3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      Class<?> class8 = ClassUtil.primitiveType(class4);
      assertFalse(class8.isAnnotation());
      assertTrue(class8.isPrimitive());
      assertFalse(class8.isEnum());
      assertFalse(class8.isSynthetic());
      assertEquals(1041, class8.getModifiers());
      assertFalse(class8.isArray());
      assertFalse(class8.isInterface());
      assertEquals("short", class8.toString());
      assertNotNull(class8);
      
      Class<PlaceholderForType> class9 = PlaceholderForType.class;
      Class<?> class10 = ClassUtil.primitiveType(class9);
      assertNull(class10);
      
      Class<RuntimeException> class11 = RuntimeException.class;
      Class<? extends Enum<?>> class12 = ClassUtil.findEnumType(class11);
      assertFalse(class12.isAnnotation());
      assertFalse(class12.isPrimitive());
      assertFalse(class12.isEnum());
      assertFalse(class12.isSynthetic());
      assertFalse(class12.isArray());
      assertFalse(class12.isInterface());
      assertEquals(1, class12.getModifiers());
      assertEquals("class java.lang.Exception", class12.toString());
      assertSame(class11, class3);
      assertSame(class11, class7);
      assertNotNull(class12);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-835);
      intArray0[1] = 1;
      intArray0[2] = 95;
      intArray0[3] = 31;
      intArray0[4] = 49;
      intArray0[5] = 2973;
      intArray0[6] = (-3);
      intArray0[7] = (-756);
      intArray0[8] = 3;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("`ZERO_LENGTH_ENUM_ARRAY`", "org.hibernate.proxy.", intArray0);
      assertEquals(9, intArray0.length);
      assertEquals("org.hibernate.proxy.", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("`ZERO_LENGTH_ENUM_ARRAY`", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: `ZERO_LENGTH_ENUM_ARRAY`", batchUpdateException0.toString());
      assertArrayEquals(new int[] {(-835), 1, 95, 31, 49, 2973, (-3), (-756), 3}, intArray0);
      assertNotNull(batchUpdateException0);
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)ClassUtil.getRootCause(batchUpdateException0);
      assertEquals(9, intArray0.length);
      assertEquals("org.hibernate.proxy.", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("`ZERO_LENGTH_ENUM_ARRAY`", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: `ZERO_LENGTH_ENUM_ARRAY`", batchUpdateException0.toString());
      assertEquals("`ZERO_LENGTH_ENUM_ARRAY`", batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: `ZERO_LENGTH_ENUM_ARRAY`", batchUpdateException1.toString());
      assertEquals("org.hibernate.proxy.", batchUpdateException1.getSQLState());
      assertSame(batchUpdateException0, batchUpdateException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      assertArrayEquals(new int[] {(-835), 1, 95, 31, 49, 2973, (-3), (-756), 3}, intArray0);
      assertNotNull(batchUpdateException1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<IOException> class1 = IOException.class;
      boolean boolean0 = true;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Class<String> class2 = String.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNull(class3);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isConcrete(class1);
      assertTrue(boolean0);
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class0, true);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      Constructor<AccessPattern> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.String()", constructor1.toString());
      assertNotNull(constructor1);
      
      Class<Void> class1 = Void.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(classUtil_Ctor1);
      
      Class<Integer> class2 = Integer.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isConcrete(class1);
      assertTrue(boolean0);
      
      String string0 = ClassUtil.backticked((String) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1657472572);
      intArray0[1] = 58;
      intArray0[2] = (-2566);
      intArray0[3] = 3;
      intArray0[4] = (-2686);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.util.LinkedNode", "com.fasterxml.jackson.databind.util.LinkedNode", intArray0, mockRuntimeException0);
      assertEquals(5, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.util.LinkedNode", batchUpdateException0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.util.LinkedNode", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: com.fasterxml.jackson.databind.util.LinkedNode", batchUpdateException0.toString());
      assertArrayEquals(new int[] {(-1657472572), 58, (-2566), 3, (-2686)}, intArray0);
      assertNotNull(batchUpdateException0);
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)ClassUtil.throwIfRTE(batchUpdateException0);
      assertEquals(5, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.util.LinkedNode", batchUpdateException0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.util.LinkedNode", batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException: com.fasterxml.jackson.databind.util.LinkedNode", batchUpdateException0.toString());
      assertEquals("java.sql.BatchUpdateException: com.fasterxml.jackson.databind.util.LinkedNode", batchUpdateException1.toString());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.util.LinkedNode", batchUpdateException1.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.util.LinkedNode", batchUpdateException1.getMessage());
      assertSame(batchUpdateException0, batchUpdateException1);
      assertSame(batchUpdateException1, batchUpdateException0);
      assertArrayEquals(new int[] {(-1657472572), 58, (-2566), 3, (-2686)}, intArray0);
      assertNotNull(batchUpdateException1);
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      int int0 = constructor0.getParameterCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReceiverType();
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotatedType0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertNull(annotation0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor0);
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int1);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(int1 == int0);
      
      int int2 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int2);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getAnnotationsByType(class2);
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertSame(class2, class1);
      assertNotNull(annotationArray0);
      
      int int3 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int3);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(0, annotationArray1.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotationArray1);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertNotNull(constructor1);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(12, methodArray0.length);
      assertNotNull(methodArray0);
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(classUtil_Ctor1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int3));
      assertTrue(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      int int4 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int4);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      
      Class<?> class3 = ClassUtil.primitiveType(class0);
      assertNull(class3);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(0, classUtil_CtorArray0.length);
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(classUtil_CtorArray0);
      
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isConcrete(class1);
      assertTrue(boolean0);
      
      String string0 = ClassUtil.backticked("ZERO_LENGTH_ENUM_ARRAY");
      assertEquals("`ZERO_LENGTH_ENUM_ARRAY`", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<NoClass> class2 = NoClass.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class2);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<Boolean> class3 = Boolean.class;
      boolean boolean0 = ClassUtil.isBogusClass(class3);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory1.createGenerator((Writer) null);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(writerBasedJsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertNotNull(tokenFilter0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, false, true);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(filteringGeneratorDelegate0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      hashMap0.put((String) null, clientInfoStatus0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator", clientInfoStatus1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(clientInfoStatus1, clientInfoStatus0);
      assertFalse(clientInfoStatus1.equals((Object)clientInfoStatus0));
      
      Throwable throwable0 = null;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("8xbkxV7)L!$J(=", (Throwable) null);
      assertEquals("java.sql.SQLTransactionRollbackException: 8xbkxV7)L!$J(=", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("8xbkxV7)L!$J(=", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "keyUniverse", 3, sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: 8xbkxV7)L!$J(=", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("8xbkxV7)L!$J(=", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(3, sQLTimeoutException0.getErrorCode());
      assertEquals("keyUniverse", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      sQLTimeoutException0.printStackTrace();
      assertEquals("java.sql.SQLTransactionRollbackException: 8xbkxV7)L!$J(=", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("8xbkxV7)L!$J(=", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(3, sQLTimeoutException0.getErrorCode());
      assertEquals("keyUniverse", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertNotNull(list0);
      
      Class<NoClass> class2 = NoClass.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class2);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<Boolean> class3 = Boolean.class;
      boolean boolean0 = ClassUtil.isBogusClass(class3);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory1.createGenerator((Writer) null);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(writerBasedJsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertNotNull(tokenFilter0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, false, true);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeRawValue());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(filteringGeneratorDelegate0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Class<RuntimeException> class4 = RuntimeException.class;
      Class<String> class5 = String.class;
      Class<RuntimeException> class6 = RuntimeException.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class5, class6);
      assertFalse(list1.isEmpty());
      assertEquals(3, list1.size());
      assertSame(class6, class4);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      
      Class<?> class7 = ClassUtil.getDeclaringClass(class4);
      assertSame(class4, class6);
      assertNull(class7);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Object> class8 = Object.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdStringException("JSON", class8, "Cannot use includeAs of ");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(invalidFormatException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Cannot use includeAs of ", "Cannot use includeAs of ", 56319);
      assertEquals("java.sql.SQLTimeoutException: Cannot use includeAs of ", sQLTimeoutException0.toString());
      assertEquals("Cannot use includeAs of ", sQLTimeoutException0.getSQLState());
      assertEquals(56319, sQLTimeoutException0.getErrorCode());
      assertEquals("Cannot use includeAs of ", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("JSON", "only \"true\" or \"false\" recognized", sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: Cannot use includeAs of ", sQLTimeoutException0.toString());
      assertEquals("Cannot use includeAs of ", sQLTimeoutException0.getSQLState());
      assertEquals(56319, sQLTimeoutException0.getErrorCode());
      assertEquals("Cannot use includeAs of ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: JSON", sQLTransactionRollbackException0.toString());
      assertEquals("only \"true\" or \"false\" recognized", sQLTransactionRollbackException0.getSQLState());
      assertEquals("JSON", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use includeAs of 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1025, class1.getModifiers());
      assertNotNull(class1);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertEquals(3, methodArray0.length);
      assertNotNull(methodArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Iterator<IOException> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<CollectionType> class0 = CollectionType.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("com.fasterxml.jackson.databind.type", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtil.getPackageName(class0);
      assertEquals("com.fasterxml.jackson.databind.type", string1);
      assertNotNull(string1);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = constructor0.getAnnotation(class2);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNull(annotation0);
      
      Type[] typeArray0 = constructor0.getGenericParameterTypes();
      assertEquals(0, typeArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(typeArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.String()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertNotNull(constructor1);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class3, class1);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      Class<?> class4 = ClassUtil.getDeclaringClass(class2);
      assertNull(class4);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("com.fasterxml.jackson.databind.type", (Class<?>) null, "only \"true\" or \"false\" recognized");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.type", "Cannot use includeAs of ", jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("Cannot use includeAs of ", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.type", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.type", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize value of type [null] from String \"com.fasterxml.jackson.databind.type\": only \"true\" or \"false\" recognized
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
      
      Class<Long> class1 = Long.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class1);
      assertEquals(52, methodArray0.length);
      assertNotNull(methodArray0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "Missing required creator property '%s' (index %d)", (Throwable) sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertNotNull(jsonMappingException0);
      
      SQLClientInfoException sQLClientInfoException1 = (SQLClientInfoException)sQLClientInfoException0.initCause(jsonMappingException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLClientInfoException1.getSQLState());
      assertNull(sQLClientInfoException1.getMessage());
      assertSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(sQLClientInfoException1, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException1);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("Missing required creator property '%s' (index %d)", clientInfoStatus0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("java.util.", clientInfoStatus1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(clientInfoStatus1, clientInfoStatus0);
      assertFalse(clientInfoStatus1.equals((Object)clientInfoStatus0));
      
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator", clientInfoStatus2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertSame(clientInfoStatus2, clientInfoStatus1);
      assertNotSame(clientInfoStatus2, clientInfoStatus0);
      assertFalse(clientInfoStatus2.equals((Object)clientInfoStatus0));
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0, "com.fasterxml.jackson.databind.JsonDeserializer");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = ClassUtil.nonNull(float0, float1);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<ArrayType> class0 = ArrayType.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertNotNull(list0);
      
      Class<NoClass> class2 = NoClass.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class2);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<Boolean> class3 = Boolean.class;
      boolean boolean0 = ClassUtil.isBogusClass(class3);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory1.createGenerator((Writer) null);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(writerBasedJsonGenerator0);
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertNotNull(tokenFilter0);
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, tokenFilter0, false, true);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(filteringGeneratorDelegate0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[7];
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_COERCION_OF_SCALARS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_CREATORS;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      mapperFeatureArray0[4] = mapperFeature4;
      MapperFeature mapperFeature5 = MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS;
      mapperFeatureArray0[5] = mapperFeature5;
      MapperFeature mapperFeature6 = MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE;
      mapperFeatureArray0[6] = mapperFeature6;
      ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
      assertEquals(7, mapperFeatureArray0.length);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      assertNotNull(objectMapper1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProviderInstance();
      assertEquals(7, mapperFeatureArray0.length);
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "JSON");
      assertEquals(7, mapperFeatureArray0.length);
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) writerBasedJsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(31, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = constructor0.getAnnotation(class3);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNull(annotation0);
      
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertEquals(0, typeArray0.length);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(typeArray0);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertEquals(0, annotationArray0.length);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotationArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray1.length);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertSame(annotationArray1, annotationArray0);
      assertNotNull(annotationArray1);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(0, annotationArray2.length);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotationArray2);
      
      Annotation[] annotationArray3 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray3.length);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertSame(annotationArray3, annotationArray1);
      assertSame(annotationArray3, annotationArray0);
      assertNotNull(annotationArray3);
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class3);
      assertFalse(boolean0);
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      Annotation[] annotationArray4 = ClassUtil.findClassAnnotations(class4);
      assertEquals(0, annotationArray4.length);
      assertSame(annotationArray4, annotationArray0);
      assertSame(annotationArray4, annotationArray1);
      assertSame(annotationArray4, annotationArray3);
      assertNotNull(annotationArray4);
      
      Class<IOException> class5 = IOException.class;
      Constructor<IOException> constructor1 = ClassUtil.findConstructor(class5, false);
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isAccessible());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertNotNull(constructor1);
      
      Annotation[] annotationArray5 = constructor1.getDeclaredAnnotationsByType(class3);
      assertEquals(0, annotationArray5.length);
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isAccessible());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertNotSame(annotationArray5, annotationArray4);
      assertNotSame(annotationArray5, annotationArray3);
      assertNotSame(annotationArray5, annotationArray1);
      assertNotSame(annotationArray5, annotationArray0);
      assertFalse(annotationArray5.equals((Object)annotationArray4));
      assertFalse(annotationArray5.equals((Object)annotationArray3));
      assertFalse(annotationArray5.equals((Object)annotationArray1));
      assertFalse(annotationArray5.equals((Object)annotationArray0));
      assertNotNull(annotationArray5);
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor1);
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isAccessible());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertNotNull(classUtil_Ctor1);
      
      Class<CollectionType> class6 = CollectionType.class;
      Type[] typeArray1 = ClassUtil.getGenericInterfaces(class6);
      assertEquals(1, typeArray1.length);
      assertNotSame(typeArray1, typeArray0);
      assertFalse(typeArray1.equals((Object)typeArray0));
      assertNotNull(typeArray1);
      
      boolean boolean1 = ClassUtil.isProxyType(class0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Double> class7 = Double.class;
      Class<?> class8 = ClassUtil.primitiveType(class7);
      assertEquals(1041, class8.getModifiers());
      assertFalse(class8.isInterface());
      assertFalse(class8.isArray());
      assertEquals("double", class8.toString());
      assertFalse(class8.isAnnotation());
      assertFalse(class8.isEnum());
      assertFalse(class8.isSynthetic());
      assertTrue(class8.isPrimitive());
      assertNotNull(class8);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Double> class0 = Double.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      Class<Error> class1 = Error.class;
      boolean boolean0 = true;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class1, true);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertNotNull(constructor0);
      
      String string1 = constructor0.getName();
      assertEquals("java.lang.Error", string1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertNotNull(annotationArray0);
      
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertEquals(0, typeArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertNotNull(typeArray0);
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReturnType();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertNotNull(annotatedType0);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedExceptionTypes();
      assertEquals(0, annotatedTypeArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertNotNull(annotatedTypeArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertNotNull(classUtil_Ctor0);
      
      Class<?> class2 = classUtil_Ctor0.getDeclaringClass();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.Error", class2.toString());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertNotNull(class2);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLIntegrityConstraintViolationException", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      sQLRecoverableException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLIntegrityConstraintViolationException", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLIntegrityConstraintViolationException", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      assertNotNull(sQLIntegrityConstraintViolationException1);
      
      Class<ArrayType> class3 = ArrayType.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 142);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertNotNull(coreXMLDeserializers_Std0);
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      assertEquals(AccessPattern.ALWAYS_NULL, accessPattern0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      
      boolean boolean0 = ClassUtil.hasClass(accessPattern0, class0);
      assertFalse(boolean0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      
      Iterator<Error> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Double> class1 = Double.class;
      Class<Long> class2 = Long.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, false);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classUtil_Ctor0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "%*}0`tE|G,Aiy");
      assertNotNull(jsonMappingException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 3815, 0, jsonMappingException0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNotNull(dataTruncation0);
      
      SQLWarning sQLWarning0 = dataTruncation0.getNextWarning();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertNull(sQLWarning0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "A^LY[_:nX*+T%Wl=C[3";
      String string1 = null;
      int int0 = 0;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      assertEquals(1, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(4, byteArrayBuilder0.size());
      assertNotNull(objectOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) objectOutputStream0;
      objectArray0[1] = (Object) null;
      Class<Object> class0 = Object.class;
      Object object0 = ClassUtil.createInstance(class0, true);
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) null;
      Class<Object> class0 = Object.class;
      Object object0 = ClassUtil.createInstance(class0, true);
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Short short0 = new Short((short)869);
      assertEquals((short)869, (short)short0);
      assertNotNull(short0);
      
      Class<?> class0 = ClassUtil.classOf(short0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class java.lang.Short", class0.toString());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(23, methodArray0.length);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class java.lang.Short", class0.toString());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(methodArray0);
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.PlaceholderForType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<ArrayType> class2 = ArrayType.class;
      Class<?> class3 = ClassUtil.getEnclosingClass(class2);
      assertNull(class3);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "serialVersionUID");
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("serialVersionUID", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, sQLIntegrityConstraintViolationException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("serialVersionUID", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("serialVersionUID", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.throwIfIOE(sQLNonTransientConnectionException0);
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("serialVersionUID", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException1.getMessage());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NULL", "I?Om`", 57);
      assertEquals("I?Om`", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("NULL", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: NULL", sQLNonTransientConnectionException0.toString());
      assertEquals(57, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(57);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append('v');
      assertEquals(1, charArrayWriter0.size());
      assertEquals("v", charArrayWriter0.toString());
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertNotNull(mockPrintWriter1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "I?Om`";
      objectArray0[1] = (Object) charArrayWriter0;
      objectArray0[2] = (Object) sQLNonTransientConnectionException0;
      objectArray0[3] = (Object) printWriter0;
      objectArray0[4] = (Object) "; failed to set access: ";
      objectArray0[5] = (Object) sQLNonTransientConnectionException0;
      objectArray0[6] = (Object) "I?Om`";
      objectArray0[7] = (Object) printWriter0;
      objectArray0[8] = (Object) sQLNonTransientConnectionException0;
      PrintWriter printWriter1 = mockPrintWriter1.format("; failed to set access: ", objectArray0);
      assertEquals(9, objectArray0.length);
      assertEquals("v; failed to set access: ", charArrayWriter0.toString());
      assertEquals(25, charArrayWriter0.size());
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(printWriter0, printWriter1);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(mockPrintWriter1, printWriter0);
      assertSame(mockPrintWriter1, printWriter1);
      assertSame(printWriter1, mockPrintWriter1);
      assertNotSame(printWriter1, mockPrintWriter0);
      assertNotSame(printWriter1, printWriter0);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(printWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter1.equals((Object)printWriter0));
      assertNotNull(printWriter1);
      
      sQLNonTransientConnectionException0.printStackTrace(printWriter1);
      assertEquals(9, objectArray0.length);
      assertEquals("I?Om`", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("NULL", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: NULL", sQLNonTransientConnectionException0.toString());
      assertEquals(57, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(1134, charArrayWriter0.size());
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter0, printWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotSame(printWriter0, printWriter1);
      assertNotSame(printWriter0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
      assertNotSame(mockPrintWriter1, printWriter0);
      assertSame(mockPrintWriter1, printWriter1);
      assertSame(printWriter1, mockPrintWriter1);
      assertNotSame(printWriter1, mockPrintWriter0);
      assertNotSame(printWriter1, printWriter0);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter0.equals((Object)printWriter1));
      assertFalse(printWriter0.equals((Object)printWriter1));
      assertFalse(printWriter0.equals((Object)mockPrintWriter1));
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertFalse(mockPrintWriter1.equals((Object)printWriter0));
      assertFalse(printWriter1.equals((Object)mockPrintWriter0));
      assertFalse(printWriter1.equals((Object)printWriter0));
      
      Throwable[] throwableArray0 = sQLNonTransientConnectionException0.getSuppressed();
      assertEquals(0, throwableArray0.length);
      assertEquals("I?Om`", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("NULL", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: NULL", sQLNonTransientConnectionException0.toString());
      assertEquals(57, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(throwableArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NULL
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "Q", sQLRecoverableException0);
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Q", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)sQLFeatureNotSupportedException0.fillInStackTrace();
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Q", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException1.toString());
      assertEquals("Q", sQLFeatureNotSupportedException1.getSQLState());
      assertNull(sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      
      sQLFeatureNotSupportedException0.forEach(consumer0);
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Q", sQLFeatureNotSupportedException0.getSQLState());
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      
      sQLRecoverableException0.setNextException(sQLFeatureNotSupportedException0);
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("Q", sQLFeatureNotSupportedException0.getSQLState());
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)ClassUtil.getRootCause(sQLRecoverableException0);
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("", sQLRecoverableException1.getMessage());
      assertEquals("", sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException1.toString());
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      assertNotNull(sQLRecoverableException1);
      
      SQLRecoverableException sQLRecoverableException2 = (SQLRecoverableException)ClassUtil.throwIfIOE(sQLRecoverableException0);
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException2.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException2.toString());
      assertEquals("", sQLRecoverableException2.getMessage());
      assertEquals("", sQLRecoverableException2.getSQLState());
      assertSame(sQLRecoverableException0, sQLRecoverableException2);
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException2, sQLRecoverableException1);
      assertSame(sQLRecoverableException2, sQLRecoverableException0);
      assertNotNull(sQLRecoverableException2);
      
      Class<Character> class0 = Character.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(94, methodArray0.length);
      assertNotNull(methodArray0);
      
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      assertNotNull(basicClassIntrospector0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertNotNull(resolvedRecursiveType0);
      
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forCreation((DeserializationConfig) null, resolvedRecursiveType0, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Constructor<Short> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      String string1 = null;
      String string2 = ClassUtil.nonNullString((String) null);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Short> class1 = Short.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertNotNull(javaType0);
      
      Class<Short> class2 = Short.class;
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      javaTypeArray0[6] = javaType0;
      javaTypeArray0[7] = javaType0;
      javaTypeArray0[8] = javaType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaTypeArray0);
      assertEquals(9, javaTypeArray0.length);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertSame(class2, class1);
      assertSame(class2, class0);
      assertNotNull(typeBindings0);
      
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      assertEquals(9, javaTypeArray0.length);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertSame(class2, class1);
      assertSame(class2, class0);
      assertNotNull(arrayType0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaTypeArray0[3]);
      assertEquals(9, javaTypeArray0.length);
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertNotNull(referenceType0);
      
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class1, (JavaType) arrayType0, (JavaType) referenceType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Short with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      MockException mockException0 = new MockException(mockThrowable0);
      assertNotNull(mockException0);
      
      StackTraceElement[] stackTraceElementArray0 = MockThrowable.getDefaultStackTrace();
      assertEquals(3, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      SQLDataException sQLDataException0 = new SQLDataException("`lQ5{'>9Eyv", " has no default (no arg) constructor", mockException0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: `lQ5{'>9Eyv", sQLDataException0.toString());
      assertEquals("`lQ5{'>9Eyv", sQLDataException0.getMessage());
      assertEquals(" has no default (no arg) constructor", sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.throwIfError(sQLDataException0);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: `lQ5{'>9Eyv", sQLDataException0.toString());
      assertEquals("`lQ5{'>9Eyv", sQLDataException0.getMessage());
      assertEquals(" has no default (no arg) constructor", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: `lQ5{'>9Eyv", sQLDataException1.toString());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertEquals("`lQ5{'>9Eyv", sQLDataException1.getMessage());
      assertEquals(" has no default (no arg) constructor", sQLDataException1.getSQLState());
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertNotNull(sQLDataException1);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Byte> class1 = Byte.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class0, class1, list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertSame(list0, list1);
      assertSame(list1, list0);
      assertNotNull(list1);
      
      List<Class<?>> list2 = ClassUtil.findSuperTypes(class1, class1);
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      
      StackTraceElement[] stackTraceElementArray1 = MockThrowable.replacement_getStackTrace(mockException0);
      assertEquals(3, stackTraceElementArray1.length);
      assertNull(mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertNotNull(stackTraceElementArray1);
      
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "A0-`]", (Throwable) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = ClassUtil.backticked("ZERO_LENGTH_ENUM_ARRAY");
      assertEquals("`ZERO_LENGTH_ENUM_ARRAY`", string0);
      assertNotNull(string0);
      
      Class<Object> class0 = Object.class;
      Object object0 = ClassUtil.createInstance(class0, true);
      assertNotNull(object0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean0);
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class3);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Short> class4 = Short.class;
      Constructor<Short> constructor0 = ClassUtil.findConstructor(class4, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isConcrete(class1);
      assertTrue(boolean0);
      
      String string0 = ClassUtil.backticked("ZERO_LENGTH_ENUM_ARRAY");
      assertEquals("`ZERO_LENGTH_ENUM_ARRAY`", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getDeclaringClass(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      String string0 = "elementType";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "elementType");
      Long long0 = new Long(0L);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) long0, (-13));
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // elementType (through reference chain: java.lang.Long[?])
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findConstructor(class0, false);
      DeserializationContext deserializationContext0 = null;
      MockIOException mockIOException0 = new MockIOException();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      jsonFactory1.copy();
      char[] charArray0 = null;
      mockIOException0.fillInStackTrace();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      try { 
        MockURI.URI("JSON", "NULL", "JSON", 2202, "JSON", "JSON", "{VF|pi2y*ST@c");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: JSON://NULL@JSON:2202JSON?JSON#%7BVF%7Cpi2y*ST@c
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getDeclaringClass(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.isObjectOrPrimitive(class2);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Character> class0 = Character.class;
      Class<MapType> class1 = MapType.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = null;
      // Undeclared exception!
      try { 
        ReferenceType.construct(class0, typeBindings0, (JavaType) null, javaTypeArray0, javaTypeArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getParameterCount();
      constructor0.getAnnotatedReceiverType();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getConstructor();
      ClassUtil.getClassMethods(class0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      Class<Integer> class3 = Integer.class;
      try { 
        ClassUtil.createInstance(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.getStackTrace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(")>/T7~a~+F");
      sQLFeatureNotSupportedException0.initCause(sQLSyntaxErrorException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("keyType");
      mockPrintStream0.close();
      sQLFeatureNotSupportedException0.printStackTrace((PrintStream) mockPrintStream0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("keyType");
      sQLFeatureNotSupportedException0.printStackTrace((PrintWriter) mockPrintWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = ClassUtil.backticked("Pfld|\"@K");
      assertEquals("`Pfld|\"@K`", string0);
      
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertTrue(constructor0.isAccessible());
      assertNotNull(annotationArray0);
  }
}
