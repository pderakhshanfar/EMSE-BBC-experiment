/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:40:58 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AbstractTypeResolver;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.File;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.sql.BatchUpdateException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.backticked("!{xwzR7|0IXm$'Z");
      ClassUtil.isLocalType(class1, true);
      Class<Character> class2 = Character.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.findEnumType(class0);
      SQLException sQLException0 = new SQLException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("1cK-", sQLSyntaxErrorException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "r", (Throwable) sQLTimeoutException1);
      ClassUtil.getRootCause(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassUtil.backticked("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType");
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType");
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(typeBindings0);
      ClassUtil.findSuperTypes((JavaType) arrayType1, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet.of(accessPattern0, accessPattern1, accessPattern1);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.isConcrete(class0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.hasEnclosingMethod(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockIOException mockIOException0 = new MockIOException("/&l3PYHY!fEqI{");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockIOException0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      deserializationFeatureArray0[4] = deserializationFeature4;
      ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectReader1, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(1247);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isLocalType(class0, false);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<ReferenceType> class1 = ReferenceType.class;
      Class<String> class2 = String.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getDeclaredFields(class1);
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode((BigInteger) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "douUG`w)9iV2v|n6#");
      bigIntegerNode0.binaryValue();
      String string0 = ")hF*%T^iko`!r1d";
      bigIntegerNode0.isBoolean();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.quotedOr(bigIntegerNode0, ")hF*%T^iko`!r1d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.BigIntegerNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<NoClass>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findConstructor(class1, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl0.getGenerator();
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.lang.Error");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) sequenceInputStream0, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.nameOf(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[SlUydSa");
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.hasEnclosingMethod(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      sQLNonTransientException0.getStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("unknown", "UpAOKC. X)R{~DuM,G");
      sQLTransientConnectionException0.initCause(sQLNonTransientException0);
      sQLNonTransientException0.addSuppressed(sQLTransientConnectionException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.defaultValue(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.reader();
      DataFormatReaders dataFormatReaders0 = null;
      try {
        dataFormatReaders0 = new DataFormatReaders((Collection<ObjectReader>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DataFormatReaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.findClassAnnotations(class0);
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, 394L, 1468L, 8, (-750));
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "net.sf.cglib.proxy.java.io.ByteArrayInputStream", jsonLocation0);
      MockError mockError0 = new MockError("pZ'QM?goQEX", jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<Long> class1 = Long.TYPE;
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.defaultValue(class0);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("AyCdaY){1nWNn)#o", mockThrowable0);
      mockThrowable0.initCause(sQLTransactionRollbackException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassUtil.backticked("com.fasterxml.jacks");
      Class<Short> class0 = Short.class;
      ClassUtil.hasEnclosingMethod(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jacks", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[7];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      File file0 = MockFile.createTempFile("JSON", "org.hibernate.proxy.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4682, objectMapper1, mockFileOutputStream0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.hibernate.proxy.", "net.sf.cglib.proxy.java.lang.Object");
      Throwable throwable0 = ClassUtil.throwIfError(sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "com.fasterxml.jacks", throwable0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jacks
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isLocalType(class0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Float> class1 = Float.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class1, "|jtkhUu)K'*ce");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Float` from String [N/A]: |jtkhUu)K'*ce
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1925);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(placeholderForType0, placeholderForType0, placeholderForType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, mapLikeType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) collectionLikeType0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      javaTypeArray0[2] = (JavaType) mapLikeType0;
      javaTypeArray0[3] = (JavaType) mapLikeType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[3]);
      StringBuilder stringBuilder0 = new StringBuilder(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      placeholderForType0.getGenericSignature(stringBuilder0);
      Byte byte0 = new Byte((byte)13);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(byte0);
      JavaType javaType0 = referenceType1.withContentType(javaTypeArray0[0]);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<InputStream> class1 = InputStream.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      Class<Float> class1 = Float.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, "JSON");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_OBJECT: JSON
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockError mockError0 = new MockError("fz\"x2*<SyI<R", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "fz\"x2*<SyI<R");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassUtil.isBogusClass((Class<?>) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Throwable throwable0 = ClassUtil.throwIfError(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isProxyType(class1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("!+");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException", "java.lang.reflect.A", 3279, sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(sQLTransactionRollbackException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLSyntaxErrorException0);
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("A|(y~1w%X:z:(#)IQgY", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class0);
      ClassUtil.findEnumType(enumMap0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = Character.valueOf('3');
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)7;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectReader1, byteArrayOutputStream0, byteArray0, (-614630275), true);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("4H3;~a", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException: 4H3;~a
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findEnumType(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.getConstructors(class2);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot figure out type for EnumSet (odd JDK platform?)");
      Class<ArrayType> class0 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.findSuperTypes(class0, class0, list0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.USE_LONG_FOR_INTS;
      deserializationFeatureArray0[8] = deserializationFeature2;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(class0);
      ObjectReader objectReader2 = objectReader1.withoutRootName();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader3 = objectReader2.withHandler(deserializationProblemHandler0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(16);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1114111, objectReader3, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2461), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(56319, class1, "X4tq7I.M_9{/c\"");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) byteArrayBuilder0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.util.AccessPattern` from number 56319: X4tq7I.M_9{/c\"
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.noneOf(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.defaultVisibility();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper1, (OutputStream) null);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonpCharacterEscapes0.getEscapeSequence(0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Float> class1 = Float.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactoryConfig0, class1);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Float` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<RuntimeException> class0 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Double> class1 = Double.class;
      ClassUtil.isBogusClass(class1);
      Class<Double> class2 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class0, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("~)SwXv5", false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) mockFileWriter0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.hibernate.proxy.java.lang.annotation.Annotation", "org.hibernate.proxy.java.lang.annotation.Annotation");
      sQLNonTransientConnectionException0.fillInStackTrace();
      Throwable throwable0 = ClassUtil.getRootCause(sQLNonTransientConnectionException0);
      Class<String> class0 = String.class;
      ClassUtil.isObjectOrPrimitive(class0);
      System.setCurrentTimeMillis(0L);
      String string0 = "";
      ClassUtil.verifyMustOverride(class0, "org.hibernate.proxy.java.lang.annotation.Annotation", "");
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.primitiveType(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, throwable0, "XsK/8!:");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.sql.SQLNonTransientConnectionException (of class com.fasterxml.jackson.databind.util.AccessPattern) must override method 'XsK/8!:'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassUtil.nonNullString("s.ZNgR( H@rE >");
      Class<Float> class0 = Float.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.nameOf(class2);
      ClassUtil.isObjectOrPrimitive(class0);
      JsonLocation jsonLocation0 = new JsonLocation("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", 0L, 0L, (-2767), (-2767));
      jsonLocation0.toString();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", jsonLocation0);
      MockIOException mockIOException0 = new MockIOException(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.");
      ClassUtil.getRootCause(mockIOException0);
      ClassUtil.findClassAnnotations(class1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionType0, (TypeBindings) null);
      Class<BigIntegerNode> class1 = BigIntegerNode.class;
      ClassUtil.findSuperTypes((JavaType) arrayType0, (Class<?>) class1, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Boolean> class0 = Boolean.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackso");
      ClassUtil.nonNullString("P=OUa");
      ClassUtil.isNonStaticInnerClass(class0);
      Class<MapType> class1 = MapType.class;
      Class<InputStream> class2 = InputStream.class;
      ClassUtil.findRawSuperTypes(class2, class1, true);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class1, class1);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("expected format \"%s\"", mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0, "V#ilWs6D@R1a46dh");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Boolean> class0 = Boolean.class;
      Character character0 = Character.valueOf('{');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, character0, "com.fasterxml.jackso");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Character (of class java.lang.Boolean) must override method 'com.fasterxml.jackso'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isJacksonStdImpl(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "java.io.FilterInput");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of null: java.io.FilterInput
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getPackageName(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class1);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, (TypeBindings) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[8];
      annotationMapArray0[0] = annotationMap1;
      annotationMapArray0[1] = annotationMap1;
      annotationMapArray0[2] = annotationMap1;
      annotationMapArray0[3] = annotationMap0;
      annotationMapArray0[4] = annotationMap1;
      annotationMapArray0[5] = annotationMap0;
      annotationMapArray0[6] = annotationMap1;
      Class<Double> class2 = Double.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class3);
      AnnotationMap annotationMap2 = AnnotationMap.of(class2, (Annotation) null);
      annotationMapArray0[7] = annotationMap2;
      AnnotatedMethod annotatedMethod0 = null;
      try {
        annotatedMethod0 = new AnnotatedMethod(typeResolutionContext_Basic0, (Method) null, annotationMap1, annotationMapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot construct AnnotatedMethod with null Method
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class1, javaTypeArray0);
      JavaType javaType0 = TypeFactory.unknownType();
      simpleType0.refine(class1, typeBindings0, javaType0, javaTypeArray0);
      // Undeclared exception!
      try { 
        typeFactory1.constructArrayType((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z+-Re8`-<jx9Z'}=n`");
      ClassUtil.getClassDescription(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Object> class0 = Object.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Float> class1 = Float.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class1);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class0, true);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("6|", "6|");
      ClassUtil.throwIfRTE(sQLNonTransientConnectionException0);
      ClassUtil.getOuterClass(class1);
      ClassUtil.isNonStaticInnerClass(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.canBeABeanType(class2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class0);
      enumMap0.clone();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      Integer integer0 = new Integer(12);
      enumMap0.put(accessPattern1, (Object) integer0);
      enumMap0.put(accessPattern0, (Object) null);
      enumMap0.clone();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      ClassUtil.isProxyType(class1);
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockError mockError0 = new MockError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.rawClass((JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      objectReader0.without(jsonParser_Feature0);
      ClassUtil.classNameOf((Object) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(96);
      ClassUtil.classNameOf(placeholderForType0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.nameOf(class0);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1265);
      JsonFactory jsonFactory1 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, accessPattern0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-5482), objectMapper0, charArrayWriter0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      Exception exception0 = null;
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException(writerBasedJsonGenerator0, "JSON", jsonLocation0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<String>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " has no default (no arg) constructor");
      MockIOException mockIOException0 = new MockIOException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(mockIOException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<InputStream> class1 = InputStream.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getOuterClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getClassMethods(class2);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.primitiveType(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("6|");
      ClassUtil.throwIfRTE(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<Error> class1 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Module> class0 = Module.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Long> class1 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.getDeclaringClass(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findSuperTypes(class2, class2, list0);
      ClassUtil.getDeclaredMethods(class0);
      SQLException sQLException0 = new SQLException("Trying to call same allocXxx() method second time");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLException0, "Trying to call same allocXxx() method second time");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      NoClass noClass1 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      ClassUtil.nonNull(noClass0, noClass1);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findConstructor(class0, true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.throwIfRTE((Throwable) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class0);
      EnumMap<AccessPattern, Object> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, Object> enumMap2 = enumMap1.clone();
      ClassUtil.findEnumType(enumMap2);
      Class<Object> class1 = Object.class;
      ClassUtil.isProxyType(class1);
      Class<Integer> class2 = Integer.TYPE;
      ClassUtil.isObjectOrPrimitive(class2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("7mY,%/P");
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getConstructors(class0);
      Class<Integer> class1 = Integer.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      ClassUtil.isJacksonStdImpl(class2);
      Class<BigIntegerNode> class3 = BigIntegerNode.class;
      ClassUtil.isConcrete(class3);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.rawClass((JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(jsonInclude_Include0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      objectReader0.without(jsonParser_Feature0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      ClassUtil.throwIfIOE(sQLNonTransientConnectionException1);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getClassDescription(class0);
      ClassUtil.nullOrToString("`com.fasterxml.jackson.databind.util.AccessPattern`");
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findConstructor(class1, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.lang.Error");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) sequenceInputStream0, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      JavaType javaType0 = null;
      ClassUtil.rawClass((JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(jsonInclude_Include0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      objectReader0.without(jsonParser_Feature0);
      Class<Error> class1 = Error.class;
      ClassUtil.isConcrete(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", (-641314725));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      ClassUtil.rawClass((JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      deserializerFactoryConfig0.abstractTypeResolvers();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(jsonInclude_Include0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      objectReader1.getTypeFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      File file0 = MockFile.createTempFile("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", ", problem: ", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.ITALIAN;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "keyUniverse", (Object[]) methodArray0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper0, printStream0, byteArray0, 1, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectReader0);
      SQLWarning sQLWarning0 = new SQLWarning("keyUniverse", "Cannot access ", mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: keyUniverse
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Float float0 = new Float(0.0);
      ClassUtil.getClassDescription(float0);
      ClassUtil.nullOrToString((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0g~");
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((Writer) mockPrintWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.getConstructors(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      deserializerFactoryConfig0.abstractTypeResolvers();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Character> class2 = Character.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class2);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(jsonInclude_Include0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      objectReader1.getTypeFactory();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(4, 4);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      ObjectReader objectReader2 = objectMapper1.reader(deserializationFeature0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectReader2, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(3, 0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("k?jn!g=", "k?jn!g=", 0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: k?jn!g=
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isJacksonStdImpl(class1);
      boolean boolean0 = new Boolean(false);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getEnclosingClass(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "cZL)X1");
      ClassUtil.findSuperClasses(class0, (Class<?>) null, false);
      ClassUtil.findSuperClasses((Class<?>) null, class0, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getConstructors(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.nullOrToString((Object) null);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.isNonStaticInnerClass(class3);
      ClassUtil.nameOf((Class<?>) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0);
      ObjectMapper objectMapper3 = objectMapper2.setSerializerProvider(defaultSerializerProvider_Impl1);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "[null]");
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [null]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isBogusClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.getEnclosingClass(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[5];
      annotationMapArray0[0] = null;
      annotationMapArray0[1] = null;
      annotationMapArray0[2] = null;
      annotationMapArray0[3] = null;
      annotationMapArray0[4] = null;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, (AnnotationMap) null, annotationMapArray0);
      Constructor<?> constructor1 = annotatedConstructor0.getAnnotated();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      ClassUtil.getConstructors(class2);
      ClassUtil.isConcrete((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class0);
      enumMap0.clone();
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[7];
      annotationMapArray0[0] = null;
      annotationMapArray0[1] = null;
      annotationMapArray0[2] = null;
      annotationMapArray0[3] = null;
      annotationMapArray0[4] = null;
      annotationMapArray0[5] = null;
      annotationMapArray0[6] = null;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, (AnnotationMap) null, annotationMapArray0);
      Constructor<?> constructor1 = annotatedConstructor0.getAnnotated();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getConstructors(class2);
      ClassUtil.isConcrete((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("-iQ~PKrK%!", "-iQ~PKrK%!");
      ClassUtil.classNameOf("siOTze");
      ClassUtil.emptyIterator();
      Class<Float> class1 = Float.class;
      ClassUtil.nameOf(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isBogusClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.getEnclosingClass(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern1, accessPattern0, accessPattern2, accessPattern2, accessPattern2);
      ClassUtil.findEnumType(enumSet0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Byte byte0 = new Byte((byte) (-17));
      ClassUtil.nullOrToString(byte0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getConstructors(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Xr");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte) (-3);
      byteArray0[8] = (byte) (-17);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockRuntimeException0.getMessage();
      ClassUtil.getClassDescription(mockRuntimeException0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(";=OrQK%'hw?>", "`org.evosuite.runtime.mock.java.lang.MockRuntimeException`", 4832, mockRuntimeException0);
      mockRuntimeException0.initCause(sQLNonTransientConnectionException0);
      ClassUtil.getGenericInterfaces(class1);
      // Undeclared exception!
      ClassUtil.getRootCause(mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.primitiveType(class1);
      System.setCurrentTimeMillis((-4901L));
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, false);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedExceptionTypes();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedExceptionTypes();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("D2FfBHkZ7Z>B");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, (-314));
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ArrayType arrayType0 = typeFactory2.constructArrayType((JavaType) referenceType0);
      Float float0 = new Float((-736.1242F));
      ArrayType arrayType1 = arrayType0.withContentValueHandler(float0);
      ClassUtil.rawClass(arrayType1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.getConstructors(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      constructor0.getAnnotatedExceptionTypes();
      Class<Error> class3 = Error.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class3, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("oUj@lZA<y0a6/KE\"");
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<String> class1 = String.class;
      ClassUtil.findConstructor(class1, true);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<String> constructor1 = ClassUtil.findConstructor(class1, false);
      constructor1.getAnnotatedExceptionTypes();
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class3, class3, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS");
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.findRawSuperTypes(class0, (Class<?>) null, true);
      ClassUtil.isBogusClass((Class<?>) null);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.hasEnclosingMethod(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      objectReader0.with(jsonParser_Feature0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        objectReader0.readValue((JsonParser) null, class2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedExceptionTypes();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      Class<String> class2 = String.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      classUtil_Ctor0.getConstructor();
      Class<Short> class3 = Short.TYPE;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Void> class4 = Void.class;
      try { 
        ClassUtil.findConstructor(class4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class0);
      EnumMap<AccessPattern, Object> enumMap1 = enumMap0.clone();
      EnumMap<AccessPattern, Object> enumMap2 = enumMap1.clone();
      ClassUtil.findEnumType(enumMap2);
      Class<Object> class1 = Object.class;
      ClassUtil.isProxyType(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("7mY,%/P");
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      Class<Double> class0 = Double.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.nullOrToString((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<MapType> class1 = MapType.class;
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("7mY,%/P");
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedExceptionTypes();
      Class<Short> class1 = Short.class;
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<Error> class3 = Error.class;
      ClassUtil.hasEnclosingMethod(class3);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Character> class4 = Character.class;
      ClassUtil.isObjectOrPrimitive(class4);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType");
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getConstructors(class1);
      ClassUtil.isNonStaticInnerClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      MockIOException mockIOException0 = new MockIOException("h!8!$7&K{G @m9LoFUS");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, mockIOException0);
      Class<CollectionType> class2 = CollectionType.class;
      Long.getLong((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class2, class2, false);
      ClassUtil.getClassMethods(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("@0v", "NQDc*aVkD9W.");
      SQLWarning sQLWarning0 = new SQLWarning(sQLNonTransientException0);
      SQLException sQLException0 = new SQLException("@0v", "@0v");
      sQLNonTransientException0.initCause(sQLException0);
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLWarning0);
      Class<?> class3 = ClassUtil.classOf(throwable0);
      ClassUtil.getDeclaredFields(class3);
      Class<Long> class4 = Long.class;
      ClassUtil.findConstructor(class4, false);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.rawClass((JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(jsonInclude_Include0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      objectReader0.without(jsonParser_Feature0);
      ClassUtil.classNameOf((Object) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(96);
      ClassUtil.classNameOf(placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.getConstructors(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      deserializerFactoryConfig0.abstractTypeResolvers();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Character> class2 = Character.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class2);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0);
      ObjectReader objectReader0 = objectMapper3.readerForUpdating(jsonInclude_Include0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(4, 4);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<HashMap> class3 = HashMap.class;
      typeFactory1.constructRawMapType(class3);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedExceptionTypes();
      Class<Annotation> class1 = Annotation.class;
      Class<ArrayType> class2 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.hasEnclosingMethod(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = new Character('e');
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 240);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, list0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.util.ArrayList (of class com.fasterxml.jackson.databind.type.ArrayType) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      constructor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getConstructors(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor2 = ClassUtil.findConstructor(class2, true);
      Class<Annotation> class3 = Annotation.class;
      constructor2.isAnnotationPresent(class3);
      Constructor<?> constructor3 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor3);
      Byte byte0 = new Byte((byte) (-45));
      ClassUtil.isJacksonStdImpl((Object) null);
      classUtil_Ctor0.getConstructor();
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class4);
      Integer.getInteger("elementType");
      Integer integer0 = new Integer(0);
      Integer integer1 = ClassUtil.nonNull((Integer) null, integer0);
      ClassUtil.classNameOf(integer1);
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaringClass(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isLocalType(class1, false);
      Class<Object> class2 = Object.class;
      ClassUtil.findEnumType(class2);
      Class<String> class3 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class3, false);
      Class<Annotation> class4 = Annotation.class;
      constructor0.isAnnotationPresent(class4);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.getConstructors(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ClassUtil.isLocalType((Class<?>) null, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Zr^~");
      ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException0);
      ClassUtil.getGenericSuperclass(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<ReferenceType> class2 = ReferenceType.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class2, "a", (JavaType) null);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ClassUtil.nonNullString("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException$Reference");
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, (Class<?>) null, "C$2xOhjCW*}2xI;=+8");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.getConstructors(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      deserializerFactoryConfig0.abstractTypeResolvers();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<IOException> class3 = IOException.class;
      ClassUtil.findSuperTypes(class3, class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isBogusClass(class2);
      ClassUtil.isJacksonStdImpl(class3);
      ClassUtil.isObjectOrPrimitive(class3);
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getConstructors(class1);
      ClassUtil.isNonStaticInnerClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findConstructor(class2, true);
      MockIOException mockIOException0 = new MockIOException("h!8!$7&K{G @m9LoFUS");
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      AccessPattern accessPattern2 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern1, accessPattern2, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.getConstructors(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findConstructor(class2, false);
      MockIOException mockIOException0 = new MockIOException("[M");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, true);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      ClassUtil.getPackageName(class3);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedWriter0, "(ye\"", sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(jsonMappingException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0, "(ye\"");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      constructor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.hasEnclosingMethod(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, constructor0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1210, (ObjectCodec) null, filterOutputStream0, byteArrayBuilder0.NO_BYTES, 0, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      String string0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      ArrayNode arrayNode0 = objectMapper2.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler((Object) null);
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, javaType0, jsonToken0, (String) null);
      deserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<IOException> class1 = IOException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class1, "serialVersionUID");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("serialVersionUID", "serialVersionUID", (-393805500), jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize value of type `java.io.IOException` from number 10: serialVersionUID
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("mOvf", "mOvf");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("mOvf", sQLTransientConnectionException0);
      ClassUtil.throwIfError(mockRuntimeException0);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isProxyType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1, 3570);
      typeFactory0.withCache(lRUMap0);
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      ClassUtil.rawClass(mapType0);
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException("mOvf");
      ClassUtil.getRootCause(mockRuntimeException1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedExceptionTypes();
      Class<String> class1 = String.class;
      Constructor<String> constructor1 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor1.isAnnotationPresent(class2);
      Class<Annotation> class3 = Annotation.class;
      constructor0.isAnnotationPresent(class3);
      constructor0.getExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor1.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.isBogusClass(class4);
      Class<Character> class5 = Character.class;
      ClassUtil.isJacksonStdImpl(class5);
      Class<Object> class6 = Object.class;
      ClassUtil.isObjectOrPrimitive(class6);
      Class<Object> class7 = Object.class;
      ClassUtil.getEnclosingClass(class7);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findConstructor(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "com.fasterxml.jackso");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.type.ArrayType) must override method 'com.fasterxml.jackso'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "KWc\\{^SEh:";
      ClassUtil.backticked("KWc{^SEh:");
      Class<Double> class0 = Double.class;
      ClassUtil.isNonStaticInnerClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("D2FfBHkZ7Z>B");
      ClassUtil.backticked((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameterAnnotations();
      constructor0.getName();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getGenericParameterTypes();
      constructor0.getGenericExceptionTypes();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      Class<Character> class1 = Character.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.quotedOr(constructor0, "%3QJ,64oK( zl$=-$");
      ClassUtil.emptyIterator();
      Class<Float> class2 = Float.class;
      ClassUtil.primitiveType(class2);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("elementType", "\"public java.io.IOException()\"");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "serialVersionUID");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // serialVersionUID
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getConstructors(class1);
      ClassUtil.isNonStaticInnerClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      ClassUtil.primitiveType(class1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("siOTze", "mpcq=<");
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.classNameOf((Object) null);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ClassUtil.classNameOf((Object) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isLocalType(class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.classNameOf(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("keyUniverse");
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getGenericParameterTypes();
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.isNonStaticInnerClass(class0);
      short short0 = (short) (-730);
      Short short1 = new Short((short) (-730));
      ClassUtil.quotedOr(short1, "index value outside legal index range [0..%s]");
      Class<Character> class2 = Character.class;
      ClassUtil.hasClass(classUtil_Ctor0, class2);
      constructor0.getParameterAnnotations();
      Class<Double> class3 = Double.class;
      ClassUtil.getOuterClass(class3);
      ClassUtil.emptyIterator();
      ClassUtil.primitiveType(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("index value outside legal index range [0..%s]", " @b~2");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "keyUniverse");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedExceptionTypes();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      Byte byte0 = new Byte((byte)0);
      ClassUtil.isJacksonStdImpl((Object) byte0);
      classUtil_Ctor0.getConstructor();
      Class<CollectionType> class3 = CollectionType.class;
      Class<Integer> class4 = Integer.class;
      ClassUtil.isBogusClass(class4);
      ClassUtil.isJacksonStdImpl(class3);
      Class<IOException> class5 = IOException.class;
      ClassUtil.isObjectOrPrimitive(class5);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaringClass(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isLocalType(class1, false);
      Class<Object> class2 = Object.class;
      ClassUtil.findEnumType(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.isNonStaticInnerClass(class3);
      ClassUtil.nonNull((PlaceholderForType) null, (PlaceholderForType) null);
      ClassUtil.quotedOr((Object) null, (String) null);
      Long long0 = new Long(0L);
      ClassUtil.hasClass(long0, (Class<?>) null);
      Class<IOException> class4 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class4, true);
      constructor0.getParameterAnnotations();
      Class<Double> class5 = Double.class;
      ClassUtil.getOuterClass(class5);
      ClassUtil.emptyIterator();
      ClassUtil.primitiveType(class1);
      String string0 = "com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer", (String) null);
      String string1 = "wS)5wR[Uh";
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "wS)5wR[Uh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wS)5wR[Uh
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedExceptionTypes();
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1797);
      objectMapper0.readerFor((JavaType) placeholderForType0);
      Class<HashMap> class2 = HashMap.class;
      Class<NoClass> class3 = NoClass.class;
      classUtil_Ctor0.getConstructor();
      Class<Short> class4 = Short.TYPE;
      ClassUtil.isNonStaticInnerClass(class3);
      ClassUtil.isCollectionMapOrArray(class2);
      Class<String> class5 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      Class<NoClass> class0 = NoClass.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.withStaticTyping();
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.getClassDescription(classUtil0);
      ClassUtil.nullOrToString((Object) null);
      Class<MapType> class2 = MapType.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.emptyIterator();
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.primitiveType(class3);
      String string0 = "size";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("H0J|a: ", "org.hibernate.proxy.");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "J9q{k&8N7mZ,$v^6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // J9q{k&8N7mZ,$v^6
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.getGenericInterfaces(class1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isLocalType(class1, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findEnumType(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory1.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Float float0 = new Float((-2414.0781F));
      defaultDeserializationContext_Impl0.copy();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("9Q6g]1", sQLFeatureNotSupportedException0);
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      try { 
        ClassUtil.createInstance(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("mOvf", "");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("mOvf", sQLTransientConnectionException0);
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException(mockRuntimeException0);
      mockRuntimeException1.addSuppressed(mockRuntimeException0);
      ClassUtil.throwIfError(mockRuntimeException0);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isProxyType(class0);
      TypeFactory.defaultInstance();
      Class<AccessPattern> class1 = AccessPattern.class;
      Character.valueOf('`');
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 8);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      Class<?> class2 = ClassUtil.classOf(accessPattern0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(6);
      // Undeclared exception!
      try { 
        TypeBindings.create(class2, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.util.AccessPattern with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      Character character0 = new Character('x');
      ClassUtil.nullOrToString(character0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      String string0 = constructor0.getName();
      assertNotNull(string0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("java.io.IOException", string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray0.length);
      
      Constructor<IOException> constructor1 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor1);
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertNotSame(constructor1, constructor0);
      assertTrue(constructor1.equals((Object)constructor0));
      
      Type[] typeArray0 = constructor1.getGenericParameterTypes();
      assertNotNull(typeArray0);
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertNotSame(constructor1, constructor0);
      assertTrue(constructor1.equals((Object)constructor0));
      assertEquals(0, typeArray0.length);
      
      Type[] typeArray1 = constructor0.getGenericExceptionTypes();
      assertNotNull(typeArray1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotSame(constructor0, constructor1);
      assertNotSame(typeArray1, typeArray0);
      assertTrue(constructor0.equals((Object)constructor1));
      assertFalse(typeArray1.equals((Object)typeArray0));
      assertEquals(0, typeArray1.length);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotSame(constructor0, constructor1);
      assertTrue(constructor0.equals((Object)constructor1));
      assertEquals(0, int0);
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotSame(constructor0, constructor1);
      assertTrue(constructor0.equals((Object)constructor1));
      assertEquals(0, annotationArray1.length);
      
      Class<?> class3 = classUtil_Ctor0.getDeclaringClass();
      assertNotNull(class3);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertEquals("class java.io.IOException", class3.toString());
      assertNotSame(constructor0, constructor1);
      assertTrue(constructor0.equals((Object)constructor1));
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class2);
      assertFalse(boolean0);
      
      String string1 = ClassUtil.quotedOr("java.io.IOException", "java.io.IOException");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"java.io.IOException\"", string1);
      
      Class<Float> class4 = Float.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class4, 6);
      assertNotNull(coreXMLDeserializers_Std0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      coreXMLDeserializers_Std0.getEmptyValue(deserializationContext0);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.hasClass(accessPattern0, (Class<?>) null);
      constructor0.getParameterAnnotations();
      Class<CollectionType> class5 = CollectionType.class;
      ClassUtil.getOuterClass(class5);
      ClassUtil.emptyIterator();
      Class<Double> class6 = Double.class;
      ClassUtil.primitiveType(class6);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.io.IOException", "\"java.io.IOException\"");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "java.io.IOException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(29, methodArray0.length);
      
      Class<?> class1 = ClassUtil.rawClass((JavaType) null);
      assertNull(class1);
      
      Class<Object> class2 = Object.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactoryConfig1);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      
      Iterable<AbstractTypeResolver> iterable0 = deserializerFactoryConfig0.abstractTypeResolvers();
      assertNotNull(iterable0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      Class<IOException> class4 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class4, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      String string0 = constructor0.toGenericString();
      assertNotNull(string0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray0.length);
      
      Class<IOException> class5 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class5, class0);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertSame(class5, class4);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      boolean boolean0 = ClassUtil.isBogusClass(class4);
      assertSame(class4, class5);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class5);
      assertSame(class5, class4);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ClassUtil.isObjectOrPrimitive(class5);
      assertSame(class5, class4);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class<?> class6 = ClassUtil.getEnclosingClass(class2);
      assertNull(class6);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedExceptionTypes();
      assertNotNull(annotatedTypeArray0);
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotatedTypeArray0.length);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      
      ClassUtil.checkAndFixAccess((Member) constructor1);
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      
      String string0 = ClassUtil.getClassDescription("nfxUT");
      assertNotNull(string0);
      assertEquals("`java.lang.String`", string0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) byte0);
      assertFalse(boolean0);
      
      Constructor<?> constructor2 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor2);
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor2.toString());
      assertEquals(1, constructor2.getModifiers());
      assertFalse(constructor2.isVarArgs());
      assertFalse(constructor2.isSynthetic());
      assertTrue(constructor2.isAccessible());
      assertSame(constructor2, constructor1);
      
      Class<CollectionType> class3 = CollectionType.class;
      Class<Integer> class4 = Integer.class;
      boolean boolean1 = ClassUtil.isBogusClass(class4);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ClassUtil.isJacksonStdImpl(class3);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Class<IOException> class5 = IOException.class;
      boolean boolean3 = ClassUtil.isObjectOrPrimitive(class5);
      assertSame(class5, class2);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Class<Integer> class6 = Integer.class;
      Class<?> class7 = ClassUtil.getEnclosingClass(class6);
      assertNull(class7);
      assertSame(class6, class4);
      
      Class<NoClass> class8 = NoClass.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class8);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      String string0 = ClassUtil.isLocalType(class2, false);
      assertNull(string0);
      
      Class<Object> class3 = Object.class;
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class3);
      assertNull(class4);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      
      Class<JsonMappingException> class5 = JsonMappingException.class;
      try { 
        ClassUtil.createInstance(class5, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Class<Short> class2 = Short.class;
      boolean boolean0 = true;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      Annotation[][] annotationArray0 = constructor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, annotationArray0.length);
      
      String string0 = constructor0.getName();
      assertNotNull(string0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("java.io.IOException", string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, annotationArray1.length);
      
      Type[] typeArray0 = constructor0.getGenericParameterTypes();
      assertNotNull(typeArray0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, typeArray0.length);
      
      Type[] typeArray1 = constructor0.getGenericExceptionTypes();
      assertNotNull(typeArray1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertNotSame(typeArray1, typeArray0);
      assertFalse(typeArray1.equals((Object)typeArray0));
      assertEquals(0, typeArray1.length);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, int0);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray2);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertNotSame(annotationArray2, annotationArray0);
      assertFalse(annotationArray2.equals((Object)annotationArray0));
      assertEquals(0, annotationArray2.length);
      
      Class<?> class1 = classUtil_Ctor0.getDeclaringClass();
      assertNotNull(class1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.io.IOException", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      
      Annotation[] annotationArray3 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray3);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertSame(annotationArray3, annotationArray1);
      assertEquals(0, annotationArray3.length);
      
      Class<Character> class2 = Character.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class2);
      assertFalse(boolean0);
      
      String string1 = "%3QJ,64oK( zl$=-$";
      String string2 = ClassUtil.quotedOr(constructor0, "%3QJ,64oK( zl$=-$");
      assertNotNull(string2);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\"public java.io.IOException()\"", string2);
      
      boolean boolean1 = ClassUtil.hasClass(constructor0, class0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Annotation[][] annotationArray4 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray4);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertNotSame(annotationArray4, annotationArray0);
      assertSame(annotationArray4, annotationArray2);
      assertFalse(annotationArray4.equals((Object)annotationArray0));
      assertEquals(0, annotationArray4.length);
      
      Class<Double> class3 = Double.TYPE;
      assertNotNull(class3);
      assertFalse(class3.isAnnotation());
      assertEquals("double", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
      assertFalse(class3.isAnnotation());
      assertEquals("double", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      
      AnnotatedType annotatedType0 = constructor0.getAnnotatedReturnType();
      assertNotNull(annotatedType0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      Iterator<MapLikeType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<?> class5 = ClassUtil.primitiveType(class1);
      assertNull(class5);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.io.IOException", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(":[6f -mW7", "java.io.IOException");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: :[6f -mW7", sQLTimeoutException0.toString());
      assertEquals("java.io.IOException", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(":[6f -mW7", sQLTimeoutException0.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "%3QJ,64oK( zl$=-$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // %3QJ,64oK( zl$=-$
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("mOvf", "j,Xcw[9P#7");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("mOvf", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: mOvf", sQLTransientConnectionException0.toString());
      assertEquals("j,Xcw[9P#7", sQLTransientConnectionException0.getSQLState());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("mOvf", sQLTransientConnectionException0);
      assertNotNull(mockRuntimeException0);
      
      mockRuntimeException0.addSuppressed(sQLTransientConnectionException0);
      assertEquals("mOvf", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: mOvf", sQLTransientConnectionException0.toString());
      assertEquals("j,Xcw[9P#7", sQLTransientConnectionException0.getSQLState());
      
      Throwable throwable0 = ClassUtil.throwIfError(mockRuntimeException0);
      assertNotNull(throwable0);
      assertEquals("mOvf", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: mOvf", sQLTransientConnectionException0.toString());
      assertEquals("j,Xcw[9P#7", sQLTransientConnectionException0.getSQLState());
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      
      Class<ArrayType> class0 = ArrayType.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      String string0 = ClassUtil.isLocalType(class2, false);
      assertNull(string0);
      
      Class<Object> class3 = Object.class;
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class3);
      assertNull(class4);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory1.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory1, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory1);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Class<RuntimeException> class5 = RuntimeException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class5, "Default constructor for ");
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory1, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory1);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class5);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      assertNotNull(simpleType1);
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.isJavaLangObject());
      assertTrue(simpleType1.useStaticType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.isArrayType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isContainerType());
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.isFinal());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertNotSame(simpleType1, simpleType0);
      assertNotSame(simpleType0, simpleType1);
      assertTrue(simpleType1.equals((Object)simpleType0));
      
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class0);
      assertNotNull(enumMap0);
      assertEquals(0, enumMap0.size());
      
      EnumMap<AccessPattern, Object> enumMap1 = enumMap0.clone();
      assertNotNull(enumMap1);
      assertEquals(0, enumMap0.size());
      assertEquals(0, enumMap1.size());
      assertNotSame(enumMap0, enumMap1);
      assertNotSame(enumMap1, enumMap0);
      assertTrue(enumMap1.equals((Object)enumMap0));
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      AnnotationMap annotationMap0 = AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      assertNull(annotationMap0);
      
      String string0 = ClassUtil.isLocalType(class1, false);
      assertNull(string0);
      
      Class<Double> class2 = Double.class;
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class3, true);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      
      Class<?> class4 = ClassUtil.classOf((Object) null);
      assertNull(class4);
      
      Class<NoClass> class5 = NoClass.class;
      Constructor<NoClass> constructor1 = ClassUtil.findConstructor(class5, true);
      assertNotNull(constructor1);
      assertFalse(constructor1.isSynthetic());
      assertEquals(2, constructor1.getModifiers());
      assertTrue(constructor1.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      
      SQLWarning sQLWarning0 = new SQLWarning("", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException$Reference", 3243);
      assertNotNull(sQLWarning0);
      assertEquals(3243, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning: ", sQLWarning0.toString());
      assertEquals("", sQLWarning0.getMessage());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException$Reference", sQLWarning0.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("mOvf", "j,Xcw[9P#7");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: mOvf", sQLTransientConnectionException0.toString());
      assertEquals("mOvf", sQLTransientConnectionException0.getMessage());
      assertEquals("j,Xcw[9P#7", sQLTransientConnectionException0.getSQLState());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("mOvf", sQLTransientConnectionException0);
      assertNotNull(mockRuntimeException0);
      
      mockRuntimeException0.addSuppressed(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: mOvf", sQLTransientConnectionException0.toString());
      assertEquals("mOvf", sQLTransientConnectionException0.getMessage());
      assertEquals("j,Xcw[9P#7", sQLTransientConnectionException0.getSQLState());
      
      Throwable throwable0 = ClassUtil.throwIfError(mockRuntimeException0);
      assertNotNull(throwable0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: mOvf", sQLTransientConnectionException0.toString());
      assertEquals("mOvf", sQLTransientConnectionException0.getMessage());
      assertEquals("j,Xcw[9P#7", sQLTransientConnectionException0.getSQLState());
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      
      Class<ArrayType> class0 = ArrayType.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      Character character0 = Character.valueOf('.');
      assertNotNull(character0);
      assertEquals('.', (char)character0);
      
      Class<?> class2 = ClassUtil.classOf(character0);
      assertNotNull(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Character", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(6);
      assertNotNull(placeholderForType0);
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class1, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.util.AccessPattern with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(29, methodArray0.length);
      
      Class<?> class1 = ClassUtil.rawClass((JavaType) null);
      assertNull(class1);
      
      Class<Object> class2 = Object.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      
      Iterable<AbstractTypeResolver> iterable0 = deserializerFactoryConfig0.abstractTypeResolvers();
      assertNotNull(iterable0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      Class<IOException> class4 = IOException.class;
      boolean boolean0 = false;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class4, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      String string0 = constructor0.toGenericString();
      assertNotNull(string0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      Class<IOException> class5 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class5, class0);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertSame(class5, class4);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      String string1 = "x-n(c)z";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(", problem: ", "x-n(c)z");
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException: , problem: ", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals(", problem: ", sQLNonTransientException0.getMessage());
      assertEquals("x-n(c)z", sQLNonTransientException0.getSQLState());
      
      SQLWarning sQLWarning0 = new SQLWarning(", problem: ", sQLNonTransientException0);
      assertNotNull(sQLWarning0);
      assertEquals("java.sql.SQLNonTransientException: , problem: ", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals(", problem: ", sQLNonTransientException0.getMessage());
      assertEquals("x-n(c)z", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLWarning: , problem: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(", problem: ", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      Float float0 = new Float(Double.NaN);
      assertNotNull(float0);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      
      Class<?> class6 = ClassUtil.classOf(float0);
      assertNotNull(class6);
      assertFalse(class6.isArray());
      assertFalse(class6.isInterface());
      assertEquals(17, class6.getModifiers());
      assertFalse(class6.isSynthetic());
      assertFalse(class6.isEnum());
      assertEquals("class java.lang.Float", class6.toString());
      assertFalse(class6.isAnnotation());
      assertFalse(class6.isPrimitive());
      
      SQLNonTransientException sQLNonTransientException1 = (SQLNonTransientException)sQLNonTransientException0.initCause(sQLWarning0);
      assertNotNull(sQLNonTransientException1);
      assertEquals("java.sql.SQLNonTransientException: , problem: ", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals(", problem: ", sQLNonTransientException0.getMessage());
      assertEquals("x-n(c)z", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLWarning: , problem: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(", problem: ", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("x-n(c)z", sQLNonTransientException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: , problem: ", sQLNonTransientException1.toString());
      assertEquals(", problem: ", sQLNonTransientException1.getMessage());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException1, sQLNonTransientException0);
      
      SQLWarning sQLWarning1 = (SQLWarning)ClassUtil.throwIfError(sQLWarning0);
      assertNotNull(sQLWarning1);
      assertEquals("java.sql.SQLNonTransientException: , problem: ", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals(", problem: ", sQLNonTransientException0.getMessage());
      assertEquals("x-n(c)z", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLWarning: , problem: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(", problem: ", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertEquals(", problem: ", sQLWarning1.getMessage());
      assertEquals("java.sql.SQLWarning: , problem: ", sQLWarning1.toString());
      assertNull(sQLWarning1.getSQLState());
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning1, sQLWarning0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // , problem: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
      
      Class<SimpleType> class0 = SimpleType.class;
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
      
      Throwable throwable1 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable1);
      
      Class<IOException> class1 = IOException.class;
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      assertNotNull(class2);
      assertEquals("class java.lang.Exception", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<ArrayType> class1 = ArrayType.class;
      Constructor<ArrayType> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      MockIOException mockIOException0 = new MockIOException("[M");
      assertNotNull(mockIOException0);
      
      Double double0 = new Double((-2.147483648E9));
      assertNotNull(double0);
      assertEquals((-2.147483648E9), (double)double0, 0.01);
      
      boolean boolean0 = ClassUtil.hasClass(double0, class0);
      assertFalse(boolean0);
      
      Class<BigIntegerNode> class2 = BigIntegerNode.class;
      Class<Double> class3 = Double.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class3, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(52, methodArray0.length);
      
      Class<Boolean> class1 = Boolean.class;
      boolean boolean0 = ClassUtil.isConcrete(class1);
      assertTrue(boolean0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      Class<MapType> class2 = MapType.class;
      Class<Double> class3 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class3);
      assertNotNull(list0);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      BigDecimal bigDecimal0 = new BigDecimal((-4684.3374115));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-76), bigDecimal0.byteValue());
      assertEquals((short) (-4684), bigDecimal0.shortValue());
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class1, "{8/:{yKlmWRwCJeiC");
      assertNotNull(jsonMappingException0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((byte) (-76), bigDecimal0.byteValue());
      assertEquals((short) (-4684), bigDecimal0.shortValue());
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize value of type `java.lang.Boolean` from number -4684.3374114999996891128830611705780029296875: {8/:{yKlmWRwCJeiC
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(29, methodArray0.length);
      
      Class<?> class1 = ClassUtil.rawClass((JavaType) null);
      assertNull(class1);
      
      Class<Object> class2 = Object.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      Class<IOException> class4 = IOException.class;
      boolean boolean0 = false;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class4, false);
      assertNotNull(constructor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      String string0 = constructor0.toGenericString();
      assertNotNull(string0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotationArray0.length);
      
      Class<IOException> class5 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class5, class0);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertSame(class5, class4);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      String string1 = "x-n(c)z";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(", problem: ", "x-n(c)z");
      assertNotNull(sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: , problem: ", sQLNonTransientException0.toString());
      assertEquals(", problem: ", sQLNonTransientException0.getMessage());
      assertEquals("x-n(c)z", sQLNonTransientException0.getSQLState());
      
      SQLWarning sQLWarning0 = new SQLWarning(", problem: ", sQLNonTransientException0);
      assertNotNull(sQLWarning0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: , problem: ", sQLNonTransientException0.toString());
      assertEquals(", problem: ", sQLNonTransientException0.getMessage());
      assertEquals("x-n(c)z", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLWarning: , problem: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(", problem: ", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      
      SQLNonTransientException sQLNonTransientException1 = (SQLNonTransientException)sQLNonTransientException0.initCause(sQLWarning0);
      assertNotNull(sQLNonTransientException1);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: , problem: ", sQLNonTransientException0.toString());
      assertEquals(", problem: ", sQLNonTransientException0.getMessage());
      assertEquals("x-n(c)z", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLWarning: , problem: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(", problem: ", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertEquals("x-n(c)z", sQLNonTransientException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: , problem: ", sQLNonTransientException1.toString());
      assertEquals(", problem: ", sQLNonTransientException1.getMessage());
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException1, sQLNonTransientException0);
      
      SQLWarning sQLWarning1 = (SQLWarning)ClassUtil.throwIfError(sQLWarning0);
      assertNotNull(sQLWarning1);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: , problem: ", sQLNonTransientException0.toString());
      assertEquals(", problem: ", sQLNonTransientException0.getMessage());
      assertEquals("x-n(c)z", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLWarning: , problem: ", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals(", problem: ", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(", problem: ", sQLWarning1.getMessage());
      assertEquals("java.sql.SQLWarning: , problem: ", sQLWarning1.toString());
      assertEquals(0, sQLWarning1.getErrorCode());
      assertNull(sQLWarning1.getSQLState());
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLWarning0, sQLWarning1);
      assertSame(sQLWarning1, sQLWarning0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // , problem: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(29, methodArray0.length);
      
      Class<?> class1 = ClassUtil.rawClass((JavaType) null);
      assertNull(class1);
      
      Class<Object> class2 = Object.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      Class<String> class4 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class4, true);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedExceptionTypes();
      assertNotNull(annotatedTypeArray0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotatedTypeArray0.length);
      
      Class<Annotation> class5 = Annotation.class;
      Class<String> class6 = String.class;
      Constructor<String> constructor1 = ClassUtil.findConstructor(class6, true);
      assertNotNull(constructor1);
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.String()", constructor1.toString());
      assertSame(class6, class4);
      assertNotSame(constructor1, constructor0);
      assertTrue(constructor1.equals((Object)constructor0));
      
      boolean boolean0 = constructor1.isAnnotationPresent(class5);
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.String()", constructor1.toString());
      assertSame(class6, class4);
      assertNotSame(constructor1, constructor0);
      assertTrue(constructor1.equals((Object)constructor0));
      assertFalse(boolean0);
      
      Class<Annotation> class7 = Annotation.class;
      boolean boolean1 = constructor1.isAnnotationPresent(class7);
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.String()", constructor1.toString());
      assertSame(class6, class4);
      assertNotSame(constructor1, constructor0);
      assertSame(class7, class5);
      assertTrue(constructor1.equals((Object)constructor0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertNotNull(classArray0);
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertSame(class4, class6);
      assertNotSame(constructor0, constructor1);
      assertTrue(constructor0.equals((Object)constructor1));
      assertEquals(0, classArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor1);
      assertNotNull(classUtil_Ctor0);
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.String()", constructor1.toString());
      assertTrue(constructor1.equals((Object)constructor0));
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.String()", constructor1.toString());
      assertSame(class6, class4);
      assertNotSame(constructor1, constructor0);
      assertTrue(constructor1.equals((Object)constructor0));
      assertEquals(0, annotationArray0.length);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.String()", constructor1.toString());
      assertSame(class6, class4);
      assertNotSame(constructor1, constructor0);
      assertTrue(constructor1.equals((Object)constructor0));
      assertEquals(0, int0);
      
      Constructor<?> constructor2 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor2);
      assertTrue(constructor2.isAccessible());
      assertFalse(constructor2.isVarArgs());
      assertFalse(constructor2.isSynthetic());
      assertEquals("public java.lang.String()", constructor2.toString());
      assertEquals(1, constructor2.getModifiers());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.String()", constructor1.toString());
      assertSame(class6, class4);
      assertNotSame(constructor1, constructor0);
      assertTrue(constructor1.equals((Object)constructor0));
      
      Class<AccessibleObject> class8 = AccessibleObject.class;
      boolean boolean2 = ClassUtil.isBogusClass(class8);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = ClassUtil.isJacksonStdImpl(class4);
      assertSame(class4, class6);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Class<ArrayType> class9 = ArrayType.class;
      boolean boolean4 = ClassUtil.isObjectOrPrimitive(class9);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      Class<Double> class10 = Double.class;
      Class<?> class11 = ClassUtil.getEnclosingClass(class10);
      assertNull(class11);
      assertSame(class10, class0);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class7, (Class<?>) null);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(class7, class5);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray0 = constructor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      String string0 = constructor0.getName();
      assertNotNull(string0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("java.io.IOException", string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray1);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      
      Type[] typeArray0 = constructor0.getGenericParameterTypes();
      assertNotNull(typeArray0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, typeArray0.length);
      
      Type[] typeArray1 = constructor0.getGenericExceptionTypes();
      assertNotNull(typeArray1);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotSame(typeArray1, typeArray0);
      assertFalse(typeArray1.equals((Object)typeArray0));
      assertEquals(0, typeArray1.length);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, int0);
      
      Class<?> class1 = classUtil_Ctor0.getDeclaringClass();
      assertNotNull(class1);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("class java.io.IOException", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      
      Class<Character> class2 = Character.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class2);
      assertFalse(boolean0);
      
      String string1 = ClassUtil.quotedOr(constructor0, "%3QJ,64oK( zl$=-$");
      assertNotNull(string1);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"public java.io.IOException()\"", string1);
      
      boolean boolean1 = ClassUtil.hasClass(constructor0, class0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray2);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotSame(annotationArray2, annotationArray0);
      assertFalse(annotationArray2.equals((Object)annotationArray0));
      assertEquals(0, annotationArray2.length);
      
      Annotation[][] annotationArray3 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray3);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotSame(annotationArray3, annotationArray0);
      assertSame(annotationArray3, annotationArray2);
      assertFalse(annotationArray3.equals((Object)annotationArray0));
      assertEquals(0, annotationArray3.length);
      
      constructor0.setAccessible(false);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Class<Short> class3 = Short.class;
      String string2 = ClassUtil.isLocalType(class3, false);
      assertNull(string2);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("%3QJ,64oK( zl$=-$", "3");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("%3QJ,64oK( zl$=-$", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: %3QJ,64oK( zl$=-$", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("3", sQLSyntaxErrorException0.getSQLState());
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals("%3QJ,64oK( zl$=-$", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: %3QJ,64oK( zl$=-$", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("3", sQLSyntaxErrorException0.getSQLState());
      assertEquals("3", sQLSyntaxErrorException1.getSQLState());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: %3QJ,64oK( zl$=-$", sQLSyntaxErrorException1.toString());
      assertEquals("%3QJ,64oK( zl$=-$", sQLSyntaxErrorException1.getMessage());
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      
      Class class4 = (Class)ClassUtil.getGenericSuperclass(class3);
      assertNotNull(class4);
      assertEquals("class java.lang.Number", class4.toString());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isPrimitive());
      assertEquals(1025, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Iterator<Object> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<String> class2 = String.class;
      Class<Float> class3 = Float.class;
      Class<?> class4 = ClassUtil.getEnclosingClass(class3);
      assertNull(class4);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.getClassDescription(classUtil0);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.util.ClassUtil`", string0);
      
      String string1 = ClassUtil.nullOrToString(class2);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<Double> class5 = Double.class;
      Class<?> class6 = ClassUtil.getOuterClass(class5);
      assertNull(class6);
      
      Iterator<MapLikeType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<RuntimeException> class7 = RuntimeException.class;
      Class<?> class8 = ClassUtil.primitiveType(class7);
      assertNull(class8);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("size", "`com.fasterxml.jackson.databind.util.ClassUtil`");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: size", sQLTimeoutException0.toString());
      assertEquals("`com.fasterxml.jackson.databind.util.ClassUtil`", sQLTimeoutException0.getSQLState());
      assertEquals("size", sQLTimeoutException0.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "size");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(52, methodArray0.length);
      
      Class<Boolean> class1 = Boolean.TYPE;
      assertNotNull(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      boolean boolean0 = ClassUtil.isConcrete(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(boolean0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(0, classUtil_CtorArray0.length);
      
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      
      try { 
        defaultDeserializationContext0.reportInputMismatch((Class<?>) class1, "ZERO_LENGTH_ENUM_ARRAY", (Object[]) classUtil_CtorArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ZERO_LENGTH_ENUM_ARRAY
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      Class<Short> class2 = Short.TYPE;
      assertNotNull(class2);
      assertEquals("short", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      boolean boolean0 = ClassUtil.isConcrete(class2);
      assertEquals("short", class2.toString());
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray0 = constructor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      String string0 = constructor0.getName();
      assertNotNull(string0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("java.io.IOException", string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray1);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      
      Type[] typeArray0 = constructor0.getGenericParameterTypes();
      assertNotNull(typeArray0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, typeArray0.length);
      
      Type[] typeArray1 = constructor0.getGenericExceptionTypes();
      assertNotNull(typeArray1);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotSame(typeArray1, typeArray0);
      assertFalse(typeArray1.equals((Object)typeArray0));
      assertEquals(0, typeArray1.length);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, int0);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray2);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotSame(annotationArray2, annotationArray0);
      assertFalse(annotationArray2.equals((Object)annotationArray0));
      assertEquals(0, annotationArray2.length);
      
      Class<?> class1 = classUtil_Ctor0.getDeclaringClass();
      assertNotNull(class1);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.io.IOException", class1.toString());
      
      Class<Character> class2 = Character.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class2);
      assertFalse(boolean0);
      
      String string1 = "%3QJ,64oK( zl$=-$";
      String string2 = ClassUtil.quotedOr(constructor0, "%3QJ,64oK( zl$=-$");
      assertNotNull(string2);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\"public java.io.IOException()\"", string2);
      
      boolean boolean1 = ClassUtil.hasClass(constructor0, class0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Annotation[][] annotationArray3 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray3);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertSame(annotationArray3, annotationArray2);
      assertNotSame(annotationArray3, annotationArray0);
      assertFalse(annotationArray3.equals((Object)annotationArray0));
      assertEquals(0, annotationArray3.length);
      
      Class<Double> class3 = Double.TYPE;
      assertNotNull(class3);
      assertEquals("double", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isPrimitive());
      
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
      assertEquals("double", class3.toString());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isPrimitive());
      
      Iterator<MapLikeType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<?> class5 = ClassUtil.primitiveType(class1);
      assertNull(class5);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.io.IOException", class1.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(":[6f -mW7", "java.io.IOException");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: :[6f -mW7", sQLTimeoutException0.toString());
      assertEquals("java.io.IOException", sQLTimeoutException0.getSQLState());
      assertEquals(":[6f -mW7", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "%3QJ,64oK( zl$=-$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // %3QJ,64oK( zl$=-$
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "", 96);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(96, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals(96, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals("", sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertEquals("", sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertEquals(96, sQLNonTransientConnectionException1.getErrorCode());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = true;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, int0);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      
      String string0 = ClassUtil.quotedOr(placeholderForType0, "aan*");
      assertNotNull(string0);
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals("\"$1\"", string0);
      
      String string1 = "keyUniverse";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("\"$1\"");
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("\"$1\"", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: \"$1\"", sQLNonTransientConnectionException0.toString());
      
      StackTraceElement[] stackTraceElementArray0 = sQLNonTransientConnectionException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals("\"$1\"", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: \"$1\"", sQLNonTransientConnectionException0.toString());
      assertEquals(13, stackTraceElementArray0.length);
      
      SQLException sQLException0 = new SQLException("\"$1\"", "keyUniverse", 13, sQLNonTransientConnectionException0);
      assertNotNull(sQLException0);
      assertEquals("\"$1\"", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: \"$1\"", sQLNonTransientConnectionException0.toString());
      assertEquals("keyUniverse", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: \"$1\"", sQLException0.toString());
      assertEquals("\"$1\"", sQLException0.getMessage());
      assertEquals(13, sQLException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.getRootCause(sQLException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals("\"$1\"", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: \"$1\"", sQLNonTransientConnectionException0.toString());
      assertEquals("keyUniverse", sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: \"$1\"", sQLException0.toString());
      assertEquals("\"$1\"", sQLException0.getMessage());
      assertEquals(13, sQLException0.getErrorCode());
      assertEquals("\"$1\"", sQLNonTransientConnectionException1.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: \"$1\"", sQLNonTransientConnectionException1.toString());
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAbstractTypeResolver((AbstractTypeResolver) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null resolver
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      Class<Long> class0 = Long.class;
      Byte byte0 = Byte.valueOf((byte)50);
      assertNotNull(byte0);
      assertEquals((byte)50, (byte)byte0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("m|>OQ", "size");
      assertNotNull(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("size", jsonMappingException_Reference0.getFieldName());
      
      Class<CollectionType> class1 = CollectionType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(class0, class1);
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("size", jsonMappingException_Reference0.getFieldName());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      StackTraceElement[] stackTraceElementArray0 = jsonMappingException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(3, stackTraceElementArray0.length);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.Class`: incompatible types (through reference chain: java.lang.String[\"size\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(52, methodArray0.length);
      
      Class<Boolean> class1 = Boolean.class;
      boolean boolean0 = ClassUtil.isConcrete(class1);
      assertTrue(boolean0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ClassUtil.createInstance(class0, true);
      assertNotNull(object0);
      
      Class<ArrayType> class1 = ArrayType.class;
      Constructor<ArrayType> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      MockIOException mockIOException0 = new MockIOException("[M");
      assertNotNull(mockIOException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      assertNotNull(objectReader0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      ObjectReader objectReader1 = objectReader0.with(jsonParser_Feature0);
      assertNotNull(objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectReader objectReader2 = objectReader1.without(deserializationFeature0, deserializationFeatureArray0);
      assertNotNull(objectReader2);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(4, deserializationFeatureArray0.length);
      
      TypeFactory typeFactory0 = objectReader2.getTypeFactory();
      assertNotNull(typeFactory0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertSame(objectReader1, objectReader2);
      assertSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertEquals(4, deserializationFeatureArray0.length);
      
      LRUMap<Object, JavaType> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, JavaType>((-4), (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = ClassUtil.nonNullString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      assertNotNull(beanDeserializerBuilder0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        beanDeserializerBuilder0.buildAbstract();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1025, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1025, class1.getModifiers());
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Class<Character> class2 = Character.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNotNull(class3);
      assertFalse(class3.isAnnotation());
      assertEquals("char", class3.toString());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      
      Method method0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = ClassUtil.nonNullString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Class<AccessPattern> class0 = AccessPattern.class;
      Constructor<AccessPattern> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      String string0 = ClassUtil.getPackageName(class1);
      assertNotNull(string0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("com.fasterxml.jackson.core", string0);
      
      Class<String> class2 = String.class;
      Class<?> class3 = ClassUtil.getEnclosingClass(class2);
      assertNull(class3);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      String string1 = ClassUtil.getClassDescription("com.fasterxml.jackson.core");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`java.lang.String`", string1);
      
      String string2 = ClassUtil.nullOrToString(class2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = ClassUtil.nonNullString("com.fasterxml.jackson.databind.JsonSerializer");
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind.JsonSerializer", string0);
      
      Class<String> class0 = String.class;
      boolean boolean1 = ClassUtil.hasClass("com.fasterxml.jackson.databind.JsonSerializer", class0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 23;
      intArray0[1] = 23;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      intArray0[2] = 23;
      intArray0[3] = 255;
      intArray0[4] = 23;
      intArray0[5] = 23;
      intArray0[6] = 23;
      intArray0[7] = 23;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("T%;PzVI`mMaK", "4", 23, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException: T%;PzVI`mMaK", batchUpdateException0.toString());
      assertEquals("4", batchUpdateException0.getSQLState());
      assertEquals("T%;PzVI`mMaK", batchUpdateException0.getMessage());
      assertEquals(23, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {23, 23, 23, 255, 23, 23, 23, 23}, intArray0);
      assertEquals(8, intArray0.length);
      
      Spliterator<Throwable> spliterator0 = batchUpdateException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("java.sql.BatchUpdateException: T%;PzVI`mMaK", batchUpdateException0.toString());
      assertEquals("4", batchUpdateException0.getSQLState());
      assertEquals("T%;PzVI`mMaK", batchUpdateException0.getMessage());
      assertEquals(23, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {23, 23, 23, 255, 23, 23, 23, 23}, intArray0);
      assertEquals(8, intArray0.length);
      
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
      assertNotNull(batchUpdateException1);
      assertEquals("4", batchUpdateException1.getSQLState());
      assertEquals("T%;PzVI`mMaK", batchUpdateException1.getMessage());
      assertEquals(23, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: T%;PzVI`mMaK", batchUpdateException1.toString());
      assertEquals("java.sql.BatchUpdateException: T%;PzVI`mMaK", batchUpdateException0.toString());
      assertEquals("4", batchUpdateException0.getSQLState());
      assertEquals("T%;PzVI`mMaK", batchUpdateException0.getMessage());
      assertEquals(23, batchUpdateException0.getErrorCode());
      assertSame(batchUpdateException1, batchUpdateException0);
      assertSame(batchUpdateException0, batchUpdateException1);
      assertArrayEquals(new int[] {23, 23, 23, 255, 23, 23, 23, 23}, intArray0);
      assertEquals(8, intArray0.length);
      
      String string1 = ClassUtil.canBeABeanType(class0);
      assertNull(string1);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      boolean boolean2 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      assertNotNull(jsonFactory2);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature1);
      assertNotNull(jsonFactory3);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonGenerator_Feature0, jsonGenerator_Feature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonGenerator_Feature1, jsonGenerator_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertFalse(jsonGenerator_Feature0.equals((Object)jsonGenerator_Feature1));
      assertFalse(jsonGenerator_Feature1.equals((Object)jsonGenerator_Feature0));
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.databind.JsonSerializer", "X");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // X
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      Constructor<MapLikeType> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1756);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      StringWriter stringWriter0 = new StringWriter(270);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Iterator<LinkedList<HashMap>> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(29, methodArray0.length);
      
      Class<?> class1 = ClassUtil.rawClass((JavaType) null);
      assertNull(class1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      Class<SimpleType> class2 = SimpleType.class;
      String string0 = ClassUtil.isLocalType(class2, true);
      assertNull(string0);
      
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "", 1);
      assertNotNull(sQLDataException0);
      assertEquals(1, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, (-591), sQLDataException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals(1, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals((-591), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.throwIfRTE(sQLNonTransientConnectionException0);
      assertNotNull(sQLNonTransientConnectionException1);
      assertEquals(1, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getMessage());
      assertEquals("", sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertEquals((-591), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException1.toString());
      assertNull(sQLNonTransientConnectionException1.getMessage());
      assertEquals((-591), sQLNonTransientConnectionException1.getErrorCode());
      assertSame(sQLNonTransientConnectionException0, sQLNonTransientConnectionException1);
      assertSame(sQLNonTransientConnectionException1, sQLNonTransientConnectionException0);
      
      Class<IOException> class3 = IOException.class;
      Class class4 = (Class)ClassUtil.getGenericSuperclass(class3);
      assertNotNull(class4);
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals(1, class4.getModifiers());
      assertEquals("class java.lang.Exception", class4.toString());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      
      Class<String> class5 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class5, true);
      assertNotNull(constructor0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      Iterator<Object> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(29, methodArray0.length);
      
      Class<?> class1 = ClassUtil.rawClass((JavaType) null);
      assertNull(class1);
      
      Class<Object> class2 = Object.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      Class<Double> class4 = Double.class;
      boolean boolean0 = ClassUtil.isBogusClass(class4);
      assertSame(class4, class0);
      assertFalse(boolean0);
      
      Class<?> class5 = ClassUtil.getEnclosingClass(class4);
      assertNull(class5);
      assertSame(class4, class0);
      
      Class<IOException> class6 = IOException.class;
      Class class7 = (Class)ClassUtil.getGenericSuperclass(class6);
      assertNotNull(class7);
      assertEquals(1, class7.getModifiers());
      assertFalse(class7.isPrimitive());
      assertFalse(class7.isInterface());
      assertFalse(class7.isArray());
      assertEquals("class java.lang.Exception", class7.toString());
      assertFalse(class7.isEnum());
      assertFalse(class7.isSynthetic());
      assertFalse(class7.isAnnotation());
      
      String string0 = ClassUtil.nonNullString("0a-xN<n");
      assertNotNull(string0);
      assertEquals("0a-xN<n", string0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      Class<Error> class8 = Error.class;
      // Undeclared exception!
      try { 
        simpleAbstractTypeResolver0.addMapping(class8, (Class<? extends Error>) class8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add mapping from class to itself
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Character> class1 = Character.TYPE;
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(class0, class1);
      assertNotNull(jsonMappingException0);
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      Throwable throwable0 = ClassUtil.throwIfError(jsonMappingException0);
      assertNotNull(throwable0);
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("char", class1.toString());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      String string0 = ClassUtil.isLocalType(class2, false);
      assertNull(string0);
      
      Class<Object> class3 = Object.class;
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class3);
      assertNull(class4);
      
      Class<CollectionLikeType> class5 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isBogusClass(class5);
      assertFalse(boolean0);
      
      Class<AccessPattern> class6 = AccessPattern.class;
      Class<?> class7 = ClassUtil.getEnclosingClass(class6);
      assertNull(class7);
      
      Type type0 = ClassUtil.getGenericSuperclass(class6);
      assertNotNull(type0);
      
      String string1 = ClassUtil.nonNullString("0a-xN<n");
      assertNotNull(string1);
      assertEquals("0a-xN<n", string1);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "0a-xN<n");
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "size");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(29, methodArray0.length);
      
      Class<?> class1 = ClassUtil.rawClass((JavaType) null);
      assertNull(class1);
      
      Class<Object> class2 = Object.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactoryConfig1);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      
      Iterable<AbstractTypeResolver> iterable0 = deserializerFactoryConfig0.abstractTypeResolvers();
      assertNotNull(iterable0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      
      boolean boolean0 = ClassUtil.hasClass((Object) null, (Class<?>) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(29, methodArray0.length);
      
      Class<?> class1 = ClassUtil.rawClass((JavaType) null);
      assertNull(class1);
      
      Class<Object> class2 = Object.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(0, classUtil_CtorArray0.length);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(float0, class4, "Default constructor for ");
      assertNotNull(jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      Class<String> class5 = String.class;
      boolean boolean0 = ClassUtil.hasClass(jsonMappingException0, class5);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      Annotation[][] annotationArray0 = constructor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, annotationArray0.length);
      
      String string0 = constructor0.getName();
      assertNotNull(string0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("java.io.IOException", string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, annotationArray1.length);
      
      Type[] typeArray0 = constructor0.getGenericParameterTypes();
      assertNotNull(typeArray0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, typeArray0.length);
      
      Type[] typeArray1 = constructor0.getGenericExceptionTypes();
      assertNotNull(typeArray1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertNotSame(typeArray1, typeArray0);
      assertFalse(typeArray1.equals((Object)typeArray0));
      assertEquals(0, typeArray1.length);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, int0);
      
      Class<?> class1 = classUtil_Ctor0.getDeclaringClass();
      assertNotNull(class1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.io.IOException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      Class<Character> class2 = Character.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class2);
      assertFalse(boolean0);
      
      String string1 = "%3QJ,64oK( zl$=-$";
      String string2 = ClassUtil.quotedOr(constructor0, "%3QJ,64oK( zl$=-$");
      assertNotNull(string2);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\"public java.io.IOException()\"", string2);
      
      boolean boolean1 = ClassUtil.hasClass(constructor0, class0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray2);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertNotSame(annotationArray2, annotationArray0);
      assertFalse(annotationArray2.equals((Object)annotationArray0));
      assertEquals(0, annotationArray2.length);
      
      Annotation[][] annotationArray3 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray3);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertNotSame(annotationArray3, annotationArray0);
      assertSame(annotationArray3, annotationArray2);
      assertFalse(annotationArray3.equals((Object)annotationArray0));
      assertEquals(0, annotationArray3.length);
      
      boolean boolean2 = false;
      constructor0.setAccessible(false);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      String string3 = constructor0.toGenericString();
      assertNotNull(string3);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("public java.io.IOException()", string3);
      
      Annotation[][] annotationArray4 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray4);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertSame(annotationArray4, annotationArray2);
      assertSame(annotationArray4, annotationArray3);
      assertNotSame(annotationArray4, annotationArray0);
      assertFalse(annotationArray4.equals((Object)annotationArray0));
      assertEquals(0, annotationArray4.length);
      
      Class<IOException> class3 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class3);
      assertNotNull(list0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.io.IOException", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(list0.contains(class1));
      assertSame(class0, class3);
      assertSame(class3, class0);
      
      Class<Object> class4 = Object.class;
      Type[] typeArray2 = ClassUtil.getGenericInterfaces(class4);
      assertNotNull(typeArray2);
      assertNotSame(typeArray2, typeArray0);
      assertNotSame(typeArray2, typeArray1);
      assertFalse(typeArray2.equals((Object)typeArray0));
      assertFalse(typeArray2.equals((Object)typeArray1));
      assertEquals(0, typeArray2.length);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("keyUniverse", "public java.io.IOException()");
      assertNotNull(sQLNonTransientException0);
      assertEquals("public java.io.IOException()", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: keyUniverse", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("keyUniverse", sQLNonTransientException0.getMessage());
      
      SQLWarning sQLWarning0 = new SQLWarning(",UNi^xI~aZeO`", sQLNonTransientException0);
      assertNotNull(sQLWarning0);
      assertEquals("public java.io.IOException()", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: keyUniverse", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("keyUniverse", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLWarning: ,UNi^xI~aZeO`", sQLWarning0.toString());
      assertEquals(",UNi^xI~aZeO`", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      
      SQLNonTransientException sQLNonTransientException1 = (SQLNonTransientException)sQLNonTransientException0.initCause(sQLWarning0);
      assertNotNull(sQLNonTransientException1);
      assertEquals("public java.io.IOException()", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: keyUniverse", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("keyUniverse", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLWarning: ,UNi^xI~aZeO`", sQLWarning0.toString());
      assertEquals(",UNi^xI~aZeO`", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("keyUniverse", sQLNonTransientException1.getMessage());
      assertEquals("java.sql.SQLNonTransientException: keyUniverse", sQLNonTransientException1.toString());
      assertEquals("public java.io.IOException()", sQLNonTransientException1.getSQLState());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException1, sQLNonTransientException0);
      
      SQLNonTransientException sQLNonTransientException2 = (SQLNonTransientException)ClassUtil.throwIfError(sQLNonTransientException0);
      assertNotNull(sQLNonTransientException2);
      assertEquals("public java.io.IOException()", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException: keyUniverse", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("keyUniverse", sQLNonTransientException0.getMessage());
      assertEquals("public java.io.IOException()", sQLNonTransientException2.getSQLState());
      assertEquals("keyUniverse", sQLNonTransientException2.getMessage());
      assertEquals(0, sQLNonTransientException2.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: keyUniverse", sQLNonTransientException2.toString());
      assertSame(sQLNonTransientException0, sQLNonTransientException2);
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException2, sQLNonTransientException0);
      assertSame(sQLNonTransientException2, sQLNonTransientException1);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientException2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyUniverse
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedExceptionTypes();
      assertNotNull(annotatedTypeArray0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotatedTypeArray0.length);
      
      Class<Annotation> class1 = Annotation.class;
      boolean boolean0 = constructor0.isAnnotationPresent(class1);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(boolean0);
      
      boolean boolean1 = constructor0.isAnnotationPresent(class1);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertNotNull(classArray0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, classArray0.length);
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, int0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.String()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      
      Class<CollectionType> class2 = CollectionType.class;
      boolean boolean2 = ClassUtil.isBogusClass(class2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = ClassUtil.isJacksonStdImpl(class0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Class<ArrayType> class3 = ArrayType.class;
      boolean boolean4 = ClassUtil.isObjectOrPrimitive(class3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      Class<?> class4 = ClassUtil.getEnclosingClass(class2);
      assertNull(class4);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("78l", "gxXU", 114);
      assertNotNull(sQLRecoverableException0);
      assertEquals(114, sQLRecoverableException0.getErrorCode());
      assertEquals("gxXU", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 78l", sQLRecoverableException0.toString());
      assertEquals("78l", sQLRecoverableException0.getMessage());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      assertEquals(114, sQLRecoverableException0.getErrorCode());
      assertEquals("gxXU", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 78l", sQLRecoverableException0.toString());
      assertEquals("78l", sQLRecoverableException0.getMessage());
      
      Spliterator<Throwable> spliterator0 = sQLRecoverableException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(114, sQLRecoverableException0.getErrorCode());
      assertEquals("gxXU", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 78l", sQLRecoverableException0.toString());
      assertEquals("78l", sQLRecoverableException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)ClassUtil.throwIfIOE(sQLRecoverableException0);
      assertNotNull(sQLRecoverableException1);
      assertEquals(114, sQLRecoverableException0.getErrorCode());
      assertEquals("gxXU", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 78l", sQLRecoverableException0.toString());
      assertEquals("78l", sQLRecoverableException0.getMessage());
      assertEquals(114, sQLRecoverableException1.getErrorCode());
      assertEquals("78l", sQLRecoverableException1.getMessage());
      assertEquals("gxXU", sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: 78l", sQLRecoverableException1.toString());
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) sQLRecoverableException0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) "78l";
      try { 
        constructor0.newInstance(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Short> class0 = Short.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, javaTypeArray0.length);
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      assertNotNull(typeResolutionContext_Basic0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, javaTypeArray0.length);
      
      Constructor<NoClass> constructor0 = null;
      Class<Error> class1 = Error.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      assertNotNull(collectionLikeType0);
      assertFalse(collectionLikeType0.isEnumType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasValueHandler());
      
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getContextAnnotation(class2);
      assertNull(annotation0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      assertNotNull(annotationMap0);
      assertEquals(1, annotationMap0.size());
      
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      assertNotNull(mapLikeType0);
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isAbstract());
      assertEquals(0, mapLikeType0.containedTypeCount());
      
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[1];
      // Undeclared exception!
      try { 
        annotationMap0.add((Annotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotationMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotatedExceptionTypes();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      ClassUtil.getClassDescription("nfxUT");
      Byte byte0 = new Byte((byte)0);
      ClassUtil.isJacksonStdImpl((Object) byte0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("`java.lang.String`", "/\"CO", sQLNonTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("y3yrb&W{0M}i0_", "", sQLNonTransientException1);
      sQLNonTransientException1.setNextException(sQLNonTransientException0);
      sQLFeatureNotSupportedException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // y3yrb&W{0M}i0_
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ClassUtil.nonNullString("");
      Class<Integer> class0 = Integer.class;
      ClassUtil.getPackageName(class0);
      Iterator<LinkedList<HashMap>> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Character character0 = new Character('Q');
      ClassUtil.nonNull(character0, character0);
      Class<String> class0 = String.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.nullOrToString(character0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Float float0 = new Float(2456.559F);
      Character character0 = new Character('8');
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(float0, character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findConstructor(class0, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) class0;
      Object object0 = ClassUtil.nonNull(objectArray0[0], objectArray0[1]);
      objectArray0[2] = object0;
      Class<MapType> class1 = MapType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      String string0 = "elementType";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("elementType", "elementType");
      sQLIntegrityConstraintViolationException0.setNextException((SQLException) null);
      sQLIntegrityConstraintViolationException0.fillInStackTrace();
      sQLIntegrityConstraintViolationException0.getStackTrace();
      sQLIntegrityConstraintViolationException0.spliterator();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // elementType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "g");
      MockError mockError0 = new MockError("\"G", sQLNonTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\"G", mockError0);
      StringWriter stringWriter0 = new StringWriter(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      sQLTimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      Throwable throwable0 = ClassUtil.getRootCause(sQLTimeoutException0);
      ClassUtil.nullOrToString(throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "M'D9GRmc+R9<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // M'D9GRmc+R9<
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.emptyIterator();
      Class<Integer> class1 = Integer.TYPE;
      Class<?> class2 = ClassUtil.wrapperType(class1);
      assertFalse(class2.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CollectionLikeType collectionLikeType0 = null;
      ClassUtil.nonNull((CollectionLikeType) null, (CollectionLikeType) null);
      ClassUtil.emptyIterator();
      String string0 = null;
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      sQLTransientException0.fillInStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLTransientException0.setStackTrace(stackTraceElementArray0);
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataException0.fillInStackTrace();
      sQLTransientException0.initCause(sQLDataException0);
      sQLTransientException0.getStackTrace();
      sQLTransientException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isLocalType(class0, false);
      String string0 = null;
      String string1 = "com.fasterxml.jackson.databind.jsontype.TypeSerializer";
      int[] intArray0 = new int[1];
      intArray0[0] = 93;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.jsontype.TypeSerializer", "com.fasterxml.jackson.databind.jsontype.TypeSerializer", 93, intArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, batchUpdateException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, sQLFeatureNotSupportedException0);
      mockRuntimeException0.getMessage();
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.classNameOf(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("keyUniverse");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      String string0 = "%pNHf%Jww$`D>C\\f";
      String string1 = "size";
      StackTraceElement stackTraceElement0 = new StackTraceElement("`java.lang.Class`", "%pNHf%Jww$`D>C\f", "size", 275);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string2 = "entrySet";
      StackTraceElement stackTraceElement1 = new StackTraceElement("%pNHf%Jww$`D>C\f", "entrySet", "", 3507);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("entrySet", "", "m8f13_<?h]SF-`#W';A", 3507);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("vals", "bZLi=*On31)RY7OtDe", "size", 275);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("bZLi=*On31)RY7OtDe", ")~#?99*V/:4J(D#", "lrylz23Vz[~-x[+.u", 275);
      stackTraceElementArray0[4] = stackTraceElement4;
      String string3 = ", problem: ";
      StackTraceElement stackTraceElement5 = null;
      try {
        stackTraceElement5 = new StackTraceElement(", problem: ", (String) null, (String) null, 3507);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      constructor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, true);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.createInstance(class1, true);
      String string0 = "{NA=UEM*g:";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("{NA=UEM*g:");
      ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      ClassUtil.isLocalType(class1, true);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.throwRootCauseIfIOE(sQLTransactionRollbackException0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(3, classUtil_CtorArray0.length);
  }
}
