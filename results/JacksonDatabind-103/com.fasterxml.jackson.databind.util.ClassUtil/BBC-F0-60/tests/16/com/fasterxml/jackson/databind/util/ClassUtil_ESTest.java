/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:42:55 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.net.URI;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.primitiveType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getDeclaringClass(class1);
      Class<Integer> class2 = Integer.class;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      ClassUtil.findConstructor(class2, true);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Object> class1 = Object.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3517);
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class1, false);
      TypeBindings typeBindings0 = TypeBindings.create(class1, list0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      MockError mockError0 = new MockError("[]");
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(mockError0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.isBogusClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper1 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 512, pipedReader0, objectMapper1, charsToNameCanonicalizer0, (char[]) null, 96, 0, true);
      readerBasedJsonParser0.getSchema();
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 11, objectReader0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON");
      SQLWarning sQLWarning0 = new SQLWarning("JSON", sQLTimeoutException0);
      sQLTimeoutException0.getSuppressed();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "JSON", (Throwable) sQLWarning0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      Class<InputStream> class1 = InputStream.class;
      ClassUtil.nameOf(class1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<JsonNode> class0 = JsonNode.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<Error> class1 = Error.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class1, false);
      ClassUtil.classOf(list0);
      ClassUtil.getDeclaredFields(class1);
      Class<Byte> class2 = Byte.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.isBogusClass(class4);
      Class<NoClass> class5 = NoClass.class;
      ClassUtil.findEnumType(class5);
      Short short0 = new Short((short)20);
      ClassUtil.nullOrToString(short0);
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.defaultValue(class3);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lang.Short@0000000001", "enum", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "hPs*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hPs*
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Short");
      ClassUtil.findSuperClasses((Class<?>) null, class0, true);
      ClassUtil.quotedOr((Object) null, (String) null);
      ClassUtil.nonNullString("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      ClassUtil.classNameOf((Object) null);
      ClassUtil.nameOf((Class<?>) null);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getEnclosingClass(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.createInstance(class2, true);
      Class<Float> class3 = Float.class;
      ClassUtil.findRawSuperTypes(class3, (Class<?>) null, true);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Boolean> enumMap0 = new EnumMap<AccessPattern, Boolean>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, (Boolean) null);
      enumMap0.values();
      ClassUtil.findEnumType(enumMap0);
      Class<JsonNode> class1 = JsonNode.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, false);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class1, class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, Boolean> enumMap0 = new EnumMap<AccessPattern, Boolean>(class2);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLException sQLException0 = new SQLException("1TqI(=+cz[3", "1TqI(=+cz[3");
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "1TqI(=+cz[3");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getConstructors(class0);
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" is not a primitive type", " is not a primitive type");
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<AccessPattern> class1 = null;
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.canBeABeanType(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.findEnumType(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.nameOf(class2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackso");
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      try { 
        ClassUtil.throwRootCauseIfIOE(iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.nullOrToString((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Long> class0 = Long.TYPE;
      ClassUtil.primitiveType(class0);
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("ozvWg=p?SpxFC2's#", class0, "java.lang.Error");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver` from String \"ozvWg=p?SpxFC2's#\": java.lang.Error
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.verifyMustOverride(class0, accessPattern0, (String) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getPackageName(class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayType> class2 = ArrayType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class2);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      typeFactory0.constructRawCollectionLikeType(class2);
      ArrayType arrayType1 = ArrayType.construct((JavaType) arrayType0, typeBindings0);
      ArrayType arrayType2 = arrayType1.withStaticTyping();
      Class<?> class3 = ClassUtil.rawClass(arrayType2);
      ClassUtil.getDeclaredMethods(class3);
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class4);
      ClassUtil.getClassMethods(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4104);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(class2, placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      DeserializationFeature[] deserializationFeatureArray1 = new DeserializationFeature[2];
      deserializationFeatureArray1[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      deserializationFeatureArray1[1] = deserializationFeature1;
      ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray1);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[5];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      formatFeatureArray0[3] = formatFeature0;
      formatFeatureArray0[4] = formatFeature0;
      ObjectReader objectReader2 = objectReader1.withFeatures(formatFeatureArray0);
      DeserializationFeature deserializationFeature2 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      DeserializationFeature[] deserializationFeatureArray2 = new DeserializationFeature[3];
      deserializationFeatureArray2[0] = deserializationFeature1;
      deserializationFeatureArray2[1] = deserializationFeature2;
      deserializationFeatureArray2[2] = deserializationFeature2;
      ObjectReader objectReader3 = objectReader2.with(deserializationFeature2, deserializationFeatureArray2);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("name");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false);
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.append((CharSequence) "name");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-128), objectReader3, mockPrintStream1);
      uTF8JsonGenerator0.getCharacterEscapes();
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Short> class0 = Short.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Float> class1 = Float.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class1, class0, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class2, false);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      ClassUtil.getOuterClass(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isConcrete(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<MinimalClassNameIdResolver> class1 = MinimalClassNameIdResolver.class;
      ClassUtil.isConcrete(class1);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.findClassAnnotations(class1);
      Class<Error> class2 = Error.class;
      ClassUtil.findClassAnnotations(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      ClassUtil.isLocalType(class2, true);
      ClassUtil.nonNull((String) null, (String) null);
      Class<Object> class4 = Object.class;
      ClassUtil.getGenericSuperclass(class4);
      ClassUtil.getConstructors(class3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("hO", class3, (String) null);
      SQLDataException sQLDataException0 = new SQLDataException(jsonMappingException0);
      ClassUtil.throwIfRTE(sQLDataException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Double` from String \"hO\": null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<JsonNode> class0 = JsonNode.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class1, class0);
      mapType0.withTypeHandler(class0);
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.emptyIterator();
      ClassUtil.canBeABeanType(class0);
      Iterator<Character> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.quotedOr(iterator0, "com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ijS[h84EC1dLLoe", " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append('r');
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", "Y_bo]DBBs 1FJ(n", 12, sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) mockFileReader0, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getClassMethods(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.findRawSuperTypes(class1, class1, false);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.defaultValue(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
      Class<Float> class1 = Float.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.canBeABeanType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<String>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      String string0 = null;
      ClassUtil.quotedOr((Object) null, (String) null);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.emptyIterator();
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, " has no default (no arg) constructor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(26, 26);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory1.constructMapType(class0, class0, class0);
      MapType mapType1 = mapType0.withContentTypeHandler(lRUMap0);
      ClassUtil.findSuperTypes((JavaType) mapType1, (Class<?>) class0, true);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class1);
      MapType mapType1 = mapType0.withTypeHandler(class0);
      MapType mapType2 = mapType1.withStaticTyping();
      MapType mapType3 = mapType2.withContentTypeHandler(class0);
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperTypes((JavaType) mapType3, (Class<?>) class2, false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassUtil.emptyIterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException("net.sf.cglib.proxy.", "Lm&`{bEmxNW1''P7W", sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLDataException0);
      sQLTransientConnectionException0.printStackTrace();
      sQLTransientConnectionException0.getSuppressed();
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Cannot figure out type for EnumMap (odd JDK platform?)", "Cannot figure out type for EnumMap (odd JDK platform?)");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Cannot figure out type for EnumMap (odd JDK platform?)");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "Cannot figure out type for EnumMap (odd JDK platform?)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.nameOf(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, iOException0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Nulls nulls0 = Nulls.FAIL;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forValueNulls(nulls0);
      JsonSetter.Value jsonSetter_Value1 = JsonSetter.Value.merge(jsonSetter_Value0, jsonSetter_Value0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) iOException0;
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) byteArrayBuilder0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) "";
      Class<Object> class1 = Object.class;
      Object object1 = ClassUtil.createInstance(class1, true);
      objectArray0[6] = object1;
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.format("", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-671959283), objectMapper1, mockPrintStream1, byteArrayBuilder0.NO_BYTES, (-1), true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Closeable) byteArrayBuilder0, (Exception) iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)23;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-8);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)60);
      byteArrayInputStream0.close();
      ClassUtil.nullOrToString(byteArrayInputStream0);
      Class<?> class0 = ClassUtil.classOf(byteArrayInputStream0);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.reset();
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isLocalType((Class<?>) null, true);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.java.lang.Long", "net.sf.cglib.proxy.java.lang.Long");
      Class<MapType> class0 = MapType.class;
      ClassUtil.getPackageName(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLNonTransientConnectionException0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: net.sf.cglib.proxy.java.lang.Long
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.evosuite.runtime", (String) null);
      MockIOException mockIOException0 = new MockIOException(sQLTransientException0);
      sQLTransientException0.addSuppressed(mockIOException0);
      sQLTransientException0.initCause(mockIOException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("5 |>8?m5~", "5 |>8?m5~");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      File file0 = MockFile.createTempFile("org.hibernate.proxy.", "net.sf.cglib.proxy.java.io.IOException");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator(file0, jsonEncoding0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, (String) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[4];
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_CREATORS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.INFER_PROPERTY_MUTATORS;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES;
      mapperFeatureArray0[3] = mapperFeature3;
      ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "Failed to get property '");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to get property '
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<JsonNode> class0 = JsonNode.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.JsonNode, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 60);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "[mWr/on0TMhTU<wA");
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      objectMapper1.disable(serializationFeature0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      typeFactory0.constructRawCollectionLikeType(class1);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) dataOutputStream0);
      MockThrowable mockThrowable0 = new MockThrowable("\"%s\"");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("YT!/m", "$I", 3193, mockThrowable0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLTransientConnectionException: YT!/m
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("J~m_", "[]x%c?h", intArray0);
      batchUpdateException0.getNextException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, (Throwable) null);
      ClassUtil.throwIfError(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("i206,\"U<", (Class<?>) null, "java.lang.StackTrace");
      SQLTransientException sQLTransientException0 = new SQLTransientException("i206,\"U<", "i2j|!", 2, jsonMappingException0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLTransientException0);
      ClassUtil.throwIfRTE(throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ReferenceType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<JsonNode> class0 = JsonNode.class;
      Constructor<JsonNode> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      MockError mockError0 = new MockError("^WL?~oNaCN");
      ClassUtil.quotedOr(mockError0, "com.fasterxml.jackson.databind.util.RawValue");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.emptyIterator();
      Class<MapType> class1 = MapType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<String> class2 = String.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class2, false);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "zJ(CcE");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<Object> class1 = Object.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<IOException> class2 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class2, false);
      ClassUtil.getRootCause(iOException0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassUtil.backticked("{kg`+4}+q%'j,");
      Class<Long> class0 = Long.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getConstructors(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.isObjectOrPrimitive(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.getDeclaredFields(class3);
      Class<String> class4 = String.class;
      ClassUtil.getDeclaringClass(class4);
      ClassUtil.primitiveType(class2);
      Class<Short> class5 = Short.class;
      ClassUtil.getDeclaredFields(class5);
      Class<String> class6 = String.class;
      ClassUtil.isNonStaticInnerClass(class6);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.classNameOf((Object) null);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      AccessPattern accessPattern2 = AccessPattern.CONSTANT;
      AccessPattern accessPattern3 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern4 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern1, accessPattern2, accessPattern3, accessPattern0, accessPattern4);
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      enumSet1.add(accessPattern1);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "[mWr/on0TMhTU<wA");
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      objectMapper1.disable(serializationFeature0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      objectMapper0.readerFor((JavaType) collectionLikeType0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper1);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      EnumSet.complementOf(enumSet0);
      int int0 = (-2082);
      String string0 = "com.fasterxml.jackson.databind.type.TypeParser";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.type.TypeParser", "com.fasterxml.jackson.databind.type.TypeParser", (-2082));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      enumSet0.add(accessPattern0);
      EnumSet.complementOf(enumSet0);
      Class<MapType> class0 = MapType.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getClassMethods(class0);
      String string0 = "net.sf.cglib.proxy.com.fasterxml.jackson.databind.jsontype.TypeIdResolver";
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.jsontype.TypeIdResolver");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientException0);
      sQLTransientException0.getStackTrace();
      sQLFeatureNotSupportedException0.fillInStackTrace();
      sQLTransientException0.initCause(sQLFeatureNotSupportedException0);
      sQLTransientException0.getStackTrace();
      // Undeclared exception!
      ClassUtil.getRootCause(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      Class<LongNode> class0 = LongNode.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<String> class1 = String.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Byte> class2 = Byte.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Error> class0 = Error.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader0);
      MockFile mockFile0 = new MockFile((String) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("M3FF:U*Lm1?", "dv00aK?`1");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, sQLTransactionRollbackException0);
      SQLWarning sQLWarning0 = new SQLWarning("[yo|I`DsL!", "net.sf.cglib.proxy.java.lang.Error", 1, sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: [yo|I`DsL!
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Throwable throwable0 = null;
      ClassUtil.throwIfError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.backticked("FuD");
      ClassUtil.throwIfRTE(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      EnumSet<AccessPattern> enumSet0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      MockFile mockFile0 = new MockFile("JSON");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      jsonFactory1.createGenerator((OutputStream) bufferedOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonFactory0.enable(jsonParser_Feature0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((File) mockFile0, jsonEncoding0);
      mockFile0.setWritable(false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = 'O';
      jsonFactory0.createParser(charArray0);
      jsonGeneratorDelegate0.getOutputContext();
      URL uRL0 = mockFile0.toURL();
      jsonFactory1.createParser(uRL0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "java.lang.Short");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.Short
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      Class<Float> class1 = Float.TYPE;
      ClassUtil.defaultValue(class1);
      JavaType[] javaTypeArray0 = new JavaType[1];
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<Double> class0 = Double.class;
      ClassUtil.findConstructor(class0, false);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern2 = AccessPattern.CONSTANT;
      EnumSet.of(accessPattern0, accessPattern1, accessPattern0, accessPattern2, accessPattern0);
      ClassUtil.quotedOr((Object) null, "pa|wp");
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.toString();
      SQLWarning sQLWarning0 = new SQLWarning(mockRuntimeException0);
      mockRuntimeException0.addSuppressed(sQLWarning0);
      mockRuntimeException0.getStackTrace();
      mockRuntimeException0.fillInStackTrace();
      mockRuntimeException0.getMessage();
      mockRuntimeException0.fillInStackTrace();
      mockRuntimeException0.getStackTrace();
      ClassUtil.getClassDescription(mockRuntimeException0);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findEnumType(class0);
      Throwable throwable0 = ClassUtil.throwIfIOE(mockRuntimeException0);
      Class<MapType> class1 = MapType.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassUtil.findClassAnnotations(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.getStackTrace();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Default constructor for ");
      ClassUtil.throwIfError(mockIOException0);
      Long.getLong("Default constructor for ");
      Class<String> class0 = String.class;
      ClassUtil.hasClass((Object) null, class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockIOException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.classNameOf(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = Boolean.valueOf("`java.lang.Class`");
      ClassUtil.classNameOf(boolean0);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "com.fasterxml.jackson.databind.ser.std.BooleanSerializer$AsNumber");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Object> class1 = Object.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.findSuperTypes(class0, class1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class2);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      deserializerFactoryConfig0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-708825413));
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(placeholderForType0, "com.fasterxml.jackson.databind.JsonSerializer");
      MockIOException mockIOException0 = new MockIOException("[null]", jsonMappingException0);
      Throwable throwable0 = ClassUtil.throwIfRTE(mockIOException0);
      Throwable throwable1 = ClassUtil.throwIfError(throwable0);
      try { 
        ClassUtil.throwIfIOE(throwable1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getOuterClass(class0);
      MockError mockError0 = new MockError(">-}");
      MockThrowable mockThrowable0 = new MockThrowable("FGP|SiOY<", mockError0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("net.sf.cglib.proxy.java.lang.RuntimeException", "FGP|SiOY<", 3, mockThrowable0);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLInvalidAuthorizationSpecException0);
      SQLException sQLException0 = new SQLException("FGP|SiOY<", "2:Jp,W8i_95@1X", throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.quotedOr(class0, "net.sf.cglib.proxy.java.lang.RuntimeException");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-708825413));
      defaultDeserializationContext_Impl0.missingTypeIdException(placeholderForType0, "com.fasterxml.jackson.databind.JsonSerialier");
      MockIOException mockIOException0 = new MockIOException();
      ClassUtil.throwIfRTE(mockIOException0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-708825413));
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(placeholderForType0, "com.fasterxml.jackson.databind.JsonSerializer");
      MockIOException mockIOException0 = new MockIOException("[null]", jsonMappingException0);
      ClassUtil.throwIfRTE(mockIOException0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.nameOf(class0);
      ClassUtil.getDeclaredFields(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute("`java.lang.Character`", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Integer.getInteger("array", (-6));
      ClassUtil.backticked("array");
      Class<Void> class1 = Void.class;
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 60);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "[mWr/on0TMhTU<wA");
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      ObjectReader objectReader0 = objectMapper2.readerFor((JavaType) collectionLikeType0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      String string0 = "net.sf.cglib.proxy.java.io.IOException";
      SQLTransientException sQLTransientException0 = new SQLTransientException("==! %`H(hyGA", "net.sf.cglib.proxy.java.io.IOException", 1536);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) byteArrayBuilder0, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: ==! %`H(hyGA
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.classNameOf(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern1, accessPattern1, accessPattern0, accessPattern2, accessPattern0);
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      enumSet0.add(accessPattern1);
      ClassUtil.findEnumType(enumSet1);
      ClassUtil.getClassDescription(enumSet1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.emptyIterator();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ClassUtil.findSuperTypes(class0, class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.createInstance(class2, false);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1336));
      IOContext iOContext0 = new IOContext(bufferRecycler0, placeholderForType0, true);
      SQLDataException sQLDataException0 = new SQLDataException();
      MockException mockException0 = new MockException(sQLDataException0);
      ClassUtil.getRootCause(mockException0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byteArrayBuilder0.appendThreeBytes((-1654975209));
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      Short short0 = new Short((short)1);
      ClassUtil.getClassDescription(short0);
      tokenFilter0.includeString("`java.lang.Short`");
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSON", "JSON", (-2082));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<String> class2 = String.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      ClassUtil.getClassMethods(class2);
      Class<Float> class3 = Float.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getOuterClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getEnclosingClass(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.canBeABeanType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Boolean boolean0 = new Boolean(true);
      ClassUtil.classNameOf(boolean0);
      Class<Double> class1 = Double.class;
      ClassUtil.findEnumType(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.isNonStaticInnerClass(class2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-490));
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.hasClass(placeholderForType0, class3);
      Class<Long> class4 = Long.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getOuterClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.canBeABeanType(class0);
      Class<Long> class2 = Long.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.emptyIterator();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern1, accessPattern0, accessPattern2);
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      AccessPattern accessPattern3 = AccessPattern.CONSTANT;
      enumSet1.add(accessPattern3);
      ClassUtil.findEnumType(enumSet1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findEnumType(class0);
      Class<Long> class2 = Long.class;
      ClassUtil.findRawSuperTypes(class2, class1, false);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getEnclosingClass(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Double> class1 = Double.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class2, false);
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Float> class0 = Float.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getConstructors(class0);
      ClassUtil.isConcrete(class0);
      Class<CollectionType> class1 = CollectionType.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      Class<Error> class2 = Error.class;
      ClassUtil.isLocalType(class2, false);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.ser.std.BooleanSerializer$AsNumber", "elementType", 4096);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Double> class1 = Double.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ClassUtil.getConstructors(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getConstructors(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isConcrete(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Long> class1 = Long.class;
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<Double> class3 = Double.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getOuterClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getEnclosingClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.findSuperTypes((JavaType) null, class3, false);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      beanSerializerBuilder0.getClassInfo();
      Class<JsonMappingException> class4 = JsonMappingException.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class4, ".O`COZ`]'X", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getClassDescription(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.getEnclosingClass(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.findConstructor(class3, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getPackageName(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isLocalType(class2, true);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isProxyType(class3);
      Class<String> class4 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("aBZQa]4U^jHiD&#", "aBZQa]4U^jHiD&#", (-32768), (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning(sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.spliterator();
      sQLWarning0.spliterator();
      sQLFeatureNotSupportedException0.setNextException(sQLWarning0);
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
      Class<Float> class0 = Float.class;
      ClassUtil.nameOf(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "`java.lang.Float`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `java.lang.Float`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "String \"null\"");
      ClassUtil.emptyIterator();
      Class<ArrayType> class0 = ArrayType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getPackageName(class0);
      SQLWarning sQLWarning0 = new SQLWarning("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", "VweHI)q?", (-1744674775));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("#|wLv2Fol:+f", sQLWarning0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLSyntaxErrorException0);
      ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      ClassUtil.emptyIterator();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#rJ");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintWriter0, (String) null, jsonLocation0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.getStackTrace();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Default constructor for ");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockIOException0;
      mockPrintStream0.print(3974.996F);
      objectArray0[1] = (Object) "Default constructor for ";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "Default constructor for ";
      objectArray0[4] = (Object) mockIOException0;
      objectArray0[5] = (Object) "Default constructor for ";
      objectArray0[6] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("Default constructor for ", objectArray0);
      mockIOException0.printStackTrace(printStream0);
      ClassUtil.throwIfError(mockIOException0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      JsonFactory jsonFactory4 = jsonFactory3.setRootValueSeparator("JSON");
      JsonParser jsonParser0 = jsonFactory4.createParser((byte[]) null, (-1), (-1));
      Class<Integer> class0 = Integer.class;
      defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<LongNode> class0 = LongNode.class;
      ClassUtil.getClassMethods(class0);
      DeserializationContext deserializationContext0 = null;
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      ClassUtil.throwIfError(mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getClassDescription(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.getEnclosingClass(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.findConstructor(class3, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<AccessPattern> class4 = AccessPattern.class;
      ClassUtil.isObjectOrPrimitive(class4);
      ClassUtil.findSuperTypes((JavaType) null, class4, true);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<LongNode> class5 = LongNode.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class5, ".O`COZ`]'X", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<MapType> class1 = MapType.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      ClassUtil.isObjectOrPrimitive(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yHIGiZ");
      ClassUtil.getOuterClass(class2);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.throwIfRTE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      jsonFactory1.createGenerator((DataOutput) null, jsonEncoding0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JSON", "JSON", 1928, hashMap0, sQLTransientConnectionException0);
      sQLClientInfoException0.setNextException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      HashMap<String, JsonNode> hashMap1 = new HashMap<String, JsonNode>(hashMap0);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap1);
      ArrayNode arrayNode0 = objectNode0.putArray(") out of range of Java short");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_INT: JSON
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "NULL");
      sQLTimeoutException0.spliterator();
      MockError mockError0 = new MockError(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      Method method0 = null;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isJacksonStdImpl(class1);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Short short0 = new Short((short)1274);
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      Method method0 = null;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.findEnumType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Short short0 = new Short((short)1274);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Long> class1 = Long.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Integer> class2 = Integer.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ClassUtil.findClassAnnotations(class2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("jO", (Throwable) null);
      boolean boolean0 = new Boolean(false);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Short short0 = new Short((short)1274);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, false);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      ClassUtil.isLocalType(class0, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "QI/N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      boolean boolean0 = true;
      ClassUtil.isLocalType((Class<?>) null, true);
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      SQLDataException sQLDataException0 = new SQLDataException("serialVersionUID");
      Throwable throwable0 = sQLDataException0.fillInStackTrace();
      sQLDataException0.spliterator();
      SQLDataException sQLDataException1 = new SQLDataException("{&N@'?4r=s&?>!'?", "serialVersionUID");
      sQLDataException1.addSuppressed(throwable0);
      sQLDataException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // serialVersionUID
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nonNullString(",[j6kS");
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isLocalType(class0, true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0, "\"%s\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \"%s\"
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      Class<Double> class3 = Double.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<MapType> class1 = MapType.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.isProxyType(class0);
      Class<Void> class2 = Void.TYPE;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.hasEnclosingMethod(class2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getPackageName(class2);
      Class<Character> class3 = Character.TYPE;
      ClassUtil.isLocalType(class3, false);
      ClassUtil.isProxyType(class0);
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      try { 
        ClassUtil.createInstance(class4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      ClassUtil.rawClass(javaType0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.findClassAnnotations(class1);
      Class<Error> class2 = Error.class;
      ClassUtil.findClassAnnotations(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      ClassUtil.isLocalType(class2, true);
      ClassUtil.nonNull((String) null, (String) null);
      Class<Object> class4 = Object.class;
      ClassUtil.getGenericSuperclass(class4);
      ClassUtil.getConstructors(class3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.nullOrToString(class3);
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      objectMapper0.clearProblemHandlers();
      char[] charArray0 = new char[0];
      SQLDataException sQLDataException0 = new SQLDataException("lS]I.W!S~6Yb?2}w", "keyType");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.getEnclosingClass(class0);
      classUtil_Ctor0.getConstructor();
      classUtil_Ctor0.getParamCount();
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isConcrete(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "JSON");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.nonNullString((String) null);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findEnumType(class2);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      sQLDataException0.fillInStackTrace();
      Throwable throwable0 = sQLDataException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        sQLDataException0.addSuppressed(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Self-suppression not permitted
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getOuterClass(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, classUtil_Ctor0, "h#,:PzsFt3x{O");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.util.ClassUtil$Ctor (of class com.fasterxml.jackson.databind.type.MapLikeType) must override method 'h#,:PzsFt3x{O'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.isLocalType(class1, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findEnumType(class2);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      sQLDataException0.fillInStackTrace();
      sQLDataException0.spliterator();
      SQLDataException sQLDataException1 = new SQLDataException((String) null, (String) null);
      sQLDataException0.addSuppressed(sQLDataException1);
      sQLDataException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) "zJ(CcE");
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, false);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Module> class0 = Module.class;
      ClassUtil.getEnclosingClass(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Float float0 = new Float(0.0);
      ClassUtil.classNameOf(float0);
      ClassUtil.getPackageName(class0);
      ClassUtil.isBogusClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(842);
      placeholderForType0.actualType();
      ClassUtil.rawClass((JavaType) null);
      PlaceholderForType placeholderForType1 = new PlaceholderForType(842);
      ClassUtil.isJacksonStdImpl((Object) placeholderForType1);
      ClassUtil.backticked((String) null);
      Class<Void> class1 = Void.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.isBogusClass(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = (-319);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("EH(4O", "NULL", (-319));
      Throwable throwable0 = ClassUtil.getRootCause(sQLTimeoutException0);
      Class<Double> class0 = Double.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.throwIfRTE(throwable0);
      Class<Double> class1 = Double.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      Class<MapType> class3 = MapType.class;
      TypeBindings typeBindings0 = null;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      ArrayType arrayType0 = typeFactory1.constructArrayType((JavaType) simpleType0);
      arrayType0.withContentValueHandler(class2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-319));
      StringBuilder stringBuilder0 = new StringBuilder("NULL");
      placeholderForType0.getGenericSignature(stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) "EH(4O", 1809, 1809);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 1809, end 1809, s.length() 5
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getClassDescription(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.getEnclosingClass(class2);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      Class<MapLikeType> class4 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class4, class4, false);
      Class<PlaceholderForType> class5 = PlaceholderForType.class;
      ClassUtil.isLocalType(class5, false);
      ClassUtil.nonNull((String) null, "array");
      ClassUtil.getGenericSuperclass(class3);
      Class<NoClass> class6 = NoClass.class;
      ClassUtil.getConstructors(class6);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAdditionalDeserializers((Deserializers) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null Deserializers
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getClassDescription(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.getEnclosingClass(class2);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.findEnumType(class3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = null;
      try {
        beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getClassDescription((Object) null);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findEnumType(class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      LongNode longNode0 = new LongNode(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, longNode0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 16384;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(longNode0);
      Locale locale0 = Locale.UK;
      ObjectReader objectReader1 = objectReader0.with(locale0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      objectReader1.without(deserializationFeature0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "unknown", false, 'M', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 7)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.isProxyType(class0);
      Class<Void> class1 = Void.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getNextException();
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Short short0 = new Short((short) (-4459));
      Short short1 = new Short((short) (-4459));
      ClassUtil.nonNull(short0, short1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.canBeABeanType(class0);
      Class<Long> class2 = Long.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<TypeIdResolver> class3 = TypeIdResolver.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.isCollectionMapOrArray(class4);
      ClassUtil.emptyIterator();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException((String) null, "MR3fU'],P*6", 0, sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Short short0 = new Short((short)1274);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, false);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.nameOf(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, false);
      Class<Error> class4 = Error.class;
      ClassUtil.getGenericInterfaces(class4);
      ClassUtil.isObjectOrPrimitive(class3);
      ClassUtil.getGenericSuperclass(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      StringBuilder stringBuilder0 = new StringBuilder("`java.lang.RuntimeException`");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(752, (CharSequence) "`java.lang.RuntimeException`", 752, (-1006));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 752
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.classOf(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<Double> class3 = Double.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      ClassUtil.getDeclaredMethods(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("#VPA@+^_&%x", "#VPA@+^_&%x");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransactionRollbackException0, "yb0}2uh{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // yb0}2uh{
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.isConcrete(class1);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.getStackTrace();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Default constructor for ");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockIOException0;
      mockPrintStream0.print(3974.996F);
      objectArray0[1] = (Object) "Default constructor for ";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "Default constructor for ";
      objectArray0[4] = (Object) mockIOException0;
      objectArray0[5] = (Object) "Default constructor for ";
      objectArray0[6] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("Default constructor for ", objectArray0);
      mockIOException0.printStackTrace(printStream0);
      ClassUtil.throwIfError(mockIOException0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.hasClass(objectArray0[0], class0);
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<Float> class1 = Float.TYPE;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.wrapperType(class1);
      System.setCurrentTimeMillis(2409L);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) "zJ(CcE");
      Class<SimpleType> class0 = SimpleType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class1, class2);
      String string0 = "I";
      String string1 = "Default constructor for ";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, "I", 115);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Default constructor for ", "!|/pD:Cu!|?g.[j)", sQLTransientConnectionException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("I", "jp~", 115, sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, "I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // I
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("-\"r&h42qZ&16X\"~Ot", "-\"r&h42qZ&16X\"~Ot");
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.getSuppressed();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -\"r&h42qZ&16X\"~Ot
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("-\"r&h42qZ&16X\"~Ot", "-\"r&h42qZ&16X\"~Ot");
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      Class<MapLikeType> class0 = MapLikeType.class;
      boolean boolean0 = true;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.classNameOf(class0);
      Class<Double> class1 = Double.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.getClassMethods(class3);
      Class<Long> class4 = Long.class;
      ClassUtil.findRawSuperTypes(class4, class2, false);
      Class<MapType> class5 = MapType.class;
      ClassUtil.isNonStaticInnerClass(class5);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<String> class1 = String.class;
      ClassUtil.nameOf(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      ClassUtil.isObjectOrPrimitive(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, true);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getOuterClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      MockException mockException0 = new MockException(sQLDataException0);
      ClassUtil.getRootCause(sQLDataException0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1336));
      IOContext iOContext0 = new IOContext(bufferRecycler0, placeholderForType0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      jsonFactory0._getBufferRecycler();
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      iOContext0.allocTokenBuffer();
      TimeZone timeZone0 = TimeZone.getTimeZone("JSON");
      ObjectReader objectReader1 = objectReader0.with(timeZone0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, objectReader1, (OutputStream) null);
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      try { 
        jsonFactory0.createParser(uRL0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getPackageName(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      boolean boolean0 = true;
      ClassUtil.isLocalType(class2, true);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isProxyType(class3);
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      try { 
        ClassUtil.createInstance(class4, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isProxyType(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.nameOf(class1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)23;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<String> class2 = String.class;
      ClassUtil.getGenericInterfaces(class2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class3);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ieEH", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.SimpleType");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException: ieEH
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      classUtil_Ctor0.getParamCount();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper1, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(0);
      char[] charArray0 = new char[0];
      uTF8JsonGenerator0.writeRawValue(charArray0, 1, (-511));
      SQLDataException sQLDataException0 = new SQLDataException("lS]I.W!S~6Yb?2}w", "keyType");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getGenericSuperclass(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("net.sf.cglib.proxy.", "ZERO_LENGTH_ENUM_ARRAY", 1849);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getClassDescription(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.hibernate.proxy.", "vals", 3);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, constructor0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectReader1, byteArrayOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("vals", "9Gh9i^I)y");
      SQLTransientException sQLTransientException1 = new SQLTransientException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLTransientException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: java.sql.SQLTransientConnectionException: vals
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperTypes(class2, class1, list0);
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      byteArrayBuilder0.resetAndGetFirstSegment();
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      jsonFactory1.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("_:fATO*%b8v", "JSON", (-2082));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: _:fATO*%b8v
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) "zJ(CcE");
      Class<Object> class0 = Object.class;
      ClassUtil.findSuperTypes(class0, class0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Short short0 = new Short((short)1274);
      ClassUtil.nullOrToString(short0);
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      Method method0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.nonNullString((String) null);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findEnumType(class2);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      sQLDataException0.fillInStackTrace();
      Throwable throwable0 = sQLDataException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        sQLDataException0.addSuppressed(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Self-suppression not permitted
         //
         verifyException("java.lang.Throwable", e);
      }
  }
}
