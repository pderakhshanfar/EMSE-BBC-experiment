/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:54:16 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayInputStream;
import java.io.Closeable;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.wrapperType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      int int0 = 1536;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Non-generic Map class %s did not resolve to something with key type %s but %s ", "", 1536, (Map<String, ClientInfoStatus>) null, sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "", (Throwable) sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)68, 2244);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.CANADA_FRENCH;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, objectMapper1, pipedOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      MockIOException mockIOException0 = new MockIOException("s:Yv;l");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isLocalType(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<ArrayType> class1 = ArrayType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) resolvedRecursiveType0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      resolvedRecursiveType0.getSelfReferencedType();
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[6] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[7] = (JavaType) resolvedRecursiveType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[7]);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ReferenceType referenceType2 = referenceType1.withValueHandler(referenceType0);
      MockError mockError0 = new MockError();
      ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType2, (TypeBindings) null, (Object) javaTypeArray0[5], (Object) mockError0);
      ClassUtil.rawClass(arrayType0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<InputStream>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isConcrete(class0);
      Class<ByteArrayInputStream> class1 = ByteArrayInputStream.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 1);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nullOrToString(class0);
      ClassUtil.wrapperType(class0);
      Random.setNextRandom(13);
      Class<Double> class1 = Double.class;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)84;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isBogusClass(class1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("java.lang.Class@0000000001", "java.lang.Class@0000000001", 13);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.deser.impl.CreatorCollector$StdTypeConstructor");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("net.sf.cglib.proxy.java.lang.Float");
      sQLTransientConnectionException0.initCause(sQLIntegrityConstraintViolationException0);
      ClassUtil.getRootCause(sQLTransientConnectionException0);
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      Class<Float> class3 = Float.class;
      ClassUtil.getOuterClass(class3);
      ClassUtil.findEnumType(class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Byte byte0 = new Byte((byte)64);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byte0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (byte) (-7), (ObjectCodec) null, byteArrayBuilder0, byteArray0, (-1394), true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException: java.lang.Class@0000000001
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      EnumSet.copyOf(enumSet0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumSet0.add(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassUtil.nonNullString("net.sf.cglib.proxy.java.io.ByteArrayInputStream");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "net.sf.cglib.proxy.java.io.ByteArrayInputStream");
      MockError mockError0 = new MockError(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(mockError0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // net.sf.cglib.proxy.java.io.ByteArrayInputStream
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<Object>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Float> class0 = Float.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Byte> class1 = Byte.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<ObjectIdGenerators.UUIDGenerator> class2 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.getDeclaringClass(class2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("m!1@yQP?7xdxUk", "m!1@yQP?7xdxUk", (-2004962436), (int[]) null);
      DataTruncation dataTruncation0 = new DataTruncation((-2004962436), false, true, (-4), (-5), batchUpdateException0);
      batchUpdateException0.initCause(dataTruncation0);
      // Undeclared exception!
      ClassUtil.getRootCause(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.lang.Byte", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      AccessPattern[] accessPatternArray0 = new AccessPattern[0];
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      Stack<IOException> stack0 = new Stack<IOException>();
      enumSet0.retainAll(stack0);
      ClassUtil.findEnumType(enumSet0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1126);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        placeholderForType0.withValueHandler(mockFileInputStream0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(defaultPrettyPrinter1);
      Locale locale0 = Locale.FRANCE;
      ObjectMapper objectMapper2 = objectMapper1.setLocale(locale0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper3 = objectMapper2.setSerializerFactory(beanSerializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      deserializationFeatureArray0[1] = deserializationFeature1;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectMapper objectMapper4 = objectMapper3.disable(deserializationFeature0, deserializationFeatureArray0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper5 = objectMapper4.setDefaultPropertyInclusion(jsonInclude_Include0);
      objectMapper5.readerFor(class0);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "j+[\u0001i+ aX^'");
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<InputStream> class1 = InputStream.class;
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.primitiveType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findConstructor(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransientException sQLTransientException0 = new SQLTransientException(batchUpdateException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "2\"~YQKI$^+T&i-7G", (Throwable) sQLTransientException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 2\"~YQKI$^+T&i-7G
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ByteArrayInputStream> enumMap0 = new EnumMap<AccessPattern, ByteArrayInputStream>(class0);
      enumMap0.values();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte) (-11);
      byteArray0[8] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      enumMap0.put(accessPattern0, byteArrayInputStream0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ByteArrayInputStream> enumMap0 = new EnumMap<AccessPattern, ByteArrayInputStream>(class0);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isProxyType(class0);
      Class<Character> class1 = Character.class;
      Class<Error> class2 = Error.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<Float> class3 = Float.class;
      ClassUtil.isBogusClass(class3);
      Class<AccessPattern> class4 = AccessPattern.class;
      EnumMap<AccessPattern, ByteArrayInputStream> enumMap0 = new EnumMap<AccessPattern, ByteArrayInputStream>(class4);
      ClassUtil.findEnumType(enumMap0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod((Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      boolean boolean0 = true;
      ClassUtil.isLocalType(class0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<ReferenceType> class1 = ReferenceType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("DQ[7U!gP5m.:Qs1/", class1, "DQ[7U!gP5m.:Qs1/");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ReferenceType` from String \"DQ[7U!gP5m.:Qs1/\": DQ[7U!gP5m.:Qs1/
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      AccessPattern[] accessPatternArray0 = new AccessPattern[0];
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(accessPattern0);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isLocalType(class0, false);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      MockError mockError0 = new MockError((String) null, sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "Class ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<ObjectIdGenerators.UUIDGenerator> class2 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      Locale locale0 = Locale.CHINESE;
      ObjectMapper objectMapper3 = objectMapper2.setLocale(locale0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper4 = objectMapper3.enable(serializationFeature0);
      Nulls nulls0 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forContentNulls(nulls0);
      ObjectMapper objectMapper5 = objectMapper4.setDefaultSetterInfo(jsonSetter_Value0);
      objectMapper5.readerFor(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CollectionType collectionType2 = collectionType1.withContentTypeHandler(collectionType0);
      CollectionType collectionType3 = collectionType0.withTypeHandler(class0);
      CollectionType collectionType4 = collectionType2.withContentValueHandler(collectionType3);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperTypes((JavaType) collectionType4, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      Short short0 = new Short((short)1541);
      objectIdGenerators_UUIDGenerator0.generateId(short0);
      objectIdGenerators_UUIDGenerator0.generateId(short0);
      Class<?> class0 = ClassUtil.classOf(objectIdGenerators_UUIDGenerator0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      SQLDataException sQLDataException0 = new SQLDataException("org.hibernate.proxy.java.lang.Short");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.java.lang.Short", sQLDataException0);
      ClassUtil.nullOrToString(mockRuntimeException0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      HashMap<String, SettableBeanProperty> hashMap0 = new HashMap<String, SettableBeanProperty>();
      AbstractDeserializer abstractDeserializer0 = null;
      try {
        abstractDeserializer0 = new AbstractDeserializer(beanDeserializerBuilder0, basicBeanDescription0, hashMap0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      Short short0 = new Short((short)1541);
      objectIdGenerators_UUIDGenerator0.generateId(short0);
      objectIdGenerators_UUIDGenerator0.generateId(short0);
      Class<?> class0 = ClassUtil.classOf(objectIdGenerators_UUIDGenerator0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      SQLDataException sQLDataException0 = new SQLDataException("org.hibernate.proxy.java.lang.Short");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.java.lang.Short", sQLDataException0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      TypeFactory.defaultInstance();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      HashMap<String, SettableBeanProperty> hashMap0 = new HashMap<String, SettableBeanProperty>();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("%&", sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ClassUtil.primitiveType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.classOf(class0);
      Class<Double> class2 = Double.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.findConstructor(class3, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MockError mockError0 = new MockError();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=\"", mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.isJacksonStdImpl((Object) "_z1-Kx;TyuBrGMm3]b");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      MockError mockError0 = new MockError("");
      SQLWarning sQLWarning0 = new SQLWarning("", mockError0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLWarning0);
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedReturnType();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[7];
      MapperFeature mapperFeature0 = MapperFeature.USE_STD_BEAN_NAMING;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[4] = mapperFeature4;
      MapperFeature mapperFeature5 = MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS;
      mapperFeatureArray0[5] = mapperFeature5;
      MapperFeature mapperFeature6 = MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS;
      mapperFeatureArray0[6] = mapperFeature6;
      ObjectMapper objectMapper2 = objectMapper1.enable(mapperFeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonParser_Feature0, false);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "non-static member class");
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_FLOAT: non-static member class
         //  at [Source: (byte[])\"\uFFFD\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      int int0 = 1536;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      objectMapper0.enable(serializationFeature0);
      String string0 = "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("primitive");
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFile mockFile0 = new MockFile(",`$!A[!FAq7Fi=>");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 159, objectMapper0, objectOutputStream0, byteArray0, 3, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((byte) (-121), (-3714));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) stringReader0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<Error> class1 = Error.class;
      ClassUtil.findSuperTypes(class0, class1);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, ":>*-aUo,KV");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.io.ByteArrayInputStream` from number 1: :>*-aUo,KV
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<InputStream> class0 = InputStream.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.findEnumType(class0);
      Double double0 = new Double(3491.5202803008965);
      ClassUtil.nonNull((Double) null, double0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      Class<Module> class0 = Module.class;
      ServiceLoader<Module> serviceLoader0 = ServiceLoader.load(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ServiceLoader.loadInstalled(class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) serviceLoader0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0);
      ObjectMapper objectMapper4 = objectMapper3.clearProblemHandlers();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      objectMapper4.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      objectMapper2.reader();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Class<Double> class2 = Double.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<SimpleType> class1 = SimpleType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class0);
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getClassMethods(class0);
      DataTruncation dataTruncation0 = new DataTruncation((-14), true, true, 1536, (-14));
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern[] accessPatternArray0 = new AccessPattern[2];
      accessPatternArray0[0] = accessPattern0;
      accessPatternArray0[1] = accessPattern0;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("net.sf.cglib.proxy.");
      ClassUtil.throwIfRTE(sQLRecoverableException0);
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Object> class0 = Object.class;
      SQLDataException sQLDataException0 = new SQLDataException("O7L", "O7L");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      Float float0 = new Float((float) 0);
      SimpleType simpleType1 = referenceType0.withValueHandler(float0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType1, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      Locale.lookup(vector0, treeSet0);
      ObjectMapper objectMapper2 = objectMapper1.setLocale((Locale) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper2, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, false);
      sQLDataException0.getLocalizedMessage();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(902);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException: O7L
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.annotation.JsonFormat$Features", "com.fasterxml.jackson.annotation.JsonFormat$Features");
      MockError mockError0 = new MockError(sQLRecoverableException0);
      sQLRecoverableException0.printStackTrace();
      sQLRecoverableException0.initCause(mockError0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0, "net.sf.cglib.proxy.");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.nameOf(class0);
      ClassUtil.hasEnclosingMethod(class0);
      SQLException sQLException0 = new SQLException("`float`");
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(throwable0);
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      MockThrowable mockThrowable0 = new MockThrowable(sQLNonTransientException0);
      sQLNonTransientException0.addSuppressed(mockThrowable0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "}z)l49anf4#BaPG", (Throwable) sQLNonTransientException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // }z)l49anf4#BaPG
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("please use getAnnotations/ hasAnnotation to check for Annotetions");
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.jsontype.TypeDeserializer", "com.fasterxml.jackson.databind.jsontype.TypeDeserializer", 5);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getConstructors(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getConstructors(class1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("java.lang", (String) null, 32);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findEnumType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Y8-k&l7<lO*0(jzZ[XA");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "dU)OAU#W%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      MockIOException mockIOException0 = new MockIOException("2(Fx#Gm");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isProxyType(class0);
      SQLDataException sQLDataException0 = new SQLDataException("net.sf.cglib.proxy.long", "nvP.!$9b1&#ipFe");
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("java.lang.String", "]cF{ag8%n]$J");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException: net.sf.cglib.proxy.long
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.classNameOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockError mockError0 = new MockError((Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      ClassUtil.classNameOf(mockRuntimeException0);
      Class<Object> class0 = Object.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      MockIOException mockIOException0 = new MockIOException("Null passed for `valueType` of `findValueSerializer()`");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null passed for `valueType` of `findValueSerializer()`
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<BigIntegerNode> class1 = BigIntegerNode.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      MockIOException mockIOException0 = new MockIOException("AS_EMPTY");
      ClassUtil.backticked("AS_EMPTY");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getPackageName(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getConstructors(class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getGenericInterfaces(class1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.backticked((String) null);
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getClassMethods(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ClassUtil.backticked("net.sf.cglib.proxy.long");
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<String> class0 = String.class;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(";k1X{7O}A7__zsFr[[}", "serialVersionUID");
      MockError mockError0 = new MockError(sQLRecoverableException0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.verifyMustOverride(class0, ";k1X{7O}A7__zsFr[[}", ";k1X{7O}A7__zsFr[[}");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findSuperTypes(class0, class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      ClassUtil.emptyIterator();
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1935);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isJacksonStdImpl(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.toGenericString();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class1 = Annotation.class;
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getExceptionTypes();
      constructor0.getAnnotations();
      constructor0.getAnnotation(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class2);
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getEnclosingClass(class2);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.findClassAnnotations(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1696));
      ClassUtil.nonNull(placeholderForType0, placeholderForType0);
      SQLException sQLException0 = new SQLException(">$M", "value not one of declared Enum instance names: %s", 723);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "[]");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // []
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findSuperClasses(class1, class0, false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.isLocalType(class1, true);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.getDeclaredFields(class2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NULL");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1001));
      Class<Long> class0 = Long.class;
      ClassUtil.hasClass(placeholderForType0, class0);
      TypeFactory.defaultInstance();
      Class<Integer> class1 = Integer.class;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class1, true);
      Class<ArrayType> class2 = ArrayType.class;
      Class<Short> class3 = Short.class;
      ClassUtil.findSuperClasses(class2, class3, true);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      classUtil_Ctor0.getParameterAnnotations();
      int int0 = new Integer(0);
      ClassUtil.findEnumType(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.io.IOException");
      System.setCurrentTimeMillis(0);
      SQLException sQLException0 = new SQLException(">$M", ">$M", 1544);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // >$M
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ClassUtil.backticked("[%s; id-to-type=%s]");
      ClassUtil.rawClass((JavaType) null);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Float");
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("Cannot access ");
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) jsonGeneratorDelegate0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z[BINE5.vB(");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.java.lang.Object");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // net.sf.cglib.proxy.java.lang.Object
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.isJacksonStdImpl((Object) class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getOuterClass(class1);
      ClassUtil.backticked((String) null);
      ClassUtil.primitiveType(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isConcrete(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      constructor0.toGenericString();
      classUtil_Ctor1.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<Character> class3 = Character.class;
      ClassUtil.getClassMethods(class3);
      Class<Float> class4 = Float.TYPE;
      ClassUtil.wrapperType(class4);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      System.setCurrentTimeMillis(595L);
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredMethods(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Long");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nonNullString("]:O;@B'&vI{2fB]O");
      ClassUtil.quotedOr("]:O;@B'&vI{2fB]O", "]:O;@B'&vI{2fB]O");
      ClassUtil.isJacksonStdImpl((Object) class0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      deserializerFactoryConfig0.deserializers();
      defaultDeserializationContext_Impl0.getContextualType();
      Class<Long> class0 = Long.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Long> class1 = Long.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.getDeclaredMethods(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.findClassAnnotations(class0);
      Class<Character> class3 = Character.class;
      ClassUtil.getDeclaredMethods(class3);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "NULL");
      defaultSerializerProvider_Impl1.cachedSerializersCount();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("NULL", jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockError mockError0 = new MockError((Throwable) null);
      ClassUtil.isJacksonStdImpl((Object) defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, ", scope=");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isConcrete(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.hasClass((Object) null, class2);
      ClassUtil.isCollectionMapOrArray(class2);
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLDataException0.forEach(consumer0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLDataException0);
      sQLDataException0.getSuppressed();
      sQLWarning0.setNextWarning((SQLWarning) null);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLWarning0);
      ClassUtil.throwRootCauseIfIOE(throwable0);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class1, class3, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      SQLDataException sQLDataException0 = new SQLDataException();
      ClassUtil.throwIfIOE(sQLDataException0);
      SQLWarning sQLWarning0 = new SQLWarning();
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 36;
      intArray0[1] = 3600;
      intArray0[2] = 36;
      intArray0[3] = 36;
      intArray0[4] = 36;
      intArray0[5] = 36;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.backticked("java.lang.Class@0000000001");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`java.lang.Class@0000000001`", "java.lang.Class@0000000001");
      MockException mockException0 = new MockException(sQLNonTransientException0);
      MockException mockException1 = new MockException((String) null, mockException0);
      mockException0.getMessage();
      mockException1.addSuppressed(mockException0);
      Throwable throwable0 = mockException1.getCause();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.weirdKeyException(class0, (String) null, "serialVersionUID");
      ClassUtil.getRootCause(throwable0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.hasClass(class1, class0);
      ClassUtil.isCollectionMapOrArray(class1);
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer");
      SQLWarning sQLWarning0 = new SQLWarning("com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer", "com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer");
      sQLWarning0.setNextWarning((SQLWarning) null);
      ClassUtil.throwIfIOE(sQLDataException0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      ClassUtil.findRawSuperTypes(class1, class0, false);
      StringReader stringReader0 = new StringReader("enable");
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.backticked("java.lang.Class@0000000001");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`java.lang.Class@0000000001`", "java.lang.Class@0000000001");
      MockException mockException0 = new MockException(sQLNonTransientException0);
      MockException mockException1 = new MockException((String) null, mockException0);
      mockException0.getMessage();
      mockException1.addSuppressed(mockException0);
      mockException1.getCause();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.lang.Class@0000000001", (String) null, mockException1);
      mockException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.Class@0000000001
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Double double0 = new Double((-725.28228));
      Class<String> class0 = String.class;
      ClassUtil.getClassMethods(class0);
      Class<BigIntegerNode> class1 = BigIntegerNode.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getOuterClass(class1);
      ClassUtil.backticked("|Uo^pkl");
      ClassUtil.primitiveType(class1);
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")Q\"zEG+PF\"");
      ClassUtil.throwIfRTE(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.classOf((Object) null);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Long> class3 = Long.class;
      ClassUtil.findClassAnnotations(class3);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      MockIOException mockIOException0 = new MockIOException(" (one known property: \"");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      Short short0 = new Short((short)128);
      Class<?> class1 = ClassUtil.classOf(short0);
      Class<Double> class2 = Double.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.findEnumType(class3);
      ClassUtil.nameOf(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      constructor0.toGenericString();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      ClassUtil.findSuperClasses(class0, class0, false);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<HashMap> class1 = HashMap.class;
      typeFactory1.constructMapType(class1, class1, class1);
      MockError mockError0 = new MockError("@2W");
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.getDeclaredFields(class2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isConcrete(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.hasClass((Object) null, class2);
      ClassUtil.isCollectionMapOrArray(class2);
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer");
      SQLWarning sQLWarning0 = new SQLWarning(sQLDataException0);
      sQLWarning0.setNextWarning((SQLWarning) null);
      SQLWarning sQLWarning1 = (SQLWarning)ClassUtil.throwIfIOE(sQLWarning0);
      ClassUtil.throwRootCauseIfIOE(sQLWarning1);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class1, class3, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) stringReader0, (Exception) sQLWarning1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: java.sql.SQLDataException: com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.classOf((Object) null);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Character> class2 = Character.class;
      ClassUtil.findClassAnnotations(class2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")Q\"zEG+PF\"");
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.findClassAnnotations(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockError mockError0 = new MockError(sQLRecoverableException0);
      Object object0 = new Object();
      ClassUtil.classNameOf(object0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isConcrete(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassUtil.backticked("Cannot figure out type for EnumSet (odd JDK platform?)");
      ClassUtil.classOf((Object) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      PlaceholderForType placeholderForType1 = new PlaceholderForType(4572);
      ClassUtil.nonNull(placeholderForType1, placeholderForType1);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.hasClass(placeholderForType0, class0);
      ClassUtil.rawClass(placeholderForType1);
      boolean boolean0 = false;
      Class<Void> class1 = Void.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = new Object();
      Class<Double> class0 = Double.class;
      Class<Void> class1 = Void.class;
      ClassUtil.findSuperClasses(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getOuterClass(class1);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      SQLException sQLException0 = new SQLException(": ");
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      sQLWarning0.setNextWarning((SQLWarning) null);
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.emptyIterator();
      ClassUtil.isBogusClass((Class<?>) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, false);
      MockError mockError0 = new MockError((Throwable) null);
      ClassUtil.classNameOf(mockError0);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NULL");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1001));
      ClassUtil.nonNull(placeholderForType0, placeholderForType0);
      Class<Double> class0 = Double.class;
      ClassUtil.findSuperClasses(class0, class0, false);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getOuterClass(class0);
      Iterator<AccessibleObject> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.isBogusClass((Class<?>) null);
      StackTraceElement stackTraceElement0 = new StackTraceElement("ZERO_LENGTH_ENUM_ARRAY", "ZERO_LENGTH_ENUM_ARRAY", "6Ej-IXld(", 127);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isLocalType(class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, iterator0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Float> class2 = Float.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.backticked("tCfREa'(U.");
      Class<Short> class3 = Short.class;
      ClassUtil.primitiveType(class3);
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      ClassUtil.getClassMethods(class4);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getClassMethods(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.isConcrete(class2);
      ClassUtil.canBeABeanType(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getOuterClass(class3);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.findEnumType(class0);
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.nameOf(class4);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getGenericParameterTypes();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.isJacksonStdImpl((Object) class1);
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.toGenericString();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class1 = Annotation.class;
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getAnnotation(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class2);
      ClassUtil.getEnclosingClass(class2);
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Double double0 = new Double((-725.28228));
      Class<String> class0 = String.class;
      ClassUtil.getClassMethods(class0);
      Class<BigIntegerNode> class1 = BigIntegerNode.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getOuterClass(class1);
      ClassUtil.backticked("|Uo^pkl");
      ClassUtil.primitiveType(class1);
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = false;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<String> constructor1 = ClassUtil.findConstructor(class0, false);
      constructor1.toGenericString();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.backticked("4-)UUVeStOuq");
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.rawClass((JavaType) null);
      Class<Void> class2 = Void.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClassUtil.backticked("Cannot figure out type for EnumSet (odd JDK platform?)");
      ClassUtil.rawClass((JavaType) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getClassMethods(class0);
      Class<BigIntegerNode> class1 = BigIntegerNode.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.node.BigIntegerNode is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NULL");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1001));
      PlaceholderForType placeholderForType1 = ClassUtil.nonNull(placeholderForType0, placeholderForType0);
      Class<Long> class0 = Long.class;
      ClassUtil.hasClass(placeholderForType1, class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<ReferenceType> class2 = ReferenceType.class;
      Class<Integer> class3 = Integer.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class3);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MapType mapType1 = mapType0.withKeyTypeHandler(mockRuntimeException0);
      ClassUtil.classNameOf(mapType1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.classOf((Object) null);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Double> class2 = Double.class;
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.getDeclaredMethods(class4);
      Class<Boolean> class5 = Boolean.class;
      ClassUtil.isJacksonStdImpl(class5);
      Class<Void> class6 = Void.class;
      ClassUtil.isBogusClass(class6);
      Class<Integer> class7 = Integer.class;
      ClassUtil.getGenericSuperclass(class7);
      ClassUtil.getDeclaringClass(class4);
      Float float0 = new Float(0.234F);
      Float float1 = new Float(0.234F);
      ClassUtil.nonNull(float0, float1);
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      SQLWarning sQLWarning1 = new SQLWarning(" would not be serialized as a JSON object and therefore has no schema", " would not be serialized as a JSON object and therefore has no schema", mockIOException0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.toGenericString();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class1 = Annotation.class;
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotations();
      constructor0.getAnnotation(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class2);
      ClassUtil.getEnclosingClass(class2);
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.classOf((Object) null);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getPackageName(class3);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Double> class4 = Double.class;
      Class<AccessibleObject> class5 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class4, class5, false);
      Class<NoClass> class6 = NoClass.class;
      ClassUtil.getDeclaredMethods(class6);
      Class<Boolean> class7 = Boolean.class;
      ClassUtil.isJacksonStdImpl(class7);
      Class<Void> class8 = Void.class;
      ClassUtil.isBogusClass(class8);
      Class<Integer> class9 = Integer.class;
      ClassUtil.getGenericSuperclass(class9);
      ClassUtil.getDeclaringClass(class6);
      ClassUtil.nonNullString("java.lang");
      Byte byte0 = new Byte((byte)0);
      ClassUtil.isJacksonStdImpl((Object) byte0);
      Class<SimpleType> class10 = SimpleType.class;
      ClassUtil.getClassMethods(class10);
      Class<Object> class11 = Object.class;
      ClassUtil.hasEnclosingMethod(class11);
      Class<MapType> class12 = MapType.class;
      ClassUtil.primitiveType(class12);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getOuterClass(class0);
      Iterator<AccessibleObject> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.isBogusClass((Class<?>) null);
      ClassUtil.hasClass(iterator0, class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.deser.impl.FieldProperty");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLDataException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLInvalidAuthorizationSpecException0);
      sQLWarning0.setNextWarning((SQLWarning) null);
      ClassUtil.throwIfIOE(sQLDataException0);
      ClassUtil.throwRootCauseIfIOE(sQLWarning0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, false);
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.fasterxml.jackson.databind.deser.impl.FieldProperty", "com.fasterxml.jackson.databind.deser.impl.FieldProperty", "com.fasterxml.jackson.databind.deser.impl.FieldProperty", (-1123));
      StackTraceElement stackTraceElement1 = new StackTraceElement("o2Ie:#K+NLg!za&9Xw", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", "[3f-~A8{prqE!!w7c12", (-1123));
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getOuterClass(class0);
      Iterator<AccessibleObject> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.isBogusClass((Class<?>) null);
      ClassUtil.hasClass(iterator0, class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.deser.impl.FieldProperty");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLDataException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLInvalidAuthorizationSpecException0);
      sQLWarning0.setNextWarning((SQLWarning) null);
      ClassUtil.throwIfIOE(sQLDataException0);
      ClassUtil.throwRootCauseIfIOE(sQLWarning0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class2, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.createInstance(class3, false);
      DataTruncation dataTruncation0 = new DataTruncation((-642), false, false, (-642), (-593));
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('6');
      dataTruncation0.printStackTrace(printWriter0);
      ClassUtil.backticked("com.fasterxml.jackson.databind.deser.impl.FieldProperty");
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.findSuperTypes(class3, class1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getOuterClass(class1);
      ClassUtil.backticked((String) null);
      ClassUtil.primitiveType(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Void> class2 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      Class<Float> class3 = Float.class;
      ClassUtil.getDeclaringClass(class3);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.classOf((Object) null);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getPackageName(class3);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Double> class4 = Double.TYPE;
      Class<AccessibleObject> class5 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class4, class5, false);
      Class<NoClass> class6 = NoClass.class;
      ClassUtil.getDeclaredMethods(class6);
      Class<Boolean> class7 = Boolean.class;
      ClassUtil.isJacksonStdImpl(class7);
      Class<Void> class8 = Void.class;
      ClassUtil.isBogusClass(class8);
      Class<Integer> class9 = Integer.class;
      ClassUtil.getGenericSuperclass(class9);
      ClassUtil.getDeclaringClass(class6);
      ClassUtil.nonNullString("java.lang");
      Byte byte0 = new Byte((byte)0);
      ClassUtil.isJacksonStdImpl((Object) byte0);
      Class<SimpleType> class10 = SimpleType.class;
      ClassUtil.getClassMethods(class10);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getPackageName(class0);
      Class<Short> class1 = Short.class;
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.classOf(class1);
      Class<Character> class3 = Character.class;
      ClassUtil.isObjectOrPrimitive(class3);
      Class<Object> class4 = Object.class;
      Class<ArrayType> class5 = ArrayType.class;
      ClassUtil.getPackageName(class5);
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class6 = NoClass.class;
      ClassUtil.getDeclaredMethods(class4);
      Class<Boolean> class7 = Boolean.class;
      ClassUtil.isJacksonStdImpl(class7);
      ClassUtil.isBogusClass(class6);
      Class<ReferenceType> class8 = ReferenceType.class;
      ClassUtil.getGenericSuperclass(class8);
      Class<IOException> class9 = IOException.class;
      ClassUtil.getDeclaringClass(class9);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.type");
      Byte byte0 = new Byte((byte)0);
      ClassUtil.isJacksonStdImpl((Object) class9);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockError mockError0 = new MockError((Throwable) null);
      ClassUtil.isJacksonStdImpl((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "Q4_](o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getOuterClass(class0);
      Iterator<AccessibleObject> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.isBogusClass((Class<?>) null);
      ClassUtil.hasClass(iterator0, class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.deser.impl.FieldProperty");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLDataException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLInvalidAuthorizationSpecException0);
      sQLWarning0.setNextWarning((SQLWarning) null);
      ClassUtil.throwIfIOE(sQLDataException0);
      ClassUtil.throwRootCauseIfIOE(sQLWarning0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class2, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.createInstance(class3, false);
      DataTruncation dataTruncation0 = new DataTruncation((-642), false, false, (-642), (-593));
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('6');
      dataTruncation0.printStackTrace(printWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) dataTruncation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data truncation
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isConcrete(class1);
      Class<NoClass> class2 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.toGenericString();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class1 = Annotation.class;
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotations();
      constructor0.getAnnotation(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class2);
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getEnclosingClass(class2);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<String> class0 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "serialVersionUID", "org.hibernate.proxy.");
      ClassUtil.getRootCause(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")Q\"zEG+PF\"");
      ClassUtil.throwIfRTE(sQLRecoverableException0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.findClassAnnotations(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException: )Q\"zEG+PF\"
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getOuterClass(class1);
      ClassUtil.backticked((String) null);
      ClassUtil.primitiveType(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Void> class2 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, true);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Object> class2 = Object.class;
      ClassUtil.isProxyType(class2);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.fasterxml.jackson.databind.jsontype.TypeDeserializer", "com.fasterxml.jackson.databind.jsontype.TypeDeserializer", 5, hashMap0, sQLTimeoutException0);
      sQLClientInfoException0.fillInStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.fasterxml.jackson.databind.jsontype.TypeDeserializer", "com.fasterxml.jackson.databind.jsontype.TypeDeserializer", "com.fasterxml.jackson.databind.jsontype.TypeDeserializer", 5);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("com.fasterxml.jackson.databind.jsontype.TypeDeserializer", "can only convert 1-character Strings", "can only convert 1-character Strings", 5);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("com.fasterxml.jackson.databind.util.ClassUtil", "b8@Xuu?LK'|'lEww6", "com.fasterxml.jackson.databind.util.ClassUtil", 5);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("com.fasterxml.jackson.databind.jsontype.TypeDeserializer", "NULL", "gc3", 5);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("NULL", "entrySet", "com.fasterxml.jackson.databind.jsontype.TypeDeserializer", 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("gc3", "o2Ie:#K+NLg!za&9Xw", "can only convert 1-character Strings", 5);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("can only convert 1-character Strings", "com.fasterxml.jackson.databind.util.ClassUtil", "size", 5);
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLClientInfoException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0, "5E4&5gA+#ERMBU' Jk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5E4&5gA+#ERMBU' Jk
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.clearProblemHandlers();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      objectMapper0.readerFor(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      objectMapper1.readerFor(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
      ObjectReader objectReader1 = objectReader0.withoutFeatures(formatFeatureArray0);
      PropertyName propertyName0 = PropertyName.construct("net.sf.cglib.proxy.", "alwPYt");
      ObjectReader objectReader2 = objectReader1.withRootName(propertyName0);
      ObjectReader objectReader3 = objectReader2.withRootName("alwPYt");
      ObjectReader objectReader4 = objectReader3.withFeatures(formatFeatureArray0);
      TypeFactory typeFactory0 = objectReader4.getTypeFactory();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<ReferenceType> class2 = ReferenceType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) mapType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      MapType mapType1 = mapType0.withKeyType(resolvedRecursiveType0);
      ClassUtil.findSuperTypes((JavaType) mapType1, (Class<?>) class0, true);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getOuterClass(class0);
      Iterator<AccessibleObject> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.isBogusClass((Class<?>) null);
      ClassUtil.hasClass(iterator0, class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.deser.impl.FieldProperty");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLDataException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLInvalidAuthorizationSpecException0);
      sQLWarning0.setNextWarning((SQLWarning) null);
      ClassUtil.throwIfIOE(sQLDataException0);
      ClassUtil.throwRootCauseIfIOE(sQLWarning0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class2, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.createInstance(class3, false);
      DataTruncation dataTruncation0 = new DataTruncation((-642), false, false, (-642), (-593));
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      PrintWriter printWriter0 = mockPrintWriter0.append('6');
      dataTruncation0.printStackTrace(printWriter0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.findSuperTypes(class3, class1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findSuperTypes(class0, class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.spliterator();
      ClassUtil.getPackageName(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Double> class1 = Double.class;
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getDeclaredMethods(class3);
      ClassUtil.isJacksonStdImpl(class0);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.isBogusClass(class4);
      Class<RuntimeException> class5 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class5);
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.nonNullString("%!_,$TQveFp ");
      Byte byte0 = new Byte((byte)0);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.getClassMethods(class4);
      Class<Character> class6 = Character.class;
      ClassUtil.findConstructor(class6, false);
      Class<Integer> class7 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class7);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ReferenceType referenceType2 = referenceType1.withValueHandler("%!_,$TQveFp ");
      MockError mockError0 = new MockError();
      ReferenceType referenceType3 = referenceType2.withContentTypeHandler(mockError0);
      JavaType javaType0 = referenceType3.withContentType(referenceType1);
      ClassUtil.findSuperTypes(javaType0, class3, false);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Double> class0 = Double.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      ObjectReader objectReader1 = objectReader0.with(formatFeature0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[4];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader1;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader1;
      ObjectReader objectReader2 = objectReader1.withFormatDetection(objectReaderArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectReader2, (OutputStream) null, (byte[]) null, 2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Double double0 = new Double((-725.28228));
      String string0 = "Sub-class %s (of class %s) must override method '%s'";
      ClassUtil.quotedOr(double0, "Sub-class %s (of class %s) must override method '%s'");
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getOuterClass(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      int int0 = 988;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(988);
      Class<SimpleType> class1 = SimpleType.class;
      Class<Character> class2 = Character.class;
      TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) placeholderForType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructType(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getDeclaredFields(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 0;
      int int1 = 80;
      String string0 = "k{'{BA";
      String string1 = "NULL";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("NULL", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("k{'{BA", "k{'{BA", 0, map0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 80, 0, sQLClientInfoException1);
      dataTruncation0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) dataTruncation0, "NULL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // NULL
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findSuperTypes(class0, class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      sQLRecoverableException0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.getStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException(")6'#lhIhxQ'7YqY", ")6'#lhIhxQ'7YqY");
      sQLRecoverableException0.setNextException(sQLTransientException0);
      sQLRecoverableException0.forEach(consumer0);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.throwIfIOE(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findSuperTypes(class0, class0);
      String string0 = "T% \\";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("T% ");
      Throwable throwable0 = sQLTimeoutException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // T% 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")Q\"zEG+PF\"");
      ClassUtil.throwIfRTE(sQLRecoverableException0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getClassDescription(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isLocalType(class2, true);
      Class<AccessPattern> class3 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class3, class1, "com.fasterxml.jackson.databind.type.TypeModifier");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.util.AccessPattern) must override method 'com.fasterxml.jackson.databind.type.TypeModifier'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.getDeclaredMethods(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ClassUtil.getClassDescription(beanDeserializerFactory0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getClassDescription(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<JsonMappingException>[] classArray0 = (Class<JsonMappingException>[]) Array.newInstance(Class.class, 5);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      classArray0[0] = class1;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      classArray0[1] = class2;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      classArray0[2] = class3;
      Class<JsonMappingException> class4 = JsonMappingException.class;
      classArray0[3] = class4;
      Class<JsonMappingException> class5 = JsonMappingException.class;
      classArray0[4] = class5;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getClassDescription((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaredMethods(class0);
      Member member0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isLocalType(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class1, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.RuntimeException) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-605);
      intArray0[1] = 532;
      intArray0[2] = 0;
      intArray0[3] = 97;
      SQLException sQLException0 = new SQLException((String) null, "NULL", 532);
      sQLException0.getStackTrace();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, sQLException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLRecoverableException0);
      batchUpdateException0.getStackTrace();
      batchUpdateException0.addSuppressed(sQLException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(batchUpdateException0);
      ClassUtil.throwIfError(sQLTransientException0);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isConcrete(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class1, true);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.defaultValue(class1);
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.reflect.AccessibleObject is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.getPackageName(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getConstructors(class2);
      Class<Character> class3 = Character.class;
      ClassUtil.canBeABeanType(class3);
      ClassUtil.hasEnclosingMethod(class3);
      Class<ArrayType> class4 = ArrayType.class;
      try { 
        ClassUtil.createInstance(class4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = null;
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findClassAnnotations(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isLocalType(class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.canBeABeanType(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.nonNullString((String) null);
      int[] intArray0 = new int[3];
      intArray0[0] = 1182;
      intArray0[1] = (-522);
      intArray0[2] = 2433;
      String string0 = null;
      SQLTransientException sQLTransientException0 = new SQLTransientException("serialVersionUID", (String) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, "serialVersionUID", "serialVersionUID", 1182);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Byte> class0 = Byte.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Byte has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getGenericSuperclass(class0);
      MockThrowable mockThrowable0 = new MockThrowable(".lA$C?Za.xs,");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\"%s\"", "keyType", 0, mockThrowable0);
      SQLDataException sQLDataException0 = new SQLDataException("\"%s\"", "\"%s\"", sQLTimeoutException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLDataException0);
      MockError mockError0 = new MockError("\"%s\"", sQLWarning0);
      ClassUtil.quotedOr(mockError0, "keyType");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getOuterClass(class1);
      ClassUtil.backticked((String) null);
      ClassUtil.primitiveType(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class3);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<ObjectIdGenerators.UUIDGenerator> class1 = ObjectIdGenerators.UUIDGenerator.class;
      objectMapper1.readerFor(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findSuperTypes(class0, class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ClassUtil.throwIfError(sQLRecoverableException0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isConcrete(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.getOuterClass(class2);
      Class<IOException> class3 = IOException.class;
      ClassUtil.isNonStaticInnerClass(class3);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("NULL", "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      sQLNonTransientConnectionException0.getStackTrace();
      sQLNonTransientConnectionException0.spliterator();
      sQLNonTransientConnectionException0.getLocalizedMessage();
      sQLNonTransientConnectionException0.fillInStackTrace();
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class3);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      Class<AccessPattern> class1 = AccessPattern.class;
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = (JavaType) referenceType0;
      javaTypeArray0[1] = (JavaType) referenceType1;
      javaTypeArray0[2] = (JavaType) referenceType0;
      JavaType javaType0 = referenceType1.refine(class1, typeBindings0, resolvedRecursiveType0, javaTypeArray0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.toGenericString();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class1 = Annotation.class;
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotations();
      // Undeclared exception!
      try { 
        AccessibleObject.setAccessible((AccessibleObject[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.AccessibleObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.emptyIterator();
      ClassUtil.isBogusClass((Class<?>) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, false);
      MockError mockError0 = new MockError((Throwable) null);
      ClassUtil.isJacksonStdImpl((Object) class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.classOf((Object) null);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getPackageName(class3);
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.getDeclaredMethods(class4);
      Class<Boolean> class5 = Boolean.class;
      ClassUtil.isJacksonStdImpl(class5);
      Class<Void> class6 = Void.class;
      ClassUtil.isBogusClass(class6);
      Class<Integer> class7 = Integer.class;
      ClassUtil.getGenericSuperclass(class7);
      ClassUtil.getDeclaringClass(class4);
      ClassUtil.nonNullString("java.lang");
      Byte byte0 = new Byte((byte)0);
      ClassUtil.isJacksonStdImpl((Object) byte0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("1tigb)r;t 2", "1tigb)r;t 2");
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructRawCollectionLikeType(class0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentTypeHandler(hashMap0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "JSON");
      collectionLikeType1.getGenericSignature(stringBuilder0);
      ClassUtil.rawClass(collectionLikeType1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isConcrete(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.hasClass((Object) null, class2);
      ClassUtil.isCollectionMapOrArray(class2);
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer");
      SQLWarning sQLWarning0 = new SQLWarning(sQLDataException0);
      sQLWarning0.setNextWarning((SQLWarning) null);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLWarning0);
      ClassUtil.throwRootCauseIfIOE(throwable0);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class1, class3, true);
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.createInstance(class4, true);
      DataTruncation dataTruncation0 = new DataTruncation((-1761), false, true, (-1761), (-1761));
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) dataTruncation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data truncation
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.isConcrete(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.getDeclaredMethods(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findEnumType(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.nameOf(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class3, "`com.fasterxml.jackson.databind.type.ArrayType`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.emptyIterator();
      ClassUtil.isBogusClass((Class<?>) null);
      String string0 = "T% \\";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("T% ");
      sQLTimeoutException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // T% 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.emptyIterator();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("HN./gz=d/X/r{<");
      sQLSyntaxErrorException0.getLocalizedMessage();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLSyntaxErrorException0.forEach(consumer0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("HN./gz=d/X/r{<", "HN./gz=d/X/r{<");
      sQLSyntaxErrorException0.addSuppressed(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        sQLSyntaxErrorException0.printStackTrace((PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("array", "Cannot access ");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("array", "array", 703, sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("array", "array", 703, sQLTransientConnectionException0);
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLRecoverableException0);
      assertEquals("array", throwable0.getMessage());
  }
}
