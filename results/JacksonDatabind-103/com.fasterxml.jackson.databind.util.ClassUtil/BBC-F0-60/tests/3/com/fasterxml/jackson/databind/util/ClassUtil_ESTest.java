/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 09:26:29 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isNonStaticInnerClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes((CharacterEscapes) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(826);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) byteArrayOutputStream0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Annotation> class1 = Annotation.class;
      String string0 = null;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "+0000", (String) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.annotation.Annotation` from String \"+0000\": null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isProxyType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "com.fasterxml.jackson.databind.util.JSONWrappedObject", (String) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.JsonMappingException` from String \"com.fasterxml.jackson.databind.util.JSONWrappedObject\": null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLDataException sQLDataException0 = new SQLDataException("java.lang.Integer");
      SQLDataException sQLDataException1 = new SQLDataException("java.lang.Integer", "l\"Eh[kr6:8:", sQLDataException0);
      sQLDataException0.initCause(sQLDataException1);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.backticked("v}@TyGW+");
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      String string0 = "null array";
      MockPrintStream mockPrintStream0 = new MockPrintStream("null array");
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 34, objectMapper0, mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Throwable throwable0 = ClassUtil.throwIfError(mockIOException0);
      Class<Long> class0 = Long.TYPE;
      throwable0.initCause(mockIOException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.emptyIterator();
      ClassUtil.getClassMethods(class0);
      ClassUtil.isProxyType(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(mockIOException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(throwable0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Class<Object> class0 = Object.class;
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.findSuperTypes(class0, class1, list0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", "7$|j1[HcoKTvt?@eK5f", 65534, map0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLClientInfoException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte) (-87);
      byteArray0[8] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getOuterClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.findSuperTypes((Class<?>) null, class1);
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
      MockThrowable mockThrowable0 = new MockThrowable("U$f1c");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(mockThrowable0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "U$f1c", (Throwable) sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<Void> class0 = Void.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes(class0, class1);
      SQLException sQLException0 = new SQLException("Failed to find default constructor of class ", "Failed to find default constructor of class ");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) null, "Failed to find default constructor of class ");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Failed to find default constructor of class  (through reference chain: UNKNOWN[\"Failed to find default constructor of class \"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      EnumSet.range(clientInfoStatus0, clientInfoStatus0);
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isJacksonStdImpl(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class2, true);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-5);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1252, objectMapper0, mockPrintStream0, byteArray0, (byte) (-5), true);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "JSON");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.nameOf(class1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`java.lang.Character`", "`java.lang.Character`", 50);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JM!~R*R~", true);
      SQLDataException sQLDataException0 = new SQLDataException("annotation", sQLNonTransientConnectionException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      mockPrintStream0.println((Object) fileSystemHandling0);
      Locale locale0 = Locale.TAIWAN;
      mockPrintStream0.print("`java.lang.Character`");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "ON*90w", objectArray0);
      sQLDataException0.printStackTrace(printStream0);
      sQLNonTransientConnectionException0.initCause(sQLDataException0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream1.append((CharSequence) "JM!~R*R~");
      sQLNonTransientConnectionException0.printStackTrace((PrintStream) mockPrintStream1);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0, "9Iq!,C");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      Consumer<ClientInfoStatus> consumer0 = (Consumer<ClientInfoStatus>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumSet0.forEach(consumer0);
      ClassUtil.classOf(enumSet0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.sql.ClientInfoStatus is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(deserializationFeature0);
      // Undeclared exception!
      try { 
        objectReader0.at("Cannot figure out type for EnumMap (odd JDK platform?)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"Cannot figure out type for EnumMap (odd JDK platform?)\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<Integer> class0 = Integer.class;
      ClassUtil.getClassMethods(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getClassMethods(class2);
      Class<MapType> class3 = MapType.class;
      ClassUtil.getEnclosingClass(class3);
      ClassUtil.isProxyType(class2);
      Class<Annotation> class4 = Annotation.class;
      ClassUtil.isCollectionMapOrArray(class4);
      ClassUtil.getClassMethods(class4);
      ClassUtil.findRawSuperTypes(class0, class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = new Object();
      ClassUtil.hasClass(object0, class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1193);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, objectReader1, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber("jA+Kw`#xTgl<nFNw#>\"");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSON", "org.hibernate.proxy.java.lang.Short", batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1193);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 44, objectReader1, (OutputStream) null);
      uTF8JsonGenerator0.writeNumber("jA+Kw`#xTgl<nFNw#>\"");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSON", "org.hibernate.proxy.java.lang.Short", batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Short> class0 = Short.TYPE;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      collectionLikeType0.findTypeParameters(class0);
      Class<Boolean> class1 = Boolean.TYPE;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, true);
      Class<Float> class2 = Float.class;
      ClassUtil.findEnumType(class2);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      EnumSet.of(clientInfoStatus0, clientInfoStatus0);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<?> class1 = ClassUtil.classOf(clientInfoStatus0);
      ClassUtil.quotedOr(class1, (String) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParameterAnnotations();
      classUtil_Ctor1.getParameterAnnotations();
      classUtil_Ctor1.getParamCount();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.String");
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0);
      enumSet0.remove(clientInfoStatus0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      CollectionType collectionType0 = CollectionType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0]);
      Byte byte0 = new Byte((byte) (-98));
      CollectionType collectionType1 = collectionType0.withTypeHandler(byte0);
      CollectionType collectionType2 = collectionType1.withStaticTyping();
      Class<?> class1 = ClassUtil.rawClass(collectionType2);
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<InputStream>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) clientInfoStatus0);
      enumSet0.removeIf(predicate0);
      ClassUtil.findEnumType(enumSet0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.getConstructors(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor0.getParamCount();
      Class<String> class1 = String.class;
      ClassUtil.getGenericInterfaces(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createParser("Non-standard token '");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(placeholderForType0, placeholderForType0, placeholderForType0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyType(placeholderForType0);
      MapLikeType mapLikeType2 = mapLikeType1.withTypeHandler((Object) null);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) mapLikeType2, jsonToken0, "+lq>qi.3!_T");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_OBJECT: +lq>qi.3!_T
         //  at [Source: (String)\"Non-standard token '\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLNonTransientConnectionException0);
      Class<String> class0 = String.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      sQLNonTransientConnectionException0.initCause(sQLDataException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0);
      Long long0 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) long0);
      enumSet0.removeIf(predicate0);
      ClassUtil.findEnumType(enumSet0);
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      placeholderForType0.actualType();
      placeholderForType0.getInterfaces();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isLocalType(class0, false);
      HashMap<Character, ArrayType> hashMap0 = new HashMap<Character, ArrayType>();
      HashMap<Character, ArrayType> hashMap1 = new HashMap<Character, ArrayType>();
      HashMap<Character, ArrayType> hashMap2 = ClassUtil.nonNull(hashMap1, hashMap0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn(placeholderForType0).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<Object> class1 = Object.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class1);
      hashMap2.put((Character) null, arrayType0);
      ClassUtil.quotedOr(hashMap2, "0p@O5{y@]j`w!=C");
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.isLocalType(class2, false);
      Class<Error> class3 = Error.class;
      ClassUtil.nameOf(class3);
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class4);
      Class<Long> class5 = Long.class;
      ClassUtil.findEnumType(class5);
      Class<AccessibleObject> class6 = AccessibleObject.class;
      ClassUtil.isProxyType(class6);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<Object> class7 = Object.class;
      ClassUtil.findEnumType(class7);
      ClassUtil.findRawSuperTypes((Class<?>) null, class5, true);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, false);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectReader0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 56319, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<String> class1 = String.class;
      List<Class<?>> list0 = new Vector<Class<Long>>();
      Class<MapType> class2 = MapType.class;
      ClassUtil.findSuperTypes(class2, class1, list0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) clientInfoStatus0);
      enumSet0.removeIf(predicate0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(predicate0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Long long0 = new Long((-1340L));
      Long long1 = ClassUtil.nonNull(long0, long0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.hasClass(long1, class1);
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockError mockError0 = new MockError("!p");
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getClassMethods(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.getClassMethods(class2);
      Class<InputStream> class3 = InputStream.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Short");
      ClassUtil.hasClass(class2, class3);
      Class<POJONode> class4 = POJONode.class;
      ClassUtil.isProxyType(class4);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class5 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class5);
      ClassUtil.quotedOr((Object) null, "upz3&,b7JHv_bLy6");
      ClassUtil.getDeclaredMethods(class2);
      Class<MapType> class6 = MapType.class;
      ClassUtil.isConcrete(class6);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      DataTruncation dataTruncation0 = new DataTruncation((-24), false, false, (-24), 96);
      MockIOException mockIOException0 = new MockIOException("enum", dataTruncation0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // enum
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.hasClass(class0, class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<String> class1 = String.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.verifyMustOverride(class0, "Q", "Q");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class0);
      enumMap0.entrySet();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Double double0 = new Double(0.0);
      enumMap0.put(accessPattern0, double0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockError mockError0 = new MockError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getConstructors(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonFactory_Feature0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonFactory4.disable(jsonParser_Feature0);
      jsonFactory3.enable(jsonParser_Feature0);
      OutputDecorator outputDecorator1 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator1).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory5 = jsonFactory0.setOutputDecorator(outputDecorator1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory5.createGenerator((DataOutput) null, jsonEncoding0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float0 = new Float(0.0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, false);
      StringReader stringReader0 = new StringReader("JSON");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 18, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature1);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) null, jsonToken0, "JSON");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_EMBEDDED_OBJECT: JSON
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ClassUtil.getRootCause(sQLTimeoutException0);
      Class<Error> class0 = Error.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper2.reader(deserializationFeature0, deserializationFeatureArray0);
      ObjectReader objectReader1 = objectReader0.with((ContextAttributes) null);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class2, class1);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class3, false);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockError mockError0 = new MockError();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("}SCq%afNCn(=");
      mockError0.getMessage();
      mockError0.initCause(sQLTransientConnectionException0);
      String string0 = "long";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "long");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<ArrayType> class0 = ArrayType.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class0, class0);
      Class<IOException> class1 = IOException.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings0);
      Class<Byte> class2 = Byte.class;
      ClassUtil.findSuperTypes((JavaType) arrayType0, (Class<?>) class2, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, typeBindings0, (JavaType) arrayType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(referenceType0, class1);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.io.IOException` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.type.ReferenceType`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.createInstance(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ClassUtil.getRootCause(sQLTimeoutException0);
      Class<Error> class0 = Error.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      MockFile mockFile0 = new MockFile("Failed to find default constructor of class ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jsonFactory1;
      Class<Object> class2 = Object.class;
      mockFile0.mkdir();
      Object object0 = ClassUtil.createInstance(class2, false);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) sQLTimeoutException0;
      objectArray0[4] = (Object) class1;
      mockPrintWriter0.printf(locale0, "c", objectArray0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory2.setOutputDecorator(outputDecorator0);
      Class<IOException> class3 = IOException.class;
      ClassUtil.isProxyType(class3);
      ClassUtil.findEnumType((Enum<?>) jsonParser_Feature0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      Class<Module> class1 = Module.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = null;
      ClassUtil.classOf((Object) null);
      ClassUtil.getClassDescription((Object) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayType> class0 = ArrayType.class;
      Class<LinkedList> class1 = LinkedList.class;
      typeFactory0.constructRawCollectionType(class1);
      Class<LinkedList> class2 = LinkedList.class;
      Class<IOException> class3 = IOException.class;
      typeFactory0.constructCollectionType(class2, class3);
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.rawClass(arrayType0);
      Class<String> class4 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<Error> class1 = Error.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class0);
      ClassUtil.findEnumType(enumMap0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.hasClass(class0, class0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassUtil.nonNullString("+1P1F9@6");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("+1P1F9@6");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "+1P1F9@6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<AccessibleObject>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getConstructors(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<Character> class1 = Character.class;
      ClassUtil.isConcrete(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class0, class2, false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis(308L);
      Class<String> class0 = String.class;
      ClassUtil.hasClass((Object) null, class0);
      System.setCurrentTimeMillis(308L);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, ">2,RVu$Kyw42");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.findConstructor(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Character character0 = new Character('6');
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.hasClass(character0, class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nonNullString("ou;I}");
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.toGenericString();
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("{wN)k0M.?2B", "{wN)k0M.?2B", 56319, (Throwable) null);
      ClassUtil.getRootCause(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("YAvKtOUnY]");
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0, "YAvKtOUnY]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YAvKtOUnY]
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "net.sf.cglib.proxy.java.lang.RuntimeException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.primitiveType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isLocalType(class1, true);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      Class<Short> class2 = Short.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class3);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Double double0 = new Double(0.0);
      enumMap0.put(accessPattern0, double0);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.nonNullString("primitive");
      ClassUtil.isJacksonStdImpl((Object) class3);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Float> class1 = Float.class;
      ClassUtil.hasClass(class0, class1);
      ClassUtil.primitiveType(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.getDeclaredFields(class2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ClassUtil.nameOf((Named) null);
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockFile mockFile0 = new MockFile("[null]", "[null]");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileWriter0, "[null]");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getConstructors(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ClassUtil.nameOf((Named) null);
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getClassDescription(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class2);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassUtil.nonNullString("net.sf.cglib.proxy.");
      Class<Byte> class0 = Byte.class;
      ClassUtil.isJacksonStdImpl(class0);
      Float float0 = new Float(0.0);
      ClassUtil.nonNull((Object) "net.sf.cglib.proxy.", (Object) float0);
      ClassUtil.classNameOf("net.sf.cglib.proxy.");
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.getEnclosingClass(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getConstructors(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
      ClassUtil.classOf(class0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) runtimeException0, "2@fGvzZ |Zl=B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Class<Double> class0 = Double.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.canBeABeanType(class0);
      Class<Module> class1 = Module.class;
      ClassUtil.findConstructor(class1, false);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getClassDescription((Object) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      String string1 = "q!~z(&]5";
      int int0 = 1202;
      StackTraceElement stackTraceElement0 = new StackTraceElement("q!~z(&]5", "unknown", (String) null, 1202);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = null;
      try {
        stackTraceElement1 = new StackTraceElement("&Q", (String) null, (String) null, 70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null);
      boolean boolean0 = new Boolean((String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      ClassUtil.throwIfRTE(sQLIntegrityConstraintViolationException0);
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.throwIfError(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Object object0 = new Object();
      ClassUtil classUtil0 = new ClassUtil();
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Class<Character> class0 = Character.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      Class<ArrayType> class0 = ArrayType.class;
      typeFactory1.constructCollectionLikeType(class0, class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.nameOf((Named) null);
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      MapLikeType mapLikeType0 = mapType0.withValueHandler("[null]");
      ClassUtil.quotedOr(mapLikeType0, "NON_EMPTY");
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      Class<ArrayType> class0 = ArrayType.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class0, class0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      ArrayType.construct((JavaType) collectionLikeType0, typeBindings0);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.wrapperType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.classOf(typeFactory0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findEnumType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType";
      ClassUtil.backticked("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      Class<Character> class0 = Character.TYPE;
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<String> class2 = String.class;
      ClassUtil.getDeclaringClass(class2);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientException0.getLocalizedMessage();
      ClassUtil.throwIfRTE(sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Short> class1 = Short.TYPE;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, true);
      Class<Integer> class2 = Integer.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.isObjectOrPrimitive(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.createInstance(class3, true);
      Class<RuntimeException> class4 = RuntimeException.class;
      Class<MapType> class5 = MapType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class4, class5, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassUtil.nonNullString("non-static member class");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.findEnumType(class0);
      ClassUtil.getClassDescription(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class1);
      Float float0 = new Float(1.42732F);
      ClassUtil.getOuterClass(class1);
      ClassUtil.nameOf((Named) null);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("!V{sCO>CnJJH.S-?z", "!V{sCO>CnJJH.S-?z");
      ClassUtil.throwIfRTE((Throwable) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.findSuperClasses(class0, class0, false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.findEnumType(class0);
      ClassUtil.getClassDescription(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class1);
      Float float0 = new Float(1.42732F);
      Character.valueOf('i');
      Float float1 = new Float((-2701.2F));
      ClassUtil.nullOrToString(float1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, false);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-605166913), objectMapper0, mockFileOutputStream0);
      uTF8JsonGenerator0.setHighestNonEscapedChar((-2216));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", "JSON");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTimeoutException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float float0 = new Float(0.0F);
      ClassUtil.nonNull((Float) null, float0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getConstructors(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class1, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler((Object) null);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Integer> class2 = Integer.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.isObjectOrPrimitive(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.createInstance(class3, true);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("^>FRncr,");
      mockRuntimeException0.getLocalizedMessage();
      mockRuntimeException0.fillInStackTrace();
      mockRuntimeException0.getStackTrace();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      mockRuntimeException0.getStackTrace();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockRuntimeException0.getSuppressed();
      ClassUtil.getClassDescription(mockRuntimeException0);
      ClassUtil.nullOrToString("^>FRncr,");
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException();
      ClassUtil.nullOrToString(mockRuntimeException1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("SL8", "5;");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: SL8
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.findConstructor(class0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      jsonFactory2.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory3 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory4 = jsonFactory3.setOutputDecorator((OutputDecorator) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((DataOutput) null, jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ClassUtil.getRootCause(sQLTimeoutException0);
      Class<Error> class0 = Error.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) null, jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTimeoutException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.backticked("net.sf.cglib.proxy.java.lang.Double");
      ClassUtil.nullOrToString("net.sf.cglib.proxy.java.lang.Double");
      ClassUtil.nullOrToString(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      sQLTransactionRollbackException0.fillInStackTrace();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`net.sf.cglib.proxy.java.lang.Double`", (String) null, 681, sQLTransactionRollbackException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("elementType", "Missing field (broken JDK (de)serialization?)", "Missing field (broken JDK (de)serialization?)", 681);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("`net.sf.cglib.proxy.java.lang.Double`", "net.sf.cglib.proxy.java.lang.Double", ")Y#{6g?7Ix`3BL5", 681);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("elementType", "java.lang.Class@0000000002", "Q%,}NV", 681);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("kUC;eydSEu98<4X5RY!", ")Y#{6g?7Ix`3BL5", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType", 3337);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("net.sf.cglib.proxy.java.lang.Long", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", "l$:\"\"u!?<", 1199);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("l$:\"\"u!?<", "java.lang.Class@0000000002", "I/)a`x`M\"", 1199);
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLInvalidAuthorizationSpecException0.setStackTrace(stackTraceElementArray0);
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
      ClassUtil.findEnumType(class1);
      ClassUtil.nonNullString("Bx;Ex9");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.hibernate.proxy.java.lang.annotation.Annotation", "jiy](:4&fq;^", 3);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "net.sf.cglib.proxy.java.lang.Integer", (Throwable) sQLFeatureNotSupportedException0);
      jsonMappingException0.toString();
      ArrayList<Class<Byte>> arrayList0 = new ArrayList<Class<Byte>>();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper0, (OutputStream) null);
      uTF8JsonGenerator0.setHighestNonEscapedChar(1);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // net.sf.cglib.proxy.java.lang.Integer
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      typeFactory0.withClassLoader(classLoader0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Error> class0 = Error.class;
      ClassUtil.getEnclosingClass(class0);
      Float float0 = new Float(1.42732F);
      ClassUtil.classNameOf(defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      // Undeclared exception!
      try { 
        typeFactory1.constructRawMapLikeType(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier Mock for TypeModifier, hashCode: 233149662 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$313292398) return null for type [simple type, class java.lang.Number]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.canBeABeanType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isConcrete(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.primitiveType(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings.emptyBindings();
      Class<Integer> class3 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class3);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(mapLikeType0, "39$q,[-,aC,,DY*H?", "e6N$&L;]({{ e$w%8");
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping();
      Class<Error> class4 = Error.class;
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class4);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '39$q,[-,aC,,DY*H?' as a subtype of [map-like type; class java.lang.Integer, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]: e6N$&L;]({{ e$w%8
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.canBeABeanType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<IOException> class1 = IOException.class;
      ClassUtil.primitiveType(class1);
      TypeFactory.defaultInstance();
      TypeBindings.emptyBindings();
      Class<Module> class2 = Module.class;
      ClassUtil.isProxyType(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class3, false);
      constructor0.getAnnotatedParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParamCount();
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getDeclaredFields(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getEnclosingClass(class1);
      char char0 = 'v';
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<ArrayType> class0 = ArrayType.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class0, class0);
      Class<IOException> class1 = IOException.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings0);
      Class<Byte> class2 = Byte.class;
      ClassUtil.findSuperTypes((JavaType) arrayType0, (Class<?>) class2, false);
      ClassUtil.isBogusClass(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class2, typeBindings0, (JavaType) arrayType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(referenceType0, class1);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.exc.InvalidFormatException): Cannot deserialize value of type `java.io.IOException` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.type.ReferenceType`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.toString();
      MockIOException mockIOException1 = (MockIOException)ClassUtil.throwIfError(mockIOException0);
      Class<Long> class0 = Long.class;
      ClassUtil.hasClass(mockIOException1, class0);
      ClassUtil.isBogusClass(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      Class<IOException> class2 = IOException.class;
      Class<Object> class3 = Object.class;
      List<Class<?>> list0 = new ArrayList<Class<Byte>>();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class3, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper0, (OutputStream) null);
      int int0 = (-3956);
      uTF8JsonGenerator0.setHighestNonEscapedChar(1);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) mockIOException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      String string0 = "org.hibernate.proxy.java.lang.annotation.Annotation";
      SQLWarning sQLWarning0 = new SQLWarning("Fs/$7Rx");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Fs/$7Rx", "n/a<w0mT *>!dR*7*", "org.hibernate.proxy.java.lang.annotation.Annotation", (-3494));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(",tc;o?0k lBud_}", "Fs/$7Rx", "Fs/$7Rx", (-3494));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("X.g", "mjn`88Lh2LTPu", "!", (-3494));
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLWarning0.setStackTrace(stackTraceElementArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("localizedMessage", sQLWarning0);
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.nameOf(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      boolean boolean0 = new Boolean("`char`");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassUtil.emptyIterator();
      ClassUtil.getClassMethods(class1);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<Integer> class2 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.findEnumType(class0);
      ClassUtil.classOf((Object) null);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.findSuperTypes((Class<?>) null, class0);
      ClassUtil.isBogusClass((Class<?>) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isJacksonStdImpl(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.toString();
      Throwable throwable0 = ClassUtil.throwIfError(mockIOException0);
      Class<Long> class0 = Long.class;
      ClassUtil.hasClass(throwable0, class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<String> class1 = String.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.isConcrete(class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class3);
      Class<Long> class4 = Long.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      Class<AccessibleObject> class5 = AccessibleObject.class;
      Class<CollectionLikeType> class6 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class5, class6, true);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = new Object();
      Class<String> class0 = String.class;
      Class<NoClass> class1 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class0, true);
      Class<Module> class2 = Module.class;
      ClassUtil.findSuperTypes(class2, class2, list0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 10);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      POJONode pOJONode0 = new POJONode(bufferedInputStream0);
      ClassUtil.nullOrToString(pOJONode0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      constructor0.toGenericString();
      constructor0.getAnnotatedReturnType();
      ClassUtil.isConcrete((Member) constructor0);
      MockException mockException0 = new MockException();
      Class<MapLikeType> class2 = MapLikeType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonMappingException> class3 = JsonMappingException.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class3);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class3, (List<JavaType>) arrayList0);
      ArrayType.construct((JavaType) collectionLikeType0, typeBindings0);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class2, false);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isConcrete(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
      TypeFactory.defaultInstance();
      TypeBindings.emptyBindings();
      Float float0 = new Float(0.0);
      ClassUtil.nonNull(float0, (Float) null);
      Class<Short> class2 = Short.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isProxyType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class1, class1, true);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
      TypeFactory.defaultInstance();
      TypeBindings.emptyBindings();
      ClassUtil.isProxyType(class0);
      Byte byte0 = new Byte((byte) (-45));
      Byte byte1 = new Byte((byte) (-122));
      ClassUtil.nonNull(byte0, byte1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class0, "eOD");
      jsonMappingException0.toString();
      Throwable throwable0 = ClassUtil.throwIfError(jsonMappingException0);
      ClassUtil.hasClass((Object) null, class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.isBogusClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from number null: eOD
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.canBeABeanType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isConcrete(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.primitiveType(class2);
      TypeFactory.defaultInstance();
      TypeBindings.emptyBindings();
      Float float0 = new Float(0.0);
      ClassUtil.nonNull(float0, (Float) null);
      Class<Short> class3 = Short.TYPE;
      ClassUtil.defaultValue(class3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<NoClass> class4 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isJacksonStdImpl((Object) float0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.findEnumType(class0);
      ClassUtil.getClassDescription(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes(class1, class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0, hashMap0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getConstructors(class2);
      Character character0 = new Character('y');
      ClassUtil.nullOrToString(character0);
      ClassUtil.nullOrToString("java.lang.Character@0000000008");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("org.hibernate.proxy.java.lang.annotation.Annotation");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("BqLl", sQLWarning0);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.ylang.od", throwable0);
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("java.ylang.od");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientConnectionException0, "cA`wq&yIPHNs1Od0G_9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cA`wq&yIPHNs1Od0G_9
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<String> class1 = String.class;
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class1, class2, false);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.getClassDescription(class0);
      ClassUtil classUtil0 = new ClassUtil();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getConstructors(class1);
      Class<Object> class2 = Object.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Class<String> class3 = String.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Double double0 = new Double(887.3367806);
      ClassUtil.classOf(double0);
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.findSuperTypes(class0, class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isJacksonStdImpl(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.weirdStringException("4K", class1, "entrySet");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl1, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class0, class0, false);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.toString();
      Throwable throwable0 = ClassUtil.throwIfError(mockIOException0);
      Class<Long> class0 = Long.class;
      ClassUtil.hasClass(throwable0, class0);
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperClasses(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      constructor0.getExceptionTypes();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor1.getDeclaredAnnotations();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("serialVersionUID");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientConnectionException0, "serialVersionUID");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // serialVersionUID
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      Float float0 = new Float(0.0);
      ClassUtil.nonNull((Float) null, (Float) null);
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ClassUtil.nonNull((Float) null, (Float) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findClassAnnotations(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Conflicting getter definitions for property \"");
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      Class<NoClass> class2 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      constructor0.toGenericString();
      constructor0.getAnnotatedReturnType();
      ClassUtil.isConcrete((Member) constructor0);
      MockException mockException0 = new MockException();
      mockException0.getSuppressed();
      mockException0.toString();
      ClassUtil.getRootCause(mockException0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<NoClass> class2 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      typeFactory0.withClassLoader(classLoader0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0, hashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, SettableBeanProperty> hashMap1 = new HashMap<String, SettableBeanProperty>();
      classLoader0.getParent();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getConstructors(class0);
      Character character0 = new Character('y');
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.nullOrToString(classLoader0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2090));
      placeholderForType0.actualType();
      placeholderForType0.getInterfaces();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.quotedOr((Object) null, "2uM4");
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "array");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          TypeFactory typeFactory0 = TypeFactory.defaultInstance();
          ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
          TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
          Class<ArrayType> class0 = ArrayType.class;
          CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class0, class0);
          ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
          ArrayList<JavaType> arrayList1 = new ArrayList<JavaType>();
          TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList1);
          ArrayType.construct((JavaType) collectionLikeType0, typeBindings0);
          boolean boolean0 = false;
          Class<Double> class1 = Double.class;
          ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class1, false);
          Throwable throwable0 = null;
          SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor169.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2090));
      placeholderForType0.actualType();
      placeholderForType0.getInterfaces();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.quotedOr((Object) null, "2uM4");
      ClassUtil.isLocalType(class0, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.nameOf(class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.isJacksonStdImpl(class1);
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class0);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.isProxyType(class3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      ClassUtil.findEnumType(class3);
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class4, class3, false);
      ClassUtil.getDeclaredMethods(class2);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ClassUtil.nonNullString("-g?^y^=Z:;/v/");
      ClassUtil classUtil0 = new ClassUtil();
      MockError mockError0 = new MockError();
      ClassUtil.getClassDescription(mockError0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      HashMap<String, SettableBeanProperty> hashMap0 = new HashMap<String, SettableBeanProperty>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      NameTransformer.NopTransformer nameTransformer_NopTransformer0 = new NameTransformer.NopTransformer();
      Class<Float> class0 = Float.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getConstructors(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findConstructor(class2, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      ClassUtil.throwIfError((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(12);
      placeholderForType0.actualType();
      placeholderForType0.getInterfaces();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isLocalType(class0, false);
      HashMap<Character, ArrayType> hashMap0 = new HashMap<Character, ArrayType>();
      ClassUtil.nonNull(hashMap0, hashMap0);
      Character character0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructArrayType(class1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$313292398) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ClassUtil.backticked("jCXzTTX%v<");
      Class<Character> class0 = Character.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ClassUtil.nonNullString("-g?^y^=Z:;/v/");
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, false);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[4];
      annotationMapArray0[0] = null;
      annotationMapArray0[1] = null;
      annotationMapArray0[2] = null;
      annotationMapArray0[3] = null;
      ClassUtil.findClassAnnotations(class1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Integer integer0 = new Integer((-69));
      ClassUtil.hasClass(integer0, class0);
      ClassUtil.defaultValue(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<NoClass> class1 = NoClass.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.isLocalType(class2, true);
      ClassUtil.findRawSuperTypes(class0, class0, false);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Float float0 = new Float((-297.24167F));
      Float float1 = new Float((double) (-297.24167F));
      ClassUtil.nonNull(float0, float1);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getClassDescription(float1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      HashMap<String, SettableBeanProperty> hashMap0 = new HashMap<String, SettableBeanProperty>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      NameTransformer.NopTransformer nameTransformer_NopTransformer0 = new NameTransformer.NopTransformer();
      Class<IOException> class0 = IOException.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Module> class1 = Module.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.getConstructors(class2);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      Float float0 = new Float(0.0F);
      ClassUtil.classNameOf(float0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findClassAnnotations(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getConstructors(class3);
      Class<MapLikeType> class4 = MapLikeType.class;
      ClassUtil.findConstructor(class4, true);
      Class<IOException> class5 = IOException.class;
      boolean boolean0 = true;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class5, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.isJacksonStdImpl(class5);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      DeserializationConfig deserializationConfig0 = null;
      ObjectMapper objectMapper1 = objectMapper0.setConfig((DeserializationConfig) null);
      // Undeclared exception!
      try { 
        objectMapper1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfigBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getClassMethods(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "jEl&80";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("jEl&80");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("D_>:");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "D_>:");
      sQLInvalidAuthorizationSpecException0.printStackTrace(printWriter0);
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException0);
      ClassUtil.throwRootCauseIfIOE(throwable0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      MockFile mockFile0 = new MockFile((File) null, "net.sf.cglib.proxy.java.lang.Error");
      MockPrintWriter mockPrintWriter1 = null;
      try {
        mockPrintWriter1 = new MockPrintWriter(mockFile0, "Cannot update object of type %s (using deserializer for type %s)");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Cannot update object of type %s (using deserializer for type %s)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Double double0 = new Double(887.3367806);
      ClassUtil.classOf(double0);
      Class<Double> class0 = Double.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.findSuperTypes(class0, class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.isJacksonStdImpl(class1);
      Class<Error> class2 = Error.class;
      ClassUtil.findConstructor(class2, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.weirdStringException("4K", class1, "entrySet");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl1, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<String> class2 = String.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getPackageName(class3);
      ClassUtil.isObjectOrPrimitive(class2);
      Class<Character> class4 = Character.class;
      ClassUtil.getGenericInterfaces(class4);
      ClassUtil.getConstructors(class2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      Class<Error> class5 = Error.class;
      Class<Error> class6 = Error.class;
      ClassUtil.findConstructor(class6, false);
      Class<Object> class7 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class7, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.getGenericInterfaces(class5);
      ClassUtil.isObjectOrPrimitive(class7);
      ClassUtil.isProxyType(class6);
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "'CUG8'ek4nVe: ";
      ClassUtil.nonNullString("'CUG8'ek4nVe: ");
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "'CUG8'ek4nVe: ", true);
      int int0 = 1662;
      PipedReader pipedReader0 = new PipedReader(3034);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = null;
      try {
        readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1662, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findEnumType(class0);
      Character character0 = new Character('F');
      ClassUtil.classOf(character0);
      Class<Double> class1 = Double.class;
      ClassUtil.findEnumType(class1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockIOException mockIOException0 = new MockIOException("Bracketed IPv6 address must contain closing bracket");
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, (String) null, mockIOException0);
      ClassUtil.throwIfError(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.toString();
      Throwable throwable0 = ClassUtil.throwIfError(mockIOException0);
      Class<Long> class0 = Long.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.evosuite.runtime.mock.java.lang.MockThrowable");
      ClassUtil.emptyIterator();
      ClassUtil.getClassMethods(class0);
      ClassUtil.isProxyType(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.evosuite.runtime.mock.java.lang.MockThrowable");
      SQLTransientException sQLTransientException0 = new SQLTransientException(mockIOException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(throwable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Float float0 = new Float((-297.24167F));
      Float float1 = new Float((double) (-297.24167F));
      ClassUtil.nonNull(float0, float1);
      ClassUtil.quotedOr(float1, "AnnotationIntrospector returned serializer definition of type ");
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.getLocalizedMessage();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ClassUtil.backticked("jCXzTTX%v<");
      Class<Character> class0 = Character.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Object object0 = new Object();
      Class<?> class0 = ClassUtil.classOf(object0);
      ClassUtil.getGenericSuperclass(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("_k;UW;c/*", "keyType");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("_k;UW;c/*", (String) null, (-1538), sQLNonTransientException0);
      sQLNonTransientException0.setNextException(sQLFeatureNotSupportedException0);
      sQLNonTransientException0.fillInStackTrace();
      ClassUtil.throwIfIOE(sQLNonTransientException0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getConstructors(class0);
      Character character0 = new Character('y');
      ClassUtil.nullOrToString(character0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      ClassUtil.nonNull(long0, long0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getDeclaringClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(8);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      placeholderForType0.findTypeParameters(class1);
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<ArrayType> class0 = ArrayType.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class0, class0);
      Class<IOException> class1 = IOException.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      ArrayType.construct((JavaType) collectionLikeType0, typeBindings0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Default constructor for ", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, jsonMappingException_Reference0);
      ClassUtil.classNameOf("Default constructor for ");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1872));
      // Undeclared exception!
      try { 
        placeholderForType0.withContentValueHandler(typeFactory0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2090));
      placeholderForType0.actualType();
      placeholderForType0.getInterfaces();
      Class<String> class0 = String.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.quotedOr((Object) null, "2uM4");
      ClassUtil.isLocalType(class1, false);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.nameOf(class2);
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.findEnumType(class1);
      Class<ReferenceType> class3 = ReferenceType.class;
      ClassUtil.isProxyType(class3);
      ClassUtil.classNameOf(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<NoClass>[] classArray0 = (Class<NoClass>[]) Array.newInstance(Class.class, 6);
      Class<NoClass> class4 = NoClass.class;
      classArray0[0] = class4;
      Class<NoClass> class5 = NoClass.class;
      classArray0[1] = class5;
      Class<NoClass> class6 = NoClass.class;
      classArray0[2] = class6;
      Class<NoClass> class7 = NoClass.class;
      classArray0[3] = class7;
      Class<NoClass> class8 = NoClass.class;
      classArray0[4] = class8;
      Class<NoClass> class9 = NoClass.class;
      classArray0[5] = class9;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2090));
      placeholderForType0.actualType();
      placeholderForType0.getInterfaces();
      Class<String> class0 = String.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.quotedOr((Object) null, "2uM4");
      ClassUtil.isLocalType(class1, false);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLDataException sQLDataException0 = new SQLDataException("2uM4", "\"%s\"", sQLNonTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("annotation", sQLDataException0);
      MockException mockException0 = new MockException("annotation", sQLRecoverableException0);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("org.hibernate.proxy.", mockException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      typeFactory0.withClassLoader(classLoader0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Error> class0 = Error.class;
      ClassUtil.getEnclosingClass(class0);
      Float float0 = new Float(13.272661F);
      ClassUtil.classNameOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.toString();
      Throwable throwable0 = ClassUtil.throwIfError(mockIOException0);
      Class<Long> class0 = Long.TYPE;
      ClassUtil.hasClass(throwable0, class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.defaultValue(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.nameOf(class0);
      ClassUtil.backticked((String) null);
      Class<Long> class1 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ClassUtil.nonNullString("-g?^y^=Z:;/v/");
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.getClassDescription(class0);
      ClassUtil classUtil0 = new ClassUtil();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0, hashMap0);
      HashMap<String, SettableBeanProperty> hashMap1 = new HashMap<String, SettableBeanProperty>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      BeanDeserializer beanDeserializer0 = null;
      try {
        beanDeserializer0 = new BeanDeserializer(beanDeserializerBuilder0, (BeanDescription) null, beanPropertyMap0, hashMap1, linkedHashSet0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JaHlSdE5YM", (String) null, 0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "serialVersionUID");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // serialVersionUID
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<Void> class0 = Void.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = null;
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) arrayType0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) arrayType0;
      javaTypeArray0[1] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings1, (JavaType) arrayType0, javaTypeArray0, javaType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
      ClassUtil.quotedOr(referenceType1, "entrySet");
      ClassUtil.classOf(javaType0);
      int[] intArray0 = new int[2];
      typeBindings1.toString();
      intArray0[0] = 0;
      intArray0[1] = 0;
      arrayType0.withContentValueHandler(javaType0);
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataException0.spliterator();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("\"[reference type, class java.lang.Void<java.lang.Object><[simple type, class java.lang.Object]>]\"", "entrySet", 0, intArray0, sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "8 DH?m^8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isBogusClass(class0);
      Class<Byte> class1 = Byte.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Byte has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<POJONode> class1 = POJONode.class;
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findSuperTypes(class1, class2);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(defaultSerializerProvider_Impl0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<Long> class1 = Long.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      Class<Boolean> class2 = Boolean.TYPE;
      Class<String> class3 = String.class;
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class3, true);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, class1, "annotation");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.RuntimeException) must override method 'annotation'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ClassUtil.nonNullString("'CUG8'ek4nVe: ");
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getClassDescription("'CUG8'ek4nVe: ");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      HashMap<String, SettableBeanProperty> hashMap0 = new HashMap<String, SettableBeanProperty>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      NameTransformer.NopTransformer nameTransformer_NopTransformer0 = new NameTransformer.NopTransformer();
      Class<Float> class0 = Float.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getConstructors(class2);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.findConstructor(class3, true);
      Class<String> class4 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Illegal character (code 0x", "'CUG8'ek4nVe: ", 1085);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLSyntaxErrorException0);
      ClassUtil.throwIfError(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-4007);
      intArray0[1] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("I@^dCuq@iiLIOy", intArray0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("serialVersionUID", batchUpdateException0);
      SQLDataException sQLDataException0 = new SQLDataException("`java.lang.Object`", "muzg_(XK6=zGWu", sQLTransientConnectionException0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Object object0 = null;
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<MapType> class0 = MapType.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class1);
      String string0 = null;
      String string1 = "9f^6V*(k'\"Vq~.}[^";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "9f^6V*(k'\"Vq~.}[^", sQLInvalidAuthorizationSpecException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      String string2 = "size";
      int int0 = 800;
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement("\"/V96.vSy", (String) null, "size", 800);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<ArrayType> class1 = ArrayType.class;
      boolean boolean0 = false;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getPackageName(class2);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.emptyIterator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("&;nb#e", "", "&;nb#e", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("&;nb#e", "&;nb#e", "&;nb#e", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("&;nb#e", "3BC2H", "", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("size", "", "size", 2);
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      sQLTransactionRollbackException0.fillInStackTrace();
      MockFile mockFile0 = new MockFile(":^%<", ">.f{|yMcc");
      mockFile0.delete();
      mockFile0.toPath();
      mockFile0.delete();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      sQLTransactionRollbackException0.printStackTrace((PrintWriter) mockPrintWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransactionRollbackException0, "Y#^9M6~V?^?n8C>@;l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Y#^9M6~V?^?n8C>@;l
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class0);
      ClassUtil.isJacksonStdImpl((Object) list0);
      String string0 = "keyUniverse";
      SQLWarning sQLWarning0 = new SQLWarning("keyUniverse", "keyUniverse");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLWarning0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyUniverse
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<String> class2 = String.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getPackageName(class3);
      ClassUtil.isObjectOrPrimitive(class2);
      Class<Character> class4 = Character.class;
      ClassUtil.getGenericInterfaces(class4);
      ClassUtil.getConstructors(class2);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, 0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 6);
      Class<Object> class5 = Object.class;
      classArray0[0] = class5;
      Class<Object> class6 = Object.class;
      classArray0[1] = class6;
      Class<Object> class7 = Object.class;
      classArray0[2] = class7;
      Class<Object> class8 = Object.class;
      classArray0[3] = class8;
      Class<Object> class9 = Object.class;
      classArray0[4] = class9;
      Class<Object> class10 = Object.class;
      classArray0[5] = class10;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<ArrayType> class0 = ArrayType.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class0, class0);
      Class<IOException> class1 = IOException.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings0);
      Class<Byte> class2 = Byte.class;
      ClassUtil.findSuperTypes((JavaType) arrayType0, (Class<?>) class2, false);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.canBeABeanType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.isConcrete(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.primitiveType(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findConstructor(class3, true);
      Class<NoClass> class4 = NoClass.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class5 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class5);
      AnnotationMap annotationMap0 = AnnotationMap.of(class4, (Annotation) null);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[7];
      annotationMapArray0[0] = annotationMap0;
      typeResolutionContext_Basic0.resolveType(class5);
      annotationMapArray0[1] = annotationMap0;
      typeResolutionContext_Basic0.resolveType(class5);
      typeBindings0.getTypeParameters();
      AnnotationMap annotationMap1 = new AnnotationMap();
      // Undeclared exception!
      try { 
        annotationMap0.addIfNotPresent((Annotation) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotationMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = true;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotations();
      constructor0.getDeclaredAnnotation(class1);
      constructor0.toGenericString();
      constructor0.getAnnotatedReturnType();
      ClassUtil.isConcrete((Member) constructor0);
      MockException mockException0 = new MockException();
      mockException0.getSuppressed();
      mockException0.toString();
      ClassUtil.getRootCause(mockException0);
      MockThrowable mockThrowable0 = new MockThrowable("public java.lang.Object()");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockThrowable0, "public java.lang.Object()");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // public java.lang.Object()
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Double double0 = new Double(887.3367806);
      Class<?> class0 = ClassUtil.classOf(double0);
      assertNotNull(class0);
      
      Class<Double> class1 = Double.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.findSuperTypes(class1, class1);
      Class<MapType> class2 = MapType.class;
      boolean boolean0 = ClassUtil.isBogusClass(class2);
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class2);
      assertFalse(boolean1);
      
      Class<Error> class3 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isObjectOrPrimitive(class3);
      boolean boolean2 = ClassUtil.isProxyType(class1);
      assertTrue(boolean2 == boolean0);
      
      classUtil_Ctor0.getParameterAnnotations();
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      Class<RuntimeException> class0 = RuntimeException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("@\"Fdu}crn69", class0, "4K");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.RuntimeException` from String \"@\"Fdu}crn69\": 4K
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }
}
