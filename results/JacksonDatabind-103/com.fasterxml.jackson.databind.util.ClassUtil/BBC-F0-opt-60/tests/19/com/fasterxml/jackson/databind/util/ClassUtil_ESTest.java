/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:44:14 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<AccessPattern, SimpleType> hashMap0 = new HashMap<AccessPattern, SimpleType>();
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      hashMap0.put(accessPattern0, (SimpleType) null);
      EnumMap<AccessPattern, SimpleType> enumMap0 = new EnumMap<AccessPattern, SimpleType>(hashMap0);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<IOException>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("tcuDZ}g*SJN/+G>%T)");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      ClassUtil.isProxyType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<CollectionType> class3 = CollectionType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      javaTypeArray0[6] = (JavaType) simpleType0;
      javaTypeArray0[7] = (JavaType) simpleType0;
      javaTypeArray0[8] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[2]);
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(referenceType0, simpleType0);
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      Byte byte0 = new Byte((byte)0);
      ReferenceType referenceType3 = referenceType2.withContentTypeHandler(byte0);
      ClassUtil.rawClass(referenceType3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
      JavaType javaType0 = null;
      JavaType javaType1 = null;
      // Undeclared exception!
      try { 
        MapLikeType.upgradeFrom((JavaType) null, (JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.setCodec((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory3.configure(jsonGenerator_Feature0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      IOContext iOContext0 = new IOContext(bufferRecycler0, accessPattern0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      uTF8JsonGenerator0.getCharacterEscapes();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      jsonFactory2.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1125);
      JsonParser jsonParser0 = arrayNode0.traverse();
      Class<RuntimeException> class0 = RuntimeException.class;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "]W~");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected FIELD_NAME: ]W~
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getDeclaredMethods(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(") to output", " is not a primitive type", 1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("net.sf.cglib.proxy.", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ) to output
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getGenericInterfaces(class0);
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      Class<Error> class1 = Error.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getEnclosingClass(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";P");
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getOuterClass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isLocalType(class1, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature1, false);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      MockFile mockFile0 = new MockFile("JSON", "^+V8vDgn");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockPrintStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "hTaC';.QvPqJw{");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // hTaC';.QvPqJw{
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.canBeABeanType(class0);
      int[] intArray0 = new int[5];
      intArray0[0] = 9999;
      intArray0[1] = 2990;
      intArray0[2] = 3550;
      intArray0[3] = (-1654975209);
      intArray0[4] = 3;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (String) null, hashMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0, sQLClientInfoException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper2 = objectMapper1.setSerializerProvider(defaultSerializerProvider_Impl0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper2);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      File file0 = MockFile.createTempFile("JSON", "org.hibernate.proxy.com.fasterxml.jackson.databind.node.IntNode");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Cannot override _serializer: had a %s, trying to set to %s", "java.lang.Short");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class0, "ALLOW_NUMERIC_LEADING_ZEROS");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Cannot override _serializer: had a %s, trying to set to %s", "java.lang.String", 377, jsonMappingException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockFileOutputStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Integer` from number null: ALLOW_NUMERIC_LEADING_ZEROS
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.quotedOr((Object) null, "");
      int[] intArray0 = new int[2];
      intArray0[0] = 7;
      intArray0[1] = 7;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.core.filter.JsonPointerBasedFilter", intArray0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("java.lang.Double", batchUpdateException0);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("", "+)<\"B#", 7, sQLNonTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException1);
      sQLNonTransientConnectionException0.spliterator();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientConnectionException0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.noneOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      ClassUtil.verifyMustOverride(class0, iOException0, "org.hibernate.proxy.com.fasterxml.jackson.databind.node.IntNode");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      MockFile mockFile0 = new MockFile("c-XY+9 x%A.v%>OBQF", "org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.canBeABeanType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class1);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.quotedOr(class0, (String) null);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class2, class2, list0);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.isLocalType(class4, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ArrayType> class5 = ArrayType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class5, "7K?9Tk2*Ve]jQ.Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("IYOycG/a__emFZyo[sv", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "java.lang.Float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getConstructors(class0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-14);
      intArray0[1] = (-14);
      SQLException sQLException0 = new SQLException((String) null, (String) null, 15, (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, (-14), intArray0, sQLException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(batchUpdateException0);
      MockError mockError0 = new MockError((String) null, sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "UldZpj-\"BLelIC*L2)");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      try { 
        ClassUtil.throwRootCauseIfIOE(iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null, (Object) class1, (Object) javaType0);
      ArrayType arrayType1 = typeFactory0.constructArrayType((JavaType) arrayType0);
      ArrayType arrayType2 = ArrayType.construct((JavaType) arrayType1, (TypeBindings) null);
      ArrayType arrayType3 = arrayType2.withContentValueHandler(list0);
      ClassUtil.findSuperTypes((JavaType) arrayType3, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Double> class0 = Double.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "elementType");
      ClassUtil.isProxyType(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.hasClass(accessPattern0, class0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<IntNode> class1 = IntNode.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      ClassUtil.findRawSuperTypes(class1, class0, false);
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.", "org.hibernate.proxy.", (-2));
      SQLException sQLException1 = new SQLException("java.lang.Float", sQLException0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getEnclosingClass(class2);
      sQLException0.initCause(sQLException1);
      MockThrowable mockThrowable0 = new MockThrowable("j1tP,IRc+", sQLException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockThrowable0, "j1tP,IRc+");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iOException0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      ObjectReader objectReader1 = objectReader0.withAttributes(hashMap0);
      ObjectReader objectReader2 = objectReader1.at((String) null);
      ObjectReader objectReader3 = objectReader2.forType(class0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectReader3, byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.overrideStdFeatures(2, (-250));
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Closeable) byteArrayOutputStream0, (Exception) iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ByteArrayInputStream> enumMap0 = new EnumMap<AccessPattern, ByteArrayInputStream>(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility((JsonAutoDetect.Value) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("6LJE-k;5j=R_%sxW&l2");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "6LJE-k;5j=R_%sxW&l2");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) charBuffer0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-128), objectMapper1, printStream0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("6LJE-k;5j=R_%sxW&l2", class1, "org.hibernate.proxy.com.fasterxml.jackson.databind.SerializationConfig");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.util.AccessPattern` from String \"6LJE-k;5j=R_%sxW&l2\": org.hibernate.proxy.com.fasterxml.jackson.databind.SerializationConfig
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class1, javaTypeArray0);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray1 = new JavaType[5];
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      javaTypeArray1[0] = (JavaType) arrayType1;
      javaTypeArray1[1] = javaType0;
      javaTypeArray1[2] = javaType0;
      javaTypeArray1[3] = javaType0;
      javaTypeArray1[4] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray1, javaTypeArray1[1], javaTypeArray1[1]);
      MapType mapType1 = mapType0.withValueHandler(javaType0);
      Integer integer0 = new Integer((-828));
      MapLikeType mapLikeType0 = mapType0.withKeyValueHandler(integer0);
      MapLikeType mapLikeType1 = mapType1.withKeyTypeHandler(mapLikeType0);
      ArrayType arrayType2 = typeFactory0.constructArrayType((JavaType) mapLikeType1);
      arrayType2.isThrowable();
      ClassUtil.classNameOf(arrayType2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(108);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, "`com.fasterxml.jackson.databind.type.ArrayType`");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.getEnclosingClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1127);
      intArray0[1] = (-1127);
      intArray0[2] = (-1127);
      intArray0[3] = (-1127);
      intArray0[4] = (-1127);
      intArray0[5] = (-1127);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      intArray0[6] = (-1127);
      intArray0[7] = (-1127);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockError mockError0 = new MockError(mockRuntimeException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.SimpleType", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.SimpleType", (-1127), intArray0, mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-641314725);
      intArray0[1] = 115;
      intArray0[2] = (-8);
      intArray0[3] = (-345);
      intArray0[4] = (-1462);
      intArray0[5] = (-720);
      intArray0[6] = (-1807672430);
      intArray0[7] = 2109;
      intArray0[8] = 16777215;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[]", (String) null, 1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "local/anonymous", 1536, sQLTimeoutException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Sub-class %s (of class %s) must override method '%s'", "Sub-class %s (of class %s) must override method '%s'", (-345), sQLTransactionRollbackException0);
      DataTruncation dataTruncation0 = new DataTruncation(1841, true, true, (-720), (-720), sQLIntegrityConstraintViolationException0);
      sQLTimeoutException0.initCause(sQLIntegrityConstraintViolationException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Sub-class %s (of class %s) must override method '%s'", intArray0, dataTruncation0);
      // Undeclared exception!
      ClassUtil.getRootCause(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.defaultValue(class0);
      Iterator<Short> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "org.hibernate.proxy.com.fasterxml.jackson.databind.type.TypeFactory";
      ClassUtil.backticked("org.hibernate.proxy.com.fasterxml.jackson.databind.type.TypeFactory");
      ClassUtil.quotedOr("org.hibernate.proxy.com.fasterxml.jackson.databind.type.TypeFactory", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.TypeFactory");
      MockError mockError0 = new MockError((Throwable) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.hibernate.proxy.com.fasterxml.jackson.databind.type.TypeFactory", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.TypeFactory", "\"org.hibernate.proxy.com.fasterxml.jackson.databind.type.TypeFactory\"", 1673);
      stackTraceElementArray0[0] = stackTraceElement0;
      mockError0.setStackTrace(stackTraceElementArray0);
      mockError0.printStackTrace();
      ClassUtil.throwRootCauseIfIOE(mockError0);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      boolean boolean0 = ClassUtil.hasClass(class0, class0);
      Class<NoClass> class1 = NoClass.class;
      boolean boolean1 = ClassUtil.isBogusClass(class1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.fasterxml.jackson.databind.node.BigIntegerNode", "net.sf.cglib.proxy.java.lang.Character", 0);
      ClassUtil.findClassAnnotations(class0);
      SQLDataException sQLDataException0 = new SQLDataException("net.sf.cglib.proxy.java.lang.Character", "Sub-class %s (of class %s) must override method '%s'", 3912, sQLTransientConnectionException0);
      sQLTransientConnectionException0.initCause(sQLDataException0);
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Boolean> class0 = Boolean.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      deserializationFeatureArray0[4] = deserializationFeature4;
      DeserializationFeature deserializationFeature5 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      deserializationFeatureArray0[5] = deserializationFeature5;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(deserializationFeatureArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2369), objectReader1, objectOutputStream0);
      objectOutputStream0.writeByte(1);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      defaultPrettyPrinter0.createInstance();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "8Rj0\"u,LBl'XR");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) objectOutputStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 8Rj0\"u,LBl'XR
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MapType> class0 = MapType.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      MockError mockError0 = new MockError("java.io.IOException");
      ClassUtil.throwRootCauseIfIOE(mockError0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("'-b%h", "java.io.IOException", (-2186), mockError0);
      sQLTransientConnectionException0.printStackTrace();
      sQLTransientConnectionException0.setNextException((SQLException) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      jsonFactory1._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      // Undeclared exception!
      try { 
        objectMapper0.valueToTree((Object) jsonFactory0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.fasterxml.jackson.databind.JsonMappingException$Reference
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDelegateCreator();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition(annotationIntrospector0, (AnnotatedMember) null, (PropertyName) null, propertyMetadata0, (JsonInclude.Value) null);
      BeanPropertyDefinition beanPropertyDefinition0 = simpleBeanPropertyDefinition0.withInclusion((JsonInclude.Value) null);
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) beanPropertyDefinition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      enumSet0.clear();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class2, class1);
      CollectionType collectionType1 = collectionType0.withValueHandler(enumSet0);
      Character character0 = Character.valueOf('r');
      CollectionType collectionType2 = collectionType1.withContentValueHandler(character0);
      Class<Error> class3 = Error.class;
      ClassUtil.findSuperTypes((JavaType) collectionType2, (Class<?>) class3, false);
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(enumSet0);
      assertFalse(class4.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      TypeReference<CollectionType> typeReference0 = (TypeReference<CollectionType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(javaType0).when(typeReference0).getType();
      objectReader0.forType(typeReference0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      assertEquals(1, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<String> class1 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getDeclaredMethods(class0);
      Class<Byte> class2 = Byte.class;
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) pipedOutputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b8p&uBF>");
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("JSON");
      JsonParser jsonParser0 = arrayNode0.traverse();
      Class<MapLikeType> class0 = MapLikeType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_FLOAT: net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<Error> class0 = Error.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getDeclaringClass(class1);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedList> class2 = LinkedList.class;
      Class<Integer> class3 = Integer.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class2, class3);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class4, true);
      AccessibleObject accessibleObject0 = ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) constructor0);
      CollectionType collectionType1 = collectionType0.withTypeHandler(accessibleObject0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, collectionType1, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.SimpleType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(beanProperty_Bogus0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      ObjectReader objectReader2 = objectReader1.withAttribute(jsonParser_Feature0, javaType0);
      TypeReference<MapLikeType> typeReference0 = (TypeReference<MapLikeType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader2.forType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      objectMapper0.readValues((JsonParser) null, class0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<AccessPattern> class1 = AccessPattern.class;
      objectMapper0.reader();
      String string0 = ClassUtil.canBeABeanType(class1);
      assertEquals("enum", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertTrue(constructor0.isAccessible());
      
      Class<IOException> class1 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class1, false);
      String string0 = ClassUtil.getClassDescription(iOException0);
      assertEquals("`java.io.IOException`", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      enumSet0.clear();
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("zQ$6");
      SQLWarning sQLWarning0 = new SQLWarning("K@:G(pU1p-vX%jG2C)", (String) null, sQLTimeoutException0);
      sQLTimeoutException0.initCause(sQLWarning0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ByteArrayInputStream> enumMap0 = new EnumMap<AccessPattern, ByteArrayInputStream>(class0);
      EnumMap<AccessPattern, ByteArrayInputStream> enumMap1 = enumMap0.clone();
      enumMap1.isEmpty();
      ClassUtil.findEnumType(enumMap1);
      Class<Double> class1 = Double.TYPE;
      String string0 = ClassUtil.getPackageName(class1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ByteArrayInputStream> enumMap0 = new EnumMap<AccessPattern, ByteArrayInputStream>(class0);
      enumMap0.clone();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<MapType> class1 = MapType.class;
      Class<Double> class2 = Double.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      Byte byte0 = new Byte((byte)52);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0, (Object) simpleType0, (Object) byte0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) arrayType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(arrayType0, (JavaType) null);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) arrayType0, javaTypeArray0, (JavaType) arrayType0, (JavaType) collectionLikeType0);
      ArrayType arrayType1 = ArrayType.construct((JavaType) mapType0, typeBindings0);
      Class<?> class3 = ClassUtil.rawClass(arrayType1);
      assertFalse(class3.isEnum());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasClass(fileSystemHandling0, class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.isLocalType((Class<?>) null, true);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("double", class1.toString());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      Class<Long> class1 = Long.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class1, class1, list0);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      Class<Long> class1 = Long.TYPE;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      Class<InputStream> class2 = InputStream.class;
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class1, class2, false);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, list1.size());
      
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class3);
      String string0 = ClassUtil.backticked("L!C1T");
      assertEquals("`L!C1T`", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      Class<Long> class1 = Long.TYPE;
      int[] intArray0 = new int[4];
      intArray0[0] = (-261);
      intArray0[1] = 16777215;
      intArray0[2] = 1506;
      intArray0[3] = 909;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("[null]", "com.fasterxml.jackson.databind.ser.BeanSerializer");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[null]", (String) null, intArray0, sQLTransactionRollbackException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<IntNode> class1 = IntNode.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      ClassUtil.findRawSuperTypes(class1, class0, false);
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.", "org.hibernate.proxy.", (-2));
      MockThrowable mockThrowable0 = new MockThrowable("j1tP,IRc+", sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockThrowable0, "j1tP,IRc+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // j1tP,IRc+
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = new Boolean(true);
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean1);
      
      String string1 = ClassUtil.backticked("");
      assertEquals("``", string1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.classNameOf(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = '/';
      charArray0[2] = '`';
      charArray0[3] = 'l';
      charArray0[4] = '4';
      charArray0[5] = 'E';
      charArray0[6] = '6';
      jsonFactory0.createParser(charArray0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonFactory0.setRootValueSeparator("`java.lang.Class`");
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class1, class0, true);
      Class<Module> class2 = Module.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Zn&W]");
      Class<Integer> class0 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, mapLikeType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ReferenceType referenceType2 = referenceType1.withValueHandler(class0);
      ReferenceType referenceType3 = referenceType2.withContentTypeHandler(referenceType1);
      Class<ReferenceType> class1 = ReferenceType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = referenceType3.refine(class1, typeBindings0, referenceType2, (JavaType[]) null);
      ClassUtil.rawClass(javaType0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JavaType javaType0 = null;
      Class<Long> class0 = Long.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Object> class1 = Object.class;
      String string0 = null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.hasClass(fileSystemHandling0, class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(679);
      placeholderForType0.actualType();
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "34[$");
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isBogusClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Long long0 = new Long((-1901L));
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.hasClass(long0, class1);
      Class<?> class2 = ClassUtil.rawClass((JavaType) null);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findEnumType(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ClassUtil.nonNull((MapLikeType) null, (MapLikeType) null);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getDeclaringClass(class1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.findRawSuperTypes(class1, (Class<?>) null, true);
      ClassUtil.findSuperClasses((Class<?>) null, class0, false);
      Class<Integer> class2 = Integer.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "long";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, "long");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<Class<AccessPattern>> vector0 = new Vector<Class<AccessPattern>>();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("jGDey[]7V", (String) null);
      SQLWarning sQLWarning0 = new SQLWarning("jGDey[]7V", "long", (-3212), sQLTransientConnectionException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "jGDey[]7V", 5, hashMap0, sQLWarning0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      JsonFactory jsonFactory4 = jsonFactory3.setCodec(objectMapper0);
      MockFile mockFile0 = new MockFile("lit0lw6]z&)P?w");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((File) mockFile0, jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: jGDey[]7V
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Double> class0 = Double.TYPE;
      Class<Double> class1 = Double.TYPE;
      String string0 = ClassUtil.canBeABeanType(class1);
      assertNotNull(string0);
      assertEquals("primitive", string0);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      assertEquals(16385, class3.getModifiers());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassUtil.nonNull((PlaceholderForType) null, (PlaceholderForType) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.hasClass(class0, class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.nullOrToString(class2);
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(0, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<Character> class0 = Character.TYPE;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.hasClass((Object) null, class0);
      Class<Void> class2 = Void.class;
      ClassUtil.findEnumType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`\"s|!/", "`\"s|!/", (-708825413));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLIntegrityConstraintViolationException0);
      System.setCurrentTimeMillis(0L);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("H8_gTf|", "net.sf.cglib.proxy.java.lang.Float", (-708825413), hashMap0, mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "org.hibernate.proxy.java.lang.reflect.AccessibleObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      
      Object object0 = ClassUtil.defaultValue(class1);
      assertEquals('\u0000', object0);
      assertEquals("char", class1.toString());
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      Class<ArrayType> class3 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class3, true);
      assertEquals(9, list0.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassUtil.nonNull((PlaceholderForType) null, (PlaceholderForType) null);
      byte[] byteArray0 = new byte[15];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte) (-96);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-96), (byte) (-96));
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ByteArrayInputStream> enumMap0 = new EnumMap<AccessPattern, ByteArrayInputStream>(class0);
      EnumMap<AccessPattern, ByteArrayInputStream> enumMap1 = enumMap0.clone();
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      enumMap1.replace(accessPattern0, byteArrayInputStream0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<Byte> class0 = Byte.class;
      Class<ArrayType> class1 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findSuperTypes(class2, class0, list0);
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<ReferenceType> class0 = ReferenceType.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<Short> class1 = Short.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      assertEquals(3, list0.size());
      
      Class<AccessPattern> class2 = AccessPattern.class;
      EnumMap<AccessPattern, ByteArrayInputStream> enumMap0 = new EnumMap<AccessPattern, ByteArrayInputStream>(class2);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)112;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 224, (byte)0);
      enumMap0.put(accessPattern1, byteArrayInputStream0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)105;
      byteArray1[1] = (byte)65;
      byteArray1[2] = (byte)18;
      byteArray1[3] = (byte)41;
      byteArray1[4] = (byte) (-111);
      byteArray1[5] = (byte)26;
      byteArray1[6] = (byte) (-65);
      byteArray1[7] = (byte) (-96);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1, (-795), 1);
      enumMap0.replace(accessPattern0, byteArrayInputStream1);
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(enumMap0);
      assertEquals(16385, class3.getModifiers());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<MapType> class1 = MapType.class;
      Class<SimpleType> class2 = SimpleType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, false);
      assertEquals(5, list0.size());
      
      Class<AccessPattern> class3 = AccessPattern.class;
      String string0 = ClassUtil.canBeABeanType(class3);
      assertNotNull(string0);
      assertEquals("enum", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.classNameOf(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("`java.lang.Class`");
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "`java.lang.Class`", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`java.lang.Class`", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, objectMapper0, mockFileOutputStream0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON", "`java.lang.Class`", 441);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor0);
      assertFalse(constructor0.isAccessible());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(propertyAccessor0, jsonAutoDetect_Visibility0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationFeature0, false);
      ObjectMapper objectMapper4 = objectMapper3.setTypeFactory((TypeFactory) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper4.reader((InjectableValues) injectableValues_Std0);
      objectReader0.getTypeFactory();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      Byte byte0 = new Byte((byte)0);
      Class<Long> class1 = Long.class;
      boolean boolean1 = ClassUtil.isProxyType(class1);
      assertFalse(boolean1 == boolean0);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType((Enum<?>) serializationFeature0);
      assertEquals("class com.fasterxml.jackson.databind.SerializationFeature", class2.toString());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Cq92NG;xWbALc$");
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory4 = jsonFactory3.setOutputDecorator(outputDecorator0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory4);
      JsonFactory jsonFactory5 = jsonFactory4.setRootValueSeparator("com.fasterxml.jackson.databind.node.DecimalNode");
      BufferRecycler bufferRecycler0 = jsonFactory2._getBufferRecycler();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, placeholderForType0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jacks", true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, mockFileOutputStream0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jacks", "org.hibernate.proxy.java.lang.Integer", 3);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory5.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: com.fasterxml.jacks
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockError mockError0 = new MockError((Throwable) null);
      mockError0.getLocalizedMessage();
      Class<Integer> class0 = Integer.class;
      ClassUtil.canBeABeanType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getConstructors(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<Long> class1 = Long.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b^dU{GF#d$");
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.canBeABeanType(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      Class<Annotation> class2 = Annotation.class;
      annotationMap1.get(class2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1684);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 4471, objectMapper0, byteArrayBuilder0);
      SQLDataException sQLDataException0 = new SQLDataException("b^dU{GF#d$", (String) null, (-827));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLDataException0);
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException: java.sql.SQLDataException: b^dU{GF#d$
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.canBeABeanType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, true);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern2);
      enumSet0.add(accessPattern1);
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.isNonStaticInnerClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, "ve@h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" not a super-type of (declared) class ");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("[A]!`j$K", "+WwGn3c!@&\"", "B2lKU+d8Zty#N", 93);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("?oiZQf=Z_", "org.hibernate.proxy.java.lang.Float", "net.sf.cglib.proxy.java.lang.Integer", 93);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLNonTransientException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not a super-type of (declared) class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Short> class0 = Short.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SYF7y");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SYF7y");
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.getPackageName(class1);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      Class<MapType> class3 = MapType.class;
      boolean boolean0 = ClassUtil.isProxyType(class3);
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(5, classUtil_CtorArray0.length);
      
      Class<String> class4 = String.class;
      Constructor<String> constructor1 = ClassUtil.findConstructor(class4, true);
      constructor0.getExceptionTypes();
      boolean boolean1 = ClassUtil.isConcrete((Member) constructor0);
      assertFalse(boolean1 == boolean0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor1);
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      
      Stack<Class<AccessPattern>> stack0 = new Stack<Class<AccessPattern>>();
      Class<? extends Enum<?>> class5 = ClassUtil.findEnumType(class0);
      assertEquals("class java.lang.Throwable", class5.toString());
      
      Class<IOException> class6 = IOException.class;
      ClassUtil.createInstance(class6, true);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      assertTrue(constructor1.isAccessible());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.canBeABeanType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, true);
      Class<Object> class2 = Object.class;
      Class<Integer> class3 = Integer.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      Class<Short> class4 = Short.class;
      ClassUtil.isLocalType(class4, true);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, "D#0^z", (-416));
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0, ")cl%q}*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // )cl%q}*
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      Class<Character> class1 = Character.TYPE;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class1);
      boolean boolean1 = ClassUtil.hasClass(class0, class0);
      assertTrue(boolean1 == boolean0);
      
      String string0 = ClassUtil.canBeABeanType(class1);
      assertEquals("primitive", string0);
      assertNotNull(string0);
      
      Class<Object> class2 = Object.class;
      boolean boolean2 = ClassUtil.hasEnclosingMethod(class2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Boolean> class2 = Boolean.class;
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotationsByType(class3);
      boolean boolean0 = ClassUtil.isProxyType(class2);
      assertFalse(boolean0);
      
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class4);
      assertEquals(2, classUtil_CtorArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      assertTrue(constructor1.isAccessible());
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.classNameOf(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "`java.lang.Class`", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      jsonFactory0.setRootValueSeparator("?tGKF2 #Ab,");
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)85;
      Class<IOException> class1 = IOException.class;
      ClassUtil.getConstructors(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor1 = ClassUtil.findConstructor(class3, true);
      constructor1.getExceptionTypes();
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Stack<Class<AccessPattern>> stack0 = new Stack<Class<AccessPattern>>();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Byte> class1 = Byte.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Annotation> class2 = Annotation.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(2, class2, "Q}lh2pu>:k");
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "#", (Throwable) jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.annotation.Annotation` from number 2: Q}lh2pu>:k
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.primitiveType(class0);
      try { 
        Integer.valueOf("1O _vk`IC5pe0Nb>Bi");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1O _vk`IC5pe0Nb>Bi\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = ClassUtil.nameOf((Named) null);
      String string1 = ClassUtil.getClassDescription((Object) null);
      assertEquals("unknown", string1);
      
      String string2 = ClassUtil.nonNullString("[null]");
      assertTrue(string2.equals((Object)string0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = new Character('a');
      String string3 = ClassUtil.classNameOf("[null]");
      assertEquals("`java.lang.String`", string3);
      
      System.setCurrentTimeMillis(0L);
      Class<Short> class0 = Short.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern2);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertTrue(class1.isEnum());
      
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      Class<String> class1 = String.class;
      Class<Short> class2 = Short.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      System.setCurrentTimeMillis((-2085L));
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("net.sf.cglib.proxy.java.lang.Float", "net.sf.cglib.proxy.java.lang.Float");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("net.sf.cglib.proxy.java.lang.Float", "net.sf.cglib.proxy.java.lang.Float", 8, hashMap0, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      Class<Float> class1 = Float.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getDeclaringClass(class2);
      String string0 = ClassUtil.quotedOr(deserializerFactoryConfig0, "RFq`Y*4PE^~-ZV>Xd)9");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      ClassUtil.canBeABeanType(class0);
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.classNameOf(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      jsonFactory1._getBufferRecycler();
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<Character>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Error> class0 = Error.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.getClassMethods(class0);
      Vector<Class<AccessPattern>> vector0 = new Vector<Class<AccessPattern>>();
      ClassUtil.findEnumType(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getOuterClass(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser jsonParser0 = jsonFactory1.createParser("JSON");
      Class<Boolean> class2 = Boolean.class;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class2, jsonToken0, "; failed to set access: ");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_STRING: ; failed to set access: 
         //  at [Source: (String)\"JSON\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      System.setCurrentTimeMillis(2693L);
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.classNameOf(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "`java.lang.Class`", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      jsonFactory0.setRootValueSeparator("?tGKF2 #Ab,");
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      try { 
        objectMapper0.readValue(byteArray0, 3, (-1807324828), class1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: (byte[])\"\uFFFD\uFFFDU\u0012\uFFFD\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      Class<Float> class0 = Float.TYPE;
      Class<Object> class1 = Object.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isProxyType(class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = new Character('9');
      String string0 = ClassUtil.classNameOf((Object) null);
      assertEquals("[null]", string0);
      
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      Class<Float> class0 = Float.TYPE;
      Class<Object> class1 = Object.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isProxyType(class1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-1367));
      Class<Void> class2 = Void.class;
      ClassUtil.findEnumType(class2);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.getConstructors(class3);
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class4, class1, false);
      ClassUtil.getPackageName(class4);
      Class<JsonMappingException> class5 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class5);
      Class<Integer> class6 = Integer.class;
      try { 
        ClassUtil.createInstance(class6, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getEnclosingClass(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.classNameOf(class0);
      assertEquals("`java.lang.Class`", string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      Float float0 = new Float(0.0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus1.getAnnotation(class2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(91);
      String string1 = ClassUtil.getClassDescription(placeholderForType0);
      assertEquals("`com.fasterxml.jackson.databind.type.PlaceholderForType`", string1);
      
      Integer integer0 = new Integer(198);
      Class<Integer> class3 = Integer.class;
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class3);
      assertEquals("class java.lang.Number", class4.toString());
      
      ClassUtil.getConstructors(class0);
      Class<Double> class5 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class5, true);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nonNull((PlaceholderForType) null, (PlaceholderForType) null);
      ClassUtil.classOf((Object) null);
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      SQLWarning sQLWarning0 = new SQLWarning("060%~>Nh<10");
      try { 
        ClassUtil.throwIfIOE(iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Short> class2 = Short.class;
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.quotedOr(class0, "\"");
      String string0 = ClassUtil.quotedOr((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class0, "#4MhiO;L-;:N9TW");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.String) must override method '#4MhiO;L-;:N9TW'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockError mockError0 = new MockError((Throwable) null);
      mockError0.getLocalizedMessage();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Float float0 = new Float((-281.1366));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class1);
      ClassUtil.getClassDescription((Object) null);
      Integer integer0 = new Integer(2);
      Class<Double> class2 = Double.class;
      ClassUtil.findEnumType(class2);
      Class<String> class3 = String.class;
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.getConstructors(class4);
      Class<Double> class5 = Double.class;
      ClassUtil.findSuperClasses(class3, class5, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<JsonMappingException> class6 = JsonMappingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class6, (String) null, (String) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.JsonMappingException` from String [N/A]: null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockError mockError0 = new MockError((Throwable) null);
      mockError0.getLocalizedMessage();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      Float float0 = new Float((-281.1366));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class1);
      Integer integer0 = new Integer(2);
      Class<Double> class2 = Double.class;
      ClassUtil.findEnumType(class2);
      ClassUtil.backticked((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "java.lang.Boolean");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.Boolean
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nonNull((PlaceholderForType) null, (PlaceholderForType) null);
      ClassUtil.classOf((Object) null);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Double> class0 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertTrue(list0.isEmpty());
      
      Class<Integer> class1 = Integer.class;
      boolean boolean0 = ClassUtil.isConcrete(class1);
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.Double`", string0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean1);
      
      Byte byte0 = new Byte((byte)0);
      boolean boolean2 = ClassUtil.isJacksonStdImpl((Object) byte0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      Class<Float> class0 = Float.TYPE;
      Class<Object> class1 = Object.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isProxyType(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.classNameOf(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory1._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "`java.lang.Class`", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`java.lang.Class`", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, objectMapper0, mockFileOutputStream0);
      uTF8JsonGenerator0.setHighestNonEscapedChar(1230);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON", "`java.lang.Class`", 441);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper1, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((-1234));
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("STAt|2@n9tk2.%SQmZj", "STAt|2@n9tk2.%SQmZj", 3);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: STAt|2@n9tk2.%SQmZj
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      Class<Character> class1 = Character.TYPE;
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class1);
      boolean boolean2 = ClassUtil.hasClass(class0, class0);
      assertTrue(boolean2 == boolean1);
      
      String string0 = ClassUtil.nonNullString("PQEKO,-h");
      assertEquals("PQEKO,-h", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class2 = Short.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      Class<?> class4 = ClassUtil.primitiveType(class2);
      assertNotNull(class4);
      
      Class<?> class5 = ClassUtil.wrapperType(class3);
      assertEquals("class java.lang.Short", class5.toString());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<Float> class0 = Float.TYPE;
      TypeReference<CollectionType> typeReference0 = (TypeReference<CollectionType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(typeReference0).getType();
      ObjectReader objectReader1 = objectReader0.forType(typeReference0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      // Undeclared exception!
      try { 
        objectReader1.with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isProxyType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<AccessPattern> class1 = AccessPattern.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader1);
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class2, class0);
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class2, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertFalse(constructor0.isAccessible());
      
      Class<IntNode> class1 = IntNode.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<InputStream> class2 = InputStream.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1791));
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      javaTypeArray0[6] = (JavaType) placeholderForType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[1]);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionType0, javaTypeArray0, (JavaType) collectionType0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withValueHandler(locale0);
      ReferenceType referenceType2 = (ReferenceType)referenceType1.withContentValueHandler(javaTypeArray0[4]);
      ReferenceType referenceType3 = (ReferenceType)referenceType2.withContentTypeHandler((Object) null);
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) referenceType3, (Class<?>) class0, true);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Boolean> class2 = Boolean.class;
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotationsByType(class3);
      assertTrue(constructor0.isAccessible());
      
      boolean boolean0 = ClassUtil.isProxyType(class2);
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      TypeReference<CollectionType> typeReference0 = (TypeReference<CollectionType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn(javaType0).when(typeReference0).getType();
      ObjectReader objectReader1 = objectReader0.forType(typeReference0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      // Undeclared exception!
      try { 
        objectReader1.with((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Double double0 = new Double(1082.6);
      ClassUtil.quotedOr(double0, "O$1kF'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Long> class0 = Long.class;
      Class<Short> class1 = Short.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      Class<Double> class1 = Double.class;
      Class<Error> class2 = Error.class;
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getGenericSuperclass(class2);
      ClassUtil.getOuterClass(class2);
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class4);
      assertFalse(boolean0);
      
      Float float0 = new Float((-896.031));
      String string0 = ClassUtil.getClassDescription(float0);
      assertEquals("`java.lang.Float`", string0);
      
      Integer integer0 = new Integer(2);
      Class<? extends Enum<?>> class5 = ClassUtil.findEnumType(class3);
      assertEquals("class java.lang.Object", class5.toString());
      
      Class<String> class6 = String.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class6);
      assertEquals(16, classUtil_CtorArray0.length);
      
      Class<Annotation> class7 = Annotation.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class7, false);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K7c]");
      Class<Byte> class1 = Byte.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertEquals("byte", class2.toString());
      assertNotNull(class2);
      
      boolean boolean1 = ClassUtil.isProxyType(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isBogusClass(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K7c]");
      Class<Byte> class1 = Byte.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Double double0 = new Double(1082.6);
      String string0 = ClassUtil.quotedOr(double0, ";YQO$1kF'");
      assertEquals("\"1082.6\"", string0);
      
      Class<Double> class0 = Double.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class1 = NoClass.class;
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      ClassUtil.getOuterClass(class1);
      Class<IOException> class3 = IOException.class;
      Class<Annotation> class4 = Annotation.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class3);
      assertFalse(boolean0);
      
      Float float0 = new Float(0.0);
      String string1 = ClassUtil.getClassDescription(class4);
      assertEquals("`java.lang.annotation.Annotation`", string1);
      
      Integer integer0 = new Integer(2);
      Class<? extends Enum<?>> class5 = ClassUtil.findEnumType(class4);
      assertNull(class5);
      
      Class<PlaceholderForType> class6 = PlaceholderForType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class6);
      assertEquals(1, classUtil_CtorArray0.length);
      
      Class<RuntimeException> class7 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class2, class7, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, true);
      classUtil_Ctor0.getParameterAnnotations();
      SQLDataException sQLDataException0 = new SQLDataException();
      sQLDataException0.fillInStackTrace();
      ClassUtil.throwIfRTE(sQLDataException0);
      classUtil_Ctor0.getParameterAnnotations();
      Throwable throwable0 = ClassUtil.getRootCause(sQLDataException0);
      classUtil_Ctor0.getConstructor();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getConstructors(class1);
      classUtil_Ctor0.getParamCount();
      ClassUtil.canBeABeanType(class0);
      Throwable throwable1 = ClassUtil.throwRootCauseIfIOE(throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      Class<String> class1 = String.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isCollectionMapOrArray(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.hasClass((Object) null, class2);
      String string0 = "com.fasterxml.jackson.databind.exc.InvalidTypeIdException";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "com.fasterxml.jackson.databind.exc.InvalidTypeIdException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.exc.InvalidTypeIdException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getClassMethods(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Long> class1 = Long.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      Class<String> class3 = String.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      Class<CollectionType> class4 = CollectionType.class;
      Class class5 = (Class)ClassUtil.getGenericSuperclass(class4);
      assertFalse(class5.isEnum());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.nonNullString(" is not a primitive type");
      assertEquals(" is not a primitive type", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.primitiveType(class2);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      boolean boolean0 = ClassUtil.isProxyType(class3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      Class<MapType> class0 = MapType.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, false);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      assertFalse(class2.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Error> class0 = Error.class;
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Error> class1 = Error.class;
      ClassUtil.primitiveType(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      Class<Float> class0 = Float.TYPE;
      Class<Object> class1 = Object.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.isProxyType(class0);
      Class<Short> class2 = Short.class;
      ClassUtil.findConstructor(class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getPackageName(class0);
      Float float0 = new Float((-2937.63979807));
      ClassUtil.classNameOf(float0);
      ClassUtil.getConstructors(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]q(,7OPkqJ1K:c", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", 1536);
      sQLInvalidAuthorizationSpecException0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      sQLInvalidAuthorizationSpecException0.forEach(consumer0);
      sQLInvalidAuthorizationSpecException0.initCause((Throwable) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      sQLInvalidAuthorizationSpecException0.setStackTrace(stackTraceElementArray0);
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.nullOrToString((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("SET", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findEnumType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.hasEnclosingMethod(class1);
      Short short0 = new Short((short) (-1885));
      ClassUtil.classNameOf(short0);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.getEnclosingClass(class3);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("6iqfZte!9");
      Throwable throwable0 = ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: 6iqfZte!9", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Double double0 = new Double(1082.6);
      String string0 = ClassUtil.quotedOr(double0, ";YQO$1kF'");
      assertEquals("\"1082.6\"", string0);
      
      Class<Double> class0 = Double.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.getOuterClass(class1);
      Class<IOException> class2 = IOException.class;
      Class<Annotation> class3 = Annotation.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class2);
      assertFalse(boolean0);
      
      Float float0 = new Float(0.0);
      String string1 = ClassUtil.getClassDescription(class3);
      assertEquals("`java.lang.annotation.Annotation`", string1);
      
      Integer integer0 = new Integer(2);
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType(class3);
      assertNull(class4);
      
      Class<PlaceholderForType> class5 = PlaceholderForType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class5);
      assertEquals(1, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.primitiveType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.isConcrete(class0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.nameOf((Class<?>) null);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<Long> class3 = Long.class;
      ClassUtil.isJacksonStdImpl(class3);
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getGenericSuperclass(class1);
      Class<Void> class4 = Void.class;
      ClassUtil.getOuterClass(class4);
      ClassUtil.getDeclaringClass(class4);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getPackageName(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.nonNullString((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.primitiveType(class3);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("includeA cannot be null", "");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // includeA cannot be null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Throwable throwable0 = null;
      String string0 = "8f~o[D4*;H%@A";
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "8f~o[D4*;H%@A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Long> class1 = Long.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      assertEquals(3, list0.size());
      
      ClassUtil.getGenericSuperclass(class2);
      Class<?> class3 = ClassUtil.wrapperType(class2);
      assertEquals("long", class2.toString());
      assertEquals("class java.lang.Long", class3.toString());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.getClassDescription((Object) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.nonNull((PlaceholderForType) null, (PlaceholderForType) null);
      ClassUtil.classOf((Object) null);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAttribute((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isLocalType(class0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      Class<Boolean> class1 = Boolean.class;
      Class<Float> class2 = Float.TYPE;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.wrapperType(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 1);
      assertNull(sQLNonTransientConnectionException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.getConstructors(class0);
      Class<Long> class1 = Long.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      // Undeclared exception!
      try { 
        typeResolutionContext_Basic0.resolveType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Basic", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SimpleType> class1 = SimpleType.class;
      Class<Long> class2 = Long.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNotNull(class3);
      assertEquals("long", class3.toString());
      
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      assertEquals(0, list0.size());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Nulls nulls0 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forContentNulls(nulls0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy_SnakeCaseStrategy0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-46);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (-1535));
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayInputStream0, "Mh G~'*ueR");
      String string1 = ClassUtil.getClassDescription(propertyAccessor0);
      assertEquals("`com.fasterxml.jackson.annotation.PropertyAccessor`", string1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0.0, object0);
      
      String string0 = ClassUtil.nonNullString("q");
      assertEquals("q", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Long> class1 = Long.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertEquals("long", class2.toString());
      
      Class<IOException> class3 = IOException.class;
      boolean boolean0 = ClassUtil.isProxyType(class3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Character> class1 = Character.class;
      ClassUtil.isCollectionMapOrArray(class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getConstructors(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.getConstructors(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      Class<Error> class4 = Error.class;
      String string0 = "mYi=01WqN8pXAo";
      // Undeclared exception!
      try { 
        typeResolutionContext_Basic0.resolveType(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Basic", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.getDeclaredMethods(class0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(83);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)106;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class1, class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.reflect.AccessibleObject is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.emptyIterator();
      ClassUtil.getClassDescription(class0);
      MockIOException mockIOException0 = new MockIOException("`java.lang.Integer`");
      ClassUtil.getRootCause(mockIOException0);
      mockIOException0.getLocalizedMessage();
      String string0 = "";
      mockIOException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        mockIOException0.printStackTrace((PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ClassUtil.nonNullString("; failed to set access: ");
      MockIOException mockIOException0 = new MockIOException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(mockIOException0);
      File file0 = MockFile.createTempFile("elementType", "; failed to set access: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockIOException0.printStackTrace((PrintStream) mockPrintStream0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("elementType", "; failed to set access: ", sQLSyntaxErrorException0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = new Locale("elementType", "elementType");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) sQLSyntaxErrorException0;
      objectArray0[2] = (Object) "elementType";
      objectArray0[3] = (Object) mockFileOutputStream0;
      objectArray0[4] = (Object) "$QGIN|SPy1z)i0Fx";
      objectArray0[5] = (Object) sQLSyntaxErrorException0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "$QGIN|SPy1z)i0Fx", objectArray0);
      sQLInvalidAuthorizationSpecException0.printStackTrace(printWriter0);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLInvalidAuthorizationSpecException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: elementType", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<Short> class0 = Short.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable((String) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) resolvedRecursiveType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isConcrete(class1);
      String string0 = null;
      String string1 = null;
      Map<String, ClientInfoStatus> map0 = null;
      String string2 = "keyUniverse";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "keyUniverse");
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        sQLFeatureNotSupportedException0.addSuppressed(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Self-suppression not permitted
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Double double0 = new Double(1082.6);
      ClassUtil.quotedOr(double0, ";YQO$1kF'");
      Class<Void> class0 = Void.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.classNameOf(";YQO$1kF'");
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getEnclosingClass(class1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("6iqfZte!9");
      Throwable throwable0 = ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      assertSame(sQLNonTransientConnectionException0, throwable0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.findEnumType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BeanDescription beanDescription0 = null;
      // Undeclared exception!
      try { 
        AbstractDeserializer.constructForNonPOJO((BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Boolean> class2 = Boolean.class;
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotationsByType(class3);
      boolean boolean0 = ClassUtil.isProxyType(class2);
      assertFalse(boolean0);
      
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class4);
      assertEquals(2, classUtil_CtorArray0.length);
      
      Class<String> class5 = String.class;
      Constructor<String> constructor1 = ClassUtil.findConstructor(class5, false);
      assertFalse(constructor1.isAccessible());
      
      constructor0.getExceptionTypes();
      boolean boolean1 = ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      
      classUtil_Ctor0.getParameterAnnotations();
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertTrue(constructor0.isAccessible());
      
      ClassUtil.getGenericInterfaces(class0);
      boolean boolean2 = ClassUtil.isConcrete(class4);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "5B";
      SQLTransientException sQLTransientException0 = new SQLTransientException("5B", "5B", (-3956));
      sQLTransientException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0, "5B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5B
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Double> class0 = Double.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertEquals(1, classUtil_CtorArray0.length);
      
      ClassUtil.throwIfError((Throwable) null);
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.getDeclaredMethods(class0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(83);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)94;
      // Undeclared exception!
      try { 
        byteArrayOutputStream0.write(byteArray0, (-1635), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ClassUtil.backticked(" (from class ");
      Class<ArrayType> class0 = ArrayType.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class0, class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.findSuperClasses(class0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Nulls nulls0 = Nulls.AS_EMPTY;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.forContentNulls(nulls0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy_SnakeCaseStrategy0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-46);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (-1535));
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayInputStream0, "Mh G~'*ueR");
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getClassMethods(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Object object0 = new Object();
      ClassUtil.isJacksonStdImpl(object0);
      Class<SimpleType> class0 = SimpleType.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Character> class1 = Character.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.hasClass(class0, class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "PQEuKO,-Jh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PQEuKO,-Jh
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericSuperclass(class0);
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getAnnotatedExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      constructor0.getTypeParameters();
      MockError mockError0 = new MockError(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      mockError0.getCause();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("L;KO8']2U");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0);
      mockError0.printStackTrace((PrintWriter) mockPrintWriter0);
      mockError0.getCause();
      mockError0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Character character0 = Character.valueOf('j');
      ClassUtil.isJacksonStdImpl((Object) character0);
      ClassUtil.nullOrToString(character0);
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, String> enumMap0 = new EnumMap<AccessPattern, String>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      // Undeclared exception!
      try { 
        enumMap0.computeIfAbsent(accessPattern0, (Function<? super AccessPattern, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = (-1036);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1036));
      ClassUtil.nonNull(placeholderForType0, placeholderForType0);
      Class<?> class0 = ClassUtil.classOf(placeholderForType0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAttribute(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Iterator<Float> iterator0 = ClassUtil.emptyIterator();
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getParameterTypes();
      constructor0.getParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, iterator0, "7uHJI`vx<SZ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.util.Collections$EmptyIterator (of class java.lang.Object) must override method '7uHJI`vx<SZ'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes(class1, class0);
      ClassUtil.emptyIterator();
      ClassUtil.getClassMethods(class0);
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.backticked("size");
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.getGenericInterfaces(class2);
      TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      Class<Float> class0 = Float.TYPE;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("local/anonymous", class0, "[kddr");
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setAttribute((Object) null, jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getGenericSuperclass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Float> class1 = Float.class;
      Deserializers.Base deserializers_Base1 = new Deserializers.Base();
      beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base1);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("pIvq", class1, "pIvq");
      ClassUtil.getRootCause(jsonMappingException0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getPackageName(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      typeFactory0.withModifier(typeModifier0);
      Class<Object> class3 = Object.class;
      Class<Double> class4 = Double.class;
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        TypeBindings.create(class4, javaType0, javaType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Double with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleMissingTypeId((JavaType) null, (TypeIdResolver) null, "serialVersionUID");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getPackageName(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Cannot refine serialization key type %s into %s; types not related", "", 0);
      SQLException sQLException0 = new SQLException(sQLNonTransientException0);
      SQLException sQLException1 = new SQLException("Cannot refine serialization key type %s into %s; types not related", ">=*e(0mnTc,4`\"4", sQLException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("7WD&af+d", "7WD&af+d", sQLException1);
      sQLSyntaxErrorException0.addSuppressed(sQLException0);
      SQLException sQLException2 = new SQLException("java.lang", sQLSyntaxErrorException0);
      sQLException1.printStackTrace();
      MockFile mockFile0 = new MockFile("vals");
      ClassUtil.getRootCause(sQLSyntaxErrorException0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Throwable throwable0 = null;
      MockError mockError0 = new MockError((Throwable) null);
      mockError0.getLocalizedMessage();
      String string0 = "ZERO_LENGTH_ENUM_ARRAY";
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "ZERO_LENGTH_ENUM_ARRAY");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.findClassAnnotations(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.findSuperTypes(class0, class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Class<Integer> class3 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionType0, (TypeBindings) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, simpleType0);
      referenceType0.withStaticTyping();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      Class<String> class4 = String.class;
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class4, (TypeBindings) null, (JavaType) collectionType0, (JavaType[]) null, (JavaType) simpleType0);
      Integer integer0 = objectIdGenerators_IntSequenceGenerator0.generateId(referenceType1);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setAttribute(simpleType0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ClassUtil.backticked("elementType");
      Class<Character> class0 = Character.class;
      ClassUtil.isJacksonStdImpl(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      
      Short short0 = new Short((short) (-913));
      Short short1 = new Short((short) (-913));
      ClassUtil.nonNull(short0, short1);
      ClassUtil.getEnclosingClass(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("v*!}PVv");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.lang", "[simple type, class ", sQLTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("[simple type, class ", "[;y&o@", "com.fasterxml.jackson.databind.util.RawValue", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("IggR,:a.Xy(&yOmyxw", "v*!}PVv", "UVt+emJ", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("primitive", "bkDH0 RmojAtp}qu0", (String) null, 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("; expected Class<KeyDeserializer>", "[;y&o@", "UVt+emJ", (short) (-913));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("; expected Class<KeyDeserializer>", "java.lang", "1O}(y(5V _", (short) (-913));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("com.fasterxml.jackson.databind.util.RawValue", ", problem: ", "", (short) (-913));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("bkDH0 RmojAtp}qu0", "keyUniverse", (String) null, (-1932));
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      sQLTransientConnectionException0.getStackTrace();
      sQLTransientConnectionException0.setNextException(sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.printStackTrace();
      ClassUtil.throwIfError(sQLTransactionRollbackException0);
      String string1 = ClassUtil.canBeABeanType(class0);
      assertNull(string1);
      
      Class<Annotation> class1 = Annotation.class;
      boolean boolean0 = ClassUtil.isConcrete(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ClassUtil.nonNull((PlaceholderForType) null, (PlaceholderForType) null);
      ClassUtil.classOf((Object) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.createInstance(class0, false);
      Character character0 = new Character('a');
      String string0 = ClassUtil.classNameOf(character0);
      assertEquals("`java.lang.Character`", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ClassUtil.nonNullString("Cannot figure out type for EnumMap (odd JDK platform?)");
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TypeReference<CollectionType> typeReference0 = (TypeReference<CollectionType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader0.forType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLWarning sQLWarning0 = new SQLWarning("{okSIgJMv@=OR\"Z67", (Throwable) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("|Zoi9dQ9g", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // |Zoi9dQ9g
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Double> class1 = Double.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      Class<Object> class3 = Object.class;
      ClassUtil.isNonStaticInnerClass(class3);
      Class<Long> class4 = Long.class;
      ClassUtil.isJacksonStdImpl(class4);
      Class<JsonMappingException> class5 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class5);
      ClassUtil.isJacksonStdImpl(class2);
      Class<ReferenceType> class6 = ReferenceType.class;
      ClassUtil.isConcrete(class6);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getGenericSuperclass(class2);
      Class<Void> class7 = Void.class;
      ClassUtil.getOuterClass(class7);
      Class<IOException> class8 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class8, false);
      Class<Annotation> class9 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class9);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
