/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 05:59:41 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Short short0 = new Short((short)324);
      Short short1 = new Short((short) (-1043));
      Short short2 = ClassUtil.nonNull(short0, short1);
      assertEquals((short)324, (short)short2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Module> class0 = Module.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, bufferedOutputStream0, byteArray0, 1, true);
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)ClassUtil.throwIfRTE(batchUpdateException0);
      assertEquals(0, batchUpdateException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Throwable throwable0 = ClassUtil.throwIfError(mockIOException0);
      assertSame(throwable0, mockIOException0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<?> class0 = ClassUtil.rawClass((JavaType) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      Class<?> class1 = ClassUtil.rawClass(collectionType0);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<?> class1 = ClassUtil.rawClass(simpleType0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<CreatorProperty> class0 = CreatorProperty.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      Class<?> class2 = ClassUtil.rawClass(arrayType0);
      assertFalse(class2.isEnum());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = ClassUtil.quotedOr((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("com.fasterxml.jackson.databind.util.ClassUtil");
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Short short0 = ClassUtil.nonNull((Short) null, (Short) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "com.fasterxml.jackson.databind", (String) null);
      JsonMappingException jsonMappingException1 = ClassUtil.nonNull(jsonMappingException0, jsonMappingException0);
      assertSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("com.fasterxml.jackson.databind", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(4, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(13, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(0, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Error> class0 = Error.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class0, class0, list0);
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<CollectionType> class1 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      assertEquals(16385, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<String> class0 = String.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-91));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      Class<?> class1 = ClassUtil.classOf(accessPattern0);
      assertFalse(class1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      Class<?> class1 = ClassUtil.classOf(enumSet0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Character> class0 = Character.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(")E", ")E");
      SQLDataException sQLDataException0 = new SQLDataException("java.lang.Byte", ")E", 79, sQLTimeoutException0);
      sQLTimeoutException0.initCause(sQLDataException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, ")E");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "`java.lang.Float`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      SQLException sQLException0 = new SQLException((String) null, (String) null, mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException((String) null, "java.lang.reflect.Ac", 8, sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.initCause(sQLSyntaxErrorException1);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("ALLOW_EXPLICIT_PROPERTY_RENAMING");
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Error> class0 = Error.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      LongNode longNode0 = LongNode.valueOf((-9223372036854775808L));
      JsonParser jsonParser0 = objectReader0.treeAsTokens(longNode0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "``", jsonLocation0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "Cannot access ");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_ARRAY: Cannot access 
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "Xx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2064);
      JsonLocation jsonLocation0 = new JsonLocation(placeholderForType0, 0L, 2064, (-1994924604));
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "org.hibernate.proxy.java.lang.Boolean", jsonLocation0);
      MockError mockError0 = new MockError("net.sf.cglib.proxy.java.lang.Long", jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "Cannot access ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[5];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackso", "_{d?l]");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("P%!q6KJNX59@'})zhw", "", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLFeatureNotSupportedException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.fasterxml.jackso", "_P42t", sQLNonTransientConnectionException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackso", "com.fasterxml.jackso", intArray0, mockRuntimeException0);
      // Undeclared exception!
      ClassUtil.getRootCause(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<MapLikeType> class2 = MapLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class2, class0, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<IOException>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<IOException>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      IOContext iOContext0 = new IOContext(bufferRecycler0, constructor0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, (OutputStream) null, byteArray0, 3, true);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern", false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 40, objectMapper0, mockFileOutputStream0, byteArray0, 376, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "d6#\"OZ.a\\;ZSSMfb", false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "WRITE_NULL_MAP_VALUES", "d6#\"OZ.a\\;ZSSMfb");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'WRITE_NULL_MAP_VALUES' as a subtype of null: d6#\"OZ.a\\;ZSSMfb
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) null, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON (through reference chain: UNKNOWN[\"JSON\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockError mockError0 = new MockError("net.sf.cglib.proxy.java.lang.String");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockPrintStream mockPrintStream0 = new MockPrintStream("E^@9T");
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, objectMapper0, mockPrintStream0, byteArray0, (-11), true);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) mockPrintStream0, (Exception) iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(referenceType0, "JSON", "org.hibernate.proxy.java.lang.Boolean");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'JSON' as a subtype of [reference type, class java.lang.Object<java.lang.Object><[simple type, class java.lang.Object]>]: org.hibernate.proxy.java.lang.Boolean
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      assertEquals(1, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = ClassUtil.backticked("Z$-m=+5\"Mk");
      assertEquals("`Z$-m=+5\"Mk`", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
      assertSame(sQLFeatureNotSupportedException0, throwable0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockError mockError0 = new MockError((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      Class<Annotation> class1 = Annotation.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("6ER[ED#t,l_~le2", "6ER[ED#t,l_~le2");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6ER[ED#t,l_~le2
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertTrue(constructor0.isAccessible());
      assertNotNull(annotationArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(0, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(0, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      String string0 = ClassUtil.getPackageName(class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      ObjectReader objectReader1 = objectReader0.forType((JavaType) placeholderForType0);
      assertNotSame(objectReader1, objectReader0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) accessPattern0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(propertyAccessor0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals("class com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase", class1.toString());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertTrue(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, String> enumMap0 = new EnumMap<AccessPattern, String>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      enumMap0.put(accessPattern0, "O ");
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet1);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class1, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[2];
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor(typeResolutionContext_Basic0, constructor0, annotationMap0, annotationMapArray0);
      Constructor constructor1 = (Constructor)annotatedConstructor0.getMember();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      assertTrue(constructor1.isAccessible());
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("char", class1.toString());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("short", class1.toString());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("byte", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("double", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("boolean", class1.toString());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("long", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("float", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ReferenceType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("class java.lang.Short", class1.toString());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals(17, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals(17, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("class java.lang.Character", class1.toString());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("class java.lang.Long", class1.toString());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("class java.lang.Boolean", class1.toString());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals((byte)0, object0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0.0F, object0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = ClassUtil.backticked((String) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      String string0 = ClassUtil.nameOf((Named) beanProperty_Bogus0);
      assertEquals("``", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`int`", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = ClassUtil.nameOf((Class<?>) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = ClassUtil.classNameOf((Object) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactoryConfig0, class0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.RuntimeException` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      String string0 = ClassUtil.getClassDescription(class0);
      assertEquals("`java.lang.RuntimeException`", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = ClassUtil.getClassDescription((Object) null);
      assertEquals("unknown", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Float float0 = new Float((-614.113F));
      String string0 = ClassUtil.getClassDescription(float0);
      assertEquals("`java.lang.Float`", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = ClassUtil.quotedOr((Object) null, "Cannot access ");
      assertEquals("Cannot access ", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = ClassUtil.nonNullString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = ClassUtil.nullOrToString("com.fasterxml.jackson.databind.util.ClassUtil");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Short short0 = new Short((short) (-9198));
      Short short1 = ClassUtil.nonNull((Short) null, short0);
      assertEquals((short) (-9198), (short)short1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayBuilder0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, objectMapper0, outputStreamWriter0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(writerBasedJsonGenerator0, "o%bcv+qUUA");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Closeable) writerBasedJsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      SQLWarning sQLWarning0 = new SQLWarning("omN[LD`D$5", "org.hibernate.proxy.java.lang.String");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "com.fasterxml.jackson.databind", (String) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Integer` from String \"com.fasterxml.jackson.databind\": null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLInvalidAuthorizationSpecException0);
      Throwable throwable0 = ClassUtil.getRootCause(sQLDataException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JsonLocation jsonLocation0 = new JsonLocation(enumSet0, 0L, (-1241), 9);
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedOutputStream0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType", jsonLocation0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class0, "x6iJ8LSi.-~^S");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.reflect.AccessibleObject) must override method 'x6iJ8LSi.-~^S'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.verifyMustOverride(class0, "net.sf.cglib.proxy.java.time.LocalDate", "lYQs8Ic");
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.hasClass("org.hibernate.proxy.java.lang.Boolean", class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<?> class1 = ClassUtil.classOf(class0);
      boolean boolean0 = ClassUtil.hasClass(class1, class1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<?> class1 = ClassUtil.classOf(class0);
      assertNotNull(class1);
      
      boolean boolean0 = ClassUtil.isBogusClass(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<List> class0 = List.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(constructor0.isAccessible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("primitive", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNotNull(string0);
      assertEquals("enum", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<CollectionType> class2 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class0);
      Class<InputStream> class3 = InputStream.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
      assertEquals(14, list0.size());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("\"btC", "AhMY`_", 1516, hashMap0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) null, (-374));
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonMappingException0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Byte> class0 = Byte.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<Double> class1 = Double.class;
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[7] = (JavaType) resolvedRecursiveType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[7]);
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class0, true);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, (Class<?>) null, false);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Long> class0 = Long.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      String string0 = ClassUtil.quotedOr(list0, "net.sf.cglib.proxy.java.io.IOException");
      assertEquals("\"[]\"", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, class0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<Character> class1 = Character.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Class<Error> class1 = Error.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Short> class0 = Short.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertTrue(constructor1.isAccessible());
      assertNotNull(constructor1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      assertEquals(0, sQLDataException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(")E", ")E");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, ")E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // )E
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Iterator<Double> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "com.fasterxml.jackson.databind.util.ClassUtil");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MockError mockError0 = new MockError("");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(31, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLDataException sQLDataException0 = new SQLDataException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0, "Failed to narrow key type of %s with concrete-type annotation (value %s), from '%s': %s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to narrow key type of %s with concrete-type annotation (value %s), from '%s': %s
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, String> enumMap0 = new EnumMap<AccessPattern, String>(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertFalse(class1.isAnnotation());
  }
}
