/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:25:43 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeFactory.defaultInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.");
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.findSuperTypes(class0, class1, list0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientException0.forEach(consumer0);
      sQLTransientException0.spliterator();
      ClassUtil.getRootCause(sQLTransientException0);
      ClassUtil.createInstance(class0, true);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.sql.ClientInfoStatus has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.findClassAnnotations(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.nonNullString("RQ-XDq9 C[");
      ClassUtil.getConstructors(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      Integer integer0 = new Integer((-180));
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      try { 
        objectMapper0.updateValue(integer0, (Object) constructor0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `java.lang.Integer` out of START_OBJECT token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<IOException>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      Class<Long> class1 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class1, false);
      Class<MapLikeType> class2 = MapLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class2, class1, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "P.F,pb";
      String string1 = "java.io.IOException";
      int int0 = (-1512867866);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1512867866);
      intArray0[1] = (-1512867866);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      MockIOException mockIOException0 = new MockIOException(sQLIntegrityConstraintViolationException0);
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      MockError mockError0 = new MockError("iPjp|&\"J=");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperTypes(class1, class1, list0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<MapType> class2 = MapType.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<Short> class3 = Short.class;
      ClassUtil.primitiveType(class3);
      MockError mockError0 = new MockError();
      ClassUtil.throwRootCauseIfIOE(mockError0);
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<RuntimeException> class1 = RuntimeException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      String string0 = "L2l";
      ObjectReader objectReader1 = objectReader0.withRootName("L2l");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)117;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 3, objectReader1, (OutputStream) null, byteArray0, (byte)117, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Short> class1 = Short.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("net.sf.cglib.proxy.java.lang.Void");
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings1, javaType0, javaTypeArray0, javaTypeArray0[1]);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaTypeArray0[0], javaTypeArray0[0]);
      collectionLikeType0.isTypeOrSuperTypeOf(class1);
      ReferenceType referenceType1 = referenceType0.withValueHandler(collectionLikeType0);
      Class<?> class2 = ClassUtil.rawClass(referenceType1);
      System.setCurrentTimeMillis(1132L);
      ClassUtil.nameOf(class2);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Float> enumMap0 = new EnumMap<AccessPattern, Float>(class0);
      ClassUtil.findEnumType(enumMap0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2849), objectMapper0, dataOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      MockIOException mockIOException0 = new MockIOException("JSON", (Throwable) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MapLikeType> class0 = MapLikeType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class1, true);
      ClassUtil.canBeABeanType(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator((String) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) mockFileOutputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.createInstance(class0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Long long0 = new Long(0L);
      Class<RuntimeException> class1 = RuntimeException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(long0, class1, "XZ;rGHP<x");
      ClassUtil.nullOrToString(jsonMappingException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{{+P9^-O(Gq`dj~");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1807324828), objectMapper0, filterOutputStream0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) mockPrintStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.RuntimeException` from number 0: XZ;rGHP<x
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<ArrayType>[] classArray0 = (Class<ArrayType>[]) Array.newInstance(Class.class, 2);
      Class<ArrayType> class1 = ArrayType.class;
      classArray0[0] = class1;
      Class<ArrayType> class2 = ArrayType.class;
      classArray0[1] = class2;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Short> class0 = Short.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      TypeBindings.createIfNeeded(class0, javaTypeArray0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, false);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Double> class0 = Double.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-2613));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.classOf(accessPattern0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      Double double0 = new Double(186.1376248190526);
      ClassUtil.verifyMustOverride(class0, double0, (String) null);
      ClassUtil.nullOrToString(double0);
      ClassUtil.backticked("java.lang.Double@0000000001");
      Class<Byte> class1 = Byte.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Byte is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<ArrayType> class2 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class2, false);
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertNotNull(list0);
      
      ClassUtil.getDeclaringClass(class1);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.canBeABeanType(class3);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredFields(class0);
      Class<InputStream> class1 = InputStream.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.noneOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<Void> class1 = Void.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.getClassDescription(class0);
      Class<Void> class2 = Void.TYPE;
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1171;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      intArray0[1] = 1171;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("wcZepiuN_D6G*?U");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("']", "w@m=y(", intArray0, sQLTransactionRollbackException0);
      SQLDataException sQLDataException0 = new SQLDataException("wcZepiuN_D6G*?U", "wcZepiuN_D6G*?U", 1171, batchUpdateException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getClassDescription(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Float> enumMap0 = new EnumMap<AccessPattern, Float>(class0);
      EnumMap<AccessPattern, Float> enumMap1 = new EnumMap<AccessPattern, Float>(enumMap0);
      ClassUtil.findEnumType(enumMap0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("3g3FN]L>.$`@)M");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "3g3FN]L>.$`@)M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isConcrete(class0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Float> enumMap0 = new EnumMap<AccessPattern, Float>(class0);
      EnumMap<AccessPattern, Float> enumMap1 = new EnumMap<AccessPattern, Float>(enumMap0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      Float float0 = new Float(3241.7375F);
      enumMap1.put(accessPattern0, float0);
      ClassUtil.findEnumType(enumMap1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.backticked("org.hibernate.proxy.java.lang.annotation.Annotation");
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, Float> enumMap0 = new EnumMap<AccessPattern, Float>(class1);
      EnumMap<AccessPattern, Float> enumMap1 = new EnumMap<AccessPattern, Float>(enumMap0);
      ClassUtil.findEnumType(enumMap1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getDeclaringClass(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<Object> class3 = Object.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class3);
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(typeFactory1);
      ArrayType arrayType2 = arrayType1.withValueHandler(class1);
      ClassUtil.rawClass(arrayType2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isConcrete(class1);
      Class<Object> class2 = Object.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.createInstance(class2, false);
      ClassUtil.isBogusClass(class1);
      ClassUtil.findEnumType(class2);
      ClassUtil.nameOf(class2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.isLocalType(class1, false);
      SQLTransientException sQLTransientException0 = new SQLTransientException("s&LhLFsFJ>Ms8S");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ZG/h=9X", "ZG/h=9X", sQLTransientException0);
      MockError mockError0 = new MockError(sQLIntegrityConstraintViolationException0);
      ClassUtil.classOf(mockError0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<NullNode> class1 = NullNode.class;
      Class<String> class2 = String.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("]H>6L/|c;}sfUV5", "]H>6L/|c;}sfUV5");
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.instantiationException((Class<?>) null, (Throwable) sQLTransactionRollbackException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of [null], problem: ]H>6L/|c;}sfUV5
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      MockError mockError0 = new MockError();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Error> class1 = Error.class;
      objectMapper0.readerFor(class1);
      try { 
        JsonPointer.compile("JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"JSON\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "array";
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("annotation", true);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 8, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Throwable throwable0 = ClassUtil.getRootCause(sQLClientInfoException0);
      SQLException sQLException0 = new SQLException(";", "DEFAULT", 367, throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException: ;
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isProxyType(class0);
      System.setCurrentTimeMillis(0L);
      Class<Short> class1 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, ">+~a?qns6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("java.io.IOException", "org.hibernate.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(", field(s): ", ", field(s): ", (Map<String, ClientInfoStatus>) null, sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(" is not a primitive type", " is not a primitive type", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException:  is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (long) (-3768);
      longArray0[2] = (long) (-3768);
      longArray0[3] = (long) (-3768);
      longArray0[4] = (long) (-3768);
      longArray0[5] = (long) (-3768);
      longArray0[6] = (long) (-3768);
      longArray0[7] = (long) (-3768);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`v{q>lAn", true);
      MockError mockError0 = new MockError("!rwzx{<qMFV&CC");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("net.sf.cglib.proxy.java.lang.String", "`v{q>lAn", mockError0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("net.sf.cglib.proxy.java.lang.String", " _*mR>w0{", (-3768), sQLInvalidAuthorizationSpecException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileOutputStream0, " _*mR>w0{", sQLTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(" _*mR>w0{", " _*mR>w0{", (-3768), longArray0, jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "C~Mfs-WumK");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*o");
      Class<Character> class1 = Character.class;
      ClassUtil.nameOf(class1);
      ClassUtil.nameOf(class0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      Object object0 = new Object();
      ClassUtil.getClassDescription(object0);
      ClassUtil.nonNullString("`java.lang.Character`");
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`java.lang.Character`", "java.lang.Character", (-4082));
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Q@G", "Failed to instantiate class ", "`java.lang.Character`", (-4082));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("E|`vJ,tC0", "Failed to instantiate class ", "USE_BASE_TYPE_AS_DEFAULT_IMPL", (-4082));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("`java.lang.Character`", "*o", "E|`vJ,tC0", 8);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("MODIFIED-FOR-URL", "`java.lang.Character`", "]%p(rr", (-271));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase", "H2OPH;\"<", "USE_BASE_TYPE_AS_DEFAULT_IMPL", (-271));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("*o", " has no default (no arg) constructor", "Type parameter #%d/%d differs; can not specialize %s with %s", (-10));
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLNonTransientException0.setStackTrace(stackTraceElementArray0);
      sQLWarning0.addSuppressed(sQLNonTransientException0);
      ClassUtil.getRootCause(sQLWarning0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getOuterClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.findSuperTypes(class0, class0, list0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      System.setCurrentTimeMillis(0L);
      Class<?> class0 = ClassUtil.classOf(classUtil_Ctor0);
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isLocalType(class0, false);
      System.setCurrentTimeMillis(0L);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.canBeABeanType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class1);
      ClassUtil.findEnumType(enumSet0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 176, objectMapper0, (OutputStream) null, byteArray0, 1, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("net.sf.cglib.proxy.java.lang.String", ">iJNt\"t3&H|i~^#I[S");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) sQLFeatureNotSupportedException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: java.sql.SQLFeatureNotSupportedException: net.sf.cglib.proxy.java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      jsonFactory1.createGenerator((OutputStream) null);
      ClassUtil.findEnumType((Enum<?>) jsonGenerator_Feature0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("El4KL!r)t<w{/cw`9");
      SQLWarning sQLWarning0 = new SQLWarning("El4KL!r)t<w{/cw`9", "El4KL!r)t<w{/cw`9", mockRuntimeException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("El4KL!r)t<w{/cw`9", sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.primitiveType(class0);
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Short> class1 = Short.TYPE;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class0, class2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class2, false);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getDeclaredFields(class3);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class2, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-2573), true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(3);
      MockError mockError0 = new MockError();
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackso", "org.hibernate.proxy.java.lang.String", mockError0);
      SQLDataException sQLDataException0 = new SQLDataException("org.hibernate.proxy.java.lang.String", "org.hibernate.proxy.java.lang.String", sQLTransientException0);
      SQLTransientException sQLTransientException1 = new SQLTransientException(sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransientException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: java.sql.SQLDataException: org.hibernate.proxy.java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassUtil.nonNullString("|s!~eVIe ");
      Throwable throwable0 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      MockError mockError0 = new MockError((String) null, sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isNonStaticInnerClass(class1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("non-static member class");
      MockError mockError0 = new MockError(sQLTransientException0);
      mockError0.getSuppressed();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      Class<String> class2 = String.class;
      ClassUtil.findSuperTypes(class0, class2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "!SbrGscuC ");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // !SbrGscuC 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Class<RuntimeException> class0 = RuntimeException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "ALLOW_COMMENTS");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.RuntimeException` from number 0: ALLOW_COMMENTS
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-83);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      MockIOException mockIOException0 = new MockIOException();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isProxyType(class0);
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Void> class0 = Void.TYPE;
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
      Class<Integer> class0 = Integer.class;
      ClassUtil.isLocalType(class0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MapType> class1 = MapType.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.backticked((String) null);
      ClassUtil.canBeABeanType(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class0, (String) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      Class<IOException> class3 = IOException.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class2, class3);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) collectionType1, (-1142));
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Integer` from String [N/A]: null (through reference chain: com.fasterxml.jackson.databind.type.CollectionType[?])
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassUtil.nonNullString("net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      SQLDataException sQLDataException0 = new SQLDataException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.util.AccessPattern", 23);
      sQLDataException0.initCause((Throwable) null);
      ClassUtil.throwIfError((Throwable) null);
      System.setCurrentTimeMillis(283L);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      System.setCurrentTimeMillis(565L);
      Class<IOException> class0 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Character> class1 = Character.class;
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.findEnumType(class1);
      Class<Character> class2 = Character.class;
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("rN=eyB#8@}_!*");
      ClassUtil.classOf(mockRuntimeException0);
      Object object0 = new Object();
      ClassUtil.nullOrToString(object0);
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.getDeclaredMethods(class1);
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findSuperTypes((Class<?>) null, class4, list0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getClassDescription(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findSuperClasses(class2, class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(8, true, true, 3, 3);
      String string0 = "WAa|ApeWm<^$!e;";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("WAa|ApeWm<^$!e;", dataTruncation0);
      dataTruncation0.initCause(sQLIntegrityConstraintViolationException0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dataTruncation0.getSuppressed();
      dataTruncation0.getParameter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WAa|ApeWm<^$!e;");
      dataTruncation0.setNextException(sQLIntegrityConstraintViolationException0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) dataTruncation0, "ZERO_LENGTH_ENUM_ARRAY");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.nameOf((Named) null);
      ClassUtil.getOuterClass(class0);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, true);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.getPackageName(class0);
      ClassUtil.backticked((String) null);
      ClassUtil.nonNullString("[null]");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.nonNullString("class");
      Character character0 = Character.valueOf('<');
      Class<Character> class1 = Character.class;
      ClassUtil.hasClass(character0, class1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findEnumType(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.nameOf(class2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.findSuperTypes(class0, class1);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.hasEnclosingMethod(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassUtil.nonNullString((String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      sQLIntegrityConstraintViolationException0.getStackTrace();
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.nonNull((RuntimeException) null, (RuntimeException) null);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findEnumType(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.nameOf(class2);
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.hasEnclosingMethod(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("a.`");
      ClassUtil.nonNull((RuntimeException) null, (RuntimeException) mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isLocalType(class0, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(8233);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2058), objectMapper0, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-1124), 3);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, false, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) sQLTimeoutException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTimeoutException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(213);
      Class<Object> class0 = Object.class;
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.nonNullString("ZXN72K6S54ISHQ}");
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.backticked("ZXN72K6S54ISHQ}");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getGenericSuperclass(class0);
      MockError mockError0 = new MockError("xp");
      mockError0.toString();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.hasClass((Object) null, class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ClassUtil.getRootCause(sQLRecoverableException0);
      Class<Integer> class1 = Integer.TYPE;
      Class<IOException> class2 = IOException.class;
      ClassUtil.hasClass(class1, class2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ClassUtil.throwIfRTE(sQLTimeoutException0);
      ClassUtil.isCollectionMapOrArray(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper1, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(1032);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "O_3,('");
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.classOf(classUtil0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      ClassUtil.getDeclaredMethods(class0);
      Integer integer0 = new Integer(11);
      ClassUtil.getClassDescription(integer0);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      Class<Double> class3 = Double.class;
      ClassUtil.findSuperClasses(class3, class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getClassMethods(class0);
      Class<String> class1 = String.class;
      ClassUtil.getDeclaredFields(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getGenericExceptionTypes();
      constructor0.getDeclaredAnnotationsByType(class3);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Long> class4 = Long.class;
      ClassUtil.isBogusClass(class4);
      ClassUtil.isObjectOrPrimitive(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<LinkedList> class0 = LinkedList.class;
      Class<Double> class1 = Double.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      typeFactory0.constructMapLikeType((Class<?>) class1, (JavaType) collectionType1, (JavaType) collectionType1);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionType1, collectionType0, collectionType0);
      mapLikeType0.isTrueMapType();
      mapLikeType0.toString();
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class2, false);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isConcrete(class2);
      ClassUtil.nullOrToString((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "[map-like type; class java.util.LinkedList, [collection type; class java.util.LinkedList, contains [simple type, class java.lang.Double]] -> [collection type; class java.util.LinkedList, contains [simple type, class java.lang.Double]]]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.createInstance(class0, true);
      ClassUtil.nonNullString("");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getGenericExceptionTypes();
      classUtil_Ctor0.getParamCount();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$EnumKD");
      constructor0.getAnnotatedReturnType();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findConstructor(class1, true);
      Long long0 = new Long(0);
      Long long1 = new Long(0);
      ClassUtil.nonNull(long0, long1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.getGenericInterfaces(class2);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Throwable throwable0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ZERO_LENGTH_ENUM_ARRAY");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getGenericExceptionTypes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$EnumKD");
      constructor0.getAnnotatedReturnType();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<SimpleType> class1 = SimpleType.class;
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findConstructor(class2, true);
      Class<Annotation> class3 = Annotation.class;
      constructor0.isAnnotationPresent(class3);
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.getClassDescription("iVC9Jbk");
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.findSuperClasses(class1, class4, false);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClassUtil.nonNullString("iVC9Jbk");
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.nullOrToString(class1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nonNullString("4%0");
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.backticked("");
      Class<Double> class1 = Double.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.classOf("4%0");
      SQLTransientException sQLTransientException0 = new SQLTransientException("4%0", "uH{L\"&A{:", 1579);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Short> class0 = Short.class;
      Class<Short> class1 = Short.class;
      Class<Integer> class2 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class2, class0, class1);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class3, false);
      Class<Double> class4 = Double.class;
      ClassUtil.canBeABeanType(class4);
      Class<CollectionType> class5 = CollectionType.class;
      ClassUtil.findClassAnnotations(class5);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionLikeType> class6 = CollectionLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class6);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(jsonMappingException0);
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ClassUtil.nonNullString("iVC9Jbk");
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.nullOrToString("iVC9Jbk");
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("iVC9Jbk", "`!ES'2Bd", 1136, mockThrowable0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) null, "");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // iVC9Jbk (through reference chain: UNKNOWN[\"\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "size");
      Class<NoClass> class2 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<NoClass> class1 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      Class<Annotation> class1 = Annotation.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getContextAnnotation(class1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<Integer> class2 = Integer.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Short> class0 = Short.class;
      typeFactory0.constructMapLikeType(class0, class0, class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<CollectionType> class2 = CollectionType.class;
      Class<SimpleType> class3 = SimpleType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class2, class3);
      Class<IOException> class4 = IOException.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class4, false);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedReturnType();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getGenericExceptionTypes();
      classUtil_Ctor0.getParamCount();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$EnumKD");
      constructor0.getAnnotatedReturnType();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getClassDescription("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$EnumKD");
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      ClassUtil.findSuperClasses(class1, class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.getClassMethods(class3);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      System.setCurrentTimeMillis(1272L);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Short> class0 = Short.class;
      typeFactory0.constructMapLikeType(class0, class0, class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.throwIfIOE(mockRuntimeException0);
      ClassUtil.getGenericSuperclass(class0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getClassMethods(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getPackageName(class1);
      MockException mockException0 = new MockException();
      mockException0.toString();
      ClassUtil.getRootCause(mockException0);
      Class<Object> class2 = Object.class;
      ClassUtil.getDeclaringClass(class2);
      ClassUtil.classNameOf(class0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      System.setCurrentTimeMillis(1272L);
      ClassUtil.getPackageName(class0);
      MockException mockException0 = new MockException();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getRootCause(mockException0);
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getClassMethods(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.classOf(class1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      System.setCurrentTimeMillis(1272L);
      Class<Object> class2 = Object.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.nonNullString("org.hibernate.proxy.");
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory2 = jsonFactory0.disable(jsonParser_Feature0);
      jsonFactory2.setRootValueSeparator("vTg\"");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/,a(0S/?AZg?e|-");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.hibernate.proxy.");
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.");
      ClassUtil.classNameOf(mockRuntimeException0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.getPackageName(class0);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getClassMethods(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getEnclosingClass(class3);
      ClassUtil.getPackageName(class1);
      MockException mockException0 = new MockException();
      SQLWarning sQLWarning0 = new SQLWarning("java.lang", mockException0);
      sQLWarning0.getLocalizedMessage();
      mockException0.initCause(sQLWarning0);
      // Undeclared exception!
      ClassUtil.getRootCause(mockException0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.getEnclosingClass(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getOuterClass(class2);
      String string0 = "9tVl\\q<+)0bRVt";
      MockError mockError0 = new MockError("9tVlq<+)0bRVt");
      ClassUtil.getClassDescription(mockError0);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getConstructors(class3);
      Class<Error> class4 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      Class<Integer> class5 = Integer.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) null, class5, jsonToken0, "9tVlq<+)0bRVt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.classOf((Object) null);
      Class<String> class2 = String.class;
      ClassUtil.createInstance(class2, true);
      ClassUtil.isObjectOrPrimitive(class1);
      Class<IOException> class3 = IOException.class;
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class3, class4, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "9!%F[09%`hndxMl", (-760));
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      Class<Float> class1 = Float.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class2, false);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lang", "java.lang");
      sQLTimeoutException0.getStackTrace();
      Class<Short> class1 = Short.class;
      ClassUtil.findClassAnnotations(class1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("java.lang");
      ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
      ClassUtil.getConstructors(class0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdGenerator<ResolvedRecursiveType> objectIdGenerator0 = (ObjectIdGenerator<ResolvedRecursiveType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Float> jsonDeserializer0 = (JsonDeserializer<Float>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct((JavaType) null, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, (ObjectIdResolver) null);
      PropertyName propertyName1 = objectIdReader0.propertyName;
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) null, propertyName1, objectIdReader0.generator, true);
      JavaType javaType0 = objectIdWriter0.idType;
      Class<Integer> class2 = Integer.class;
      ClassUtil.findSuperTypes((JavaType) null, class2, false);
      ClassUtil.quotedOr((Object) null, "java.lang");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, false);
      ClassUtil.nonNullString("WK&A9");
      SQLDataException sQLDataException0 = new SQLDataException("WK&A9", "WK&A9", 1355);
      ClassUtil.throwIfError(sQLDataException0);
      ClassUtil.quotedOr((Object) null, "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter$SerializeExceptFilter");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      Class<Annotation> class1 = Annotation.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getContextAnnotation(class1);
      ClassUtil.classNameOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.classOf((Object) null);
      Class<String> class2 = String.class;
      ClassUtil.createInstance(class2, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<IOException> class3 = IOException.class;
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class3, class4, false);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.quotedOr(classUtil0, "E-_}:{%7]`");
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.getOuterClass(class0);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Long> class1 = Long.TYPE;
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Error> class3 = Error.class;
      ClassUtil.getOuterClass(class3);
      Class<Annotation> class4 = Annotation.class;
      constructor0.getAnnotationsByType(class4);
      Double double0 = new Double(0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ZY6fy?", "ZY6fy?");
      sQLNonTransientConnectionException0.getSuppressed();
      ClassUtil.throwIfRTE(sQLNonTransientConnectionException0);
      Class<AccessPattern> class5 = AccessPattern.class;
      Class<String> class6 = String.class;
      ClassUtil.findSuperTypes(class5, class6);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.backticked("nR:Lg:nQ!(!uF)q$MT");
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.classOf((Object) null);
      Class<String> class1 = String.class;
      ClassUtil.createInstance(class1, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<IOException> class2 = IOException.class;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      Class<Short> class4 = Short.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isBogusClass(class4);
      Class<JsonMappingException> class5 = JsonMappingException.class;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ClassUtil.findRawSuperTypes((Class<?>) null, class5, true);
      ClassUtil.isObjectOrPrimitive(class3);
      System.setCurrentTimeMillis(1471L);
      Class<MapType> class6 = MapType.class;
      ClassUtil.getDeclaringClass(class6);
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isJacksonStdImpl(class1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("n\"p`$XCdu<^bU#j", "n\"p`$XCdu<^bU#j", 116);
      SQLWarning sQLWarning0 = new SQLWarning("vals", "net.sf.cglib.proxy.java.lang.Float");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("vals", "vals", (-838));
      sQLWarning0.setNextException(sQLNonTransientConnectionException0);
      sQLTransientConnectionException0.setNextException(sQLWarning0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("n\"p`$XCdu<^bU#j");
      sQLTransientConnectionException0.printStackTrace((PrintStream) mockPrintStream0);
      SQLWarning sQLWarning1 = new SQLWarning("No FormatFeatures defined for generator of type ", "No FormatFeatures defined for generator of type ", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLTransientConnectionException0);
      ClassUtil.throwRootCauseIfIOE(sQLWarning1);
      Class<Long> class2 = Long.class;
      ClassUtil.findConstructor(class2, false);
      Class<NoClass> class3 = NoClass.class;
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.findRawSuperTypes(class3, class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.classOf((Object) null);
      Class<String> class1 = String.class;
      ClassUtil.createInstance(class1, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<IOException> class2 = IOException.class;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      Class<Short> class4 = Short.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isBogusClass(class4);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.getConstructors(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ClassUtil.nullOrToString((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lang", "java.lang");
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("java.lang", "java.lang", sQLTimeoutException0);
      sQLTimeoutException1.printStackTrace();
      sQLTimeoutException0.initCause(sQLTimeoutException1);
      ClassUtil.throwIfIOE(sQLTimeoutException0);
      ClassUtil.getGenericSuperclass(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("entrySet");
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.findClassAnnotations(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.nonNullString("RQ-XDq9 C[");
      ClassUtil.getConstructors(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "RQ-XDq9 C[");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // RQ-XDq9 C[
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      System.setCurrentTimeMillis(1272L);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("l");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "keyUniverse");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // keyUniverse
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "vZ~;", (-997), sQLClientInfoException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "JSON", (Throwable) sQLDataException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLClientInfoException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLException sQLException0 = new SQLException();
      sQLException0.fillInStackTrace();
      sQLException0.addSuppressed(sQLTransientConnectionException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory5 = jsonFactory4.enable(jsonParser_Feature0);
      JsonFactory jsonFactory6 = jsonFactory5.configure(jsonFactory_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonFactory6.configure(jsonGenerator_Feature1, true);
      JsonGenerator jsonGenerator0 = jsonFactory5.createGenerator((OutputStream) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", 1743, sQLTransientConnectionException0);
      JsonMappingException.from(jsonGenerator0, "JSON", (Throwable) sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      String string0 = "vTg\"";
      jsonFactory3.setRootValueSeparator("vTg\"");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/,a(0S/?AZg?e|-");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.hibernate.proxy.");
      File file0 = MockFile.createTempFile(",a(", "S/?AZg?e|-");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      MockFile mockFile0 = new MockFile(file0, "");
      try { 
        MockFile.createTempFile("EMAIL", "mkk?gR", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.nameOf(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.isConcrete(class1);
      ClassUtil.nullOrToString("NULL");
      int[] intArray0 = new int[4];
      intArray0[0] = 2462;
      Class<Long> class2 = Long.class;
      ClassUtil.findConstructor(class2, false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember", ", 9SOK~h", 445);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0, "primitive");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // primitive
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      System.setCurrentTimeMillis(1272L);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("n\"p`$XCdu<^bU#j", "n\"p`$XCdu<^bU#j", (-889));
      MockPrintStream mockPrintStream0 = new MockPrintStream("n\"p`$XCdu<^bU#j");
      sQLTransientConnectionException0.printStackTrace((PrintStream) mockPrintStream0);
      SQLWarning sQLWarning0 = new SQLWarning("l", "org.hibernate.proxy.", sQLTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLWarning0);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
      ClassUtil.isConcrete(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<String> class3 = String.class;
      ClassUtil.getConstructors(class3);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.getPackageName(class0);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.getClassMethods(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getEnclosingClass(class3);
      ClassUtil.getPackageName(class1);
      MockException mockException0 = new MockException();
      ClassUtil.getRootCause(mockException0);
      ClassUtil.getGenericInterfaces(class1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.quotedOr(classUtil0, "E-_}:{%7]`");
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.getOuterClass(class0);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      Double double0 = new Double(0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("|u-5Tw,]7DzSs7f1", "org.hibernate.proxy.java.io.IOException");
      ClassUtil.throwIfRTE(sQLNonTransientConnectionException0);
      ClassUtil.findSuperTypes((Class<?>) null, class0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.emptyIterator();
      Class<Float> class1 = Float.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.getOuterClass(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.getClassDescription(class1);
      Class<Long> class3 = Long.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.getPackageName(class4);
      ClassUtil.getClassMethods(class2);
      Class<ReferenceType> class5 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class5);
      Class<SimpleType> class6 = SimpleType.class;
      ClassUtil.getPackageName(class6);
      MockException mockException0 = new MockException();
      ClassUtil.getRootCause(mockException0);
      ClassUtil.throwIfError(mockException0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Short> class0 = Short.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class1, false);
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class2, (JavaType) mapLikeType0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(356);
      CollectionLikeType collectionLikeType0 = collectionType0.withValueHandler(placeholderForType0);
      Class<Character> class3 = Character.class;
      Class<IOException> class4 = IOException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class4, (JavaType) collectionType0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) mapLikeType0;
      javaTypeArray0[1] = (JavaType) collectionType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) mapLikeType0;
      ArrayType arrayType0 = ArrayType.construct(javaTypeArray0[3], typeBindings0);
      javaTypeArray0[5] = (JavaType) arrayType0;
      javaTypeArray0[6] = (JavaType) collectionLikeType0;
      javaTypeArray0[7] = (JavaType) collectionLikeType0;
      MapType mapType0 = MapType.construct((Class<?>) class3, typeBindings0, (JavaType) collectionType0, javaTypeArray0, (JavaType) mapLikeType0, (JavaType) mapLikeType0);
      mapType0.withKeyType(javaTypeArray0[2]);
      MapType mapType1 = mapType0.withContentValueHandler(javaTypeArray0[6]);
      Class<HashMap> class5 = HashMap.class;
      typeFactory0.constructMapType((Class<? extends Map>) class5, javaTypeArray0[6], (JavaType) mapLikeType0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, mapType1, "TRUE");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.type.MapType (of class java.lang.Short) must override method 'TRUE'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lang", "java.lang");
      assertEquals("java.lang", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.lang", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLTimeoutException0.getStackTrace();
      assertEquals("java.lang", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.lang", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException0.toString());
      assertEquals(13, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("java.lang", "java.lang", sQLTimeoutException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("java.lang", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.lang", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException0.toString());
      assertEquals("java.lang", sQLTimeoutException1.getMessage());
      assertEquals("java.lang", sQLTimeoutException1.getSQLState());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException1.toString());
      assertNotNull(sQLTimeoutException1);
      
      sQLTimeoutException1.printStackTrace();
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      assertEquals("java.lang", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.lang", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException0.toString());
      assertEquals("java.lang", sQLTimeoutException1.getMessage());
      assertEquals("java.lang", sQLTimeoutException1.getSQLState());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException1.toString());
      
      SQLTimeoutException sQLTimeoutException2 = (SQLTimeoutException)sQLTimeoutException0.initCause(sQLTimeoutException1);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertSame(sQLTimeoutException0, sQLTimeoutException2);
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException2);
      assertSame(sQLTimeoutException2, sQLTimeoutException0);
      assertNotSame(sQLTimeoutException2, sQLTimeoutException1);
      assertEquals("java.lang", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.lang", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException0.toString());
      assertEquals("java.lang", sQLTimeoutException1.getMessage());
      assertEquals("java.lang", sQLTimeoutException1.getSQLState());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException1.toString());
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException2.toString());
      assertEquals("java.lang", sQLTimeoutException2.getSQLState());
      assertEquals("java.lang", sQLTimeoutException2.getMessage());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertNotNull(sQLTimeoutException2);
      
      SQLTimeoutException sQLTimeoutException3 = (SQLTimeoutException)ClassUtil.throwIfIOE(sQLTimeoutException0);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertSame(sQLTimeoutException0, sQLTimeoutException2);
      assertSame(sQLTimeoutException0, sQLTimeoutException3);
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      assertNotSame(sQLTimeoutException3, sQLTimeoutException1);
      assertSame(sQLTimeoutException3, sQLTimeoutException0);
      assertSame(sQLTimeoutException3, sQLTimeoutException2);
      assertEquals("java.lang", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.lang", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException0.toString());
      assertEquals("java.lang", sQLTimeoutException3.getSQLState());
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertEquals("java.lang", sQLTimeoutException3.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException3.toString());
      assertNotNull(sQLTimeoutException3);
      
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException3);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<Long> class2 = Long.TYPE;
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertEquals("long", class2.toString());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      String string0 = ClassUtil.isLocalType(class2, false);
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertEquals("long", class2.toString());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertNull(string0);
      
      Class<CollectionType> class3 = CollectionType.class;
      Constructor<CollectionType> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("entrySet", "tA", (-691));
      assertEquals("entrySet", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: entrySet", sQLRecoverableException0.toString());
      assertEquals("tA", sQLRecoverableException0.getSQLState());
      assertEquals((-691), sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      Spliterator<Throwable> spliterator0 = sQLRecoverableException0.spliterator();
      assertEquals("entrySet", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: entrySet", sQLRecoverableException0.toString());
      assertEquals("tA", sQLRecoverableException0.getSQLState());
      assertEquals((-691), sQLRecoverableException0.getErrorCode());
      assertNotNull(spliterator0);
      
      String string0 = ";eVq%";
      String string1 = "hz";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("hz", "hz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(52, methodArray0.length);
      assertNotNull(methodArray0);
      
      Iterator<Long> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Float> class1 = Float.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class1);
      assertFalse(boolean0);
      
      Class<Object> class2 = Object.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      String string0 = ClassUtil.getClassDescription(class1);
      assertEquals("`java.lang.Float`", string0);
      assertNotNull(string0);
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class4);
      assertEquals(7, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<Error> class5 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class5, false);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNull(jsonParser0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) null, class1, jsonToken0, "`java.lang.Float`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class2);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap");
      assertEquals("com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertEquals("com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap", sQLTransientConnectionException1.toString());
      assertEquals("com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap", sQLTransientConnectionException1.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNotNull(sQLTransientConnectionException1);
      
      Class<Object> class3 = Object.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class3);
      assertEquals(0, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      PropertyName propertyName0 = PropertyName.NO_NAME;
      assertNull(propertyName0.getNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.isEmpty());
      assertNotNull(propertyName0);
      
      SettableBeanProperty settableBeanProperty0 = null;
      ObjectIdResolver objectIdResolver0 = null;
      Class<AccessPattern> class4 = AccessPattern.class;
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      // Undeclared exception!
      try { 
        MapType.construct(class4, (TypeBindings) null, (JavaType) null, javaTypeArray0, (JavaType) null, javaTypeArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Character> class0 = Character.class;
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.Character`", string0);
      assertNotNull(string0);
      
      Class<Error> class1 = Error.class;
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = ClassUtil.nullOrToString("NULL");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<Object> class2 = Object.class;
      int[] intArray0 = new int[4];
      intArray0[0] = 2462;
      Class<ArrayType> class3 = ArrayType.class;
      boolean boolean2 = ClassUtil.isConcrete(class3);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Class<Double> class4 = Double.class;
      boolean boolean3 = ClassUtil.isJacksonStdImpl(class4);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertEquals(0, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<Float> class5 = Float.class;
      Class<?> class6 = ClassUtil.primitiveType(class5);
      assertFalse(class6.isAnnotation());
      assertEquals("float", class6.toString());
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      assertTrue(class6.isPrimitive());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertEquals(1041, class6.getModifiers());
      assertNotNull(class6);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.quotedOr(classUtil0, "E-_}:{%7]`");
      assertNotNull(string0);
      
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation[] annotationArray1 = constructor0.getAnnotationsByType(class2);
      assertFalse(annotationArray1.equals((Object)annotationArray0));
      assertNotSame(annotationArray1, annotationArray0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      assertNotNull(annotationArray1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig1);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withValueInstantiators(valueInstantiators_Base0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig2.hasDeserializers());
      assertNotNull(deserializerFactoryConfig2);
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactoryConfig deserializerFactoryConfig3 = deserializerFactoryConfig2.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertNotSame(deserializerFactoryConfig3, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig3, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig3, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig3);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig3);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig3);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig1);
      assertTrue(deserializerFactoryConfig3.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig3.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig3.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig3.hasDeserializers());
      assertTrue(deserializerFactoryConfig3.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig2.hasDeserializers());
      assertNotNull(deserializerFactoryConfig3);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig3);
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig3));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig3));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig3));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertTrue(deserializerFactoryConfig3.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig3.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig3.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig3.hasDeserializers());
      assertTrue(deserializerFactoryConfig3.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig2.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig2);
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig3));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig3));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig3));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertNotSame(deserializerFactoryConfig3, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig3, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig3, deserializerFactoryConfig0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig3);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig3);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig3);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig1);
      assertTrue(deserializerFactoryConfig3.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig3.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig3.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig3.hasDeserializers());
      assertTrue(deserializerFactoryConfig3.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig2.hasDeserializers());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig3));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig3));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig3));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertTrue(deserializerFactoryConfig3.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig3.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig3.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig3.hasDeserializers());
      assertTrue(deserializerFactoryConfig3.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig2.hasDeserializers());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonParser jsonParser0 = defaultDeserializationContext_Impl0.getParser();
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig3.equals((Object)deserializerFactoryConfig0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig3));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig3));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig2));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig3));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      assertNotSame(deserializerFactoryConfig3, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig3, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig3, deserializerFactoryConfig0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig3);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig3);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig2);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig3);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig0);
      assertNotSame(deserializerFactoryConfig2, deserializerFactoryConfig1);
      assertTrue(deserializerFactoryConfig3.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig3.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig3.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig3.hasDeserializers());
      assertTrue(deserializerFactoryConfig3.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig2.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig2.hasDeserializers());
      assertNull(jsonParser0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) null, (Class<?>) null, jsonToken0, "\"com.fasterxml.jackson.databind.util.ClassUtil@1\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory1.createGenerator((OutputStream) null);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(159, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(uTF8JsonGenerator0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "JSON", 0, sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("JSON", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: JSON", sQLDataException0.toString());
      assertEquals("JSON", sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, (String) null, (Throwable) sQLDataException0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(159, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("JSON", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: JSON", sQLDataException0.toString());
      assertEquals("JSON", sQLDataException0.getSQLState());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(jsonMappingException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(jsonMappingException0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(159, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals("JSON", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException: JSON", sQLDataException0.toString());
      assertEquals("JSON", sQLDataException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: N/A", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: com.fasterxml.jackson.databind.JsonMappingException: N/A", sQLNonTransientConnectionException0.toString());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: com.fasterxml.jackson.databind.JsonMappingException: N/A
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
      
      Class<CollectionType> class1 = CollectionType.class;
      Constructor<CollectionType> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Float> enumMap0 = new EnumMap<AccessPattern, Float>(class0);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertEquals(0, enumMap0.size());
      assertEquals(16385, class1.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertNotNull(class1);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertNotNull(placeholderForType0);
      
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertNotNull(objectReader0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      ObjectReader objectReader1 = objectReader0.with(locale0);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(objectReader1);
      
      ObjectReader objectReader2 = objectReader1.withView(class0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(objectReader2);
      
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.WRAP_EXCEPTIONS;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      deserializationFeatureArray0[4] = deserializationFeature4;
      ObjectReader objectReader3 = objectReader2.withFeatures(deserializationFeatureArray0);
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertNotSame(objectReader3, objectReader2);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals(5, deserializationFeatureArray0.length);
      assertNotNull(objectReader3);
      
      ObjectReader objectReader4 = objectReader3.with(deserializationFeature1, deserializationFeatureArray0);
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature3));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertNotSame(objectReader3, objectReader2);
      assertSame(objectReader3, objectReader4);
      assertNotSame(objectReader3, objectReader0);
      assertNotSame(objectReader3, objectReader1);
      assertNotSame(objectReader4, objectReader2);
      assertNotSame(objectReader4, objectReader0);
      assertNotSame(objectReader4, objectReader1);
      assertSame(objectReader4, objectReader3);
      assertNotSame(objectReader0, objectReader4);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader0, objectReader2);
      assertNotSame(objectReader0, objectReader3);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectReader1, objectReader2);
      assertNotSame(objectReader1, objectReader3);
      assertNotSame(objectReader1, objectReader4);
      assertNotSame(objectReader2, objectReader3);
      assertNotSame(objectReader2, objectReader0);
      assertNotSame(objectReader2, objectReader1);
      assertNotSame(objectReader2, objectReader4);
      assertSame(deserializationFeature1, deserializationFeature4);
      assertNotSame(deserializationFeature1, deserializationFeature2);
      assertNotSame(deserializationFeature1, deserializationFeature3);
      assertNotSame(deserializationFeature1, deserializationFeature0);
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals(5, deserializationFeatureArray0.length);
      assertNotNull(objectReader4);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2024, objectReader4, byteArrayOutputStream0);
      assertFalse(objectReader0.equals((Object)objectReader4));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader0.equals((Object)objectReader2));
      assertFalse(objectReader0.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectReader1.equals((Object)objectReader2));
      assertFalse(objectReader1.equals((Object)objectReader3));
      assertFalse(objectReader1.equals((Object)objectReader4));
      assertFalse(objectReader2.equals((Object)objectReader3));
      assertFalse(objectReader2.equals((Object)objectReader0));
      assertFalse(objectReader2.equals((Object)objectReader1));
      assertFalse(objectReader2.equals((Object)objectReader4));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature2));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature3));
      assertFalse(deserializationFeature1.equals((Object)deserializationFeature0));
      assertFalse(objectReader3.equals((Object)objectReader2));
      assertFalse(objectReader3.equals((Object)objectReader0));
      assertFalse(objectReader3.equals((Object)objectReader1));
      assertFalse(objectReader4.equals((Object)objectReader2));
      assertFalse(objectReader4.equals((Object)objectReader0));
      assertFalse(objectReader4.equals((Object)objectReader1));
      assertEquals(0, pipedInputStream0.available());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(2024, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(127, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(5, deserializationFeatureArray0.length);
      assertNotNull(uTF8JsonGenerator0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      MockThrowable mockThrowable0 = new MockThrowable("org.hibernate.proxy.java.lang.RuntimeException");
      assertNotNull(mockThrowable0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedInputStream0, "Problem deserializing property '", mockThrowable0);
      assertNotNull(jsonMappingException0);
      
      SQLDataException sQLDataException0 = new SQLDataException(jsonMappingException0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.hibernate.proxy.java.lang.RuntimeException", mockThrowable0.toString());
      assertEquals("org.hibernate.proxy.java.lang.RuntimeException", mockThrowable0.getMessage());
      assertEquals("java.sql.SQLDataException: com.fasterxml.jackson.databind.JsonMappingException: Problem deserializing property '", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: Problem deserializing property '", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Problem deserializing property '", "org.hibernate.proxy.java.lang.RuntimeException", hashMap0, sQLDataException0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: org.hibernate.proxy.java.lang.RuntimeException", mockThrowable0.toString());
      assertEquals("org.hibernate.proxy.java.lang.RuntimeException", mockThrowable0.getMessage());
      assertEquals("java.sql.SQLDataException: com.fasterxml.jackson.databind.JsonMappingException: Problem deserializing property '", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: Problem deserializing property '", sQLDataException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: Problem deserializing property '", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("Problem deserializing property '", sQLClientInfoException0.getMessage());
      assertEquals("org.hibernate.proxy.java.lang.RuntimeException", sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException: Problem deserializing property '
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Error> class0 = Error.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      Class<ArrayType> class3 = ArrayType.class;
      Class class4 = (Class)ClassUtil.getGenericSuperclass(class3);
      assertFalse(class4.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class4.toString());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals(1025, class4.getModifiers());
      assertNotNull(class4);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<Void> class5 = Void.class;
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class5);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ClassUtil.isJacksonStdImpl((Object) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string0 = "(iyg9=";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("vals", "$v\"<f!2(nUv ~)(&bJ");
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: vals", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("vals", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("$v\"<f!2(nUv ~)(&bJ", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      sQLInvalidAuthorizationSpecException0.printStackTrace();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: vals", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("vals", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("$v\"<f!2(nUv ~)(&bJ", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("keyUniverse", " 4bA~73#FSG");
      assertEquals("java.sql.SQLNonTransientConnectionException: keyUniverse", sQLNonTransientConnectionException0.toString());
      assertEquals("keyUniverse", sQLNonTransientConnectionException0.getMessage());
      assertEquals(" 4bA~73#FSG", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      assertEquals("java.sql.SQLNonTransientConnectionException: keyUniverse", sQLNonTransientConnectionException0.toString());
      assertEquals("keyUniverse", sQLNonTransientConnectionException0.getMessage());
      assertEquals(" 4bA~73#FSG", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      sQLInvalidAuthorizationSpecException0.addSuppressed(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: vals", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("vals", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("$v\"<f!2(nUv ~)(&bJ", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: keyUniverse", sQLNonTransientConnectionException0.toString());
      assertEquals("keyUniverse", sQLNonTransientConnectionException0.getMessage());
      assertEquals(" 4bA~73#FSG", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        sQLInvalidAuthorizationSpecException0.printStackTrace((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Constructor<ReferenceType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLException sQLException0 = new SQLException();
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      SQLException sQLException1 = (SQLException)sQLException0.fillInStackTrace();
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException1.toString());
      assertNull(sQLException1.getSQLState());
      assertNull(sQLException1.getMessage());
      assertEquals(0, sQLException1.getErrorCode());
      assertNotNull(sQLException1);
      
      sQLException0.addSuppressed(sQLTransientConnectionException0);
      assertSame(sQLException0, sQLException1);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      
      sQLTransientConnectionException0.addSuppressed(sQLException0);
      assertSame(sQLException0, sQLException1);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)sQLTransientConnectionException0.fillInStackTrace();
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getMessage());
      assertNotNull(sQLTransientConnectionException1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLNonTransientConnectionException0.getStackTrace();
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.getMessage());
      assertEquals(13, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      sQLNonTransientConnectionException0.setNextException(sQLTransientConnectionException0);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.getMessage());
      
      StackTraceElement[] stackTraceElementArray1 = sQLNonTransientConnectionException0.getStackTrace();
      assertFalse(stackTraceElementArray1.equals((Object)stackTraceElementArray0));
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertNotSame(stackTraceElementArray1, stackTraceElementArray0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.getMessage());
      assertEquals(13, stackTraceElementArray1.length);
      assertNotNull(stackTraceElementArray1);
      
      sQLTransientConnectionException0.setNextException(sQLNonTransientConnectionException0);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLNonTransientConnectionException0.getMessage());
      
      StackTraceElement[] stackTraceElementArray2 = sQLTransientConnectionException0.getStackTrace();
      assertFalse(stackTraceElementArray2.equals((Object)stackTraceElementArray1));
      assertFalse(stackTraceElementArray2.equals((Object)stackTraceElementArray0));
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertNotSame(stackTraceElementArray2, stackTraceElementArray1);
      assertNotSame(stackTraceElementArray2, stackTraceElementArray0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals(13, stackTraceElementArray2.length);
      assertNotNull(stackTraceElementArray2);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "6>5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6>5
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = 0L;
      String string0 = "tfD^g";
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("tfD^g", intArray0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("tfD^g", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: tfD^g", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("l5,e@Ac]RMT9DmoV)", "DefaultSerializerProvider sub-class not overriding copy()", 0, longArray0, batchUpdateException0);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("tfD^g", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: tfD^g", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("l5,e@Ac]RMT9DmoV)", batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("DefaultSerializerProvider sub-class not overriding copy()", batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: l5,e@Ac]RMT9DmoV)", batchUpdateException1.toString());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(6, longArray0.length);
      assertEquals(3, intArray0.length);
      assertNotNull(batchUpdateException1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("l5,e@Ac]RMT9DmoV)");
      assertNotNull(mockPrintStream0);
      
      batchUpdateException1.printStackTrace((PrintStream) mockPrintStream0);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("tfD^g", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: tfD^g", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("l5,e@Ac]RMT9DmoV)", batchUpdateException1.getMessage());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("DefaultSerializerProvider sub-class not overriding copy()", batchUpdateException1.getSQLState());
      assertEquals("java.sql.BatchUpdateException: l5,e@Ac]RMT9DmoV)", batchUpdateException1.toString());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(6, longArray0.length);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // tfD^g
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(23, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<String> class1 = String.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class1);
      assertEquals(5, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class3, true);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      Class<Annotation> class4 = Annotation.class;
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotationsByType(class4);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor0);
      
      Class<Long> class5 = Long.class;
      boolean boolean0 = ClassUtil.isBogusClass(class5);
      assertFalse(boolean0);
      
      Class<Short> class6 = Short.class;
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class6);
      assertTrue(boolean1 == boolean0);
      assertSame(class6, class0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(7, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      String string0 = ClassUtil.backticked((String) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<Annotation> class1 = Annotation.class;
      Constructor<Annotation> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Short> class0 = Short.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isMapLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertNotNull(mapLikeType0);
      
      Class<?> class1 = ClassUtil.rawClass(mapLikeType0);
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isMapLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.Short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1978;
      intArray0[1] = 1978;
      intArray0[2] = 1978;
      intArray0[3] = 1978;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertNotNull(javaType0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl1.invalidTypeIdException(javaType0, "Cy@vNuO!N)+m@;NY*", "Cy@vNuO!N)+m@;NY*");
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertEquals("Cy@vNuO!N)+m@;NY*", invalidTypeIdException0.getTypeId());
      assertNotNull(invalidTypeIdException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 1978, intArray0, invalidTypeIdException0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertEquals("Cy@vNuO!N)+m@;NY*", invalidTypeIdException0.getTypeId());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(1978, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {1978, 1978, 1978, 1978}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(batchUpdateException0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertArrayEquals(new int[] {1978, 1978, 1978, 1978}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(mockRuntimeException0);
      
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException();
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      assertNotNull(mockRuntimeException1);
      
      MockRuntimeException mockRuntimeException2 = (MockRuntimeException)ClassUtil.nonNull((RuntimeException) mockRuntimeException1, (RuntimeException) mockRuntimeException0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      assertFalse(mockRuntimeException2.equals((Object)mockRuntimeException0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertNotSame(mockRuntimeException0, mockRuntimeException2);
      assertSame(mockRuntimeException1, mockRuntimeException2);
      assertNotSame(mockRuntimeException1, mockRuntimeException0);
      assertSame(mockRuntimeException2, mockRuntimeException1);
      assertNotSame(mockRuntimeException2, mockRuntimeException0);
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertEquals("Cy@vNuO!N)+m@;NY*", invalidTypeIdException0.getTypeId());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(1978, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {1978, 1978, 1978, 1978}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(mockRuntimeException2);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNull(type0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertFalse(boolean0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class3);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"%s\"");
      assertEquals("java.sql.SQLTransientConnectionException: \"%s\"", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("\"%s\"", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertEquals("java.sql.SQLTransientConnectionException: \"%s\"", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("\"%s\"", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: \"%s\"", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertEquals("\"%s\"", sQLTransientConnectionException1.getMessage());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertNotNull(sQLTransientConnectionException1);
      
      Class<Annotation> class4 = Annotation.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class4);
      assertEquals(0, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      PropertyName propertyName0 = PropertyName.NO_NAME;
      assertNull(propertyName0.getNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertNotNull(propertyName0);
      
      ObjectIdGenerator<NoClass> objectIdGenerator0 = (ObjectIdGenerator<NoClass>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<JsonMappingException> jsonDeserializer0 = (JsonDeserializer<JsonMappingException>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct((JavaType) null, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, (ObjectIdResolver) null);
      assertNull(propertyName0.getNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(objectIdReader0.maySerializeAsObject());
      assertNotNull(objectIdReader0);
      
      PropertyName propertyName1 = objectIdReader0.propertyName;
      assertSame(propertyName1, propertyName0);
      assertNull(propertyName1.getNamespace());
      assertFalse(propertyName1.hasNamespace());
      assertTrue(propertyName1.isEmpty());
      assertEquals("", propertyName1.getSimpleName());
      assertFalse(propertyName1.hasSimpleName());
      assertNotNull(propertyName1);
      
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) null, propertyName1, objectIdReader0.generator, true);
      assertSame(propertyName0, propertyName1);
      assertSame(propertyName1, propertyName0);
      assertNull(propertyName0.getNamespace());
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(objectIdReader0.maySerializeAsObject());
      assertNull(propertyName1.getNamespace());
      assertFalse(propertyName1.hasNamespace());
      assertTrue(propertyName1.isEmpty());
      assertEquals("", propertyName1.getSimpleName());
      assertFalse(propertyName1.hasSimpleName());
      assertTrue(objectIdWriter0.alwaysAsId);
      assertNotNull(objectIdWriter0);
      
      JavaType javaType0 = objectIdWriter0.idType;
      assertNull(javaType0);
      
      Class<?> class5 = ClassUtil.rawClass((JavaType) null);
      assertNull(class5);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(0, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNull(type0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertFalse(boolean0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<?> class2 = ClassUtil.getEnclosingClass(class1);
      assertNull(class2);
      
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class3);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"%s\"");
      assertEquals("\"%s\"", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: \"%s\"", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      assertEquals("\"%s\"", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: \"%s\"", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("\"%s\"", sQLTransientConnectionException1.getMessage());
      assertEquals(0, sQLTransientConnectionException1.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: \"%s\"", sQLTransientConnectionException1.toString());
      assertNull(sQLTransientConnectionException1.getSQLState());
      assertNotNull(sQLTransientConnectionException1);
      
      boolean boolean1 = ClassUtil.isProxyType(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      Class<Character> class1 = Character.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertEquals(94, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertEquals(1, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectMapper0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertNotNull(jsonFactory3);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JSON", "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      Class<JsonMappingException> class0 = JsonMappingException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string0 = ClassUtil.quotedOr(classUtil0, "E-_}:{%7]`");
      assertNotNull(string0);
      
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<Annotation> class2 = Annotation.class;
      Annotation[] annotationArray1 = constructor0.getAnnotationsByType(class2);
      assertFalse(annotationArray1.equals((Object)annotationArray0));
      assertNotSame(annotationArray1, annotationArray0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      assertNotNull(annotationArray1);
      
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) double0);
      assertFalse(boolean0);
      
      Double double1 = new Double(1.0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      String string1 = ClassUtil.quotedOr(double1, "E-_}:{%7]`");
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"1.0\"", string1);
      assertNotNull(string1);
      
      Class<Long> class3 = Long.class;
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
      
      Class<Long> class5 = Long.class;
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class5);
      assertTrue(boolean1 == boolean0);
      assertSame(class5, class3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotNull(jsonFactory1);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertNotNull(jsonFactory2);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertNotNull(jsonFactory3);
      
      String string0 = "vTg\"";
      JsonFactory jsonFactory4 = jsonFactory3.setRootValueSeparator("vTg\"");
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory4);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("vTg\"", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("vTg\"", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("vTg\"", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals("vTg\"", jsonFactory4.getRootValueSeparator());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertNotNull(jsonFactory4);
      
      File file0 = MockFile.createTempFile(",a(", "S/?AZg?e|-");
      assertEquals("?AZg?e|-", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/,a(0S/?AZg?e|-", file0.toString());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/,a(0S", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertNotNull(file0);
      
      MockFile mockFile0 = new MockFile(file0, "");
      assertTrue(mockFile0.equals((Object)file0));
      assertNotNull(mockFile0);
      
      try { 
        MockFile.createTempFile("EMAIL", "mkk?gR", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.nullOrToString(class0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Short> class0 = Short.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertNotNull(mapLikeType0);
      
      Class<Object> class1 = Object.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class1, false);
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      String string0 = ClassUtil.getPackageName(class2);
      assertEquals("com.fasterxml.jackson.databind.util", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.nullOrToString(class0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = ClassUtil.getClassDescription((Object) null);
      assertEquals("unknown", string0);
      assertNotNull(string0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("\"%s\"", "KC)sdr<jP>2;mxTv", sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: \"%s\"", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("\"%s\"", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("KC)sdr<jP>2;mxTv", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: \"%s\"", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("\"%s\"", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("KC)sdr<jP>2;mxTv", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: \"%s\"", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLIntegrityConstraintViolationException: \"%s\"", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNull(sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: \"%s\"", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("\"%s\"", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("KC)sdr<jP>2;mxTv", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: \"%s\"", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLIntegrityConstraintViolationException: \"%s\"", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: \"%s\"", sQLFeatureNotSupportedException1.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: java.sql.SQLIntegrityConstraintViolationException: \"%s\"", sQLFeatureNotSupportedException1.toString());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = ClassUtil.backticked("NULL");
      assertEquals("`NULL`", string0);
      assertNotNull(string0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string1 = null;
      int int0 = (-2644);
      SQLDataException sQLDataException0 = new SQLDataException("");
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) classUtil0, (-2644));
      assertEquals("java.sql.SQLDataException: ", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("", sQLDataException0.getMessage());
      assertNotNull(jsonMappingException0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<MapType> class0 = MapType.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, javaTypeArray0.length);
      assertNotNull(typeBindings0);
      
      // Undeclared exception!
      try { 
        ArrayType.construct((JavaType) null, typeBindings0, (Object) class0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Long> class0 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = "+y$";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("+y$", "+y$", 1321);
      assertEquals("+y$", sQLTransientConnectionException0.getSQLState());
      assertEquals("+y$", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: +y$", sQLTransientConnectionException0.toString());
      assertEquals(1321, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      String string1 = "D=8{";
      String string2 = null;
      String string3 = "VCztV2vQpeR=RH) ";
      try { 
        MockURI.URI("+y$", "D=8{", (String) null, "+y$", "VCztV2vQpeR=RH) ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: +y$://D=8%7B?+y$#VCztV2vQpeR=RH)%20
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("LRAkOlx&9H`W=?X/");
      assertEquals("LRAkOlx&9H`W=?X/", string0);
      assertNotNull(string0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("o~}s1RM$", "keyType", (-2857));
      assertEquals("java.sql.SQLNonTransientConnectionException: o~}s1RM$", sQLNonTransientConnectionException0.toString());
      assertEquals("o~}s1RM$", sQLNonTransientConnectionException0.getMessage());
      assertEquals("keyType", sQLNonTransientConnectionException0.getSQLState());
      assertEquals((-2857), sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("XM <mD;^Yo)z", "XM <mD;^Yo)z", sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: o~}s1RM$", sQLNonTransientConnectionException0.toString());
      assertEquals("o~}s1RM$", sQLNonTransientConnectionException0.getMessage());
      assertEquals("keyType", sQLNonTransientConnectionException0.getSQLState());
      assertEquals((-2857), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: XM <mD;^Yo)z", sQLRecoverableException0.toString());
      assertEquals("XM <mD;^Yo)z", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("XM <mD;^Yo)z", sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)ClassUtil.throwIfRTE(sQLRecoverableException0);
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: o~}s1RM$", sQLNonTransientConnectionException0.toString());
      assertEquals("o~}s1RM$", sQLNonTransientConnectionException0.getMessage());
      assertEquals("keyType", sQLNonTransientConnectionException0.getSQLState());
      assertEquals((-2857), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: XM <mD;^Yo)z", sQLRecoverableException0.toString());
      assertEquals("XM <mD;^Yo)z", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("XM <mD;^Yo)z", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: XM <mD;^Yo)z", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertEquals("XM <mD;^Yo)z", sQLRecoverableException1.getMessage());
      assertEquals("XM <mD;^Yo)z", sQLRecoverableException1.getSQLState());
      assertNotNull(sQLRecoverableException1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(35, methodArray0.length);
      assertNotNull(methodArray0);
      
      DataTruncation dataTruncation0 = new DataTruncation(1908, false, false, 4061, 1908);
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Class<Double> class1 = Double.class;
      String string0 = ClassUtil.getPackageName(class1);
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "java.lang");
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotNull(jsonMappingException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) jsonGenerator_Feature0);
      assertEquals(16393, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertEquals("class com.fasterxml.jackson.core.JsonGenerator$Feature", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isEnum());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertEquals(16393, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertEquals("class com.fasterxml.jackson.core.JsonGenerator$Feature", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isEnum());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isSynthetic());
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      Class<String> class2 = String.class;
      Class<?> class3 = ClassUtil.getOuterClass(class2);
      assertNull(class3);
      
      int int0 = 3063;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("._Ayb:{NK0y91]O4", "._Ayb:{NK0y91]O4", 3063);
      assertEquals("._Ayb:{NK0y91]O4", sQLSyntaxErrorException0.getSQLState());
      assertEquals("._Ayb:{NK0y91]O4", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ._Ayb:{NK0y91]O4", sQLSyntaxErrorException0.toString());
      assertEquals(3063, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)sQLSyntaxErrorException0.fillInStackTrace();
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertEquals("._Ayb:{NK0y91]O4", sQLSyntaxErrorException0.getSQLState());
      assertEquals("._Ayb:{NK0y91]O4", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ._Ayb:{NK0y91]O4", sQLSyntaxErrorException0.toString());
      assertEquals(3063, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("._Ayb:{NK0y91]O4", sQLSyntaxErrorException1.getMessage());
      assertEquals("._Ayb:{NK0y91]O4", sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ._Ayb:{NK0y91]O4", sQLSyntaxErrorException1.toString());
      assertEquals(3063, sQLSyntaxErrorException1.getErrorCode());
      assertNotNull(sQLSyntaxErrorException1);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ._Ayb:{NK0y91]O4
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Character> class0 = Character.class;
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.Character`", string0);
      assertNotNull(string0);
      
      Class<Error> class1 = Error.class;
      boolean boolean0 = ClassUtil.isProxyType(class1);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = ClassUtil.nullOrToString("NULL");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Class<Object> class2 = Object.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class2);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2462;
      intArray0[1] = 688;
      intArray0[2] = 0;
      intArray0[3] = 232;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertArrayEquals(new int[] {2462, 688, 0, 232}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(batchUpdateException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(52, methodArray0.length);
      assertNotNull(methodArray0);
      
      Iterator<Long> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Float> class1 = Float.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class1);
      assertFalse(boolean0);
      
      Class<?> class2 = ClassUtil.getOuterClass(class0);
      assertNull(class2);
      
      Class<Object> class3 = Object.class;
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
      
      String string0 = ClassUtil.getClassDescription(class1);
      assertEquals("`java.lang.Float`", string0);
      assertNotNull(string0);
      
      Class<JsonMappingException> class5 = JsonMappingException.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class5);
      assertEquals(7, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<MapLikeType> class2 = MapLikeType.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class2);
      assertFalse(boolean0);
      
      String string0 = "tA";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("entrySet", "tA", (-691));
      assertEquals("entrySet", sQLRecoverableException0.getMessage());
      assertEquals((-691), sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: entrySet", sQLRecoverableException0.toString());
      assertEquals("tA", sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      Spliterator<Throwable> spliterator0 = sQLRecoverableException0.spliterator();
      assertEquals("entrySet", sQLRecoverableException0.getMessage());
      assertEquals((-691), sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: entrySet", sQLRecoverableException0.toString());
      assertEquals("tA", sQLRecoverableException0.getSQLState());
      assertNotNull(spliterator0);
      
      String string1 = ";eVq%";
      File file0 = MockFile.createTempFile(";eVq%", "entrySet");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(";eVq%0entrySet", file0.getName());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/;eVq%0entrySet", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals("/tmp", file0.getParent());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertNotNull(file0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, (-691));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      assertFalse(beanSerializerBuilder0.hasProperties());
      assertNotNull(beanSerializerBuilder0);
      
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      assertFalse(beanSerializerBuilder0.hasProperties());
      assertNull(annotatedClass0);
      
      Class<CollectionType> class1 = CollectionType.class;
      Constructor<CollectionType> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertEquals(0, annotationMap0.size());
      assertNotNull(annotationMap0);
      
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[4];
      annotationMapArray0[0] = annotationMap0;
      annotationMapArray0[1] = annotationMap0;
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      assertSame(annotationMap0, annotationMap1);
      assertSame(annotationMap1, annotationMap0);
      assertEquals(0, annotationMap0.size());
      assertEquals(0, annotationMap1.size());
      assertNotNull(annotationMap1);
      
      annotationMapArray0[2] = annotationMap1;
      annotationMapArray0[3] = annotationMap0;
      AnnotatedConstructor annotatedConstructor0 = null;
      try {
        annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, (Constructor<?>) null, annotationMap0, annotationMapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null constructor not allowed
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Boolean is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = true;
      Constructor<CollectionType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Constructor<ResolvedRecursiveType> constructor0 = null;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<String> class0 = String.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<Long> class1 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
      
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      Class<ArrayType> class2 = ArrayType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertEquals(31, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<Object> class3 = Object.class;
      Class<?> class4 = ClassUtil.getEnclosingClass(class3);
      assertNull(class4);
      
      String string1 = ClassUtil.getPackageName(class1);
      assertEquals("java.lang", string1);
      assertNotNull(string1);
      
      MockException mockException0 = new MockException();
      assertNotNull(mockException0);
      
      Throwable throwable0 = ClassUtil.getRootCause(mockException0);
      assertSame(mockException0, throwable0);
      assertSame(throwable0, mockException0);
      assertNotNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lang", "java.lang");
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException0.toString());
      assertEquals("java.lang", sQLTimeoutException0.getMessage());
      assertEquals("java.lang", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      StackTraceElement[] stackTraceElementArray0 = sQLTimeoutException0.getStackTrace();
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException0.toString());
      assertEquals("java.lang", sQLTimeoutException0.getMessage());
      assertEquals("java.lang", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(13, stackTraceElementArray0.length);
      assertNotNull(stackTraceElementArray0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("java.lang", "java.lang", sQLTimeoutException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException0.toString());
      assertEquals("java.lang", sQLTimeoutException0.getMessage());
      assertEquals("java.lang", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.lang", sQLTimeoutException1.getSQLState());
      assertEquals("java.lang", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException1.toString());
      assertNotNull(sQLTimeoutException1);
      
      sQLTimeoutException1.printStackTrace();
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException0.toString());
      assertEquals("java.lang", sQLTimeoutException0.getMessage());
      assertEquals("java.lang", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.lang", sQLTimeoutException1.getSQLState());
      assertEquals("java.lang", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException1.toString());
      
      SQLTimeoutException sQLTimeoutException2 = (SQLTimeoutException)sQLTimeoutException0.initCause(sQLTimeoutException1);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertFalse(sQLTimeoutException2.equals((Object)sQLTimeoutException1));
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException0, sQLTimeoutException2);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException2);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      assertSame(sQLTimeoutException2, sQLTimeoutException0);
      assertNotSame(sQLTimeoutException2, sQLTimeoutException1);
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException0.toString());
      assertEquals("java.lang", sQLTimeoutException0.getMessage());
      assertEquals("java.lang", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.lang", sQLTimeoutException1.getSQLState());
      assertEquals("java.lang", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException1.toString());
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException2.toString());
      assertEquals(0, sQLTimeoutException2.getErrorCode());
      assertEquals("java.lang", sQLTimeoutException2.getSQLState());
      assertEquals("java.lang", sQLTimeoutException2.getMessage());
      assertNotNull(sQLTimeoutException2);
      
      SQLTimeoutException sQLTimeoutException3 = (SQLTimeoutException)ClassUtil.throwIfIOE(sQLTimeoutException0);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException3.equals((Object)sQLTimeoutException1));
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException0, sQLTimeoutException2);
      assertSame(sQLTimeoutException0, sQLTimeoutException3);
      assertNotSame(sQLTimeoutException3, sQLTimeoutException1);
      assertSame(sQLTimeoutException3, sQLTimeoutException2);
      assertSame(sQLTimeoutException3, sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException0.toString());
      assertEquals("java.lang", sQLTimeoutException0.getMessage());
      assertEquals("java.lang", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.lang", sQLTimeoutException3.getMessage());
      assertEquals("java.lang", sQLTimeoutException3.getSQLState());
      assertEquals(0, sQLTimeoutException3.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.lang", sQLTimeoutException3.toString());
      assertNotNull(sQLTimeoutException3);
      
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertNotNull(class1);
      
      Class<Long> class2 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      Class<Boolean> class3 = Boolean.class;
      Class<Character> class4 = Character.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class3, class4, true);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getConstructors(class0);
      Class<NoClass> class1 = NoClass.class;
      Class<String> class2 = String.class;
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }
}
