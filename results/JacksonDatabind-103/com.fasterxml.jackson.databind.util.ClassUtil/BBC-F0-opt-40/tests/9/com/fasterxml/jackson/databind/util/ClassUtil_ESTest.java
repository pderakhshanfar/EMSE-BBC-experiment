/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 16:45:35 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.Serializers;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.defaultValue(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.findConstructor(class0, false);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("WRITE_DATE_KEYS_AS_TIMESTAMPS", sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLTransientConnectionException0);
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      boolean boolean0 = true;
      ClassUtil.findConstructor(class0, boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
      Class<String> class1 = String.class;
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      objectMapper0.readerFor(class0);
      Class<SimpleModule> class1 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream("wr%I34z/H\"_bmT\u0002");
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayBuilder0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      // Undeclared exception!
      try { 
        objectReader0.withoutFeatures((FormatFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      String string0 = "wr%I34z/H\"_bmT\\2";
      MockPrintStream mockPrintStream0 = new MockPrintStream("wr%I34z/H\"_bmT\u0002");
      MockPrintStream mockPrintStream1 = new MockPrintStream(byteArrayBuilder0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      FormatFeature[] formatFeatureArray0 = null;
      // Undeclared exception!
      try { 
        objectReader0.withoutFeatures((FormatFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("VE%");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "-%|B+WuVXO?FUYI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, true);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class1);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<MissingNode> class0 = MissingNode.class;
      ClassUtil.isConcrete(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Module> class1 = Module.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Character> class0 = Character.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getOuterClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = false;
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-1778);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader1 = objectReader0.with(contextAttributes0);
      String string0 = null;
      String string1 = "I4ok8Hy";
      PropertyName propertyName0 = new PropertyName((String) null, "I4ok8Hy");
      objectReader1.withRootName(propertyName0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockError mockError0 = new MockError(": 6-X}KZp,(-.0J31//");
      mockError0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, " has no default (no arg) constructor");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
      LongNode longNode0 = new LongNode(2089L);
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(longNode0);
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) null, jsonToken0, "O>7L)7xAz1VaR");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_OBJECT: O>7L)7xAz1VaR
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Error> class0 = Error.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class1);
      Class<Short> class2 = Short.TYPE;
      SQLDataException sQLDataException0 = new SQLDataException("VKcP(_?sO'Zz");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      MockFile mockFile0 = new MockFile((File) null, "VKcP(_?sO'Zz");
      mockFile0.setReadable(false);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.emptyIterator();
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nullOrToString(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockIOException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, jsonMappingException_Reference0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.util.ClassUtil$Ctor (through reference chain: org.evosuite.runtime.mock.java.io.MockIOException[?])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findSuperTypes(class0, class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) objectOutputStream0, jsonEncoding0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonGenerator_Feature0, false);
      jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1580, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(3, 4096);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_INT: org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      configOverrides0.getDefaultMergeable();
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<Double> class1 = Double.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<Error> class1 = Error.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("Q}w2Ayhla5Q?)w3Z", class0, "Q}w2Ayhla5Q?)w3Z");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.PlaceholderForType` from String \"Q}w2Ayhla5Q?)w3Z\": Q}w2Ayhla5Q?)w3Z
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TypeFactory.defaultInstance();
      Class<Void> class0 = Void.class;
      ClassUtil.isLocalType(class0, false);
      Class<MapType> class1 = MapType.class;
      ClassUtil.primitiveType(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassUtil.nonNullString("net.sf.cglib.proxy.java.lang.Error");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes(class1, (Class<?>) null);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findClassAnnotations(class2);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<Double> class1 = Double.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.getOuterClass(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.hasEnclosingMethod(class2);
      System.setCurrentTimeMillis(1L);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.canBeABeanType(class3);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, true);
      Class<Float> class4 = Float.class;
      ClassUtil.findSuperTypes(class0, class4);
      Class<Double> class5 = Double.class;
      ClassUtil.findEnumType(class5);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = objectMapper0.constructType(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      Class<String> class1 = String.class;
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) referenceType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = (JavaType) referenceType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      javaTypeArray0[6] = javaType0;
      javaTypeArray0[7] = (JavaType) referenceType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      resolvedRecursiveType0.containedTypeOrUnknown((-1));
      SimpleType simpleType0 = referenceType0.withTypeHandler(resolvedRecursiveType0);
      ClassUtil.rawClass(simpleType0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
      Throwable throwable0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet.range(accessPattern0, accessPattern0);
      Class<Character> class0 = Character.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      MockIOException mockIOException0 = new MockIOException();
      Throwable throwable0 = ClassUtil.getRootCause(mockIOException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(throwable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.emptyIterator();
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.classOf(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class org.evosuite.shaded.org.mockito.codegen.Enum$MockitoMock$488008235 is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JSON", "Cannot figure out type for EnumMap (odd JDK platform?)", hashMap0, (Throwable) null);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      Double double0 = new Double(0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException1, (Object) double0, 2);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.sql.SQLClientInfoException) (through reference chain: java.lang.Double[2])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(mockRuntimeException0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", problem: ");
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "T5D");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isBogusClass(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern1);
      ClassUtil.findEnumType(enumSet0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Uem2\"tUYz}:F0o=9o5", "Tg9:zo", (-3), hashMap0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Uem2\"tUYz}:F0o=9o5", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException0, "Tg9:zo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tg9:zo
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockFile mockFile0 = new MockFile("?!b-+bnq|>v?-S");
      JsonFactory jsonFactory0 = new JsonFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator(" is not a primitive type");
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator(" is not a primitive type");
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      jsonFactory2.setOutputDecorator(outputDecorator0);
      MockFile mockFile1 = new MockFile("?!b-+bnq|>v?-S");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((File) mockFile1, jsonEncoding0);
      Exception exception0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, (Object) accessPattern0);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isConcrete(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ObjectReader objectReader1 = objectReader0.with((JsonNodeFactory) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      ObjectReader objectReader2 = objectReader1.without(jsonParser_Feature0);
      String string0 = "com.fasterxml.jackson.databind.util.ClassUtil";
      // Undeclared exception!
      try { 
        objectReader2.at("com.fasterxml.jackson.databind.util.ClassUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid input: JSON Pointer expression must start with '/': \"com.fasterxml.jackson.databind.util.ClassUtil\"
         //
         verifyException("com.fasterxml.jackson.core.JsonPointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Float float0 = new Float(1380.35F);
      ClassUtil.nonNull((Float) null, float0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Module> class0 = Module.class;
      Constructor<Module> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.isAnnotationPresent(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[-_./;:]", "$", 825);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [-_./;:]
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.canBeABeanType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<Error> class1 = Error.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      Class<Object> class2 = Object.class;
      Class<Long> class3 = Long.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M&f.^4R5)A2=2");
      ClassUtil.findSuperTypes(class2, class3, list0);
      ClassUtil.nullOrToString(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\";~^W5", "M&f.^4R5)A2=2");
      sQLTimeoutException0.spliterator();
      sQLTimeoutException0.fillInStackTrace();
      DataTruncation dataTruncation0 = new DataTruncation(3294, false, false, 3294, 1536, sQLTimeoutException0);
      dataTruncation0.fillInStackTrace();
      Throwable throwable0 = sQLTimeoutException0.initCause(dataTruncation0);
      sQLTimeoutException0.spliterator();
      SQLDataException sQLDataException0 = new SQLDataException("uH$HpK1]rr~?$", "uH$HpK1]rr~?$", sQLTimeoutException0);
      sQLDataException0.addSuppressed(throwable0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      Class<Integer> class2 = Integer.class;
      ClassUtil.isBogusClass(class2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("0{ dyzOreSbH\"K{||g)", "l)x", 378);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("0{ dyzOreSbH\"K{||g)", "0{ dyzOreSbH\"K{||g)", sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      arrayType0.withStaticTyping();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      arrayType0.withContentValueHandler(collectionType0);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class2, false);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getClassDescription((Object) null);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.canBeABeanType(class0);
      Class<Object> class2 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      Character character0 = Character.valueOf('y');
      ClassUtil.nullOrToString(character0);
      ClassUtil.isJacksonStdImpl(class1);
      SQLDataException sQLDataException0 = new SQLDataException();
      ClassUtil.getRootCause(sQLDataException0);
      ClassUtil.primitiveType(class1);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class3);
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.isBogusClass(class4);
      Class<Integer> class5 = Integer.class;
      ClassUtil.findSuperTypes(class5, class5);
      ClassUtil.findSuperTypes((Class<?>) null, class1, list0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.nonNullString((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      EnumMap<AccessPattern, Object> enumMap1 = new EnumMap<AccessPattern, Object>(enumMap0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap1.put(accessPattern0, (Object) enumMap0);
      ClassUtil.hasClass(accessPattern0, class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "Wl", 3, (Throwable) null);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Long> class0 = Long.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ClassUtil.rawClass(arrayType0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getConstructors(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getGenericSuperclass(class1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.type.ClassStack");
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("m(aJp_~9r[g^3?@3");
      mockRuntimeException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      ClassUtil.backticked((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassUtil.backticked((String) null);
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionType0, typeBindings0);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class0, (JavaType) arrayType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.String with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("%yoxo!", "K4R\",qH_AE(");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Z5o^jFDw\"6\"tU^#Vw[", "%yoxo!", sQLDataException0);
      MockFile mockFile0 = new MockFile("net.sf.cglib.proxy.com.fasterxml.jackson.databind.module.SimpleModule");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      jsonFactory0.setCodec(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory0.setCodec(objectMapper0);
      jsonFactory2.copy();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "JSON", sQLIntegrityConstraintViolationException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      ClassUtil.isBogusClass(class0);
      Boolean boolean0 = Boolean.valueOf("n");
      ClassUtil.quotedOr(boolean0, "^9?,.r-5?%Aw\"*kd");
      Class<String> class1 = String.class;
      ClassUtil.verifyMustOverride(class1, "^9?,.r-5?%Aw\"*kd", "<Lf*$21SP`o(YSQ");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      EnumMap<AccessPattern, Object> enumMap1 = new EnumMap<AccessPattern, Object>(enumMap0);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("kHCIYo", "kHCIYo", 1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("kHCIYo");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sQLRecoverableException0.initCause(sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLRecoverableException0);
      intArray0[1] = 1;
      intArray0[2] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      batchUpdateException0.getLocalizedMessage();
      batchUpdateException0.getSuppressed();
      sQLNonTransientConnectionException0.setNextException(batchUpdateException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.nameOf(class0);
      ClassUtil.isJacksonStdImpl((Object) "`double`");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ArrayList<Class<Double>> arrayList0 = new ArrayList<Class<Double>>();
      int[] intArray0 = new int[7];
      intArray0[0] = (-2);
      intArray0[1] = (-296);
      intArray0[2] = (-605166913);
      Class<Integer> class0 = Integer.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.getClassDescription((Object) null);
      Class<Error> class1 = Error.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.isLocalType(class1, false);
      ClassUtil.getPackageName(class1);
      Class<String> class2 = String.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.isProxyType(class2);
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.getDeclaredMethods(class2);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-5);
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "java.lang");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang
         //  at [Source: (byte[])\"\uFFFDL\uFFFD1\uFFFD\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getStackTrace();
      mockRuntimeException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = false;
      Class<SimpleModule> class0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<SimpleModule>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      MockError mockError0 = new MockError((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.findSuperClasses(class0, class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      List<Class<?>> list0 = new LinkedList<Class<MapLikeType>>();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findSuperTypes(class0, class0, list0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.isBogusClass(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.getDeclaredMethods(class2);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Infinite recursion (StackOverflowError)", "BKn*)\tk I");
      SQLWarning sQLWarning0 = new SQLWarning("N", sQLInvalidAuthorizationSpecException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLWarning0);
      MockError mockError0 = new MockError(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, ", problem: ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<Module> class1 = Module.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.findRawSuperTypes(class2, class1, false);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonFactory0.configure(jsonParser_Feature0, false);
      JsonpCharacterEscapes.instance();
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "JSON");
      SQLDataException sQLDataException1 = new SQLDataException("JSON", "No FormatFeatures defined for parser of type ");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException1);
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException("annotation");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException1, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, false);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setMixInResolver((ClassIntrospector.MixInResolver) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper1, pipedOutputStream0);
      uTF8JsonGenerator0.getPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter((PrettyPrinter) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JSON");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.getGenericInterfaces(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.findRawSuperTypes(class1, class0, false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, JsonMappingException> enumMap0 = new EnumMap<AccessPattern, JsonMappingException>(class0);
      EnumMap<AccessPattern, Object> enumMap1 = new EnumMap<AccessPattern, Object>(enumMap0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      enumMap1.put(accessPattern0, (Object) enumMap0);
      Object object0 = new Object();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap1);
      ClassUtil.isLocalType(class1, true);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-6);
      intArray0[1] = (-6);
      intArray0[2] = (-6);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, (-6), hashMap0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, (-6), intArray0, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Module> class0 = Module.class;
      Constructor<Module> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      Boolean boolean0 = new Boolean(true);
      ClassUtil classUtil0 = new ClassUtil();
      System.setCurrentTimeMillis(0L);
      Class<Object> class2 = Object.class;
      Class<Float> class3 = Float.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaredMethods(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper1, bufferedOutputStream0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanSerializerFactory0, class0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.JsonMappingException` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.ser.BeanSerializerFactory`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<NoClass>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isConcrete((Member) constructor0);
      Class<Double> class1 = Double.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (-645));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.classOf(accessPattern0);
      ClassUtil.nameOf((Named) null);
      Class<Byte> class2 = Byte.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Byte is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)109;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, pipedOutputStream0, byteArray0, (-4483), true);
      uTF8JsonGenerator0.getCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes((CharacterEscapes) null);
      jsonFactory1.setRootValueSeparator("NoRE*><3#IHA");
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      jsonFactory1.enable(jsonFactory_Feature0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, 1639);
      jsonFactory0.createGenerator((OutputStream) bufferedOutputStream0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "net.sf.cglib.proxy.java.lang.reflect.AccessibleObject", "sY");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.CollectionType` from String \"net.sf.cglib.proxy.java.lang.reflect.AccessibleObject\": sY
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Module> class0 = Module.class;
      Constructor<Module> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor0);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperTypes(javaType0, class1, true);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JsonpCharacterEscapes.instance();
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      Class<SimpleModule> class0 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.classOf((Object) null);
      ClassUtil.nameOf((Named) null);
      Short short0 = new Short((short)47);
      Short short1 = new Short((short)35);
      ClassUtil.nonNull(short0, short1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.getClassDescription(class0);
      SQLException sQLException0 = new SQLException("`char`", ":{?9l");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0, ":{?9l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // :{?9l
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isProxyType(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayType> class2 = ArrayType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class2);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) arrayType0;
      javaTypeArray0[1] = (JavaType) arrayType0;
      javaTypeArray0[2] = (JavaType) arrayType0;
      javaTypeArray0[3] = (JavaType) arrayType0;
      javaTypeArray0[4] = (JavaType) arrayType0;
      javaTypeArray0[5] = (JavaType) arrayType0;
      javaTypeArray0[6] = (JavaType) arrayType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) arrayType0, javaTypeArray0, javaTypeArray0[5]);
      Class<Character> class3 = Character.class;
      ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class3, false);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLDataException sQLDataException0 = new SQLDataException("No FormatFeatures defined for parser of type ", "No FormatFeatures defined for parser of type ");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "No FormatFeatures defined for parser of type ", (-1809238660), (Map<String, ClientInfoStatus>) null, mockRuntimeException0);
      MockIOException mockIOException0 = new MockIOException("org.hibernate.proxy.", mockRuntimeException0);
      SQLDataException sQLDataException1 = new SQLDataException("org.hibernate.proxy.", "{ \"t2u!vz7nlx", 1672, mockIOException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("7}:6\"%&_`6?)N9]", ";d", sQLClientInfoException0);
      MockFile mockFile0 = new MockFile("8opb?h3}Y[~'Z");
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonGenerator_Feature0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((File) mockFile0, jsonEncoding0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class0);
      Object object0 = new Object();
      ClassUtil.findEnumType(enumMap0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getDeclaredMethods(class1);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isJacksonStdImpl(class1);
      Class<SimpleModule> class2 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getClassMethods(class0);
      Class<Module> class1 = Module.class;
      Constructor<Module> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-5);
      byteArray0[8] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Integer> class0 = Integer.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.canBeABeanType(class0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "ej{Yz9}t/FLMv<mn7";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ej{Yz9}t/FLMv<mn7");
      Class<String> class0 = String.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Long> class0 = Long.class;
      ClassUtil.findClassAnnotations(class0);
      Class<MapType> class1 = MapType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      SimpleType.constructUnsafe(class0);
      ClassUtil.rawClass(simpleType0);
      Class<SimpleModule> class2 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      List<Class<?>> list0 = new Vector<Class<ResolvedRecursiveType>>();
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil.emptyIterator();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getPackageName(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getPackageName(class1);
      Boolean boolean0 = new Boolean((String) null);
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class3);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, (Object) accessPattern0);
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      enumMap0.put(accessPattern1, (Object) class1);
      ClassUtil.findEnumType(enumMap0);
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.getDeclaredMethods(class4);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil.emptyIterator();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getPackageName(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getPackageName(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.nullOrToString((Object) null);
      SQLDataException sQLDataException0 = new SQLDataException("java.lang");
      sQLDataException0.getStackTrace();
      Throwable throwable0 = ClassUtil.throwIfError(sQLDataException0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(13);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(throwable0);
      ClassUtil.classOf(mockRuntimeException0);
      ClassUtil.throwIfError(mockRuntimeException0);
      ClassUtil.isBogusClass(class1);
      Class<Error> class2 = Error.class;
      ClassUtil.isProxyType(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getClassMethods(class0);
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.getDeclaredFields(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.isProxyType(class1);
      Class<Integer> class3 = Integer.class;
      ClassUtil.primitiveType(class3);
      Class<MapLikeType> class4 = MapLikeType.class;
      ClassUtil.findClassAnnotations(class4);
      SimpleType.constructUnsafe(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.nameOf(class0);
      ClassUtil.getPackageName(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.quotedOr((Object) null, "net.sf.cglib.proxy.java.lang.Float");
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.canBeABeanType(class3);
      ClassUtil.getGenericInterfaces(class2);
      boolean boolean0 = new Boolean("java.lang");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      Class<Short> class4 = Short.class;
      ClassUtil.findClassAnnotations(class4);
      Method method0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.isProxyType(class0);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.primitiveType(class2);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.findClassAnnotations(class3);
      Class<ArrayType> class4 = ArrayType.class;
      SimpleType.constructUnsafe(class4);
      Class<CollectionType> class5 = CollectionType.class;
      Class<Byte> class6 = Byte.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class6);
      ClassUtil.hasClass(class3, class5);
      Class<Error> class7 = Error.class;
      ClassUtil.getPackageName(class7);
      Class<Boolean> class8 = Boolean.class;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class8, true);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      Class<Short> class1 = Short.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<MissingNode> class2 = MissingNode.class;
      ClassUtil.isProxyType(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.primitiveType(class3);
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.findClassAnnotations(class4);
      SimpleType.constructUnsafe(class1);
      Class<Float> class5 = Float.class;
      ClassUtil.getPackageName(class5);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (Throwable) null);
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.nameOf(class0);
      Class<Error> class1 = Error.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonFactory0.enable(jsonParser_Feature0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.createInstance(class2, false);
      ClassUtil.isJacksonStdImpl(class1);
      Class<String> class3 = String.class;
      Class<Object> class4 = Object.class;
      ClassUtil.findSuperClasses(class3, class4, false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.core.format.MatchStrength";
      ClassUtil.nonNullString("com.fasterxml.jackson.core.format.MatchStrength");
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getOuterClass(class1);
      SimpleModule simpleModule0 = new SimpleModule();
      SimpleDeserializers simpleDeserializers0 = null;
      simpleModule0.setDeserializers((SimpleDeserializers) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleModule0.getTypeId();
      ClassUtil.classNameOf(simpleModule0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<IOException> class2 = IOException.class;
      ClassUtil.findRawSuperTypes(class2, (Class<?>) null, true);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JavaType javaType0 = null;
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.canBeABeanType(class0);
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.nullOrToString(object0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      sQLDataException0.getStackTrace();
      ClassUtil.throwIfError(sQLDataException0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      ClassUtil.classOf(placeholderForType0);
      ClassUtil.throwIfError(sQLDataException0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`");
      Class<String> class0 = String.class;
      ClassUtil.isProxyType(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLRecoverableException0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`");
      sQLNonTransientException0.getSuppressed();
      ClassUtil.getRootCause(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      Class<Short> class1 = Short.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<MissingNode> class2 = MissingNode.class;
      ClassUtil.isProxyType(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.primitiveType(class3);
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.findClassAnnotations(class4);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ClassUtil.hasClass((Object) null, class3);
      Class<Float> class5 = Float.class;
      ClassUtil.getPackageName(class5);
      Class<Float> class6 = Float.class;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class6, true);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.nameOf(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.nameOf(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.createInstance(class2, false);
      Class<Short> class3 = Short.class;
      ClassUtil.isJacksonStdImpl(class3);
      Class<Void> class4 = Void.class;
      ClassUtil.findClassAnnotations(class4);
      SimpleType.constructUnsafe(class3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getPackageName(class0);
      List<JavaType> list0 = new LinkedList<JavaType>();
      Character character0 = Character.valueOf('7');
      ClassUtil.isJacksonStdImpl((Object) character0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ClassUtil.nameOf(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.nameOf(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.createInstance(class2, false);
      Class<Short> class3 = Short.class;
      ClassUtil.isJacksonStdImpl(class3);
      Class<SimpleModule> class4 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      Class<Object> class5 = Object.class;
      ClassUtil.isObjectOrPrimitive(class5);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil.emptyIterator();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getPackageName(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getPackageName(class1);
      boolean boolean0 = new Boolean((String) null);
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class3);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, (Object) accessPattern0);
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      enumMap0.put(accessPattern1, (Object) class1);
      ClassUtil.findEnumType(enumMap0);
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.getDeclaredMethods(class4);
      ClassUtil.backticked("java.lang");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(R0`fO^~{z", "vals", 2);
      sQLNonTransientConnectionException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getClassMethods(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getDeclaredFields(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.isProxyType(class1);
      Class<Integer> class3 = Integer.class;
      Class<NoClass> class4 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class4, true);
      constructor0.getParameterCount();
      Class<Annotation> class5 = Annotation.class;
      constructor0.isAnnotationPresent(class5);
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.getClassDescription(class3);
      Class<Error> class6 = Error.class;
      ClassUtil.getClassMethods(class6);
      Class<Long> class7 = Long.class;
      ClassUtil.isLocalType(class7, false);
      ClassUtil.getPackageName(class7);
      Class<MissingNode> class8 = MissingNode.class;
      ClassUtil.hasEnclosingMethod(class8);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ClassUtil.isBogusClass(class0);
      ClassUtil.isProxyType(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<Double> class1 = Double.class;
      ClassUtil.findConstructor(class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findEnumType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.findEnumType(class0);
      ClassUtil.quotedOr(class0, "com.fasterxml.jackson.databind.util.JSONWrappedObject");
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.isJacksonStdImpl(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class3);
      File file0 = MockFile.createTempFile("2w/r", "Lq3|])'qLS6Bo14sm");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      mockFileOutputStream0.release();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-204), objectReader0, objectOutputStream0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Current token not START_OBJECT (needed to unwrap root name '%s'), but %s");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) jsonParser0, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: Current token not START_OBJECT (needed to unwrap root name '%s'), but %s
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = ")\"`)UP<";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")\"`)UP<");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isConcrete(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getDeclaredAnnotationsByType(class2);
      classUtil_Ctor0.getDeclaredAnnotations();
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[2];
      classUtil_Ctor0.getDeclaredAnnotations();
      accessibleObjectArray0[0] = (AccessibleObject) classUtil_Ctor0._ctor;
      accessibleObjectArray0[1] = (AccessibleObject) constructor0;
      AccessibleObject.setAccessible(accessibleObjectArray0, true);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getDeclaredAnnotation(class3);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Object> class4 = Object.class;
      ClassUtil.findClassAnnotations(class4);
      Class<ArrayType> class5 = ArrayType.class;
      ClassUtil.hasEnclosingMethod(class5);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory4 = jsonFactory3.setCodec(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory5 = jsonFactory4.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory6 = jsonFactory5.enable(jsonFactory_Feature1);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonFactory6.configure(jsonParser_Feature1, true);
      JsonpCharacterEscapes.instance();
      jsonFactory2.configure(jsonParser_Feature0, false);
      SQLDataException sQLDataException0 = new SQLDataException("nLrdLg", "org.hibernate.proxy.java.lang.Error");
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      Class<Void> class1 = Void.TYPE;
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Byte byte0 = new Byte((byte)97);
      ClassUtil.quotedOr(byte0, (String) null);
      ClassUtil.primitiveType(class0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.getConstructors(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("gB!./k5s`g`jZ/");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1692), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      Class<Object> class1 = Object.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      SimpleKeyDeserializers simpleKeyDeserializers1 = simpleKeyDeserializers0.addDeserializer(class0, stdKeyDeserializer0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class1, jsonToken0, "net.sf.cglib.proxy.java.lang.String");
      charsToNameCanonicalizer0.release();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("net.sf.cglib.proxy.java.lang.String", jsonMappingException0);
      jsonMappingException0.clearLocation();
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected FIELD_NAME: net.sf.cglib.proxy.java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.setAccessible(true);
      constructor0.isAnnotationPresent(class1);
      constructor0.setAccessible(true);
      constructor0.getAnnotatedParameterTypes();
      constructor0.getParameterCount();
      constructor0.isAnnotationPresent(class1);
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.getClassDescription(constructor0);
      Class<Error> class2 = Error.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.isLocalType(class2, true);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.getPackageName(class3);
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.classOf((Object) null);
      ClassUtil.primitiveType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findClassAnnotations(class1);
      Class<Short> class2 = Short.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("B> \":Y", "B> \":Y", hashMap0);
      MockIOException mockIOException0 = new MockIOException(sQLClientInfoException0);
      MockIOException mockIOException1 = new MockIOException("aX@Gy/oJO^|YHT", mockIOException0);
      Class<Character> class3 = Character.class;
      ClassUtil.hasClass(mockIOException1, class3);
      Class<MapLikeType> class4 = MapLikeType.class;
      ClassUtil.getPackageName(class4);
      Class<CollectionType> class5 = CollectionType.class;
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class5, false);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      ClassUtil.nameOf(class1);
      Class<Error> class2 = Error.class;
      ClassUtil.nameOf(class2);
      Class<IOException> class3 = IOException.class;
      ClassUtil.createInstance(class3, false);
      Class<Short> class4 = Short.class;
      ClassUtil.isJacksonStdImpl(class4);
      Class<SimpleModule> class5 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class5, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<MapType> class6 = MapType.class;
      ClassUtil.findSuperClasses(class0, class6, true);
      ClassUtil.getEnclosingClass(class5);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.isBogusClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.hibernate.proxy.com.fasterxml.jackson.databind.Moule", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator((String) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory2.enable(jsonFactory_Feature0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      Class<Error> class1 = Error.class;
      Class<Void> class2 = Void.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.isLocalType(class2, false);
      ClassUtil.getPackageName(class2);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.hasEnclosingMethod(class3);
      ClassUtil.isProxyType(class1);
      Class<ReferenceType> class4 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class4);
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.findSuperTypes(class4, class0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 3;
      Class<Character> class1 = Character.class;
      ClassUtil.getConstructors(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(0.0);
      ClassUtil.nonNull(double1, double2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonpCharacterEscapes.instance();
      jsonFactory2.configure(jsonParser_Feature0, false);
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "JSON");
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      Class<Void> class0 = Void.class;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ClassUtil.emptyIterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0Ic#");
      String string0 = "org.hibernate.proxy.java.lang.Error";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.Error");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Character> class0 = Character.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      StringReader stringReader0 = new StringReader("hHL\"(/mS");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 667, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class1, jsonToken0, "hHL\"(/mS");
      charsToNameCanonicalizer0.release();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("hHL\"(/mS", jsonMappingException0);
      jsonMappingException0.clearLocation();
      ClassUtil.throwIfIOE((Throwable) null);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected FIELD_NAME: hHL\"(/mS
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      SQLDataException sQLDataException0 = new SQLDataException(", problem: ", "com.fasterxml.jackson.core.JsonLocation", (-1743199137));
      MockException mockException0 = new MockException(sQLDataException0);
      SQLWarning sQLWarning0 = new SQLWarning("BR]3xKkV2~:", "BR]3xKkV2~:", mockException0);
      MockIOException mockIOException0 = new MockIOException("com.fasterxml.jackson.core.JsonLocation", sQLWarning0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.core.JsonLocation
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(" (from class ");
      MockIOException mockIOException0 = new MockIOException(sQLInvalidAuthorizationSpecException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException:  (from class 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      SQLDataException sQLDataException0 = new SQLDataException("[null]", "org.hibernate.proxy.java.lang.Integer");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      jsonFactory2.isEnabled(jsonFactory_Feature0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("net.sf.cglib.proxy.java.lang.String", "", 14, (Map<String, ClientInfoStatus>) null, sQLDataException0);
      SQLDataException sQLDataException1 = new SQLDataException(" at ", "org.hibernate.proxy.java.lang.Integer", 2359, mockRuntimeException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON", "keyUniverse", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) null, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException: [null]
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.nameOf(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.nameOf(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.createInstance(class2, false);
      Class<Short> class3 = Short.class;
      ClassUtil.isJacksonStdImpl(class3);
      Class<SimpleModule> class4 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      ClassUtil.nameOf(class1);
      Class<Error> class2 = Error.class;
      ClassUtil.nameOf(class2);
      Class<IOException> class3 = IOException.class;
      ClassUtil.createInstance(class3, false);
      Class<Short> class4 = Short.class;
      ClassUtil.isJacksonStdImpl(class4);
      Class<SimpleModule> class5 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class5, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<MapType> class6 = MapType.class;
      ClassUtil.findSuperClasses(class0, class6, true);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("5$?e", "5$?e", (-2594));
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("jicNC ", "jicNC ", (-2594), sQLRecoverableException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("*#@DwO#M@8'", "5$?e", "q?S", (-2594));
      sQLTransientConnectionException0.setNextException(sQLRecoverableException0);
      stackTraceElementArray0[0] = stackTraceElement0;
      int int0 = (-2109);
      StackTraceElement stackTraceElement1 = new StackTraceElement("_nm", ")]5[vC,&YWb", "jicNC ", (-2109));
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      sQLRecoverableException0.addSuppressed(sQLTransientConnectionException0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLRecoverableException0);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0, "V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // V
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<Short> class0 = Short.class;
      ClassUtil.isObjectOrPrimitive(class0);
      System.setCurrentTimeMillis(0L);
      Class<String> class1 = String.class;
      ClassUtil.createInstance(class1, false);
      Class<Float> class2 = Float.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      Class<Boolean> class4 = Boolean.class;
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class4, javaTypeArray0);
      CollectionType collectionType0 = CollectionType.construct(class3, typeBindings0, javaTypeArray0[0], javaTypeArray0, javaTypeArray0[3]);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      Double double0 = new Double(0L);
      CollectionType collectionType2 = collectionType1.withContentTypeHandler(double0);
      CollectionLikeType collectionLikeType0 = collectionType2.withStaticTyping();
      Class<String> class5 = String.class;
      ArrayType arrayType0 = ArrayType.construct(javaTypeArray0[1], typeBindings0);
      MapType mapType0 = MapType.construct((Class<?>) class5, typeBindings0, (JavaType) collectionType1, javaTypeArray0, javaTypeArray0[4], (JavaType) arrayType0);
      MapType mapType1 = mapType0.withValueHandler(arrayType0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = mapType1.getGenericSignature(stringBuilder0);
      StringBuilder stringBuilder2 = collectionLikeType0.getGenericSignature(stringBuilder1);
      simpleType0.getGenericSignature(stringBuilder2);
      // Undeclared exception!
      try { 
        simpleType0.withContentValueHandler((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Simple types have no content types; cannot call withContenValueHandler()
         //
         verifyException("com.fasterxml.jackson.databind.type.SimpleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      ClassUtil.throwIfError((Throwable) null);
      Class<String> class0 = String.class;
      ClassUtil.getEnclosingClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigInteger bigInteger0 = BigInteger.ONE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, (Class<?>) null, "JSON");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type [null] from number null: JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Byte> class0 = Byte.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      ClassUtil.classOf(collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      boolean boolean0 = false;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.classOf((Object) null);
      Class<SimpleModule> class1 = SimpleModule.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.module.SimpleModule is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.classOf((Object) null);
      Class<SimpleModule> class1 = SimpleModule.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.module.SimpleModule is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator((String) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0, 195);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) bufferedOutputStream0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionType> class1 = CollectionType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "JSON", (String) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.CollectionType` from String \"JSON\": null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      StringReader stringReader0 = new StringReader("hHL\"(/mS");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 667, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      Class<Module> class1 = Module.class;
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findSuperTypes(class1, class2);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.throwIfError((Throwable) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getEnclosingClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigInteger bigInteger0 = BigInteger.ONE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "Unexpected character (%s) in numeric value");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.RuntimeException` from number 1: Unexpected character (%s) in numeric value
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil.emptyIterator();
      Class<Double> class0 = Double.class;
      ClassUtil.getPackageName(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.hasEnclosingMethod(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class3);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, (Object) accessPattern0);
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      enumMap0.put(accessPattern1, (Object) class1);
      ClassUtil.findEnumType(enumMap0);
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.getDeclaredMethods(class4);
      ClassUtil.backticked("java.lang");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("(R0`fO^~{z", "vals", 2);
      sQLNonTransientConnectionException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0, "java.lang");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      classUtil_Ctor0.getParamCount();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("email");
      sQLTimeoutException0.getLocalizedMessage();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTimeoutException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0, "kd832So24^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // kd832So24^
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("keyUniverse");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) class0, 1);
      ClassUtil.throwIfRTE(jsonMappingException0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonFactory0.disable(jsonGenerator_Feature0);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Serializers.Base serializers_Base0 = new Serializers.Base();
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withAdditionalKeySerializers(serializers_Base0);
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(serializerFactory0);
      JsonFactory jsonFactory1 = new JsonFactory();
      jsonFactory1.setCodec(objectMapper1);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.isObjectOrPrimitive(class3);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.findClassAnnotations(class0);
      String string0 = "l(Xq3R;A";
      ClassUtil.backticked("l(Xq3R;A");
      ClassUtil.isNonStaticInnerClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaringClass(class0);
      Long long0 = new Long(1345L);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride((Class<?>) null, long0, "elementType");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      SQLDataException sQLDataException0 = new SQLDataException("[ZE~k^GLA-)/$I>");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[ZE~k^GLA-)/$I>", "[ZE~k^GLA-)/$I>", sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [ZE~k^GLA-)/$I>
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Error> class0 = Error.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class1);
      ClassUtil.backticked("@jI!hT");
      Class<Short> class2 = Short.class;
      String string0 = "VKcqP(_sO$'Zz";
      SQLDataException sQLDataException0 = new SQLDataException("VKcqP(_sO$'Zz");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      MockFile mockFile0 = new MockFile((File) null, "VKcqP(_sO$'Zz");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "VKcqP(_sO$'Zz");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // VKcqP(_sO$'Zz
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      MockThrowable mockThrowable0 = new MockThrowable("serialVersionUID");
      SQLDataException sQLDataException0 = new SQLDataException("serialVersionUID", "serialVersionUID", 1, mockThrowable0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "+e`TE.O{xvJ{)_.:n3<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // +e`TE.O{xvJ{)_.:n3<
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      Byte byte0 = new Byte((byte)97);
      ClassUtil.quotedOr(byte0, (String) null);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<String> class1 = String.class;
      ClassUtil.getDeclaringClass(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<MapType> class3 = MapType.class;
      ClassUtil.getClassMethods(class3);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getGenericSuperclass(class1);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      String string0 = "Cannot figure out type for EnumMap (odd JDK platform?)";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Cannot figure out type for EnumMap (odd JDK platform?)", "OEL?");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // OEL?
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
      Class<Integer> class1 = Integer.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isLocalType(class0, false);
      Double double0 = new Double(0.0);
      ClassUtil.nonNull(double0, double0);
      Class<Long> class1 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("ZERO_LENGTH_ENUM_ARRAY", "ZERO_LENGTH_ENUM_ARRAY", 0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Null SerializerProvider passed for ", "Null SerializerProvider passed for ", "ZERO_LENGTH_ENUM_ARRAY", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("Y", "Y", "Null SerializerProvider passed for ", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Null SerializerProvider passed for ", ">", "Null SerializerProvider passed for ", 0);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement(".;b_qD", "c\"\"x+()2B<}PpiUET@", "ZERO_LENGTH_ENUM_ARRAY", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("c\"\"x+()2B<}PpiUET@", "ZERO_LENGTH_ENUM_ARRAY", " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("Cannot access contents of TextNode as binary due to broken Base64 encoding: %s", "Y", "R4]x_V^04ep`pDV^0b", 0);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", "size", "W+7d`k(", 6);
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      sQLTimeoutException0.fillInStackTrace();
      sQLTimeoutException0.getStackTrace();
      ClassUtil.throwIfIOE(sQLTimeoutException0);
      Class<AccessPattern> class0 = AccessPattern.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findSuperTypes(class0, class0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      String string0 = "primitive";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "primitive");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.annotation.NoClass) must override method 'primitive'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ArrayType> class0 = ArrayType.class;
      MockException mockException0 = new MockException();
      SQLDataException sQLDataException0 = new SQLDataException(mockException0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.hasClass((Object) null, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "NULL");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'G';
      charArray0[2] = 'h';
      charArray0[3] = 'x';
      charArray0[4] = 't';
      charArray0[5] = '5';
      charArray0[6] = '<';
      charArray0[7] = 'H';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      JsonMappingException.from(jsonParser0, "", (Throwable) jsonMappingException1);
      ClassUtil.throwIfRTE(jsonMappingException1);
      Class<Double> class1 = Double.class;
      ClassUtil.findClassAnnotations(class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getClassMethods(class0);
      Class<String> class1 = String.class;
      ClassUtil.findConstructor(class1, true);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<String> class0 = String.class;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.nameOf(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.nameOf(class1);
      Class<IOException> class2 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class2, false);
      Class<Short> class3 = Short.class;
      ClassUtil.isJacksonStdImpl(class3);
      Class<Void> class4 = Void.class;
      ClassUtil.findClassAnnotations(class4);
      SimpleType.constructUnsafe(class3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getPackageName(class0);
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      Character.valueOf('7');
      ClassUtil.isJacksonStdImpl((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) iOException0, "`java.lang.String`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `java.lang.String`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Module> class0 = Module.class;
      Constructor<Module> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ArrayList<Class<Double>> arrayList0 = new ArrayList<Class<Double>>();
      int[] intArray0 = new int[7];
      intArray0[0] = (-2);
      intArray0[1] = (-296);
      intArray0[2] = (-605166913);
      intArray0[3] = (-605166913);
      intArray0[4] = 636;
      intArray0[5] = 43;
      intArray0[6] = (-1512867866);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("' for ", "QUOTE_FIELD_NAMES", intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("QUOTE_FIELD_NAMES", batchUpdateException0);
      MockIOException mockIOException0 = new MockIOException(sQLTransactionRollbackException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      Class<Character> class1 = Character.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType javaType1 = typeFactory0.constructReferenceType(class1, javaType0);
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, javaType1);
      ClassUtil.classNameOf(collectionType0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      StringReader stringReader0 = new StringReader("hHL\"(/mS");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 667, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class1, jsonToken0, "hHL\"(/mS");
      charsToNameCanonicalizer0.release();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("hHL\"(/mS", jsonMappingException0);
      jsonMappingException0.clearLocation();
      ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected FIELD_NAME: hHL\"(/mS
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "com.fasterxml.jackson.databind.ext.DOMDeserializer$NodeDeserializer";
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackson.databind.ext.DOMDeserializer$NodeDeserializer", "%N/.S?>ifZ", 1);
      sQLTransientException0.fillInStackTrace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("]w4hp", "NULL", sQLTransientException0);
      sQLTransientException0.addSuppressed(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientException0);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 1, sQLTransactionRollbackException0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      mockPrintWriter0.write("serialVersionUID");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      dataTruncation0.printStackTrace((PrintWriter) mockPrintWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) dataTruncation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.ext.DOMDeserializer$NodeDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ClassUtil.classNameOf("v5Akr$");
      Class<Short> class0 = Short.class;
      ClassUtil.getPackageName(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.isProxyType(class1);
      ClassUtil.getPackageName(class1);
      int int0 = 3019;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`java.lang.String`", "keyType", 3019);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.spliterator();
      sQLNonTransientConnectionException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientConnectionException0, "xv?z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // xv?z
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "d*J");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Cannot access ", (String) null, 14, (Map<String, ClientInfoStatus>) null, mockRuntimeException0);
      SQLDataException sQLDataException1 = new SQLDataException("keyUniverse", "Cannot access ", 2359, sQLClientInfoException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "Cannot access ", sQLDataException1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) dataOutputStream0, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      JavaType javaType0 = null;
      TypeBindings.createIfNeeded(class2, (JavaType) null);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = null;
      Class<Integer> class3 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      // Undeclared exception!
      try { 
        simpleType0.withContentType(javaTypeArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Simple types have no content types; cannot call withContentType()
         //
         verifyException("com.fasterxml.jackson.databind.type.SimpleType", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Throwable throwable0 = null;
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getDeclaringClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getDeclaredAnnotations();
      constructor0.getParameterTypes();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getExceptionTypes();
      constructor0.getAnnotationsByType(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ClassUtil.emptyIterator();
      ClassUtil.emptyIterator();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getPackageName(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getPackageName(class1);
      Boolean boolean0 = new Boolean((String) null);
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumMap<AccessPattern, Object> enumMap0 = new EnumMap<AccessPattern, Object>(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.getPackageName(class4);
      Class<Object> class5 = Object.class;
      ClassUtil.hasEnclosingMethod(class5);
      ClassUtil.rawClass((JavaType) null);
      Class<SimpleModule> class6 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class6, false);
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.hasClass((Object) null, class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getClassMethods(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getDeclaredFields(class2);
      Class<Short> class3 = Short.class;
      ClassUtil.hasEnclosingMethod(class3);
      ClassUtil.isProxyType(class2);
      Class<Integer> class4 = Integer.class;
      ClassUtil.primitiveType(class4);
      Class<MapLikeType> class5 = MapLikeType.class;
      ClassUtil.findClassAnnotations(class5);
      Class<Object> class6 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class6, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      Class<Float> class7 = Float.class;
      ClassUtil.hasClass(simpleType0, class7);
      Class<Float> class8 = Float.class;
      ClassUtil.getPackageName(class8);
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class4, false);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(",J6*zB", ",J6*zB", 0, (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "elementType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // elementType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findClassAnnotations(class1);
      Class<MapType> class2 = MapType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType.constructUnsafe(class2);
      Character.valueOf('9');
      ClassUtil.hasClass("net.sf.cglib.proxy.int", class0);
      ClassUtil.getPackageName(class1);
      ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ClassUtil.classNameOf((Object) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil classUtil0 = new ClassUtil();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.setAccessible(true);
      constructor0.isAnnotationPresent(class1);
      constructor0.setAccessible(true);
      constructor0.getParameterCount();
      constructor0.isAnnotationPresent(class1);
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.getClassDescription(constructor0);
      Class<Error> class2 = Error.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.isLocalType(class2, true);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.getPackageName(class3);
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.isProxyType(class0);
      Class<Object> class4 = Object.class;
      ClassUtil.getEnclosingClass(class4);
      Class<ReferenceType> class5 = ReferenceType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class5);
      assertEquals(34, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getClassMethods(class0);
      Class<Integer> class1 = Integer.class;
      Class<Integer> class2 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Double double0 = new Double(0.0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class3 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class3);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0, (Object) double0, (Object) mapType0);
      mapType0.getGenericSignature();
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      arrayType0.findTypeParameters(class4);
      TypeBindings typeBindings1 = arrayType0.getBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings1);
      Class<HashMap> class5 = HashMap.class;
      typeFactory0.constructRawMapType(class5);
      resolvedRecursiveType0.getSelfReferencedType();
      ClassUtil.findSuperTypes((JavaType) null, class3, true);
      Class<Character> class6 = Character.class;
      ClassUtil.isLocalType(class6, true);
      Class<Long> class7 = Long.class;
      try { 
        ClassUtil.createInstance(class7, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.getClassMethods(class0);
      ClassUtil classUtil0 = new ClassUtil();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.throwIfRTE((Throwable) null);
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JavaType javaType0 = null;
      Class<Object> class0 = Object.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      ClassUtil.classNameOf((Object) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.getEnclosingClass(class1);
      ClassUtil classUtil0 = new ClassUtil();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "Conflicting getter definitions for property \"";
      String string1 = "elementType";
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "WB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<String> class0 = String.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(3, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isBogusClass(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      
      constructor0.getAnnotatedExceptionTypes();
      constructor0.getExceptionTypes();
      assertFalse(constructor0.isAccessible());
      
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      assertTrue(constructor0.isAccessible());
  }
}
