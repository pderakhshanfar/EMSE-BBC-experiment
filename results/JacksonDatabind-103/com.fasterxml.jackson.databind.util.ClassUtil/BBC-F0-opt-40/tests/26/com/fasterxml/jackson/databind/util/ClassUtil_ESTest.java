/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 08:53:33 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.lang.reflect.Type;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
      Short short0 = new Short((short)0);
      ClassUtil.getClassDescription(short0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospector(annotationIntrospector0);
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      ObjectMapper objectMapper4 = objectMapper3.configure(jsonParser_Feature0, true);
      Module[] moduleArray0 = new Module[0];
      ObjectMapper objectMapper5 = objectMapper4.registerModules(moduleArray0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectMapper objectMapper6 = objectMapper5.setNodeFactory(jsonNodeFactory0);
      Class<SimpleModule> class1 = SimpleModule.class;
      Constructor<SimpleModule> constructor0 = ClassUtil.findConstructor(class1, true);
      AccessibleObject accessibleObject0 = ClassUtil.nonNull((AccessibleObject) constructor0, (AccessibleObject) constructor0);
      objectMapper6.writeValueAsBytes(accessibleObject0);
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.nonNullString("java.lang.Integer");
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getGenericInterfaces(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      Class<InputStream> class1 = InputStream.class;
      ClassUtil.findSuperTypes(class0, class1);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Constructor<InputStream> constructor0 = ClassUtil.findConstructor(class1, true);
      AnnotationMap.merge((AnnotationMap) null, (AnnotationMap) null);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[1];
      annotationMapArray0[0] = null;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, (AnnotationMap) null, annotationMapArray0);
      annotationIntrospector0.findWrapperName(annotatedConstructor0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, (JavaType) null, (PropertyName) null, annotatedConstructor0, propertyMetadata0);
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) beanProperty_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanProperty$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<JsonSerializer> class0 = JsonSerializer.class;
      ClassUtil.isBogusClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class1 = List.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class2);
      CollectionType collectionType1 = collectionType0.withTypeHandler(class1);
      CollectionType collectionType2 = collectionType1.withContentValueHandler(typeFactory0);
      CollectionType collectionType3 = collectionType2.withStaticTyping();
      ClassUtil.rawClass(collectionType3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isConcrete(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectMapper1);
      JsonFactory jsonFactory4 = jsonFactory3.setInputDecorator((InputDecorator) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("C]zs!wod|");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<CollectionType> class2 = CollectionType.class;
      Class<JsonSerializer> class3 = JsonSerializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) simpleType0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      Class<ClientInfoStatus> class4 = ClientInfoStatus.class;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class4, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) collectionLikeType0);
      CollectionType collectionType1 = collectionType0.withValueHandler(simpleType0);
      collectionType1.hasGenericTypes();
      SimpleType simpleType1 = referenceType0.withValueHandler(collectionType1);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(simpleType1, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [reference type, class com.fasterxml.jackson.databind.type.MapLikeType<com.fasterxml.jackson.databind.type.MapLikeType<com.fasterxml.jackson.databind.JsonSerializer>><[collection-like type; class com.fasterxml.jackson.databind.type.MapLikeType, contains [simple type, class com.fasterxml.jackson.databind.JsonSerializer]]>]: JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Double");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.isProxyType(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      DataTruncation dataTruncation0 = new DataTruncation((-269), false, false, (-269), (-5), sQLTimeoutException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTimeoutException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("x9!!=frO8{Gw0KX'", "net.sf.cglib.proxy.java.lang.Double", "org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern", (-2366));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern", "artifactId", "IA:}Qu@#2f-2y+JTpkW", (-2366));
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      sQLTimeoutException0.initCause(sQLNonTransientConnectionException0);
      sQLTimeoutException0.fillInStackTrace();
      SQLWarning sQLWarning0 = new SQLWarning("net.sf.cglib.proxy.java.lang.Double", "x9!!=frO8{Gw0KX'", dataTruncation0);
      sQLWarning0.printStackTrace();
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isLocalType(class0, false);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLClientInfoException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLTransientConnectionException0);
      sQLClientInfoException0.initCause(sQLTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, sQLTimeoutException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MapLikeType> class2 = MapLikeType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class2);
      Class<HashMap> class3 = HashMap.class;
      typeFactory0.constructRawMapType(class3);
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer");
      arrayType0.withContentTypeHandler(class1);
      ArrayType arrayType1 = arrayType0.withTypeHandler(mockError0);
      byte[] byteArray0 = new byte[0];
      mockError0.getLocalizedMessage();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArrayType arrayType2 = arrayType1.withContentValueHandler(class2);
      arrayType2.withHandlersFrom(arrayType1);
      ArrayType arrayType3 = arrayType2.withStaticTyping();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ClassUtil.findSuperTypes((JavaType) arrayType3, (Class<?>) class2, false);
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.primitiveType(class4);
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, "");
      Class<Void> class0 = Void.class;
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      ClassUtil.findEnumType(enumSet1);
      ClassUtil.classOf(enumSet0);
      DataTruncation dataTruncation0 = new DataTruncation((-898), false, false, 13, 13, (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, dataTruncation0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLWarning0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<IOException>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.nullOrToString((Object) null);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      ObjectReader objectReader1 = objectReader0.without(formatFeature0);
      String string0 = ":'^;T^9+OmRWM*dv";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(":'^;T^9+OmRWM*dv");
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 1024, objectReader1, mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<InputStream> class1 = InputStream.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findEnumType(class1);
      System.setCurrentTimeMillis((-2387L));
      Integer integer0 = new Integer((-2462));
      ClassUtil.nullOrToString(integer0);
      ClassUtil.emptyIterator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-123);
      byteArray0[8] = (byte)0;
      jsonFactory1.createParser(byteArray0, (int) (byte) (-8), (-329));
      JsonParser jsonParser0 = jsonFactory2.createParser("heRrB7l2d+aO&C&9m");
      Class<Long> class2 = Long.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class2, jsonToken0, "java.lang.Long");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_FALSE: java.lang.Long
         //  at [Source: (String)\"heRrB7l2d+aO&C&9m\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isBogusClass(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) null);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.createInstance(class0, false);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ObjectMapper objectMapper2 = objectMapper1.setMixInResolver(simpleMixInResolver0);
      SerializerProvider serializerProvider0 = objectMapper2.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, (String) null, (Throwable) null);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, iOException0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_;So$?HZ", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 917, objectMapper1, mockPrintStream0);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.overrideStdFeatures((-2642), (-705045486));
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Closeable) mockFileOutputStream0, (Exception) iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Module> class0 = Module.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findClassAnnotations(class1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = new ArrayList<Class<Float>>();
      ClassUtil.findSuperTypes(class1, class1, list0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Byte> class0 = Byte.TYPE;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "JsonSerializer of type ");
      ClassUtil.defaultValue(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Short> class0 = Short.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getClassMethods(class1);
      Class<Boolean> class2 = Boolean.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.findConstructor(class2, false);
      ClassUtil.findEnumType(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getOuterClass(class3);
      ClassUtil.nonNullString("org.hibernate.proxy.java.lang.Short");
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, false);
      String string0 = "com.fasterxml.jackson.databind.deser.impl.ReadableObjectId";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) filteringGeneratorDelegate0, "com.fasterxml.jackson.databind.deser.impl.ReadableObjectId");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.deser.impl.ReadableObjectId
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLDataException0);
      sQLDataException0.initCause(sQLNonTransientException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionLikeType> enumMap0 = new EnumMap<AccessPattern, CollectionLikeType>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withContentTypeHandler("O6?kzWi$Lzx(2N7");
      enumMap0.put(accessPattern0, collectionLikeType2);
      ClassUtil.findEnumType(enumMap0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.canBeABeanType(class2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1=H?lmx\" ", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)96;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, bufferedOutputStream0, byteArray0, (-1350), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 353, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) jsonParserDelegate0, (Class<?>) class0, jsonToken0, "java.lang.annotatio");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected NOT_AVAILABLE: java.lang.annotatio
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.wrapperType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.nameOf(class1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern[] accessPatternArray0 = new AccessPattern[1];
      accessPatternArray0[0] = accessPattern0;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Short short0 = new Short((short)13);
      ClassUtil.nullOrToString(short0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class0);
      System.setCurrentTimeMillis((short)13);
      ClassUtil.getOuterClass(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockError mockError0 = new MockError("8gcfS");
      mockError0.getMessage();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      MockError mockError0 = new MockError("com.fasterxml.jacks", sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "com.fasterxml.jacks");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.nameOf(class2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      objectMapper1.readerForUpdating(jsonParser_Feature1);
      Class<Float> class0 = Float.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<String> class0 = String.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      objectMapper0.writer(serializationFeature0);
      objectMapper0.readerForUpdating(class0);
      ClassUtil.getConstructors(class0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperTypes(class0, class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaredMethods(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) bufferedOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON", "JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "L0/4~M\"sY3sCl|", (Throwable) sQLNonTransientException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // L0/4~M\"sY3sCl|
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Short short0 = new Short((short)2501);
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      CollectionType collectionType1 = collectionType0.withValueHandler(mockRuntimeException0);
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(collectionType1);
      ClassUtil.rawClass(arrayType1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Character> class1 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class0, class1, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<Integer> class1 = Integer.TYPE;
      Class<AccessPattern> class2 = AccessPattern.class;
      boolean boolean0 = true;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.wrapperType(class0);
      String string0 = "R";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLClientInfoException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("R", sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("R", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType", sQLRecoverableException0);
      ClassUtil.throwRootCauseIfIOE(sQLTransactionRollbackException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLTransactionRollbackException0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      objectMapper0.disable(jsonGenerator_FeatureArray0);
      String string1 = "net.sf.cglib.proxy.java.lang.Short";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("R", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      Character character0 = Character.valueOf(';');
      ClassUtil.classOf(character0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[8];
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      String string0 = "S+v9CXup~7M+P";
      Class<Character> class1 = Character.class;
      Class<String> class2 = String.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class0, false);
      TypeBindings typeBindings0 = TypeBindings.create(class2, list0);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) collectionType0, (JavaType[]) null, (JavaType) collectionType0, (JavaType) collectionType0);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = mapType1.withKeyType(mapType0);
      mapType2.withKeyValueHandler(serializationFeature0);
      try { 
        Integer.valueOf("Cannot figure out type for EnumMap (odd JDK platform?)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Cannot figure out type for EnumMap (odd JDK platform?)\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.isConcrete(class0);
      Class<Short> class1 = Short.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassUtil.getEnclosingClass(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.canBeABeanType(class2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(".URw=!A;", (String) null);
      sQLSyntaxErrorException0.setNextException((SQLException) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(".URw=!A;", sQLSyntaxErrorException0);
      sQLSyntaxErrorException0.setNextException(sQLRecoverableException0);
      ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[8];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      Float float0 = new Float(0.0);
      CollectionLikeType collectionLikeType0 = collectionType0.withValueHandler(float0);
      objectReader0.forType((JavaType) collectionLikeType0);
      ClassUtil.isBogusClass(class0);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("0Z3RM", "");
      SQLDataException sQLDataException0 = new SQLDataException("vsc\"sE", sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.initCause(sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("vsc\"sE", sQLDataException0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      sQLFeatureNotSupportedException0.getStackTrace();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0, "Could not find DOM LS");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Character> class0 = Character.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionLikeType> enumMap0 = new EnumMap<AccessPattern, CollectionLikeType>(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentValueHandler(enumMap0);
      collectionLikeType1.withContentTypeHandler("O6?kzWi$Lzx(2N7");
      collectionLikeType1.withStaticTyping();
      ClassUtil.findEnumType(enumMap0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "No native support for writing Type Ids");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionLikeType> enumMap0 = new EnumMap<AccessPattern, CollectionLikeType>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withContentValueHandler(enumMap0);
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withContentTypeHandler("O6?kzWi$Lzx(2N7");
      enumMap0.put(accessPattern0, collectionLikeType2);
      ClassUtil.findEnumType(enumMap0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.canBeABeanType(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.hasEnclosingMethod(class3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, "t|a>A_JalKn");
      Class<IntNode> class0 = IntNode.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      ObjectReader objectReader1 = objectReader0.without(formatFeature0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(objectReader0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      deserializationFeatureArray0[1] = deserializationFeature1;
      objectReader0.withoutFeatures(deserializationFeatureArray0);
      Class<Float> class2 = Float.class;
      ClassUtil.findSuperTypes((JavaType) collectionType1, (Class<?>) class2, false);
      Class<Double> class3 = Double.TYPE;
      ClassUtil.findConstructor(class3, false);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0, resolvedRecursiveType0);
      resolvedRecursiveType0.hasGenericTypes();
      MapLikeType mapLikeType1 = mapLikeType0.withKeyType(collectionType0);
      Class<MapType> class4 = MapType.class;
      ClassUtil.hasClass(mapLikeType1, class4);
      ClassUtil.findClassAnnotations(class3);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[8];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      serializationFeatureArray0[5] = serializationFeature0;
      serializationFeatureArray0[6] = serializationFeature0;
      serializationFeatureArray0[7] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      Float float0 = new Float(0.0);
      CollectionLikeType collectionLikeType0 = collectionType0.withValueHandler(float0);
      objectReader0.forType((JavaType) collectionLikeType0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.findClassAnnotations(class0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-11);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Void> class1 = Void.class;
      ClassUtil.isBogusClass(class1);
      TypeResolutionContext typeResolutionContext0 = null;
      Class<Long> class2 = Long.class;
      String string0 = " has no default (no arg) constructor";
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      typeFactory0.constructArrayType(javaType0);
      Class<Integer> class3 = Integer.class;
      // Undeclared exception!
      try { 
        typeFactory0.constructGeneralizedType(javaType0, class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer not a super-type of [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      Short short0 = new Short((short)0);
      ClassUtil.getClassDescription(short0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Long long0 = new Long((-1355L));
      Class<Long> class0 = Long.class;
      ClassUtil.hasClass(long0, class0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1));
      Class<Void> class1 = Void.class;
      FromStringDeserializer.findDeserializer(class1);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
      Class<Double> class1 = Double.TYPE;
      Class<Double> class2 = Double.class;
      ClassUtil.findConstructor(class2, false);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, (byte)127);
      coreXMLDeserializers_Std0.getEmptyAccessPattern();
      Double double0 = new Double((byte)83);
      ClassUtil.nonNull((Double) null, double0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Float> class0 = Float.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getGenericInterfaces(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A(@7~L&Xehag<8@xr");
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.getDeclaredFields(class0);
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.classNameOf(class2);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findClassAnnotations(class2);
      Class<Object> class3 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockError mockError0 = new MockError();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(">W(u", mockError0);
      ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte) (-89);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-36);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper2, bufferedOutputStream0, byteArray0, (byte)87, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isConcrete(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassUtil.nonNull((RuntimeException) null, (RuntimeException) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Object> class0 = Object.class;
      Class<Error> class1 = Error.class;
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      typeFactory0.constructArrayType(class0);
      Class<Double> class1 = Double.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      ClassUtil.rawClass(mapType0);
      ClassUtil.isProxyType(class0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.classNameOf(class0);
      Class<String> class1 = String.class;
      ClassUtil.verifyMustOverride(class1, "`java.lang.Class`", "XrvSXa`AI");
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.hasEnclosingMethod(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = new Character('@');
      String string0 = ".6'lAz";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, character0, ".6'lAz");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Character (of class com.fasterxml.jackson.databind.type.MapLikeType) must override method '.6'lAz'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, " c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getPackageName(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<Void> class0 = Void.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Short> class0 = Short.class;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-5);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findConstructor(class1, true);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findConstructor(class2, true);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.getClassMethods(class3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getConstructors(class0);
      MockError mockError0 = new MockError("java.lang", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getConstructors(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang");
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "java.lang", "java.lang");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Double` from String \"java.lang\": java.lang
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockRuntimeException mockRuntimeException1 = (MockRuntimeException)ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException1, ",:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isLocalType(class0, false);
      Class<Short> class1 = Short.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[3];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      accessibleObjectArray0[1] = (AccessibleObject) constructor0;
      accessibleObjectArray0[2] = (AccessibleObject) constructor0;
      AccessibleObject.setAccessible(accessibleObjectArray0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotations();
      classUtil_Ctor1.getParamCount();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("annotation", "_%dE\"U5Z5_f-YY0Y'");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "_%dE\"U5Z5_f-YY0Y'", (Throwable) sQLFeatureNotSupportedException0);
      MockIOException mockIOException0 = new MockIOException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("annotation", "_%dE\"U5Z5_@-YY0Y'");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.nonNullString("annotation");
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.findSuperTypes(class0, class1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.findClassAnnotations(class0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Double> class0 = Double.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      mockRuntimeException0.getMessage();
      ClassUtil.classNameOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Yfh<!s6yfDAcVkGt");
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findEnumType(class0);
      JsonNodeFactory.withExactBigDecimals(true);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<String> class1 = String.class;
      ClassUtil.createInstance(class1, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<MapLikeType> class2 = MapLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class2, "jva?", "jva?");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.MapLikeType` from String \"jva?\": jva?
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<SimpleType> class0 = SimpleType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-2226));
      coreXMLDeserializers_Std0.getValueType();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException((JavaType) null, (String) null, (String) null);
      jsonMappingException0.clearLocation();
      ClassUtil.throwIfError(jsonMappingException0);
      ClassUtil.rawClass((JavaType) null);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'null' as a subtype of null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.findSuperClasses(class0, class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isBogusClass(class0);
      Class<NoClass> class1 = NoClass.class;
      Class<Float> class2 = Float.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class2, true);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      Class<IOException> class4 = IOException.class;
      ClassUtil.findSuperTypes(class3, class4, list0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Character character0 = new Character('g');
      Boolean boolean0 = new Boolean("0%-x 39'EL/gO");
      ClassUtil.classNameOf(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<String> class2 = String.class;
      ClassUtil.createInstance(class2, true);
      ClassUtil.nonNullString("A4/fD>#+rN^ ` &");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getOuterClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Float> class1 = Float.class;
      SimpleType.constructUnsafe(class1);
      ClassUtil.findConstructor(class0, false);
      Class<Integer> class2 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, "keyUniverse");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.getDeclaredFields(class0);
      Class<Double> class2 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      long[] longArray0 = new long[5];
      longArray0[0] = 938L;
      longArray0[1] = (long) (-3155);
      longArray0[2] = (long) (-3155);
      longArray0[3] = (long) 8;
      longArray0[4] = (long) (-3155);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Cannot set virtual property '", "Cannot create TypeBindings for class ", (-3155), longArray0, sQLTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("elementType", sQLTransientConnectionException0);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLNonTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException(throwable0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-162));
      IOContext iOContext0 = new IOContext(bufferRecycler0, placeholderForType0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, mockFileWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: elementType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isLocalType(class0, false);
      SQLException sQLException0 = new SQLException((String) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "KQo_-&x-j7LX", (-558), sQLException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, sQLTransactionRollbackException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getOuterClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonNodeFactory.withExactBigDecimals(false);
      Class<Integer> class2 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ClassUtil.hasClass(class0, class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.getPackageName(class3);
      Float float0 = new Float(0.0);
      ClassUtil.classOf(float0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) null);
      ClassUtil.throwIfError(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.primitiveType(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", (-4));
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.USE_STATIC_TYPING;
      mapperFeatureArray0[2] = mapperFeature2;
      ObjectMapper objectMapper2 = objectMapper1.disable(mapperFeatureArray0);
      SerializerProvider serializerProvider0 = objectMapper2.getSerializerProvider();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "JSON");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getOuterClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.classNameOf(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Short> class2 = Short.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.isProxyType(class3);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getPackageName(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.getDeclaredFields(class0);
      Long long0 = new Long(0L);
      ClassUtil.quotedOr(long0, "v)fQEw~#ov(b5:(dss");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getPackageName(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.quotedOr((Object) null, " for format ");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.nameOf(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.rawClass((JavaType) null);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<Object> class1 = Object.class;
      ClassUtil.getConstructors(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class2, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType1 = mapType0.withContentTypeHandler(class2);
      TypeBindings typeBindings0 = null;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) mapType0, (JavaType[]) null, (JavaType) simpleType0);
      MapType mapType2 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapType0, (JavaType[]) null, (JavaType) collectionType0, (JavaType) mapType1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forDeserializationWithBuilder((DeserializationConfig) null, mapType2, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Float> class0 = Float.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.nonNullString("TkgCmr|q");
      Double double0 = new Double((-1.0));
      ClassUtil.classNameOf(double0);
      ClassUtil.getConstructors(class0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 8;
      longArray0[1] = (long) 8;
      longArray0[2] = 1837L;
      longArray0[3] = (long) 8;
      longArray0[4] = (long) 8;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("TkgCmr|q");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "TkgCmr|q", 8, longArray0, sQLTransientConnectionException0);
      SQLDataException sQLDataException0 = new SQLDataException(batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getOuterClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.classNameOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findConstructor(class0, true);
      Class<Error> class1 = Error.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.classNameOf((Object) null);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ClassUtil.throwIfError(sQLInvalidAuthorizationSpecException0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3177);
      byteArrayBuilder0.toByteArray();
      byteArrayBuilder0.appendTwoBytes((-1652333975));
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "Multiple 'any-setter' fields defined (%s vs %s)");
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperTypes(class0, class1);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      boolean boolean0 = new Boolean(true);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nullOrToString(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isBogusClass(class2);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      URI uRI0 = MockURI.aFTPURI;
      ClassUtil.getClassMethods(class0);
      ClassUtil.throwIfError((Throwable) null);
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperTypes(class3, class2);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class0);
      Byte byte0 = new Byte((byte)63);
      ClassUtil.hasClass(byte0, class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.getClassDescription(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findConstructor(class2, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Float> class1 = Float.TYPE;
      ClassUtil.nameOf(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.nameOf(class2);
      ClassUtil.primitiveType(class1);
      ClassUtil.rawClass((JavaType) null);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findSuperClasses((Class<?>) null, class0, true);
      ClassUtil.createInstance(class0, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<NoClass> class1 = NoClass.class;
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<String> class3 = String.class;
      ClassUtil.createInstance(class3, false);
      ClassUtil.nonNullString("w,");
      ClassUtil.primitiveType(class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.setBase64Variant((Base64Variant) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(3);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-36);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, objectMapper1, byteArrayBuilder0, byteArray0, (byte) (-7), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(1386, (-231));
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.nameOf(class1);
      ClassUtil.nameOf(class0);
      ClassUtil.primitiveType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class2, false);
      ClassUtil.throwIfError(runtimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.getClassDescription(constructor0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findClassAnnotations(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonNodeFactory.withExactBigDecimals(false);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType.upgradeFrom(simpleType0, simpleType0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findConstructor(class1, true);
      Class<Object> class2 = Object.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      Class<Character> class3 = Character.class;
      ReferenceType referenceType0 = ReferenceType.construct(class3, typeBindings0, javaTypeArray0[2], javaTypeArray0, javaTypeArray0[0]);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class3, typeBindings0, javaTypeArray0[0], javaTypeArray0, (JavaType) referenceType0);
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, javaType0, javaTypeArray0, javaType0, (JavaType) collectionLikeType0);
      MapType mapType1 = mapType0.withContentValueHandler(javaTypeArray0[2]);
      MapType mapType2 = mapType1.withKeyType(referenceType0);
      MapType mapType3 = mapType2.withContentTypeHandler(class2);
      MapLikeType mapLikeType0 = mapType3.withContentTypeHandler((Object) null);
      ClassUtil.rawClass(mapLikeType0);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.findConstructor(class4, true);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.Boolean");
      ClassUtil.isProxyType(class0);
      Exception exception0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.getClassMethods(class1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      ClassUtil.throwIfError(sQLNonTransientException0);
      Short short0 = new Short((short)689);
      Class<MapType> class3 = MapType.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getOuterClass(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.classNameOf(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.nameOf(class2);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("`java.lang.Class`", sQLNonTransientException0);
      ClassUtil.throwIfError(sQLNonTransientException0);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getPackageName(class3);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`java.lang.Class`", sQLNonTransientException0);
      mockRuntimeException0.getSuppressed();
      MockPrintStream mockPrintStream0 = new MockPrintStream("q`{V=");
      mockRuntimeException0.printStackTrace((PrintStream) mockPrintStream0);
      Integer integer0 = new Integer(2676);
      ClassUtil.nonNull((Object) "`java.lang.Object`", (Object) integer0);
      Integer integer1 = new Integer(592);
      ClassUtil.nullOrToString(integer1);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getOuterClass(class0);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.wrapperType(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findEnumType(class2);
      ClassUtil.getDeclaringClass(class0);
      Class<AccessPattern> class3 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isConcrete(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[3];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      accessibleObjectArray0[1] = (AccessibleObject) constructor0;
      accessibleObjectArray0[2] = (AccessibleObject) constructor0;
      AccessibleObject.setAccessible(accessibleObjectArray0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      SQLDataException sQLDataException0 = new SQLDataException("r*;c;\"Lz ", "", 0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // r*;c;\"Lz 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.throwIfError((Throwable) null);
      Short short0 = new Short((short)689);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " has no default (no arg) constructor");
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.isLocalType(class0, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor1 = ClassUtil.findConstructor(class2, true);
      constructor1.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor1);
      classUtil_Ctor0.getConstructor();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, true);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.getDeclaringClass(class1);
      ClassUtil.getClassMethods(class1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((Throwable) null);
      ClassUtil.throwIfError(sQLNonTransientException0);
      Short short0 = new Short((short)689);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "->", (Throwable) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ->
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isConcrete(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[3];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      accessibleObjectArray0[1] = (AccessibleObject) constructor1;
      accessibleObjectArray0[2] = (AccessibleObject) constructor0;
      AccessibleObject.setAccessible(accessibleObjectArray0, true);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor1.getParameterAnnotations();
      classUtil_Ctor1.getParamCount();
      constructor0.getAnnotations();
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor1.getConstructor();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor1._ctor, true);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getOuterClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ClassUtil.nonNullString("->");
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.hasClass("->", class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory0.configure(jsonFactory_Feature0, true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(".B7uO9zB%@q~`$>i1", "->", (-1));
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLTransactionRollbackException0);
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException();
      RuntimeException runtimeException0 = ClassUtil.nonNull((RuntimeException) mockRuntimeException0, (RuntimeException) mockRuntimeException1);
      ClassUtil.nonNull((Object) "->", (Object) runtimeException0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      ClassUtil.nonNull(accessPattern0, accessPattern0);
      String string0 = "primitive";
      Class<String> class0 = String.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.nullOrToString(constructor0);
      ClassUtil.isBogusClass(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.findEnumType(class0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nullOrToString((Object) null);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getOuterClass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.getDeclaringClass(class0);
      MockIOException mockIOException0 = new MockIOException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(mockIOException0);
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      sQLInvalidAuthorizationSpecException0.spliterator();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException1.setNextException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.setNextException(sQLInvalidAuthorizationSpecException1);
      MockIOException mockIOException1 = new MockIOException(sQLInvalidAuthorizationSpecException0);
      ClassUtil.getRootCause(mockIOException1);
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.primitiveType(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.createInstance(class3, false);
      ClassUtil.nonNullString("net.sf.cglib.proxy.java.lang.Integer");
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedWriter0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      pipedWriter0.close();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.getClassMethods(class2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("d>tgxG<d~", "8_=swm5#/jb", (-388));
      ClassUtil.throwIfError(sQLTransactionRollbackException0);
      Short short0 = new Short((short)689);
      ClassUtil.hasClass((Object) null, class2);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ClassUtil.createInstance(class1, true);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findConstructor(class2, true);
      Class<Object> class3 = Object.class;
      ClassUtil.findEnumType(class3);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.hasEnclosingMethod(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.nameOf(class1);
      ClassUtil.nameOf(class0);
      Class<Double> class2 = Double.class;
      ClassUtil.primitiveType(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.createInstance(class3, false);
      Class<RuntimeException> class4 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.isCollectionMapOrArray(class1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ClassUtil.nonNullString("->");
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.hasClass("->", class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      jsonFactory1.createParser((char[]) null, (-1), 61);
      Class<Float> class3 = Float.class;
      ClassUtil.findSuperClasses(class3, class2, false);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.nameOf(class0);
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.nullOrToString("`java.lang.Error`");
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.rawClass((JavaType) null);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<Character> class2 = Character.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = false;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.classOf((Object) null);
      Class<Long> class2 = Long.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      File file0 = MockFile.createTempFile("JSON", "com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      iOContext0.allocTokenBuffer();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) class2;
      objectArray0[3] = (Object) file0;
      PrintStream printStream0 = mockPrintStream1.format(locale0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", objectArray0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-8), objectMapper1, printStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.nameOf(class1);
      ClassUtil.nameOf(class0);
      ClassUtil.primitiveType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.createInstance(class2, false);
      Class<RuntimeException> class3 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getClassDescription(class0);
      ClassUtil.findClassAnnotations(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<IOException>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.isJacksonStdImpl((Object) classUtil_Ctor0);
      ClassUtil.isLocalType(class0, true);
      classUtil_Ctor0.getParameterAnnotations();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute((Object) null, deserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = false;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedWriter0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      pipedWriter0.close();
      writerBasedJsonGenerator0.writeRaw('c');
      JsonGeneratorDelegate jsonGeneratorDelegate1 = new JsonGeneratorDelegate(jsonGeneratorDelegate0, false);
      Exception exception0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate1, (Closeable) pipedWriter0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.canBeABeanType(class0);
      Member member0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.getDeclaringClass(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.nullOrToString(class1);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.isBogusClass(class3);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.type.MapType`", string0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.numberType());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals("", arrayNode0.asText());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(22, methodArray0.length);
      
      Class<IOException> class1 = IOException.class;
      String string0 = ClassUtil.nameOf(class1);
      assertNotNull(string0);
      assertEquals("`java.io.IOException`", string0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      
      SQLNonTransientException sQLNonTransientException1 = (SQLNonTransientException)ClassUtil.throwIfError(sQLNonTransientException0);
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException1, sQLNonTransientException0);
      assertNotNull(sQLNonTransientException1);
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNull(sQLNonTransientException1.getSQLState());
      assertNull(sQLNonTransientException1.getMessage());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException1.toString());
      
      String string1 = ClassUtil.getPackageName(class0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("com.fasterxml.jackson.databind.type", string1);
      
      Class<MapLikeType> class2 = MapLikeType.class;
      Constructor<MapLikeType> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null);
      assertNotNull(sQLDataException0);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      SQLDataException sQLDataException1 = (SQLDataException)ClassUtil.throwIfIOE(sQLDataException0);
      assertSame(sQLDataException0, sQLDataException1);
      assertSame(sQLDataException1, sQLDataException0);
      assertNotNull(sQLDataException1);
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals(0, sQLDataException1.getErrorCode());
      assertNull(sQLDataException1.getSQLState());
      assertNull(sQLDataException1.getMessage());
      assertEquals("java.sql.SQLDataException", sQLDataException1.toString());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      // Undeclared exception!
      try { 
        deserializerFactoryConfig0.withValueInstantiators((ValueInstantiators) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null resolver
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Double double0 = new Double(3);
      assertNotNull(double0);
      assertEquals(3.0, (double)double0, 0.01);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 1, (ObjectCodec) null, pipedWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(writerBasedJsonGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      
      pipedWriter0.close();
      JsonGeneratorDelegate jsonGeneratorDelegate1 = new JsonGeneratorDelegate(jsonGeneratorDelegate0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(jsonGeneratorDelegate1);
      assertFalse(jsonGeneratorDelegate1.equals((Object)jsonGeneratorDelegate0));
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(1, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertFalse(jsonGeneratorDelegate1.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate1.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate1.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate1.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate1.canWriteTypeId());
      assertTrue(jsonGeneratorDelegate1.canOmitFields());
      assertEquals(0, jsonGeneratorDelegate1.getOutputBuffered());
      assertEquals(0, jsonGeneratorDelegate1.getHighestEscapedChar());
      
      Exception exception0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate1, (Closeable) pipedWriter0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("->");
      assertNotNull(string0);
      assertEquals("->", string0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.hasClass("->", class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<NoClass> class2 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class2, false);
      assertNotNull(list0);
      assertEquals(8, list0.size());
      assertFalse(list0.isEmpty());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      // Undeclared exception!
      try { 
        objectMapper0.disable(deserializationFeature0, (DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      
      String string0 = "v-I62Z_,Hj^d 5|jAR";
      String string1 = ClassUtil.backticked("v-I62Z_,Hj^d 5|jAR");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`v-I62Z_,Hj^d 5|jAR`", string1);
      
      Class<Boolean> class2 = Boolean.class;
      Constructor<Boolean> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class<Character> class1 = Character.class;
      Class<?> class2 = ClassUtil.getOuterClass(class1);
      assertNull(class2);
      
      Class<Long> class3 = Long.class;
      boolean boolean1 = ClassUtil.isConcrete(class3);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      SQLException sQLException0 = new SQLException();
      assertNotNull(sQLException0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      
      SQLException sQLException1 = (SQLException)ClassUtil.throwIfError(sQLException0);
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      assertNotNull(sQLException1);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException1.getErrorCode());
      assertNull(sQLException1.getMessage());
      assertNull(sQLException1.getSQLState());
      assertEquals("java.sql.SQLException", sQLException1.toString());
      
      Spliterator<Throwable> spliterator0 = sQLException0.spliterator();
      assertSame(sQLException0, sQLException1);
      assertNotNull(spliterator0);
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0, "jpCe*SB~Ae4H{c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // jpCe*SB~Ae4H{c
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "_^M1t_%";
      MockError mockError0 = new MockError("_^M1t_%");
      assertNotNull(mockError0);
      
      Throwable throwable0 = mockError0.fillInStackTrace();
      assertSame(mockError0, throwable0);
      assertSame(throwable0, mockError0);
      assertNotNull(throwable0);
      
      String string1 = mockError0.toString();
      assertSame(mockError0, throwable0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: _^M1t_%", string1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.evosuite.runtime.mock.java.lang.MockThrowable: _^M1t_%", "_^M1t_%");
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: _^M1t_%", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.evosuite.runtime.mock.java.lang.MockThrowable: _^M1t_%", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("_^M1t_%", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      mockError0.addSuppressed(sQLIntegrityConstraintViolationException0);
      assertSame(mockError0, throwable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: _^M1t_%", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: org.evosuite.runtime.mock.java.lang.MockThrowable: _^M1t_%", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("_^M1t_%", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      Throwable throwable1 = mockError0.fillInStackTrace();
      assertSame(mockError0, throwable0);
      assertSame(mockError0, throwable1);
      assertSame(throwable1, mockError0);
      assertSame(throwable1, throwable0);
      assertNotNull(throwable1);
      
      String string2 = mockError0.getLocalizedMessage();
      assertSame(mockError0, throwable0);
      assertSame(mockError0, throwable1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("_^M1t_%", string2);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "_^M1t_%");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Iterator<RuntimeException> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<NoClass> class0 = NoClass.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class1, false);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = ClassUtil.nonNull(accessPattern0, accessPattern0);
      assertSame(accessPattern0, accessPattern1);
      assertSame(accessPattern1, accessPattern0);
      assertEquals(AccessPattern.DYNAMIC, accessPattern1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("primitive", "primitive", 2, intArray0);
      assertNotNull(batchUpdateException0);
      assertEquals(2, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: primitive", batchUpdateException0.toString());
      assertEquals("primitive", batchUpdateException0.getSQLState());
      assertEquals("primitive", batchUpdateException0.getMessage());
      assertArrayEquals(new int[] {2, 2, 2, 2}, intArray0);
      assertEquals(4, intArray0.length);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("primitive", "SdbnG", batchUpdateException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(2, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: primitive", batchUpdateException0.toString());
      assertEquals("primitive", batchUpdateException0.getSQLState());
      assertEquals("primitive", batchUpdateException0.getMessage());
      assertEquals("SdbnG", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: primitive", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("primitive", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertArrayEquals(new int[] {2, 2, 2, 2}, intArray0);
      assertEquals(4, intArray0.length);
      
      SQLWarning sQLWarning0 = new SQLWarning("vals", sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLWarning0);
      assertEquals(2, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: primitive", batchUpdateException0.toString());
      assertEquals("primitive", batchUpdateException0.getSQLState());
      assertEquals("primitive", batchUpdateException0.getMessage());
      assertEquals("SdbnG", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: primitive", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("primitive", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: vals", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("vals", sQLWarning0.getMessage());
      assertArrayEquals(new int[] {2, 2, 2, 2}, intArray0);
      assertEquals(4, intArray0.length);
      
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(sQLWarning0);
      assertNotNull(batchUpdateException1);
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertEquals(2, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: primitive", batchUpdateException0.toString());
      assertEquals("primitive", batchUpdateException0.getSQLState());
      assertEquals("primitive", batchUpdateException0.getMessage());
      assertEquals("SdbnG", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: primitive", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("primitive", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: vals", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("vals", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: vals", batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLWarning: vals", batchUpdateException1.toString());
      assertArrayEquals(new int[] {2, 2, 2, 2}, intArray0);
      assertEquals(4, intArray0.length);
      
      BatchUpdateException batchUpdateException2 = (BatchUpdateException)batchUpdateException1.fillInStackTrace();
      assertNotSame(batchUpdateException0, batchUpdateException2);
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertNotSame(batchUpdateException1, batchUpdateException0);
      assertSame(batchUpdateException1, batchUpdateException2);
      assertSame(batchUpdateException2, batchUpdateException1);
      assertNotSame(batchUpdateException2, batchUpdateException0);
      assertNotNull(batchUpdateException2);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertFalse(batchUpdateException1.equals((Object)batchUpdateException0));
      assertFalse(batchUpdateException2.equals((Object)batchUpdateException0));
      assertEquals(2, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: primitive", batchUpdateException0.toString());
      assertEquals("primitive", batchUpdateException0.getSQLState());
      assertEquals("primitive", batchUpdateException0.getMessage());
      assertEquals("SdbnG", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: primitive", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("primitive", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: vals", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("vals", sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning: vals", batchUpdateException1.getMessage());
      assertNull(batchUpdateException1.getSQLState());
      assertEquals(0, batchUpdateException1.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLWarning: vals", batchUpdateException1.toString());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLWarning: vals", batchUpdateException2.toString());
      assertNull(batchUpdateException2.getSQLState());
      assertEquals(0, batchUpdateException2.getErrorCode());
      assertEquals("java.sql.SQLWarning: vals", batchUpdateException2.getMessage());
      assertArrayEquals(new int[] {2, 2, 2, 2}, intArray0);
      assertEquals(4, intArray0.length);
      
      batchUpdateException0.addSuppressed(sQLWarning0);
      assertNotSame(batchUpdateException0, batchUpdateException2);
      assertNotSame(batchUpdateException0, batchUpdateException1);
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException2));
      assertFalse(batchUpdateException0.equals((Object)batchUpdateException1));
      assertEquals(2, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: primitive", batchUpdateException0.toString());
      assertEquals("primitive", batchUpdateException0.getSQLState());
      assertEquals("primitive", batchUpdateException0.getMessage());
      assertEquals("SdbnG", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: primitive", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("primitive", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLWarning: vals", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("vals", sQLWarning0.getMessage());
      assertArrayEquals(new int[] {2, 2, 2, 2}, intArray0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException1, "a%4^1QR=N!jOMx$#55");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a%4^1QR=N!jOMx$#55
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      assertNotNull(jsonGeneratorDelegate0);
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGeneratorDelegate0, "r2W//FB]J");
      assertNotNull(jsonMappingException0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("r2W//FB]J", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals("r2W//FB]J", stringWriter0.toString());
      assertEquals(0, objectArray0.length);
      
      jsonMappingException0.printStackTrace(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertEquals("r2W//FB]Jsun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", stringWriter0.toString());
      assertEquals(0, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<String> class1 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      String string0 = ClassUtil.createInstance(class1, true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = ClassUtil.nonNullString("G@Ay^]");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("G@Ay^]", string1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      String string0 = ClassUtil.nonNullString("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Double> class0 = Double.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Member member0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "size", 16384);
      assertNotNull(sQLTimeoutException0);
      assertEquals(16384, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("size", sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      
      StackTraceElement[] stackTraceElementArray0 = sQLTimeoutException0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(16384, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertEquals("size", sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(13, stackTraceElementArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Short`", string0);
      
      Class<Object> class1 = Object.class;
      Type type0 = ClassUtil.getGenericSuperclass(class1);
      assertNull(type0);
      
      Constructor<Short> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[1];
      accessibleObjectArray0[0] = (AccessibleObject) null;
      // Undeclared exception!
      try { 
        AccessibleObject.setAccessible(accessibleObjectArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<Long> class1 = Long.class;
      Constructor<Long> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(22, methodArray0.length);
      
      String string0 = ClassUtil.classNameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Class`", string0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertNotNull(classUtil_CtorArray0);
      assertEquals(2, classUtil_CtorArray0.length);
      
      String string1 = ClassUtil.classNameOf("`java.lang.Class`");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`java.lang.String`", string1);
      
      Class<Boolean> class1 = Boolean.class;
      Method[] methodArray1 = ClassUtil.getDeclaredMethods(class1);
      assertNotSame(methodArray1, methodArray0);
      assertNotNull(methodArray1);
      assertFalse(methodArray1.equals((Object)methodArray0));
      assertEquals(16, methodArray1.length);
      
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      
      Parameter[] parameterArray0 = constructor0.getParameters();
      assertNotNull(parameterArray0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      assertEquals(0, parameterArray0.length);
      
      Parameter[] parameterArray1 = constructor0.getParameters();
      assertNotSame(parameterArray1, parameterArray0);
      assertNotNull(parameterArray1);
      assertFalse(parameterArray1.equals((Object)parameterArray0));
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      assertEquals(0, parameterArray1.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      
      Class<Annotation> class3 = Annotation.class;
      int int0 = constructor0.getParameterCount();
      assertEquals(0, int0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class3);
      assertNull(annotation0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      assertEquals(0, annotationArray0.length);
      
      Annotation annotation1 = constructor0.getDeclaredAnnotation(class3);
      assertNull(annotation1);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray1);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      assertEquals(0, annotationArray1.length);
      
      Type[] typeArray0 = constructor0.getGenericExceptionTypes();
      assertNotNull(typeArray0);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      assertEquals(0, typeArray0.length);
      
      int int2 = classUtil_Ctor0.getParamCount();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertSame(annotationArray2, annotationArray0);
      assertNotNull(annotationArray2);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      assertEquals(0, annotationArray2.length);
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      Parameter[] parameterArray2 = constructor0.getParameters();
      assertNotSame(parameterArray2, parameterArray1);
      assertNotSame(parameterArray2, parameterArray0);
      assertNotNull(parameterArray2);
      assertFalse(parameterArray2.equals((Object)parameterArray1));
      assertFalse(parameterArray2.equals((Object)parameterArray0));
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      assertEquals(0, parameterArray2.length);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      Annotation[] annotationArray3 = classUtil_Ctor0.getDeclaredAnnotations();
      assertSame(annotationArray3, annotationArray1);
      assertNotNull(annotationArray3);
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals(4, constructor0.getModifiers());
      assertEquals(0, annotationArray3.length);
      
      Throwable throwable1 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable1);
      
      Class class4 = (Class)ClassUtil.getGenericSuperclass(class1);
      assertNotNull(class4);
      assertFalse(class4.isAnnotation());
      assertEquals("class java.lang.Object", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isArray());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isInterface());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray1);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertSame(annotationArray2, annotationArray0);
      assertNotNull(annotationArray2);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray2.length);
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.Object()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation[] annotationArray3 = constructor0.getAnnotationsByType(class1);
      assertNotSame(annotationArray3, annotationArray1);
      assertNotNull(annotationArray3);
      assertFalse(annotationArray3.equals((Object)annotationArray1));
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray3.length);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) classUtil_Ctor0);
      assertFalse(boolean0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Annotation[][] annotationArray4 = classUtil_Ctor0.getParameterAnnotations();
      assertSame(annotationArray4, annotationArray2);
      assertSame(annotationArray4, annotationArray0);
      assertNotNull(annotationArray4);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray4.length);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute((Object) null, deserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<Double> class2 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.annotation.NoClass`", string0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("`com.fasterxml.jackson.databind.annotation.NoClass`", "`com.fasterxml.jackson.databind.annotation.NoClass`");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: `com.fasterxml.jackson.databind.annotation.NoClass`", sQLTimeoutException0.toString());
      assertEquals("`com.fasterxml.jackson.databind.annotation.NoClass`", sQLTimeoutException0.getMessage());
      assertEquals("`com.fasterxml.jackson.databind.annotation.NoClass`", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0, false);
      assertNotNull(mockPrintWriter0);
      
      sQLTimeoutException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertEquals("java.sql.SQLTimeoutException: `com.fasterxml.jackson.databind.annotation.NoClass`", sQLTimeoutException0.toString());
      assertEquals("`com.fasterxml.jackson.databind.annotation.NoClass`", sQLTimeoutException0.getMessage());
      assertEquals("`com.fasterxml.jackson.databind.annotation.NoClass`", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      assertNotNull(sQLTimeoutException1);
      assertEquals("java.sql.SQLTimeoutException: `com.fasterxml.jackson.databind.annotation.NoClass`", sQLTimeoutException0.toString());
      assertEquals("`com.fasterxml.jackson.databind.annotation.NoClass`", sQLTimeoutException0.getMessage());
      assertEquals("`com.fasterxml.jackson.databind.annotation.NoClass`", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: `com.fasterxml.jackson.databind.annotation.NoClass`", sQLTimeoutException1.toString());
      assertEquals("`com.fasterxml.jackson.databind.annotation.NoClass`", sQLTimeoutException1.getSQLState());
      assertEquals("`com.fasterxml.jackson.databind.annotation.NoClass`", sQLTimeoutException1.getMessage());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      assertNotNull(iOException0);
      assertEquals("java.io.IOException", iOException0.toString());
      assertNull(iOException0.getMessage());
      
      IOException iOException1 = (IOException)ClassUtil.throwIfRTE(iOException0);
      assertSame(iOException0, iOException1);
      assertSame(iOException1, iOException0);
      assertNotNull(iOException1);
      assertEquals("java.io.IOException", iOException0.toString());
      assertNull(iOException0.getMessage());
      assertEquals("java.io.IOException", iOException1.toString());
      assertNull(iOException1.getMessage());
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Class<?> class1 = ClassUtil.classOf(boolean0);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Boolean", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNotNull(constructor0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.String()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      
      Class<?> class3 = ClassUtil.getEnclosingClass(class0);
      assertNull(class3);
      
      String string0 = ClassUtil.nullOrToString(iOException0);
      assertSame(iOException0, iOException1);
      assertNotNull(string0);
      assertEquals("java.io.IOException", iOException0.toString());
      assertNull(iOException0.getMessage());
      
      Class<Integer> class4 = Integer.class;
      Class<?> class5 = ClassUtil.getDeclaringClass(class4);
      assertNull(class5);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      String string1 = ClassUtil.classNameOf(class1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`java.lang.Class`", string1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Boolean", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      
      // Undeclared exception!
      try { 
        BasicBeanDescription.forSerialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Error> class0 = Error.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Error`", string0);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string1 = ClassUtil.nullOrToString("`java.lang.Error`");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<?> class1 = ClassUtil.rawClass((JavaType) null);
      assertNull(class1);
      
      Class<?> class2 = ClassUtil.rawClass((JavaType) null);
      assertNull(class2);
      
      Class<AccessibleObject> class3 = AccessibleObject.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class3);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class3);
      assertFalse(boolean0);
      
      Class<AccessibleObject> class4 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class4, true);
      assertSame(class4, class3);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(4, constructor0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(34, methodArray0.length);
      
      Class<Integer> class1 = Integer.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class1);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      SQLException sQLException0 = new SQLException("Cannot detect format from input, does not look like any of detectable formats ", (Throwable) null);
      assertNotNull(sQLException0);
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: Cannot detect format from input, does not look like any of detectable formats ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("Cannot detect format from input, does not look like any of detectable formats ", sQLException0.getMessage());
      
      sQLException0.printStackTrace();
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: Cannot detect format from input, does not look like any of detectable formats ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("Cannot detect format from input, does not look like any of detectable formats ", sQLException0.getMessage());
      
      Spliterator<Throwable> spliterator0 = sQLException0.spliterator();
      assertNotNull(spliterator0);
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: Cannot detect format from input, does not look like any of detectable formats ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("Cannot detect format from input, does not look like any of detectable formats ", sQLException0.getMessage());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      Throwable[] throwableArray0 = sQLInvalidAuthorizationSpecException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, throwableArray0.length);
      
      Spliterator<Throwable> spliterator1 = sQLInvalidAuthorizationSpecException0.spliterator();
      assertNotSame(spliterator1, spliterator0);
      assertNotNull(spliterator1);
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      sQLException0.setNextException(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: Cannot detect format from input, does not look like any of detectable formats ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("Cannot detect format from input, does not look like any of detectable formats ", sQLException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLException sQLException1 = (SQLException)ClassUtil.getRootCause(sQLException0);
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      assertNotNull(sQLException1);
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException: Cannot detect format from input, does not look like any of detectable formats ", sQLException0.toString());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("Cannot detect format from input, does not look like any of detectable formats ", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: Cannot detect format from input, does not look like any of detectable formats ", sQLException1.toString());
      assertNull(sQLException1.getSQLState());
      assertEquals("Cannot detect format from input, does not look like any of detectable formats ", sQLException1.getMessage());
      assertEquals(0, sQLException1.getErrorCode());
      
      Class<Error> class1 = Error.class;
      String string0 = ClassUtil.nameOf(class1);
      assertNotNull(string0);
      assertEquals("`java.lang.Error`", string0);
      
      String string1 = ClassUtil.nameOf(class0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`com.fasterxml.jackson.databind.type.ResolvedRecursiveType`", string1);
      
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNull(class2);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class3, false);
      assertNotNull(runtimeException0);
      assertEquals("java.lang.RuntimeException", runtimeException0.toString());
      assertNull(runtimeException0.getMessage());
      
      Class<RuntimeException> class4 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class4, false);
      assertSame(class4, class3);
      assertNotNull(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertSame(class4, class3);
      assertEquals(0, int0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      
      Class<Error> class5 = Error.class;
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class5);
      assertSame(class5, class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Void> class0 = Void.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      
      System.setCurrentTimeMillis(3L);
      Class<Character> class1 = Character.class;
      boolean boolean1 = ClassUtil.isBogusClass(class1);
      assertNotSame(class1, class0);
      assertFalse(class1.equals((Object)class0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertNotSame(class0, class1);
      assertNotNull(object0);
      assertFalse(class0.equals((Object)class1));
      assertEquals('\u0000', object0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      
      Class<?> class2 = ClassUtil.getEnclosingClass(class0);
      assertNull(class2);
      
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Class<ArrayType> class0 = ArrayType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      
      String string0 = "]|";
      String string1 = "4_nf?gILel<]T!N~EA1";
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("]|", "4_nf?gILel<]T!N~EA1", false, '\\', 248);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 19)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[3];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      accessibleObjectArray0[1] = (AccessibleObject) constructor0;
      accessibleObjectArray0[2] = (AccessibleObject) constructor0;
      boolean boolean1 = true;
      AccessibleObject.setAccessible(accessibleObjectArray0, true);
      assertEquals(3, accessibleObjectArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray0.length);
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray1);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray1.length);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[] annotationArray2 = constructor0.getAnnotations();
      assertSame(annotationArray2, annotationArray0);
      assertNotNull(annotationArray2);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(0, annotationArray2.length);
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Throwable throwable0 = null;
      Throwable throwable1 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable1);
      
      String string0 = "; expected type Converter or Class<Converter> instead";
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "; expected type Converter or Class<Converter> instead");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "|Id#aWc~?k 9IWKD&,");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.type.PlaceholderForType) must override method '|Id#aWc~?k 9IWKD&,'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Constructor<MapLikeType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }
}
