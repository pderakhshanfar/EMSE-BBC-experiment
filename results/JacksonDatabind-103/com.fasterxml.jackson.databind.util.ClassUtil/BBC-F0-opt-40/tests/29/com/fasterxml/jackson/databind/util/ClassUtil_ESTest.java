/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 06:11:43 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Spliterator;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
      ClassUtil.classNameOf(class0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, false);
      Class<Object> class1 = Object.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.hasClass(iOException0, class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.classNameOf("net.sf.cglib.proxy.");
      Class<Annotation> class0 = Annotation.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Class<Character> class1 = Character.class;
      resolvedRecursiveType0.isTypeOrSubTypeOf(class1);
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler(mockRuntimeException0);
      ClassUtil.rawClass(javaType0);
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperClasses(class2, class0, false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Void> class1 = Void.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "10`$,#!B.~e^kxun;", (String) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Void` from String \"10`$,#!B.~e^kxun;\": null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      Class<SimpleModule> class1 = SimpleModule.class;
      Constructor<SimpleModule> constructor1 = ClassUtil.findConstructor(class1, false);
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "org.hibernate.proxy.com.fasterxml.jackson.databind.ObjectMapper", "|k(H,S");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.io.IOException` from String \"org.hibernate.proxy.com.fasterxml.jackson.databind.ObjectMapper\": |k(H,S
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.io.IOException");
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.verifyMustOverride(class0, accessPattern0, "net.sf.cglib.proxy.java.io.IOException");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      Double double0 = new Double(0.0);
      enumMap0.put(accessPattern0, double0);
      enumMap0.clone();
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Double> enumMap0 = new EnumMap<AccessPattern, Double>(class0);
      EnumMap<AccessPattern, Double> enumMap1 = enumMap0.clone();
      ClassUtil.findEnumType(enumMap1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("byYmBT:NM6P> \"%P");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "byYmBT:NM6P> \"%P");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      ClassUtil.classNameOf(iOException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy)PropertyNamingStrategy.KEBAB_CASE;
      ObjectMapper objectMapper2 = objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy_KebabCaseStrategy0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("primitive", true);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1084, objectMapper2, mockFileOutputStream0, byteArray0, 0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCodec(objectMapper2);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isConcrete(class0);
      int[] intArray0 = new int[5];
      intArray0[0] = 192;
      intArray0[1] = 14;
      intArray0[2] = 67;
      intArray0[3] = (-1455);
      intArray0[4] = 7;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(batchUpdateException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException("LwNX+\"]#%Q5", intArray0, sQLRecoverableException0);
      batchUpdateException0.initCause(batchUpdateException1);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
      String string0 = null;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(beanDeserializerFactory0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes(class1, class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Illegal unquoted character (");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("gl:", "WRAPPER_ARRAY", mockRuntimeException0);
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException("Illegal unquoted character (", mockRuntimeException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockRuntimeException1, (-8));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): gl: (through reference chain: org.evosuite.runtime.mock.java.lang.MockRuntimeException[?])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<IOException>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet.range(accessPattern0, accessPattern0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern1);
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      enumSet0.add(accessPattern2);
      enumSet0.parallelStream();
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      Class<CreatorProperty> class2 = CreatorProperty.class;
      ClassUtil.findSuperTypes(class0, class2, list0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.deser.CreatorProperty is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getEnclosingClass(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.emptyIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KM)!i(+3fz");
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.findSuperTypes(class0, class1);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "KM)!i(+3fz");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      Class<String> class1 = String.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      ClassUtil.nonNull((CollectionType) null, collectionType0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SimpleType> class2 = SimpleType.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class1, class2);
      ClassUtil.rawClass(collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<IOException>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.Byte");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("java.lang.Byte", sQLClientInfoException0);
      sQLClientInfoException0.initCause(sQLTimeoutException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<String> class0 = String.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class1, class0, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassUtil.nonNull((CollectionType) null, (CollectionType) null);
      Class<Float> class0 = Float.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = objectMapper1.convertValue((Object) objectMapper0, class0);
      Class<Object> class1 = Object.class;
      objectMapper1.readerFor(class1);
      ClassUtil.hasClass(objectMapper0, class1);
      ClassUtil.getRootCause(iOException0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isConcrete(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.isConcrete(class2);
      Class<InputStream> class3 = InputStream.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isBogusClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1013), (ObjectCodec) null, mockFileOutputStream0, byteArray0, 3, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((byte) (-1), (-1808662384));
      MockError mockError0 = new MockError();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockError0);
      MockIOException mockIOException0 = new MockIOException("FHK", sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(uTF8JsonGenerator0, "q43ei66f|@e|6n", mockIOException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<Void> class1 = Void.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("+wl*!,?");
      MockIOException mockIOException0 = new MockIOException(sQLSyntaxErrorException0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockIOException0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-18);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1536, objectMapper1, pipedOutputStream0, byteArray0, (-1644), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(100);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.classNameOf(class0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<NullNode> class0 = NullNode.class;
      Class<Byte> class1 = Byte.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findEnumType(class2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      ClassUtil.getEnclosingClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException((Class<?>) null, "38*C=M$%z%){GSLg~t?", "/|wMju!had~=uYg");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot deserialize Map key of type [null] from String \"38*C=M$%z%){GSLg~t?\": /|wMju!had~=uYg
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.throwIfIOE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockError mockError0 = new MockError("org.hiber0ate.proxy.");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Character> class0 = Character.class;
      ClassUtil.isJacksonStdImpl(class0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("java.io.BufferedInpu");
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.empty();
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition(annotationIntrospector0, (AnnotatedMember) null, (PropertyName) null, propertyMetadata1, jsonInclude_Value0);
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) simpleBeanPropertyDefinition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.primitiveType(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class0);
      MockError mockError0 = new MockError();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(mockError0);
      batchUpdateException0.getStackTrace();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v@q:|C`");
      mockError0.toString();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "(&;0 MYz(Ov(UpL7\"");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getConstructors(class0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(2611L);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.getDeclaredFields(class1);
      Integer integer0 = new Integer(228);
      ClassUtil.nullOrToString(integer0);
      ClassUtil.getClassDescription(class0);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.hasClass(class1, class2);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      MockIOException mockIOException0 = new MockIOException();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.canBeABeanType(class0);
      Class<Long> class1 = Long.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findSuperClasses(class3, class1, true);
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("; failed to set access: ", "net.sf.cglib.proxy.java.lang.Object", 32767);
      MockError mockError0 = new MockError(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.primitiveType(class0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializerFactory0, false);
      StringReader stringReader0 = new StringReader("net.sf.cglib.proxy.java.lang.Short");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectMapper1, charsToNameCanonicalizer0);
      Class<Character> class0 = Character.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (JavaType) simpleType1, jsonToken0, "unknown");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_OBJECT: unknown
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isBogusClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1212;
      intArray0[1] = 1212;
      intArray0[2] = 1212;
      intArray0[3] = 1212;
      intArray0[4] = 1212;
      intArray0[5] = 1212;
      intArray0[6] = 1212;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Unsupported serialization shape (%s) for Enum %s, not supported as %s annotation", " has no default (no arg) constructor", 1212, intArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, batchUpdateException0);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, throwable0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.hasClass(class0, class0);
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[7];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      accessibleObjectArray0[1] = (AccessibleObject) constructor0;
      accessibleObjectArray0[2] = (AccessibleObject) constructor0;
      accessibleObjectArray0[3] = (AccessibleObject) constructor0;
      accessibleObjectArray0[4] = (AccessibleObject) constructor0;
      accessibleObjectArray0[5] = (AccessibleObject) constructor0;
      Class<Error> class2 = Error.class;
      Constructor<Error> constructor1 = ClassUtil.findConstructor(class2, false);
      accessibleObjectArray0[6] = (AccessibleObject) constructor1;
      AccessibleObject.setAccessible(accessibleObjectArray0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Boolean> class1 = Boolean.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) vector0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ObjectReader objectReader1 = objectReader0.forType((JavaType) resolvedRecursiveType0);
      ObjectReader objectReader2 = objectReader1.withValueToUpdate(class0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[9];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(4, 4, 4, (-6), 4).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      formatFeatureArray0[3] = formatFeature0;
      formatFeatureArray0[4] = formatFeature0;
      formatFeatureArray0[5] = formatFeature0;
      formatFeatureArray0[6] = formatFeature0;
      formatFeatureArray0[7] = formatFeature0;
      formatFeatureArray0[8] = formatFeature0;
      ObjectReader objectReader3 = objectReader2.withFeatures(formatFeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader3);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Class<AccessPattern> class2 = AccessPattern.class;
      objectMapper0.readerFor(class2);
      ClassUtil.isProxyType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern[] accessPatternArray0 = new AccessPattern[3];
      accessPatternArray0[0] = accessPattern0;
      accessPatternArray0[1] = accessPattern0;
      accessPatternArray0[2] = accessPattern0;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      enumSet0.add(accessPattern0);
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      enumSet0.add(accessPattern1);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Object object0 = new Object();
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.backticked("java.lang.RuntimeExc");
      Class<BufferedInputStream> class2 = BufferedInputStream.class;
      Class<String> class3 = String.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionLikeType` from number null: org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nullOrToString((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("org.hibernate.proxy.java.lang.String", sQLFeatureNotSupportedException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapType", "net.sf.cglib.proxy.java.io.BufferedInputStream", (-2821), sQLFeatureNotSupportedException1);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<IOException> class0 = IOException.class;
      ClassUtil.nameOf(class0);
      ClassUtil.emptyIterator();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(110);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1719, objectMapper0, pipedOutputStream0, byteArray0, 3, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      DataTruncation dataTruncation0 = new DataTruncation((-1019), false, false, 0, 0);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      objectMapper2.setDefaultPropertyInclusion(jsonInclude_Include0);
      TypeFactory.defaultInstance();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[0];
      objectMapper1.enable(mapperFeatureArray0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper3 = new ObjectMapper(jsonFactory1);
      Class<AccessPattern> class0 = AccessPattern.class;
      objectMapper0.readerFor(class0);
      ClassUtil.isProxyType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Boolean> class1 = Boolean.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) vector0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ObjectReader objectReader1 = objectReader0.forType((JavaType) resolvedRecursiveType0);
      ObjectReader objectReader2 = objectReader1.withValueToUpdate(class0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[9];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      formatFeatureArray0[3] = formatFeature0;
      formatFeatureArray0[4] = formatFeature0;
      formatFeatureArray0[5] = formatFeature0;
      formatFeatureArray0[6] = formatFeature0;
      formatFeatureArray0[7] = formatFeature0;
      formatFeatureArray0[8] = formatFeature0;
      ObjectReader objectReader3 = objectReader2.withFeatures(formatFeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader3);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Class<AccessPattern> class2 = AccessPattern.class;
      objectMapper0.readerFor(class2);
      ClassUtil.isProxyType(class2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nameOf(class0);
      ClassUtil.emptyIterator();
      Class<JsonMappingException> class1 = JsonMappingException.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      objectMapper0.readerFor(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Object> class1 = Object.class;
      objectMapper1.readerFor(class1);
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Class<NoClass> class0 = NoClass.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern[] accessPatternArray0 = new AccessPattern[1];
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      accessPatternArray0[0] = accessPattern1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      AccessPattern accessPattern2 = AccessPattern.CONSTANT;
      enumSet0.add(accessPattern2);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 1);
      Class<Short> class1 = Short.class;
      classArray0[0] = class1;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      objectMapper1.getDeserializationContext();
      ClassUtil.isJacksonStdImpl(class0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-708825413);
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("b", "b");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern[] accessPatternArray0 = new AccessPattern[1];
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      accessPatternArray0[0] = accessPattern1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      AccessPattern accessPattern2 = AccessPattern.CONSTANT;
      enumSet0.add(accessPattern2);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 1);
      Class<Short> class1 = Short.class;
      classArray0[0] = class1;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      ClassUtil.isJacksonStdImpl(class0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-708825413);
      intArray0[1] = (-2659);
      intArray0[2] = 4544;
      intArray0[3] = 2597;
      intArray0[4] = 95;
      intArray0[5] = (-3978);
      intArray0[6] = 910;
      intArray0[7] = (-1334);
      intArray0[8] = 1956;
      SQLWarning sQLWarning0 = new SQLWarning();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", (Throwable) batchUpdateException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(jsonMappingException0);
      ClassUtil.throwIfIOE(batchUpdateException1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.findEnumType(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectMapper objectMapper2 = objectMapper1.setNodeFactory(jsonNodeFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0);
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      ObjectMapper objectMapper4 = objectMapper3.configure(mapperFeature0, false);
      ObjectMapper objectMapper5 = objectMapper4.configure(serializationFeature0, true);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper6 = objectMapper5.setDefaultPropertyInclusion(jsonInclude_Include0);
      objectMapper6.disableDefaultTyping();
      objectMapper0.getDeserializationContext();
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) simpleType1, (Class<?>) class2, true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Boolean boolean0 = Boolean.TRUE;
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<JsonDeserializer> class1 = JsonDeserializer.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      MockFile mockFile0 = new MockFile("UNRESOLVED");
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = ClassUtil.nonNull(accessPattern0, accessPattern0);
      objectMapper0.writeValue((File) mockFile0, (Object) accessPattern1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "UNRESOLVED");
      ClassUtil.classOf(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.hasEnclosingMethod(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      Class<Module> class0 = Module.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.classOf(jsonFactory0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern[] accessPatternArray0 = new AccessPattern[1];
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      accessPatternArray0[0] = accessPattern1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      AccessPattern accessPattern2 = AccessPattern.CONSTANT;
      enumSet0.add(accessPattern2);
      ClassUtil.findEnumType(enumSet0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      enumSet0.remove(accessPattern0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.findEnumType(enumSet0);
      Class<Void> class0 = Void.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern[] accessPatternArray0 = new AccessPattern[1];
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      accessPatternArray0[0] = accessPattern1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#S1sn");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPatternArray0);
      AccessPattern accessPattern2 = AccessPattern.CONSTANT;
      enumSet0.add(accessPattern2);
      ClassUtil.findEnumType(enumSet0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 1);
      Class<Short> class0 = Short.class;
      classArray0[0] = class0;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findSingleArgConstructor(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Default constructor for ");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer", (Throwable) sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.deser.std.CollectionDeserializer", "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer", 1163, jsonMappingException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.deser.std.CollectionDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ClassUtil.getPackageName(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isObjectOrPrimitive(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findSuperTypes(class2, class1);
      Class<Float> class3 = Float.class;
      ClassUtil.primitiveType(class3);
      Class<MapLikeType> class4 = MapLikeType.class;
      ClassUtil.isNonStaticInnerClass(class4);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.hibernate.proxy.java.io.IOException", "com.fasterxml.jackson.databind");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.initCause(sQLRecoverableException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLRecoverableException: org.hibernate.proxy.java.io.IOException
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      objectMapper2.disableDefaultTyping();
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.isJacksonStdImpl(class2);
      ClassUtil.hasClass(objectMapper1, class1);
      ClassUtil.nonNull((MapType) null, (MapType) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      Class<Object> class0 = Object.class;
      objectMapper1.readerFor(class0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      objectMapper2.disableDefaultTyping();
      Class<BufferedInputStream> class1 = BufferedInputStream.class;
      ClassUtil.primitiveType(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.isJacksonStdImpl(class2);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "Default constructor for ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      Float float0 = new Float(382.99F);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonFactory1.configure(jsonParser_Feature0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectMapper0.writeTree(jsonGenerator0, (TreeNode) objectNode0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(35);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "IAbA5YG;'v;3|C");
      Class<Double> class0 = Double.class;
      ClassUtil.getGenericInterfaces(class0);
      Character character0 = new Character(':');
      ClassUtil.getClassDescription(character0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(list0);
      ReferenceType referenceType2 = referenceType1.withTypeHandler((Object) null);
      collectionLikeType0.isTrueCollectionType();
      Class<?> class2 = ClassUtil.rawClass(referenceType2);
      ClassUtil.isBogusClass(class2);
      System.setCurrentTimeMillis((-456L));
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.quotedOr(referenceType2, "`java.lang.Character`");
      ClassUtil.canBeABeanType(class1);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.hasEnclosingMethod(class3);
      ClassUtil.getDeclaredMethods(class0);
      SQLDataException sQLDataException0 = new SQLDataException("\"[reference type, class java.lang.Double<java.lang.Double<java.lang.Double,java.lang.Double>><[map-like type; class java.lang.Double, [simple type, class java.lang.Double] -> [simple type, class java.lang.Double]]>]\"");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \"[reference type, class java.lang.Double<java.lang.Double<java.lang.Double,java.lang.Double>><[map-like type; class java.lang.Double, [simple type, class java.lang.Double] -> [simple type, class java.lang.Double]]>]\"
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
      Class<Character> class2 = Character.TYPE;
      ClassUtil.isJacksonStdImpl(class2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("FIELD_NAME", "=", 1163, (Throwable) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockError mockError0 = new MockError();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, true);
      StringReader stringReader0 = new StringReader("vals");
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.TAIWAN;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonParser0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.findEnumType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("net.sf.cglib.proxy.double", "v!C5;?", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("JSON");
      objectMapper1.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      objectMapper2.disableDefaultTyping();
      objectMapper0.getDeserializationContext();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(663.25);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, false);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper2, mockPrintStream0, byteArray0, (-3229), true);
      uTF8JsonGenerator0.overrideStdFeatures(2, 3);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "java.lang.annotatio", 6);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException: com.fasterxml.jackson.databind.util.ClassUtil$Ctor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Module> class0 = Module.class;
      ClassUtil.isProxyType(class0);
      Class<MapType> class1 = MapType.class;
      Class<JsonDeserializer> class2 = JsonDeserializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      javaTypeArray0[0] = (JavaType) simpleType0;
      TypeBindings typeBindings1 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings1);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(class0);
      javaTypeArray0[1] = (JavaType) arrayType1;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) referenceType0;
      javaTypeArray0[1] = (JavaType) referenceType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1]);
      ClassUtil.findSuperTypes((JavaType) collectionType0, (Class<?>) class2, false);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isProxyType(class0);
      ClassUtil.getClassDescription(class0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      JsonFactory jsonFactory2 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonFactory2.configure(jsonParser_Feature0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) null, jsonEncoding0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JSON", "[null]");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLInvalidAuthorizationSpecException0);
      sQLDataException0.setNextException(sQLFeatureNotSupportedException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("entrySet", sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: java.sql.SQLInvalidAuthorizationSpecException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getConstructors(class0);
      Class<String> class1 = String.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getConstructors(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.getDeclaredMethods(class2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findConstructor(class0, false);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getConstructors(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.primitiveType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      MockError mockError0 = new MockError();
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(mockError0);
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      ObjectReader objectReader2 = objectReader1.withValueToUpdate(objectReader0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader2);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) bufferedOutputStream0, jsonEncoding0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("1N6+18U'O2,Yh34}", "{\";vlmwc$p2KW)m+");
      sQLDataException0.setNextException(sQLInvalidAuthorizationSpecException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("[null]", mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) bufferedOutputStream0, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Double double0 = new Double((-175.64063531104));
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<IOException> class1 = IOException.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class1, class1);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "; expected Class<PropertyNamingStrategy>");
      SimpleType simpleType1 = simpleType0.withTypeHandler(jsonMappingException0);
      SimpleType simpleType2 = simpleType1.withStaticTyping();
      defaultDeserializationContext_Impl0.missingTypeIdException(simpleType2, "5.Ta|PG9D0S");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JsonAutoDetect.Value(fields=%s,getters=%s,isGetters=%s,setters=%s,creators=%s)", jsonMappingException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("5.Ta|PG9D0S", "com.fasterxml.jackson.databind.type.ResolvedRecursiveType");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", "com.fasterxml.jackson.databind.type.ResolvedRecursiveType", sQLFeatureNotSupportedException1);
      sQLFeatureNotSupportedException1.addSuppressed(jsonMappingException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("5.Ta|PG9D0S");
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException2 = new SQLFeatureNotSupportedException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", sQLTransientException0);
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getStackTrace();
      TypeFactory.defaultInstance();
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor1 = ClassUtil.findConstructor(class1, true);
      constructor1.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      Class<MapType> class3 = MapType.class;
      ClassUtil.isLocalType(class3, false);
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      ClassUtil.getDeclaredFields(class4);
      ClassUtil.isConcrete((Member) constructor1);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("JSON");
      objectMapper1.setDefaultPrettyPrinter(minimalPrettyPrinter0);
      objectMapper2.disableDefaultTyping();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isConcrete(class0);
      Integer integer0 = new Integer(0);
      ClassUtil.classOf(integer0);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      String string0 = "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType");
      Byte byte0 = new Byte((byte)52);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) byte0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.io.IOException` from String \"net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType\": net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ArrayType (through reference chain: java.lang.Byte[\"net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ClassUtil.nonNull((CollectionType) null, (CollectionType) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getEnclosingClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<CollectionType> class2 = CollectionType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class2, "Y[|d~$sY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findConstructor(class0, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Double double0 = new Double((-1.0));
      SimpleType simpleType1 = simpleType0.withTypeHandler(beanDeserializerFactory0);
      simpleType0.withStaticTyping();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(simpleType1, "JsonAutoDetect.Value(fields=%s,getters=%s,isGetters=%s,setters=%s,creators=%s)");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, jsonMappingException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, (String) null, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("u5.nU^");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException((String) null, jsonMappingException0);
      ClassUtil.throwIfRTE(sQLFeatureNotSupportedException1);
      Class<Object> class1 = Object.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~c");
      MockIOException mockIOException0 = new MockIOException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClassUtil.nonNull((CollectionType) null, (CollectionType) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isJacksonStdImpl(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class1 = Double.TYPE;
      ClassUtil.getConstructors(class1);
      ClassUtil.primitiveType(class0);
      String string0 = "1xQY";
      String string1 = "!V<|PV= ";
      int int0 = 2109;
      try { 
        MockFile.createTempFile("size", "size");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getGenericInterfaces(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getClassMethods(class0);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" slots -- suspect a DoS attack based on hash collisions.", batchUpdateException0);
      batchUpdateException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      TypeFactory.defaultInstance();
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      sQLIntegrityConstraintViolationException0.printStackTrace();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) " slots -- suspect a DoS attack based on hash collisions.", " slots -- suspect a DoS attack based on hash collisions.");
      ClassUtil.getGenericInterfaces(class0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         //  slots -- suspect a DoS attack based on hash collisions. (through reference chain: java.lang.String[\" slots -- suspect a DoS attack based on hash collisions.\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isBogusClass(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.primitiveType(class0);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getDeclaredAnnotations();
      classUtil_Ctor1.getParameterAnnotations();
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[null]", "9x)ok qXx#Z@|H$V8");
      SQLDataException sQLDataException0 = new SQLDataException("?[V=E04<RB.5:!k1", sQLInvalidAuthorizationSpecException0);
      sQLDataException0.setNextException(sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("j).", "9x)ok qXx#Z@|H$V8", (-2616));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[null]", "");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: [null]
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.isAnnotationPresent(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class3 = Annotation.class;
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.isAnnotationPresent(class3);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      Throwable throwable0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.RuntimeJsonMappingException");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "com.fasterxml.jackson.databind.RuntimeJsonMappingException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotation(class1);
      classUtil_Ctor0.getDeclaredAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      Class<Object> class2 = Object.class;
      ClassUtil.hasClass(constructor1, class2);
      ClassUtil.getClassMethods(class0);
      ClassUtil.emptyIterator();
      System.setCurrentTimeMillis(0L);
      Class<MapType> class3 = MapType.class;
      ClassUtil.canBeABeanType(class3);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(" slots -- suspect a DoS attack based on hash collisions.", batchUpdateException0);
      batchUpdateException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      TypeFactory.defaultInstance();
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, (Object) " slots -- suspect a DoS attack based on hash collisions.", " slots -- suspect a DoS attack based on hash collisions.");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         //  slots -- suspect a DoS attack based on hash collisions. (through reference chain: java.lang.String[\" slots -- suspect a DoS attack based on hash collisions.\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      configOverrides0.findOrCreateOverride(class0);
      configOverrides0.getDefaultMergeable();
      configOverrides0.setDefaultMergeable((Boolean) null);
      ConfigOverrides configOverrides1 = configOverrides0.copy();
      configOverrides1.setDefaultMergeable((Boolean) null);
      configOverrides1.getDefaultMergeable();
      configOverrides0.setDefaultMergeable((Boolean) null);
      Class<Integer> class1 = Integer.class;
      configOverrides0.findOrCreateOverride(class1);
      configOverrides0.getDefaultVisibility();
      configOverrides0.getDefaultInclusion();
      configOverrides0.findOverride(class0);
      configOverrides0.copy();
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "keyUniverse");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float float0 = new Float(0.0);
      ClassUtil.getClassDescription(float0);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.nonNullString((String) null);
      ClassUtil.getClassDescription("");
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ClassUtil.classNameOf((Object) null);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isConcrete(class0);
      int[] intArray0 = new int[0];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      SQLWarning sQLWarning0 = new SQLWarning("[null]", "<>LTo\"DB", sQLTimeoutException0);
      MockIOException mockIOException0 = new MockIOException("<>LTo\"DB", sQLWarning0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[null]", intArray0, mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0, "QF7[e|w`B9;5dMk!J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // QF7[e|w`B9;5dMk!J
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ClassUtil.classNameOf((Object) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isJacksonStdImpl(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.hasClass(class0, class2);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class3);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      MockException mockException0 = new MockException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, (String) null, (Throwable) mockException0);
      ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ClassUtil.nonNull((CollectionType) null, (CollectionType) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<String> class1 = String.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) vector0);
      // Undeclared exception!
      try { 
        ArrayType.construct((JavaType) null, typeBindings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredFields(class0);
      Class<String> class1 = String.class;
      ClassUtil.getClassMethods(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      Class<Integer> class3 = Integer.class;
      Class<JsonDeserializer> class4 = JsonDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class4, (JavaType) mapType0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) mapType0;
      javaTypeArray0[1] = (JavaType) mapType0;
      javaTypeArray0[2] = (JavaType) mapType0;
      javaTypeArray0[3] = (JavaType) mapType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class3, typeBindings0, (JavaType) mapType0, javaTypeArray0, javaTypeArray0[0]);
      MapType mapType1 = mapType0.withKeyValueHandler(collectionType0);
      MapType mapType2 = mapType1.withContentTypeHandler(typeBindings0);
      MapType mapType3 = mapType2.withKeyTypeHandler(mapType0);
      ClassUtil.findSuperTypes((JavaType) mapType3, (Class<?>) class3, false);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Float float0 = new Float(0.0F);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = new Character('m');
      Character character1 = Character.valueOf('k');
      ClassUtil.nonNull(character0, character1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[5];
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.AUTO_DETECT_FIELDS;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL;
      mapperFeatureArray0[4] = mapperFeature4;
      ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
      objectMapper1.writeTree(jsonGenerator0, (TreeNode) objectNode0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("serialVersionUID", ">Bn10zF-$Cd", (-2));
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0, ">Bn10zF-$Cd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // >Bn10zF-$Cd
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Float float0 = new Float(0.0F);
      ClassUtil.isJacksonStdImpl((Object) class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0, "com.fasterxml.jackson.databind.cfg.BaseSettings");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.cfg.BaseSettings
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<Float> class2 = Float.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil classUtil0 = new ClassUtil();
      int int0 = (-2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "u-5pn /7`M");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, (-2), jsonMappingException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockError mockError0 = new MockError(sQLSyntaxErrorException0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        MockDateFormat.getDateTimeInstance((-2110), (-5085), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -5085
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findEnumType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ClassUtil.getOuterClass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getConstructors(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(" size", " size", sQLNonTransientConnectionException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isBogusClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) bufferedOutputStream0, jsonEncoding0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("[null]", "j).");
      sQLDataException0.setNextException(sQLInvalidAuthorizationSpecException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON", sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) bufferedOutputStream0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<NullNode> class1 = NullNode.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.classOf((Object) null);
      ClassUtil.quotedOr((Object) null, "z$f&l7");
      ClassUtil.backticked("bTj@f[I!h)^Vmq");
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findSuperClasses(class2, class3, true);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.nonNullString("UzFE-A,ys!g\"");
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, ";}<`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ;}<`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.hasEnclosingMethod(class2);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isNonStaticInnerClass(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GXjWW7umv");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("GXjWW7umv", "org.hibernate.proxy.java.lang.RuntimeException", Integer.MAX_VALUE, sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.initCause(sQLRecoverableException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(" has no default (no arg) constructor", "GXjWW7umv", sQLTransactionRollbackException0);
      sQLSyntaxErrorException0.printStackTrace();
      SQLDataException sQLDataException0 = new SQLDataException(" has no default (no arg) constructor", " has no default (no arg) constructor", sQLSyntaxErrorException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isProxyType(class0);
      Object object0 = new Object();
      JsonDeserializer<Void> jsonDeserializer0 = (JsonDeserializer<Void>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      ClassUtil.nonNull(jsonDeserializer0, jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Float float0 = new Float(0.0F);
      ClassUtil.classNameOf(float0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("[:f8U");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary", " size", sQLNonTransientConnectionException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("gm^odvC1STKGy$t1}f2", "f>FL", (-1271));
      sQLNonTransientConnectionException0.getSuppressed();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      Throwable throwable0 = sQLNonTransientConnectionException0.fillInStackTrace();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      sQLNonTransientConnectionException0.spliterator();
      sQLNonTransientConnectionException0.spliterator();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NULL");
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      ClassUtil.throwIfRTE(sQLNonTransientConnectionException0);
      Class<String> class1 = String.class;
      ClassUtil.getPackageName(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.findEnumType(class2);
      String string0 = "net.sf.cglib.proxy.";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, "net.sf.cglib.proxy.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isBogusClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.hasEnclosingMethod(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.getConstructors(class2);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.findEnumType(class3);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = new Character('m');
      Character character1 = ClassUtil.nonNull(character0, character0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, character1, false);
      int int0 = 1634;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectMapper0.writeTree(jsonGenerator0, (TreeNode) objectNode0);
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findConstructor(class1, true);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.getConstructors(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.findEnumType(class4);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      String string0 = "Failed to find default constructor of class ";
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "Failed to find default constructor of class ");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      Object[] objectArray0 = new Object[7];
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Double> class5 = Double.class;
      Class<MapLikeType> class6 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class6, (JavaType[]) null);
      Class<IOException> class7 = IOException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class7);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class5, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      CollectionType collectionType1 = collectionType0.withValueHandler(objectMapper1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(collectionType1, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ClassUtil.nonNullString("Sub-class %s (of class %s) must override method '%s'");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "entrySet", (Throwable) sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "Sub-class %s (of class %s) must override method '%s'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sub-class %s (of class %s) must override method '%s'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ClassUtil.nonNullString("Sub-class %s (of class %s) must override method '%s'");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "entrySet", (Throwable) sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "Sub-class %s (of class %s) must override method '%s'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sub-class %s (of class %s) must override method '%s'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.nameOf((Named) null);
      ClassUtil.nullOrToString("[null]");
      ClassUtil.nameOf((Named) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = Character.valueOf('8');
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, false);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, true, 1, 1033);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[null]", "size", Integer.MAX_VALUE, dataTruncation0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "[null]", Integer.MAX_VALUE);
      sQLTransactionRollbackException0.initCause(sQLIntegrityConstraintViolationException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("size", "size", sQLRecoverableException0);
      sQLSyntaxErrorException0.printStackTrace();
      SQLDataException sQLDataException0 = new SQLDataException("[null]", "T H", sQLTransactionRollbackException0);
      ClassUtil.getRootCause(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Float float0 = new Float(0.0);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getClassMethods(class0);
      Class<NoClass> class1 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class1, "{@ZB^5jMDKt");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.annotation.NoClass) must override method '{@ZB^5jMDKt'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getClassDescription(class0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = ClassUtil.getClassDescription(float0);
      assertEquals("`java.lang.Float`", string0);
      assertNotNull(string0);
      
      Class<ArrayType> class0 = ArrayType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(31, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<MapType> class1 = MapType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = new Character('m');
      Character character1 = ClassUtil.nonNull(character0, character0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, character1, false);
      int int0 = 1634;
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<Error> class1 = Error.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.classOf(class1);
      ClassUtil.quotedOr(list0, "z$f&l7");
      ClassUtil.backticked("\"[class java.lang.Number, class java.lang.Object]\"");
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.findSuperClasses(class0, class2, false);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isConcrete(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.findConstructor(class3, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[5];
      annotationMapArray0[0] = annotationMap0;
      annotationMapArray0[1] = annotationMap0;
      annotationMapArray0[2] = annotationMap0;
      annotationMapArray0[3] = annotationMap0;
      annotationMapArray0[4] = annotationMap0;
      AnnotatedConstructor annotatedConstructor0 = null;
      try {
        annotatedConstructor0 = new AnnotatedConstructor(typeResolutionContext_Basic0, (Constructor<?>) null, annotationMap0, annotationMapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null constructor not allowed
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.getConstructors(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isBogusClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.hasClass((Object) null, class0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Character> class1 = Character.class;
      boolean boolean0 = true;
      ClassUtil.findConstructor(class1, true);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[5];
      accessibleObjectArray0[0] = (AccessibleObject) null;
      accessibleObjectArray0[1] = (AccessibleObject) null;
      accessibleObjectArray0[2] = (AccessibleObject) null;
      accessibleObjectArray0[3] = (AccessibleObject) null;
      accessibleObjectArray0[4] = (AccessibleObject) null;
      // Undeclared exception!
      try { 
        AccessibleObject.setAccessible(accessibleObjectArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Named named0 = null;
      ClassUtil.nameOf((Named) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isProxyType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = true;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getParameterCount();
      constructor0.getTypeParameters();
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getSuppressed();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      mockRuntimeException0.getSuppressed();
      mockRuntimeException0.printStackTrace();
      StackTraceElement stackTraceElement0 = new StackTraceElement("]!S", "ZERO_LENGTH_ENUM_ARRAY", "", 13);
      stackTraceElementArray0[0] = stackTraceElement0;
      mockRuntimeException0.setStackTrace(stackTraceElementArray0);
      mockRuntimeException0.printStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("]!S", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.isConcrete(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      sQLNonTransientException0.getSuppressed();
      Throwable throwable0 = ClassUtil.throwIfError(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.getGenericSuperclass(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ClassUtil.nonNull((CollectionType) null, (CollectionType) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getConstructors(class1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("keyUniverse");
      JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) "keyUniverse", "lp_2k&sO0/.UY%");
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.getConstructors(class2);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.primitiveType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isJacksonStdImpl(class1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes(class0, class1);
      TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      Class<String> class3 = String.class;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.emptyIterator();
      Class<IOException> class1 = IOException.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getConstructors(class2);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.quotedOr(class0, "5*D|kD1SAYBF");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("vals", "vals", hashMap0);
      Throwable throwable0 = ClassUtil.throwIfError(sQLClientInfoException0);
      MockError mockError0 = new MockError("\"class com.fasterxml.jackson.databind.type.CollectionType\"", throwable0);
      sQLClientInfoException0.getStackTrace();
      sQLClientInfoException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        mockError0.printStackTrace((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<NoClass> class1 = NoClass.class;
      boolean boolean0 = true;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getParameterCount();
      constructor0.getTypeParameters();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getClassMethods(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(objectMapper0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      ObjectReader objectReader2 = objectReader1.with(formatFeature0);
      TypeFactory typeFactory0 = objectReader2.getTypeFactory();
      Class<String> class1 = String.class;
      JavaType[] javaTypeArray0 = new JavaType[3];
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<Boolean> class2 = Boolean.class;
      String string0 = "'Tb@X-VSOZ";
      Class<Integer> class3 = Integer.class;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        ReferenceType.construct(class3, typeBindings0, (JavaType) null, javaTypeArray0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.isJacksonStdImpl((Object) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0, "enum");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // enum
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.isNonStaticInnerClass(class1);
      ClassUtil.nameOf((Named) null);
      ClassUtil.nullOrToString("[null]");
      ClassUtil.nameOf((Named) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Character character0 = Character.valueOf('8');
      IOContext iOContext0 = new IOContext(bufferRecycler0, character0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("[null]");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, mockPrintStream1);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(2, 3);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("java.lang.String@0000000001", "[null]", 3);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLSyntaxErrorException: java.lang.String@0000000001
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      Class<Double> class2 = Double.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertNotNull(simpleType0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      SimpleType simpleType1 = simpleType0.withTypeHandler(double1);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType1, simpleType0);
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType1.hasHandlers());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.hasContentType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isAbstract());
      assertTrue(simpleType1.isFinal());
      assertFalse(simpleType1.isJavaLangObject());
      assertTrue(simpleType1.isConcrete());
      assertNotNull(simpleType1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(simpleType1.equals((Object)simpleType0));
      
      SimpleType simpleType2 = simpleType0.withStaticTyping();
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType0, simpleType2);
      assertNotSame(simpleType2, simpleType1);
      assertNotSame(simpleType2, simpleType0);
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType2.isInterface());
      assertFalse(simpleType2.hasHandlers());
      assertFalse(simpleType2.isPrimitive());
      assertTrue(simpleType2.isConcrete());
      assertFalse(simpleType2.hasContentType());
      assertFalse(simpleType2.isCollectionLikeType());
      assertTrue(simpleType2.isFinal());
      assertTrue(simpleType2.useStaticType());
      assertEquals(0, simpleType2.containedTypeCount());
      assertFalse(simpleType2.isJavaLangObject());
      assertFalse(simpleType2.isAbstract());
      assertFalse(simpleType2.isEnumType());
      assertFalse(simpleType2.isMapLikeType());
      assertFalse(simpleType2.isContainerType());
      assertFalse(simpleType2.hasValueHandler());
      assertFalse(simpleType2.isArrayType());
      assertNotNull(simpleType2);
      assertTrue(simpleType0.equals((Object)simpleType1));
      assertTrue(simpleType2.equals((Object)simpleType1));
      assertTrue(simpleType2.equals((Object)simpleType0));
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      String string0 = "+Y?5;K\"\\";
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.missingTypeIdException(simpleType1, "+Y?5;K\"");
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType0, simpleType2);
      assertNotSame(simpleType1, simpleType0);
      assertNotSame(simpleType1, simpleType2);
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType1.hasHandlers());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.hasContentType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isAbstract());
      assertTrue(simpleType1.isFinal());
      assertFalse(simpleType1.isJavaLangObject());
      assertTrue(simpleType1.isConcrete());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(invalidTypeIdException0.getTypeId());
      assertNotNull(invalidTypeIdException0);
      assertTrue(simpleType0.equals((Object)simpleType1));
      assertTrue(simpleType0.equals((Object)simpleType2));
      assertEquals((double)double1, (double)double0, 0.01);
      assertTrue(simpleType1.equals((Object)simpleType2));
      assertTrue(simpleType1.equals((Object)simpleType0));
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, false);
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      Constructor constructor1 = (Constructor)ClassUtil.nonNull((AccessibleObject) constructor0, (AccessibleObject) constructor0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.setAttribute(list0, constructor1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<Void> class2 = Void.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertNotNull(simpleType0);
      
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) null, (JavaType) simpleType0, (JavaType) simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings$TypeParamStash", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.nonNullString("UzFE-A,ys!g\"");
      assertEquals("UzFE-A,ys!g\"", string0);
      assertNotNull(string0);
      
      Class<String> class2 = String.class;
      Class class3 = (Class)ClassUtil.getGenericSuperclass(class2);
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.lang.Object", class3.toString());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertNotNull(class3);
      
      Class<?> class4 = ClassUtil.getEnclosingClass(class2);
      assertNull(class4);
      
      String string1 = ClassUtil.nullOrToString("UzFE-A,ys!g\"");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = ClassUtil.isLocalType(class2, true);
      assertNull(string2);
      
      Class<ResolvedRecursiveType> class5 = ResolvedRecursiveType.class;
      String string3 = ClassUtil.nameOf(class5);
      assertEquals("`com.fasterxml.jackson.databind.type.ResolvedRecursiveType`", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Class<AccessibleObject> class6 = AccessibleObject.class;
      String string4 = ClassUtil.isLocalType(class6, false);
      assertNull(string4);
      
      Class<IOException> class7 = IOException.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class7);
      assertFalse(boolean0);
      
      Class<Short> class8 = Short.class;
      String string5 = ClassUtil.nameOf(class8);
      assertEquals("`java.lang.Short`", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, class6, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("9W8AX%{U$tS|,C");
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      assertNotNull(mockPrintStream1);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertNotNull(iOContext1);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 69, (ObjectCodec) null, mockPrintStream0);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(69, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertNotNull(uTF8JsonGenerator0);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.overrideStdFeatures(0, 2);
      assertSame(iOContext0, iOContext1);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertSame(iOContext1, iOContext0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(69, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(69, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertNotNull(uTF8JsonGenerator1);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("UzFE-A,ys!g\"", "UzFE-A,ys!g\"", 0);
      assertEquals("java.sql.SQLSyntaxErrorException: UzFE-A,ys!g\"", sQLSyntaxErrorException0.toString());
      assertEquals("UzFE-A,ys!g\"", sQLSyntaxErrorException0.getMessage());
      assertEquals("UzFE-A,ys!g\"", sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) sQLFeatureNotSupportedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<String> class0 = String.class;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      assertNotNull(annotationIntrospector1);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-842));
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertNotNull(placeholderForType0);
      
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", placeholderForType0);
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertNotNull(virtualAnnotatedMember0);
      
      Field field0 = virtualAnnotatedMember0.getAnnotated();
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertNull(field0);
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertEquals(0, annotationMap0.size());
      assertNotNull(annotationMap0);
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      assertEquals(0, annotationMap0.size());
      assertEquals(0, annotatedField0.getAnnotationCount());
      assertNotNull(annotatedField0);
      
      PropertyName propertyName0 = new PropertyName("3o5!#h<XjL");
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("3o5!#h<XjL", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertNotNull(propertyName0);
      
      PropertyName propertyName1 = propertyName0.withSimpleName("com.fasterxml.jackso");
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(propertyName1, propertyName0);
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("3o5!#h<XjL", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName1.hasSimpleName());
      assertNull(propertyName1.getNamespace());
      assertFalse(propertyName1.isEmpty());
      assertEquals("com.fasterxml.jackso", propertyName1.getSimpleName());
      assertFalse(propertyName1.hasNamespace());
      assertNotNull(propertyName1);
      assertFalse(propertyName1.equals((Object)propertyName0));
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNotNull(propertyMetadata0);
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("3o5!#h<XjL");
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasIndex());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertEquals("3o5!#h<XjL", propertyMetadata1.getDescription());
      assertNotNull(propertyMetadata1);
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      
      JsonInclude.Value jsonInclude_Value0 = annotationIntrospector1.findPropertyInclusion(virtualAnnotatedMember0);
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertNotNull(jsonInclude_Value0);
      
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition(annotationIntrospector1, annotatedField0, propertyName1, propertyMetadata1, jsonInclude_Value0);
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, annotatedField0.getAnnotationCount());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("3o5!#h<XjL", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName1.hasSimpleName());
      assertNull(propertyName1.getNamespace());
      assertFalse(propertyName1.isEmpty());
      assertEquals("com.fasterxml.jackso", propertyName1.getSimpleName());
      assertFalse(propertyName1.hasNamespace());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasIndex());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertEquals("3o5!#h<XjL", propertyMetadata1.getDescription());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertFalse(simpleBeanPropertyDefinition0.hasConstructorParameter());
      assertFalse(simpleBeanPropertyDefinition0.isExplicitlyIncluded());
      assertTrue(simpleBeanPropertyDefinition0.hasField());
      assertFalse(simpleBeanPropertyDefinition0.isExplicitlyNamed());
      assertEquals("com.fasterxml.jackso", simpleBeanPropertyDefinition0.getName());
      assertNull(simpleBeanPropertyDefinition0.findReferenceName());
      assertEquals("com.fasterxml.jackso", simpleBeanPropertyDefinition0.getInternalName());
      assertFalse(simpleBeanPropertyDefinition0.isTypeId());
      assertNotNull(simpleBeanPropertyDefinition0);
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      
      BeanPropertyDefinition beanPropertyDefinition0 = simpleBeanPropertyDefinition0.withName(propertyName1);
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(propertyName1, propertyName0);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertSame(simpleBeanPropertyDefinition0, beanPropertyDefinition0);
      assertSame(beanPropertyDefinition0, simpleBeanPropertyDefinition0);
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, annotatedField0.getAnnotationCount());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("3o5!#h<XjL", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName1.hasSimpleName());
      assertNull(propertyName1.getNamespace());
      assertFalse(propertyName1.isEmpty());
      assertEquals("com.fasterxml.jackso", propertyName1.getSimpleName());
      assertFalse(propertyName1.hasNamespace());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasIndex());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertEquals("3o5!#h<XjL", propertyMetadata1.getDescription());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertFalse(simpleBeanPropertyDefinition0.hasConstructorParameter());
      assertFalse(simpleBeanPropertyDefinition0.isExplicitlyIncluded());
      assertTrue(simpleBeanPropertyDefinition0.hasField());
      assertFalse(simpleBeanPropertyDefinition0.isExplicitlyNamed());
      assertEquals("com.fasterxml.jackso", simpleBeanPropertyDefinition0.getName());
      assertNull(simpleBeanPropertyDefinition0.findReferenceName());
      assertEquals("com.fasterxml.jackso", simpleBeanPropertyDefinition0.getInternalName());
      assertFalse(simpleBeanPropertyDefinition0.isTypeId());
      assertEquals("com.fasterxml.jackso", beanPropertyDefinition0.getName());
      assertNull(beanPropertyDefinition0.findReferenceName());
      assertEquals("com.fasterxml.jackso", beanPropertyDefinition0.getInternalName());
      assertFalse(beanPropertyDefinition0.isTypeId());
      assertFalse(beanPropertyDefinition0.isExplicitlyIncluded());
      assertFalse(beanPropertyDefinition0.hasConstructorParameter());
      assertTrue(beanPropertyDefinition0.hasField());
      assertFalse(beanPropertyDefinition0.isExplicitlyNamed());
      assertNotNull(beanPropertyDefinition0);
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      
      String string0 = ClassUtil.nameOf((Named) beanPropertyDefinition0);
      assertNotSame(propertyName0, propertyName1);
      assertNotSame(propertyName1, propertyName0);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertSame(simpleBeanPropertyDefinition0, beanPropertyDefinition0);
      assertSame(beanPropertyDefinition0, simpleBeanPropertyDefinition0);
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, annotationMap0.size());
      assertEquals(0, annotatedField0.getAnnotationCount());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("3o5!#h<XjL", propertyName0.getSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName1.hasSimpleName());
      assertNull(propertyName1.getNamespace());
      assertFalse(propertyName1.isEmpty());
      assertEquals("com.fasterxml.jackso", propertyName1.getSimpleName());
      assertFalse(propertyName1.hasNamespace());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.getRequired());
      assertFalse(propertyMetadata1.hasIndex());
      assertFalse(propertyMetadata1.hasDefaultValue());
      assertNull(propertyMetadata1.getContentNulls());
      assertNull(propertyMetadata1.getIndex());
      assertNull(propertyMetadata1.getValueNulls());
      assertTrue(propertyMetadata1.isRequired());
      assertEquals("3o5!#h<XjL", propertyMetadata1.getDescription());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertFalse(simpleBeanPropertyDefinition0.hasConstructorParameter());
      assertFalse(simpleBeanPropertyDefinition0.isExplicitlyIncluded());
      assertTrue(simpleBeanPropertyDefinition0.hasField());
      assertFalse(simpleBeanPropertyDefinition0.isExplicitlyNamed());
      assertEquals("com.fasterxml.jackso", simpleBeanPropertyDefinition0.getName());
      assertNull(simpleBeanPropertyDefinition0.findReferenceName());
      assertEquals("com.fasterxml.jackso", simpleBeanPropertyDefinition0.getInternalName());
      assertFalse(simpleBeanPropertyDefinition0.isTypeId());
      assertEquals("com.fasterxml.jackso", beanPropertyDefinition0.getName());
      assertNull(beanPropertyDefinition0.findReferenceName());
      assertEquals("com.fasterxml.jackso", beanPropertyDefinition0.getInternalName());
      assertFalse(beanPropertyDefinition0.isTypeId());
      assertFalse(beanPropertyDefinition0.isExplicitlyIncluded());
      assertFalse(beanPropertyDefinition0.hasConstructorParameter());
      assertTrue(beanPropertyDefinition0.hasField());
      assertFalse(beanPropertyDefinition0.isExplicitlyNamed());
      assertEquals("`com.fasterxml.jackso`", string0);
      assertNotNull(string0);
      assertFalse(propertyName0.equals((Object)propertyName1));
      assertFalse(propertyName1.equals((Object)propertyName0));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.nonNullString("UzFE-A,ys!g\"");
      assertEquals("UzFE-A,ys!g\"", string0);
      assertNotNull(string0);
      
      Class<String> class2 = String.class;
      Class class3 = (Class)ClassUtil.getGenericSuperclass(class2);
      assertFalse(class3.isAnnotation());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      assertNotNull(class3);
      
      Class<?> class4 = ClassUtil.getEnclosingClass(class2);
      assertNull(class4);
      
      String string1 = ClassUtil.nullOrToString("UzFE-A,ys!g\"");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = ClassUtil.isLocalType(class2, true);
      assertNull(string2);
      
      Class<ResolvedRecursiveType> class5 = ResolvedRecursiveType.class;
      String string3 = ClassUtil.nameOf(class5);
      assertEquals("`com.fasterxml.jackson.databind.type.ResolvedRecursiveType`", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Class<AccessibleObject> class6 = AccessibleObject.class;
      String string4 = ClassUtil.isLocalType(class6, false);
      assertNull(string4);
      
      Class<IOException> class7 = IOException.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class7);
      assertFalse(boolean0);
      
      Class<Short> class8 = Short.class;
      String string5 = ClassUtil.nameOf(class8);
      assertEquals("`java.lang.Short`", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[null]", "UzFE-A,ys!g\"");
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("UzFE-A,ys!g\"", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: [null]", sQLFeatureNotSupportedException0.toString());
      assertEquals("[null]", sQLFeatureNotSupportedException0.getMessage());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      Class<Short> class9 = Short.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class9);
      assertSame(class9, class8);
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isInterface());
      assertNotNull(simpleType0);
      
      SimpleType simpleType1 = simpleType0.withTypeHandler(class0);
      assertSame(class9, class8);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType1, simpleType0);
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isPrimitive());
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.isJavaLangObject());
      assertTrue(simpleType1.isFinal());
      assertTrue(simpleType1.hasHandlers());
      assertFalse(simpleType1.isEnumType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.hasValueHandler());
      assertNotNull(simpleType1);
      assertTrue(simpleType1.equals((Object)simpleType0));
      
      SimpleType simpleType2 = simpleType1.withStaticTyping();
      assertSame(class9, class8);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType0, simpleType2);
      assertNotSame(simpleType1, simpleType2);
      assertNotSame(simpleType1, simpleType0);
      assertNotSame(simpleType2, simpleType1);
      assertNotSame(simpleType2, simpleType0);
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isPrimitive());
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.isJavaLangObject());
      assertTrue(simpleType1.isFinal());
      assertTrue(simpleType1.hasHandlers());
      assertFalse(simpleType1.isEnumType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType2.hasContentType());
      assertFalse(simpleType2.isPrimitive());
      assertFalse(simpleType2.isMapLikeType());
      assertFalse(simpleType2.isJavaLangObject());
      assertTrue(simpleType2.hasHandlers());
      assertTrue(simpleType2.isFinal());
      assertFalse(simpleType2.isContainerType());
      assertTrue(simpleType2.isConcrete());
      assertFalse(simpleType2.isAbstract());
      assertFalse(simpleType2.isEnumType());
      assertFalse(simpleType2.isCollectionLikeType());
      assertEquals(0, simpleType2.containedTypeCount());
      assertFalse(simpleType2.isInterface());
      assertFalse(simpleType2.isArrayType());
      assertTrue(simpleType2.useStaticType());
      assertFalse(simpleType2.hasValueHandler());
      assertNotNull(simpleType2);
      assertTrue(simpleType0.equals((Object)simpleType1));
      assertTrue(simpleType1.equals((Object)simpleType0));
      assertTrue(simpleType2.equals((Object)simpleType0));
      assertTrue(simpleType2.equals((Object)simpleType1));
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.missingTypeIdException(simpleType2, "@");
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertSame(class9, class8);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType0, simpleType2);
      assertNotSame(simpleType1, simpleType2);
      assertNotSame(simpleType1, simpleType0);
      assertNotSame(simpleType2, simpleType1);
      assertNotSame(simpleType2, simpleType0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isPrimitive());
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.isJavaLangObject());
      assertTrue(simpleType1.isFinal());
      assertTrue(simpleType1.hasHandlers());
      assertFalse(simpleType1.isEnumType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType2.hasContentType());
      assertFalse(simpleType2.isPrimitive());
      assertFalse(simpleType2.isMapLikeType());
      assertFalse(simpleType2.isJavaLangObject());
      assertTrue(simpleType2.hasHandlers());
      assertTrue(simpleType2.isFinal());
      assertFalse(simpleType2.isContainerType());
      assertTrue(simpleType2.isConcrete());
      assertFalse(simpleType2.isAbstract());
      assertFalse(simpleType2.isEnumType());
      assertFalse(simpleType2.isCollectionLikeType());
      assertEquals(0, simpleType2.containedTypeCount());
      assertFalse(simpleType2.isInterface());
      assertFalse(simpleType2.isArrayType());
      assertTrue(simpleType2.useStaticType());
      assertFalse(simpleType2.hasValueHandler());
      assertNull(invalidTypeIdException0.getTypeId());
      assertNotNull(invalidTypeIdException0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertTrue(simpleType0.equals((Object)simpleType2));
      assertTrue(simpleType0.equals((Object)simpleType1));
      assertTrue(simpleType1.equals((Object)simpleType2));
      assertTrue(simpleType1.equals((Object)simpleType0));
      assertTrue(simpleType2.equals((Object)simpleType0));
      assertTrue(simpleType2.equals((Object)simpleType1));
      
      sQLFeatureNotSupportedException0.addSuppressed(invalidTypeIdException0);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertSame(class9, class8);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType0, simpleType2);
      assertNotSame(simpleType1, simpleType2);
      assertNotSame(simpleType1, simpleType0);
      assertNotSame(simpleType2, simpleType1);
      assertNotSame(simpleType2, simpleType0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("UzFE-A,ys!g\"", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: [null]", sQLFeatureNotSupportedException0.toString());
      assertEquals("[null]", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isPrimitive());
      assertTrue(simpleType1.isConcrete());
      assertFalse(simpleType1.isJavaLangObject());
      assertTrue(simpleType1.isFinal());
      assertTrue(simpleType1.hasHandlers());
      assertFalse(simpleType1.isEnumType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isAbstract());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.useStaticType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType2.hasContentType());
      assertFalse(simpleType2.isPrimitive());
      assertFalse(simpleType2.isMapLikeType());
      assertFalse(simpleType2.isJavaLangObject());
      assertTrue(simpleType2.hasHandlers());
      assertTrue(simpleType2.isFinal());
      assertFalse(simpleType2.isContainerType());
      assertTrue(simpleType2.isConcrete());
      assertFalse(simpleType2.isAbstract());
      assertFalse(simpleType2.isEnumType());
      assertFalse(simpleType2.isCollectionLikeType());
      assertEquals(0, simpleType2.containedTypeCount());
      assertFalse(simpleType2.isInterface());
      assertFalse(simpleType2.isArrayType());
      assertTrue(simpleType2.useStaticType());
      assertFalse(simpleType2.hasValueHandler());
      assertNull(invalidTypeIdException0.getTypeId());
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertTrue(simpleType0.equals((Object)simpleType2));
      assertTrue(simpleType0.equals((Object)simpleType1));
      assertTrue(simpleType1.equals((Object)simpleType2));
      assertTrue(simpleType1.equals((Object)simpleType0));
      assertTrue(simpleType2.equals((Object)simpleType0));
      assertTrue(simpleType2.equals((Object)simpleType1));
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      assertSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("UzFE-A,ys!g\"", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: [null]", sQLFeatureNotSupportedException0.toString());
      assertEquals("[null]", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: [null]", sQLFeatureNotSupportedException1.toString());
      assertEquals("[null]", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("UzFE-A,ys!g\"", sQLFeatureNotSupportedException1.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException1);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class7);
      assertEquals(4, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class0);
      assertFalse(boolean0);
      
      Class<Integer> class1 = Integer.TYPE;
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      Class<?> class2 = ClassUtil.wrapperType(class1);
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Integer", class2.toString());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<String> class0 = String.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<Float> class1 = Float.TYPE;
      assertEquals("float", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      String string0 = ClassUtil.getPackageName(class1);
      assertEquals("float", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertNull(string0);
      
      String string1 = ClassUtil.backticked("NULL");
      assertEquals("`NULL`", string1);
      assertNotNull(string1);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Long> class2 = Long.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("class java.lang.Number", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertEquals(1025, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertNotNull(class3);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Exception", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Class<Double> class2 = Double.class;
      Class<IOException> class3 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class3);
      assertSame(class3, class0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      List<Class<?>> list1 = ClassUtil.findSuperClasses(class0, class0, true);
      assertSame(class0, class3);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      ClassUtil.hasClass(list0, class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getConstructors(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.findRawSuperTypes(class2, class3, true);
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.hasEnclosingMethod(class4);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Short short0 = new Short((short)0);
      ClassUtil.classNameOf(short0);
      Class<IOException> class0 = IOException.class;
      ClassUtil.findClassAnnotations(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.primitiveType(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      // Undeclared exception!
      try { 
        placeholderForType0.withContentValueHandler("`java.lang.Short`");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.backticked("NULL");
      Class<Long> class2 = Long.class;
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaringClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.canBeABeanType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getDeclaringClass(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<NoClass> class2 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getDeclaredFields(class1);
      String string0 = ClassUtil.backticked((String) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ClassUtil.nonNullString("w[eO]!e4Wv;\".m{>\"");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("serialVersionUID", "w[eO]!e4Wv;\".m{>\"", 1);
      sQLIntegrityConstraintViolationException0.spliterator();
      sQLIntegrityConstraintViolationException0.fillInStackTrace();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("entrySet");
      PrintWriter printWriter0 = mockPrintWriter0.append('.');
      sQLIntegrityConstraintViolationException0.printStackTrace(printWriter0);
      sQLIntegrityConstraintViolationException0.getLocalizedMessage();
      sQLIntegrityConstraintViolationException0.getStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("serialVersionUID");
      sQLTransactionRollbackException0.setNextException(sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLIntegrityConstraintViolationException0, "g\"G({_AwQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // g\"G({_AwQ
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Object> class1 = Object.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      String string0 = "{u%8q}*AO6'/IYT-";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class1, "{u%8q}*AO6'/IYT-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }
}
