/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 05:42:43 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JacksonInject;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLSerializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.File;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackReader;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.AnnotatedType;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.URL;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.Spliterator;
import java.util.function.Consumer;
import javax.xml.datatype.XMLGregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Character", class1.toString());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(serializationFeature0);
      assertNotNull(objectReader0);
      
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Integer", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("int", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      assertNull(jsonGenerator0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNotNull(jsonFactory1);
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNotNull(jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory2.createNonBlockingByteArrayParser();
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNotNull(nonBlockingJsonParser0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      MismatchedInputException mismatchedInputException0 = (MismatchedInputException)defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) nonBlockingJsonParser0, (Class<?>) class1, jsonToken0, "JSON");
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertNotNull(mismatchedInputException0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mismatchedInputException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NULL: JSON
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class0);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertEquals(0, enumMap0.size());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertEquals(16401, class1.getModifiers());
      assertNotNull(class1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(10241, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNotNull(readerBasedJsonParser0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertArrayEquals(new char[] {'4'}, charArray0);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      MismatchedInputException mismatchedInputException0 = (MismatchedInputException)defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class2, jsonToken0, "JSON");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertEquals(1, charArray0.length);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(10241, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNotNull(mismatchedInputException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertArrayEquals(new char[] {'4'}, charArray0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mismatchedInputException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_FLOAT: JSON
         //  at [Source: (char[])\"4\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertNotNull(class0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals((short)0, object0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<SimpleModule>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("{TEyWZ", "\"%s\"", (-2355), sQLNonTransientException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("{TEyWZ", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: {TEyWZ", sQLNonTransientConnectionException0.toString());
      assertEquals("\"%s\"", sQLNonTransientConnectionException0.getSQLState());
      assertEquals((-2355), sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLNonTransientException sQLNonTransientException1 = (SQLNonTransientException)sQLNonTransientException0.initCause(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNull(sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("{TEyWZ", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: {TEyWZ", sQLNonTransientConnectionException0.toString());
      assertEquals("\"%s\"", sQLNonTransientConnectionException0.getSQLState());
      assertEquals((-2355), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLNonTransientException1.getErrorCode());
      assertNull(sQLNonTransientException1.getSQLState());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException1.toString());
      assertNull(sQLNonTransientException1.getMessage());
      assertNotNull(sQLNonTransientException1);
      assertSame(sQLNonTransientException0, sQLNonTransientException1);
      assertSame(sQLNonTransientException1, sQLNonTransientException0);
      
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.Float", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      Class<IOException> class1 = IOException.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean0);
      assertSame(class1, class0);
      
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      String string0 = ClassUtil.isLocalType(class2, false);
      assertNull(string0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertNotNull(constructor1);
      assertSame(class0, class1);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotationArray0);
      assertSame(class0, class1);
      
      String string1 = ClassUtil.nonNullString("com.fasterxml.jackson.databind.deser.impl.CreatorCollector");
      assertEquals("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", string1);
      assertNotNull(string1);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertSame(class0, class1);
      
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      boolean boolean1 = ClassUtil.isConcrete((Member) constructor1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isAccessible());
      assertFalse(constructor1.isSynthetic());
      assertSame(class0, class1);
      
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.deser.impl.CreatorCollector");
      assertEquals("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: com.fasterxml.jackson.databind.deser.impl.CreatorCollector", sQLDataException0.toString());
      assertNotNull(sQLDataException0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      assertNotNull(mockRuntimeException0);
      
      Throwable throwable0 = ClassUtil.throwIfError(mockRuntimeException0);
      assertEquals("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: com.fasterxml.jackson.databind.deser.impl.CreatorCollector", sQLDataException0.toString());
      assertNotNull(throwable0);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertSame(class0, class1);
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.pair((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      assertNotNull(annotationIntrospector0);
      
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertNotNull(valueInstantiator_Base0);
      
      AnnotatedWithParams annotatedWithParams0 = valueInstantiator_Base0.getArrayDelegateCreator();
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertNull(annotatedWithParams0);
      assertSame(class1, class0);
      
      Boolean boolean2 = Boolean.valueOf(false);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(boolean2);
      assertNotNull(boolean2);
      
      int int0 = 26;
      Integer integer0 = new Integer(26);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(26, (int)integer0);
      assertNotNull(integer0);
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean2, "D_", integer0, "com.fasterxml.jackson.databind.deser.impl.CreatorCollector");
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(propertyMetadata0.getRequired());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals("D_", propertyMetadata0.getDescription());
      assertEquals(26, (int)propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNotNull(propertyMetadata0);
      
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer0);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata0.getRequired());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals("D_", propertyMetadata0.getDescription());
      assertEquals(26, (int)propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals("D_", propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.isRequired());
      assertEquals(26, (int)propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.getRequired());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertNotNull(propertyMetadata1);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withDefaultValue("\"aAP");
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata0.getRequired());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals("D_", propertyMetadata0.getDescription());
      assertEquals(26, (int)propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals("D_", propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.isRequired());
      assertEquals(26, (int)propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.getRequired());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertTrue(propertyMetadata2.hasIndex());
      assertNull(propertyMetadata2.getValueNulls());
      assertEquals("D_", propertyMetadata2.getDescription());
      assertTrue(propertyMetadata2.hasDefaultValue());
      assertEquals("\"aAP", propertyMetadata2.getDefaultValue());
      assertNull(propertyMetadata2.getContentNulls());
      assertFalse(propertyMetadata2.isRequired());
      assertEquals(26, (int)propertyMetadata2.getIndex());
      assertFalse(propertyMetadata2.getRequired());
      assertNotNull(propertyMetadata2);
      assertNotSame(propertyMetadata0, propertyMetadata1);
      assertNotSame(propertyMetadata0, propertyMetadata2);
      assertNotSame(propertyMetadata1, propertyMetadata0);
      assertNotSame(propertyMetadata1, propertyMetadata2);
      assertNotSame(propertyMetadata2, propertyMetadata0);
      assertNotSame(propertyMetadata2, propertyMetadata1);
      
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      JsonInclude.Include jsonInclude_Include1 = JsonInclude.Include.NON_NULL;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include1);
      assertFalse(jsonInclude_Include0.equals((Object)jsonInclude_Include1));
      assertFalse(jsonInclude_Include1.equals((Object)jsonInclude_Include0));
      assertEquals(JsonInclude.Include.CUSTOM, jsonInclude_Value0.getValueInclusion());
      assertEquals(JsonInclude.Include.NON_NULL, jsonInclude_Value0.getContentInclusion());
      assertNotNull(jsonInclude_Value0);
      assertNotSame(jsonInclude_Include0, jsonInclude_Include1);
      assertNotSame(jsonInclude_Include1, jsonInclude_Include0);
      
      SimpleBeanPropertyDefinition simpleBeanPropertyDefinition0 = new SimpleBeanPropertyDefinition(annotationIntrospector0, (AnnotatedMember) null, (PropertyName) null, propertyMetadata2, jsonInclude_Value0);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata1));
      assertFalse(propertyMetadata0.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata1.equals((Object)propertyMetadata2));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata0));
      assertFalse(propertyMetadata2.equals((Object)propertyMetadata1));
      assertFalse(jsonInclude_Include0.equals((Object)jsonInclude_Include1));
      assertFalse(jsonInclude_Include1.equals((Object)jsonInclude_Include0));
      assertFalse(propertyMetadata0.getRequired());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", propertyMetadata0.getDefaultValue());
      assertTrue(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertEquals("D_", propertyMetadata0.getDescription());
      assertEquals(26, (int)propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertTrue(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata1.getValueNulls());
      assertEquals("D_", propertyMetadata1.getDescription());
      assertFalse(propertyMetadata1.isRequired());
      assertEquals(26, (int)propertyMetadata1.getIndex());
      assertFalse(propertyMetadata1.getRequired());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", propertyMetadata1.getDefaultValue());
      assertTrue(propertyMetadata1.hasIndex());
      assertNull(propertyMetadata1.getContentNulls());
      assertTrue(propertyMetadata1.hasDefaultValue());
      assertTrue(propertyMetadata2.hasIndex());
      assertNull(propertyMetadata2.getValueNulls());
      assertEquals("D_", propertyMetadata2.getDescription());
      assertTrue(propertyMetadata2.hasDefaultValue());
      assertEquals("\"aAP", propertyMetadata2.getDefaultValue());
      assertNull(propertyMetadata2.getContentNulls());
      assertFalse(propertyMetadata2.isRequired());
      assertEquals(26, (int)propertyMetadata2.getIndex());
      assertFalse(propertyMetadata2.getRequired());
      assertEquals(JsonInclude.Include.CUSTOM, jsonInclude_Value0.getValueInclusion());
      assertEquals(JsonInclude.Include.NON_NULL, jsonInclude_Value0.getContentInclusion());
      assertFalse(simpleBeanPropertyDefinition0.isExplicitlyIncluded());
      assertFalse(simpleBeanPropertyDefinition0.isTypeId());
      assertNull(simpleBeanPropertyDefinition0.findReferenceName());
      assertFalse(simpleBeanPropertyDefinition0.isExplicitlyNamed());
      assertFalse(simpleBeanPropertyDefinition0.hasField());
      assertFalse(simpleBeanPropertyDefinition0.hasConstructorParameter());
      assertNotNull(simpleBeanPropertyDefinition0);
      
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) simpleBeanPropertyDefinition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      Class<Void> class1 = Void.TYPE;
      assertFalse(class1.isAnnotation());
      assertEquals("void", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      boolean boolean0 = ClassUtil.isConcrete(class1);
      assertFalse(boolean0);
      assertFalse(class1.isAnnotation());
      assertEquals("void", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      assertFalse(class1.isAnnotation());
      assertEquals("void", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertNotNull(simpleType0);
      
      SimpleType simpleType1 = simpleType0.withValueHandler(class0);
      assertTrue(simpleType1.equals((Object)simpleType0));
      assertFalse(class1.isAnnotation());
      assertEquals("void", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType1.isAbstract());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.isContainerType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isJavaLangObject());
      assertTrue(simpleType1.isConcrete());
      assertTrue(simpleType1.hasHandlers());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.useStaticType());
      assertTrue(simpleType1.isPrimitive());
      assertTrue(simpleType1.isFinal());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.hasContentType());
      assertTrue(simpleType1.hasValueHandler());
      assertFalse(simpleType1.isEnumType());
      assertNotNull(simpleType1);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType1, simpleType0);
      
      Class<?> class2 = ClassUtil.rawClass(simpleType1);
      assertTrue(simpleType0.equals((Object)simpleType1));
      assertTrue(simpleType1.equals((Object)simpleType0));
      assertFalse(class1.isAnnotation());
      assertEquals("void", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isPrimitive());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertTrue(simpleType1.isAbstract());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.isContainerType());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isJavaLangObject());
      assertTrue(simpleType1.isConcrete());
      assertTrue(simpleType1.hasHandlers());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.useStaticType());
      assertTrue(simpleType1.isPrimitive());
      assertTrue(simpleType1.isFinal());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.hasContentType());
      assertTrue(simpleType1.hasValueHandler());
      assertFalse(simpleType1.isEnumType());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("void", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertNotNull(class2);
      assertNotSame(simpleType0, simpleType1);
      assertNotSame(simpleType1, simpleType0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0, object0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertNotNull(object0);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`long`", string0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(string0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Long", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Constructor<Void> constructor0 = ClassUtil.findConstructor(class0, true);
      assertEquals("private java.lang.Void()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertEquals("private java.lang.Void()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("primitive", string0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isSynthetic());
      assertNotNull(string0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0.0, object0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertEquals("double", class0.toString());
      assertFalse(class0.isSynthetic());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals((byte)0, object0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals('\u0000', object0);
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.Short", class1.toString());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Class<Double> class2 = Double.class;
      Class<ArrayType> class3 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class3);
      assertFalse(list0.contains(class1));
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<Error> class1 = Error.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<?> class2 = ClassUtil.wrapperType(class0);
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.Double", class2.toString());
      assertFalse(class2.isPrimitive());
      assertEquals(17, class2.getModifiers());
      assertNotNull(class2);
      
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class3);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = ClassUtil.isConcrete(class1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class4, class3, list0);
      assertFalse(list0.contains(class2));
      assertFalse(list1.contains(class2));
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertSame(list0, list1);
      assertSame(class3, class4);
      assertSame(class4, class3);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      Constructor<PlaceholderForType> constructor0 = ClassUtil.findConstructor(class2, false);
      assertNull(constructor0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("void", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("void", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      MockThrowable mockThrowable0 = new MockThrowable();
      assertNotNull(mockThrowable0);
      
      SQLDataException sQLDataException0 = new SQLDataException(mockThrowable0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("java.sql.SQLDataException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertNotNull(sQLDataException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(3361, false, false, 613, 763, sQLDataException0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("java.sql.SQLDataException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(dataTruncation0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable0.toString());
      assertNull(mockThrowable0.getMessage());
      assertEquals("java.sql.SQLDataException: org.evosuite.runtime.mock.java.lang.MockThrowable", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: java.sql.DataTruncation: Data truncation", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("java.sql.DataTruncation: Data truncation", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      MockError mockError0 = new MockError(sQLIntegrityConstraintViolationException0);
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "D*qkX");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Byte");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.util.Locale", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertNotNull(jsonGeneratorDelegate0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", 51);
      assertEquals(51, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", sQLSyntaxErrorException0.getSQLState());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, 51, sQLSyntaxErrorException0);
      assertEquals(51, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException", sQLSyntaxErrorException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(51, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Class<Float> class2 = Float.TYPE;
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("float", class2.toString());
      assertTrue(class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(".8m4b}O7", (String) null, (-2410));
      assertEquals(".8m4b}O7", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals((-2410), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: .8m4b}O7", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      String string1 = ClassUtil.nullOrToString((Object) null);
      assertNull(string1);
      
      Object object0 = ClassUtil.defaultValue(class2);
      assertEquals(0.0F, object0);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals("float", class2.toString());
      assertTrue(class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(object0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<LinkedList> class3 = LinkedList.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructCollectionType(class3, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1016987680) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Character> class0 = Character.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Class<Float> class1 = Float.TYPE;
      assertFalse(class1.isAnnotation());
      assertEquals("float", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(".8m4b}O7", (String) null, (-2410));
      assertEquals(".8m4b}O7", sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals((-2410), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: .8m4b}O7", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      String string1 = ClassUtil.nullOrToString((Object) null);
      assertNull(string1);
      
      Object object0 = ClassUtil.defaultValue(class1);
      assertEquals(0.0F, object0);
      assertFalse(class1.isAnnotation());
      assertEquals("float", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(object0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2410));
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertNotNull(placeholderForType0);
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) placeholderForType0);
      assertFalse(class1.isAnnotation());
      assertEquals("float", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      JavaType[] javaTypeArray0 = new JavaType[6];
      Class<Error> class2 = Error.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      assertFalse(class1.isAnnotation());
      assertEquals("float", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertNotNull(resolvedRecursiveType0);
      
      JavaType javaType0 = resolvedRecursiveType0.getSelfReferencedType();
      assertFalse(class1.isAnnotation());
      assertEquals("float", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertNull(javaType0);
      
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      Class<IOException> class3 = IOException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1, class0.getModifiers());
      assertEquals("class org.evosuite.shaded.org.mockito.codegen.Enum$MockitoMock$2110564972", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      Class<Short> class1 = Short.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      assertEquals(2, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertNotNull(constructor0);
      
      String string0 = ClassUtil.quotedOr((Object) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      MockThrowable mockThrowable0 = new MockThrowable("3'Cmf@\"{`XdVp");
      assertNotNull(mockThrowable0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockThrowable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3'Cmf@\"{`XdVp
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<FilterInputStream> class0 = FilterInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("Class ", class0, "Class ");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(" E:27]eNP6:))v", jsonMappingException0);
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      SimpleModule simpleModule0 = ClassUtil.createInstance(class0, true);
      assertEquals("SimpleModule-1", simpleModule0.getModuleName());
      assertNotNull(simpleModule0);
      
      Class<List> class1 = List.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class1);
      assertFalse(boolean0);
      
      MockException mockException0 = new MockException("localizedMessage");
      assertNotNull(mockException0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-105);
      intArray0[1] = (-105);
      intArray0[2] = (-105);
      intArray0[3] = (-105);
      intArray0[4] = (-105);
      intArray0[5] = (-105);
      intArray0[6] = (-105);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("U_~%qp", "[.U`", (-105), intArray0, mockException0);
      assertEquals(7, intArray0.length);
      assertEquals("[.U`", batchUpdateException0.getSQLState());
      assertEquals((-105), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: U_~%qp", batchUpdateException0.toString());
      assertEquals("U_~%qp", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-105), (-105), (-105), (-105), (-105), (-105), (-105)}, intArray0);
      
      MockThrowable mockThrowable0 = (MockThrowable)mockException0.initCause(batchUpdateException0);
      assertEquals(7, intArray0.length);
      assertEquals("[.U`", batchUpdateException0.getSQLState());
      assertEquals((-105), batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: U_~%qp", batchUpdateException0.toString());
      assertEquals("U_~%qp", batchUpdateException0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: localizedMessage", mockThrowable0.toString());
      assertEquals("localizedMessage", mockThrowable0.getMessage());
      assertNotNull(mockThrowable0);
      assertArrayEquals(new int[] {(-105), (-105), (-105), (-105), (-105), (-105), (-105)}, intArray0);
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockException0, "XN~n8[S.ah?");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.quotedOr((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Long> class0 = Long.class;
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.Long`", string0);
      assertNotNull(string0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      JavaType javaType0 = typeBindings0.findBoundType("a,m*p3/");
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNull(javaType0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl1.invalidTypeIdException((JavaType) null, "KC*8o6{l9n#", "`java.lang.Long`");
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals("KC*8o6{l9n#", invalidTypeIdException0.getTypeId());
      assertNotNull(invalidTypeIdException0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      try { 
        ClassUtil.throwRootCauseIfIOE(invalidTypeIdException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'KC*8o6{l9n#' as a subtype of null: `java.lang.Long`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "net.sf.cglib.proxy.java.lang.Object");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<FilterInputStream> class0 = FilterInputStream.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<Object> class2 = Object.class;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "enum");
      assertFalse(boolean0);
      
      Object object0 = ClassUtil.createInstance(class2, false);
      assertNotNull(object0);
      
      String string0 = ClassUtil.nameOf((Class<?>) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<List> class3 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class3);
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isFinal());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertNotNull(collectionType0);
      
      Long long0 = Long.valueOf(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      CollectionType collectionType1 = collectionType0.withContentValueHandler(long0);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isFinal());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType1.isConcrete());
      assertTrue(collectionType1.isAbstract());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isInterface());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.hasHandlers());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.useStaticType());
      assertNotNull(collectionType1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      
      CollectionType collectionType2 = collectionType1.withStaticTyping();
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isFinal());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType1.isConcrete());
      assertTrue(collectionType1.isAbstract());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isInterface());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.hasHandlers());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.useStaticType());
      assertTrue(collectionType2.useStaticType());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.isConcrete());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isJavaLangObject());
      assertTrue(collectionType2.isAbstract());
      assertTrue(collectionType2.hasHandlers());
      assertEquals(1, collectionType2.containedTypeCount());
      assertTrue(collectionType2.isContainerType());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isMapLikeType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.isInterface());
      assertNotNull(collectionType2);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      
      CollectionType collectionType3 = collectionType2.withTypeHandler((Object) null);
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertTrue(collectionType3.equals((Object)collectionType0));
      assertTrue(collectionType3.equals((Object)collectionType1));
      assertTrue(collectionType3.equals((Object)collectionType2));
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isFinal());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType1.isConcrete());
      assertTrue(collectionType1.isAbstract());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isInterface());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.hasHandlers());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.useStaticType());
      assertTrue(collectionType2.useStaticType());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.isConcrete());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isJavaLangObject());
      assertTrue(collectionType2.isAbstract());
      assertTrue(collectionType2.hasHandlers());
      assertEquals(1, collectionType2.containedTypeCount());
      assertTrue(collectionType2.isContainerType());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isMapLikeType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.isInterface());
      assertTrue(collectionType3.hasHandlers());
      assertTrue(collectionType3.isAbstract());
      assertTrue(collectionType3.isContainerType());
      assertFalse(collectionType3.isArrayType());
      assertEquals(1, collectionType3.containedTypeCount());
      assertFalse(collectionType3.hasValueHandler());
      assertTrue(collectionType3.useStaticType());
      assertFalse(collectionType3.isMapLikeType());
      assertFalse(collectionType3.isJavaLangObject());
      assertFalse(collectionType3.isPrimitive());
      assertFalse(collectionType3.isEnumType());
      assertFalse(collectionType3.isConcrete());
      assertFalse(collectionType3.isFinal());
      assertTrue(collectionType3.isCollectionLikeType());
      assertTrue(collectionType3.hasContentType());
      assertTrue(collectionType3.isInterface());
      assertNotNull(collectionType3);
      assertNotSame(collectionType0, collectionType3);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType3);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType3);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType3, collectionType1);
      assertNotSame(collectionType3, collectionType0);
      assertNotSame(collectionType3, collectionType2);
      
      Class<?> class4 = ClassUtil.rawClass(collectionType3);
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType0.equals((Object)collectionType2));
      assertTrue(collectionType0.equals((Object)collectionType3));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType3));
      assertTrue(collectionType2.equals((Object)collectionType0));
      assertTrue(collectionType2.equals((Object)collectionType3));
      assertTrue(collectionType2.equals((Object)collectionType1));
      assertTrue(collectionType3.equals((Object)collectionType0));
      assertTrue(collectionType3.equals((Object)collectionType1));
      assertTrue(collectionType3.equals((Object)collectionType2));
      assertTrue(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isFinal());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType1.isConcrete());
      assertTrue(collectionType1.isAbstract());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.hasContentType());
      assertTrue(collectionType1.isInterface());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.hasHandlers());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.useStaticType());
      assertTrue(collectionType2.useStaticType());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.isConcrete());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isJavaLangObject());
      assertTrue(collectionType2.isAbstract());
      assertTrue(collectionType2.hasHandlers());
      assertEquals(1, collectionType2.containedTypeCount());
      assertTrue(collectionType2.isContainerType());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isMapLikeType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertFalse(collectionType2.isFinal());
      assertTrue(collectionType2.hasContentType());
      assertTrue(collectionType2.isInterface());
      assertTrue(collectionType3.hasHandlers());
      assertTrue(collectionType3.isAbstract());
      assertTrue(collectionType3.isContainerType());
      assertFalse(collectionType3.isArrayType());
      assertEquals(1, collectionType3.containedTypeCount());
      assertFalse(collectionType3.hasValueHandler());
      assertTrue(collectionType3.useStaticType());
      assertFalse(collectionType3.isMapLikeType());
      assertFalse(collectionType3.isJavaLangObject());
      assertFalse(collectionType3.isPrimitive());
      assertFalse(collectionType3.isEnumType());
      assertFalse(collectionType3.isConcrete());
      assertFalse(collectionType3.isFinal());
      assertTrue(collectionType3.isCollectionLikeType());
      assertTrue(collectionType3.hasContentType());
      assertTrue(collectionType3.isInterface());
      assertTrue(class4.isInterface());
      assertEquals(1537, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isAnnotation());
      assertEquals("interface java.util.List", class4.toString());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isArray());
      assertNotNull(class4);
      assertNotSame(collectionType0, collectionType3);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType3);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType3);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType3, collectionType1);
      assertNotSame(collectionType3, collectionType0);
      assertNotSame(collectionType3, collectionType2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(0, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      System.setCurrentTimeMillis((-3475L));
      Class<Object> class1 = Object.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Error> class0 = Error.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertNotNull(jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertNotNull(jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonGenerator_Feature0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertNotNull(jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      
      DataOutput dataOutput0 = null;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory4.createGenerator((DataOutput) null, jsonEncoding0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertNotNull(uTF8JsonGenerator0);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "JSON");
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertNotNull(jsonMappingException0);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory4);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Module> class0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "com.fasterxml.jackson.databind.deser.impl.ErrorThrowingDeserializer");
      assertNotNull(jsonMappingException0);
      
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.deser.impl.ErrorThrowingDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertNotNull(class0);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(false, object0);
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertEquals("public java.lang.Error()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class1, class0);
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertNotNull(collectionLikeType0);
      
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler(arrayList0);
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertFalse(collectionLikeType1.isPrimitive());
      assertTrue(collectionLikeType1.isContainerType());
      assertFalse(collectionLikeType1.isArrayType());
      assertFalse(collectionLikeType1.isInterface());
      assertFalse(collectionLikeType1.isFinal());
      assertFalse(collectionLikeType1.isEnumType());
      assertTrue(collectionLikeType1.hasValueHandler());
      assertTrue(collectionLikeType1.hasContentType());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertFalse(collectionLikeType1.isAbstract());
      assertTrue(collectionLikeType1.isConcrete());
      assertEquals(0, collectionLikeType1.containedTypeCount());
      assertTrue(collectionLikeType1.hasHandlers());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertFalse(collectionLikeType1.useStaticType());
      assertNotNull(collectionLikeType1);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) collectionLikeType0);
      assertTrue(collectionLikeType0.equals((Object)collectionLikeType1));
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      
      SimpleModule simpleModule0 = new SimpleModule((String) null);
      assertNull(simpleModule0.getModuleName());
      assertNotNull(simpleModule0);
      
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType1, typeBindings0, (Object) class0, (Object) simpleModule0);
      assertTrue(collectionLikeType0.equals((Object)collectionLikeType1));
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertFalse(collectionLikeType1.isPrimitive());
      assertTrue(collectionLikeType1.isContainerType());
      assertFalse(collectionLikeType1.isArrayType());
      assertFalse(collectionLikeType1.isInterface());
      assertFalse(collectionLikeType1.isFinal());
      assertFalse(collectionLikeType1.isEnumType());
      assertTrue(collectionLikeType1.hasValueHandler());
      assertTrue(collectionLikeType1.hasContentType());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertFalse(collectionLikeType1.isAbstract());
      assertTrue(collectionLikeType1.isConcrete());
      assertEquals(0, collectionLikeType1.containedTypeCount());
      assertTrue(collectionLikeType1.hasHandlers());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertFalse(collectionLikeType1.useStaticType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNull(simpleModule0.getModuleName());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertNotNull(arrayType0);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      
      Class<?> class2 = ClassUtil.rawClass(arrayType0);
      assertTrue(collectionLikeType0.equals((Object)collectionLikeType1));
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isConcrete());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertFalse(collectionLikeType1.isPrimitive());
      assertTrue(collectionLikeType1.isContainerType());
      assertFalse(collectionLikeType1.isArrayType());
      assertFalse(collectionLikeType1.isInterface());
      assertFalse(collectionLikeType1.isFinal());
      assertFalse(collectionLikeType1.isEnumType());
      assertTrue(collectionLikeType1.hasValueHandler());
      assertTrue(collectionLikeType1.hasContentType());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertFalse(collectionLikeType1.isAbstract());
      assertTrue(collectionLikeType1.isConcrete());
      assertEquals(0, collectionLikeType1.containedTypeCount());
      assertTrue(collectionLikeType1.hasHandlers());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertFalse(collectionLikeType1.useStaticType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNull(simpleModule0.getModuleName());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertTrue(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class [Ljava.lang.RuntimeException;", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(collectionLikeType1, collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0);
      assertTrue(enumSet0.contains(accessPattern0));
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.util", string0);
      assertNotNull(string0);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("class java.util.Locale", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      Class<Double> class2 = Double.class;
      boolean boolean2 = ClassUtil.isConcrete(class2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string1 = ClassUtil.nonNullString((String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Class<Integer> class3 = Integer.class;
      boolean boolean3 = ClassUtil.isProxyType(class3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = ClassUtil.isCollectionMapOrArray(class0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      System.setCurrentTimeMillis((-1962L));
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      Class<Error> class4 = Error.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class4);
      assertEquals(1, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      Class<ArrayType> class5 = ArrayType.class;
      boolean boolean5 = ClassUtil.isBogusClass(class5);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
      
      long[] longArray0 = new long[0];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("org.hibernate.proxy.java.sql.ClientInfoStatus", "VOO2O8LhlZ_U&&F");
      assertEquals("java.sql.SQLSyntaxErrorException: org.hibernate.proxy.java.sql.ClientInfoStatus", sQLSyntaxErrorException0.toString());
      assertEquals("VOO2O8LhlZ_U&&F", sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.hibernate.proxy.java.sql.ClientInfoStatus", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotNull(sQLSyntaxErrorException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibernate.proxy.java.sql.ClientInfoStatus", "org.hibernate.proxy.java.sql.ClientInfoStatus", (-8), longArray0, sQLSyntaxErrorException0);
      assertEquals(0, longArray0.length);
      assertEquals("java.sql.SQLSyntaxErrorException: org.hibernate.proxy.java.sql.ClientInfoStatus", sQLSyntaxErrorException0.toString());
      assertEquals("VOO2O8LhlZ_U&&F", sQLSyntaxErrorException0.getSQLState());
      assertEquals("org.hibernate.proxy.java.sql.ClientInfoStatus", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals((-8), batchUpdateException0.getErrorCode());
      assertEquals("org.hibernate.proxy.java.sql.ClientInfoStatus", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: org.hibernate.proxy.java.sql.ClientInfoStatus", batchUpdateException0.toString());
      assertEquals("org.hibernate.proxy.java.sql.ClientInfoStatus", batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new long[] {}, longArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "org.hibernate.proxy.java.sql.ClientInfoStatus");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.hibernate.proxy.java.sql.ClientInfoStatus
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class0);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = enumMap0.containsValue("Class ");
      assertFalse(boolean0);
      assertEquals(0, enumMap0.size());
      
      Integer integer1 = enumMap0.put(clientInfoStatus0, integer0);
      assertEquals(1, enumMap0.size());
      assertNull(integer1);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertEquals(1, enumMap0.size());
      assertFalse(class1.isPrimitive());
      assertEquals(16401, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      boolean boolean1 = ClassUtil.hasClass(clientInfoStatus0, class1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, enumMap0.size());
      assertFalse(class1.isPrimitive());
      assertEquals(16401, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertFalse(class1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rK|");
      assertFalse(boolean0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "rK|", false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertNotNull(iOContext1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      MockFile mockFile0 = new MockFile("S6lo%)\"W~`q$");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, objectMapper1, mockFileOutputStream0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("S6lo%)\"W~`q$", mockFile0.toString());
      assertEquals("S6lo%)\"W~`q$", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("S6lo%)\"W~`q$", mockFile0.toString());
      assertEquals("S6lo%)\"W~`q$", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canWrite());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertEquals(3, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertNotNull(uTF8JsonGenerator1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(uTF8JsonGenerator1, "Z.;&?=o");
      assertNotNull(jsonMappingException0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class0);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      EnumMap<ClientInfoStatus, Integer> enumMap1 = enumMap0.clone();
      assertTrue(enumMap1.equals((Object)enumMap0));
      assertEquals(0, enumMap0.size());
      assertEquals(0, enumMap1.size());
      assertNotNull(enumMap1);
      assertNotSame(enumMap0, enumMap1);
      assertNotSame(enumMap1, enumMap0);
      
      EnumMap<ClientInfoStatus, Integer> enumMap2 = enumMap1.clone();
      assertTrue(enumMap0.equals((Object)enumMap1));
      assertTrue(enumMap1.equals((Object)enumMap0));
      assertTrue(enumMap2.equals((Object)enumMap0));
      assertTrue(enumMap2.equals((Object)enumMap1));
      assertEquals(0, enumMap0.size());
      assertEquals(0, enumMap1.size());
      assertEquals(0, enumMap2.size());
      assertNotNull(enumMap2);
      assertNotSame(enumMap0, enumMap1);
      assertNotSame(enumMap0, enumMap2);
      assertNotSame(enumMap1, enumMap0);
      assertNotSame(enumMap1, enumMap2);
      assertNotSame(enumMap2, enumMap1);
      assertNotSame(enumMap2, enumMap0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = enumMap1.put(clientInfoStatus0, integer0);
      assertTrue(enumMap0.equals((Object)enumMap2));
      assertFalse(enumMap0.equals((Object)enumMap1));
      assertFalse(enumMap1.equals((Object)enumMap0));
      assertFalse(enumMap1.equals((Object)enumMap2));
      assertEquals(0, enumMap0.size());
      assertEquals(1, enumMap1.size());
      assertNull(integer1);
      assertNotSame(enumMap0, enumMap1);
      assertNotSame(enumMap0, enumMap2);
      assertNotSame(enumMap1, enumMap0);
      assertNotSame(enumMap1, enumMap2);
      
      Integer integer2 = new Integer(3);
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(3, (int)integer2);
      assertNotNull(integer2);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap1);
      assertTrue(enumMap0.equals((Object)enumMap2));
      assertFalse(enumMap0.equals((Object)enumMap1));
      assertFalse(enumMap1.equals((Object)enumMap0));
      assertFalse(enumMap1.equals((Object)enumMap2));
      assertEquals(0, enumMap0.size());
      assertEquals(1, enumMap1.size());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals(16401, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      assertNotSame(enumMap0, enumMap1);
      assertNotSame(enumMap0, enumMap2);
      assertNotSame(enumMap1, enumMap0);
      assertNotSame(enumMap1, enumMap2);
      
      JsonGenerator jsonGenerator0 = null;
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class0);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      Integer integer0 = enumMap0.put(clientInfoStatus0, (Integer) null);
      assertEquals(1, enumMap0.size());
      assertNull(integer0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertEquals(1, enumMap0.size());
      assertTrue(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertEquals(16401, class1.getModifiers());
      assertNotNull(class1);
      
      Class<?> class2 = ClassUtil.classOf(clientInfoStatus0);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isSynthetic());
      assertEquals(16401, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.sql.ClientInfoStatus", class2.toString());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`float`", string0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("float", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<Object>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("YRRd", "F%p8Jeh");
      assertEquals("YRRd", sQLRecoverableException0.getMessage());
      assertEquals("F%p8Jeh", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: YRRd", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("e", "java.lang.Boolean", sQLRecoverableException0);
      assertEquals("YRRd", sQLRecoverableException0.getMessage());
      assertEquals("F%p8Jeh", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: YRRd", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: e", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.lang.Boolean", sQLTimeoutException0.getSQLState());
      assertEquals("e", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLRecoverableException sQLRecoverableException1 = (SQLRecoverableException)sQLRecoverableException0.initCause(sQLTimeoutException0);
      assertEquals("YRRd", sQLRecoverableException0.getMessage());
      assertEquals("F%p8Jeh", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: YRRd", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: e", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.lang.Boolean", sQLTimeoutException0.getSQLState());
      assertEquals("e", sQLTimeoutException0.getMessage());
      assertEquals("YRRd", sQLRecoverableException1.getMessage());
      assertEquals("F%p8Jeh", sQLRecoverableException1.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: YRRd", sQLRecoverableException1.toString());
      assertEquals(0, sQLRecoverableException1.getErrorCode());
      assertNotNull(sQLRecoverableException1);
      assertSame(sQLRecoverableException0, sQLRecoverableException1);
      assertSame(sQLRecoverableException1, sQLRecoverableException0);
      
      // Undeclared exception!
      ClassUtil.getRootCause(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class1);
      assertEquals(0, enumSet0.size());
      assertNotNull(enumSet0);
      
      EnumSet<AccessPattern> enumSet1 = EnumSet.copyOf(enumSet0);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertEquals(0, enumSet0.size());
      assertEquals(0, enumSet1.size());
      assertNotNull(enumSet1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(enumSet1);
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertEquals(0, enumSet0.size());
      assertEquals(0, enumSet1.size());
      assertFalse(class2.isSynthetic());
      assertEquals(16385, class2.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertNotNull(class2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      
      Class<IOException> class3 = IOException.class;
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class3);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ClassUtil.nameOf(class2);
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertEquals("`com.fasterxml.jackson.databind.util.AccessPattern`", string0);
      assertEquals(0, enumSet0.size());
      assertEquals(0, enumSet1.size());
      assertFalse(class2.isSynthetic());
      assertEquals(16385, class2.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertNotNull(string0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`com.fasterxml.jackson.databind.util.AccessPattern`", "`com.fasterxml.jackson.databind.util.AccessPattern`", (-1048));
      assertEquals("`com.fasterxml.jackson.databind.util.AccessPattern`", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("`com.fasterxml.jackson.databind.util.AccessPattern`", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: `com.fasterxml.jackson.databind.util.AccessPattern`", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals((-1048), sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "`com.fasterxml.jackson.databind.util.AccessPattern`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `com.fasterxml.jackson.databind.util.AccessPattern`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class0);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      Annotation[][] annotationArray0 = constructor0.getParameterAnnotations();
      assertEquals(0, annotationArray0.length);
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotationArray0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      String string0 = ClassUtil.nonNullString(", problem: ");
      assertEquals(", problem: ", string0);
      assertNotNull(string0);
      
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      assertTrue(enumSet0.contains(accessPattern0));
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      
      EnumSet<AccessPattern> enumSet1 = EnumSet.copyOf(enumSet0);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertNotNull(enumSet1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(enumSet1);
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet0.contains(accessPattern0));
      assertTrue(enumSet1.contains(accessPattern0));
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(16385, class2.getModifiers());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      MockError mockError0 = new MockError("Failed to instantiate class ");
      assertNotNull(mockError0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Failed to instantiate class ", "*::b(.at.+[w0V", mockError0);
      assertEquals("Failed to instantiate class ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: Failed to instantiate class ", sQLTimeoutException0.toString());
      assertEquals("*::b(.at.+[w0V", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      assertEquals("Failed to instantiate class ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: Failed to instantiate class ", sQLTimeoutException0.toString());
      assertEquals("*::b(.at.+[w0V", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(throwable0);
      assertSame(mockError0, throwable0);
      assertSame(throwable0, mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "YezF");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("short", class1.toString());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ztl~j&e.(]@.z6 vOJN");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<NoClass> class2 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertEquals(6, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class0);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class0);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      Integer integer0 = enumMap0.put(clientInfoStatus0, (Integer) null);
      assertEquals(1, enumMap0.size());
      assertNull(integer0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertEquals(1, enumMap0.size());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isPrimitive());
      assertEquals(16401, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType((Enum<?>) clientInfoStatus0);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertEquals("class java.sql.ClientInfoStatus", class2.toString());
      assertFalse(class2.isSynthetic());
      assertEquals(16401, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertNotNull(class2);
      assertSame(class2, class1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isFinal());
      assertNotNull(simpleType0);
      
      Class<ArrayType> class1 = ArrayType.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, false);
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isEnumType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isFinal());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(class0, class1);
      assertSame(class1, class0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<Object> class2 = Object.class;
      String string0 = ClassUtil.nameOf(class2);
      assertEquals("`java.lang.Object`", string0);
      assertNotNull(string0);
      
      Class<Module> class3 = Module.class;
      try { 
        ClassUtil.createInstance(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockException mockException0 = new MockException("QU^rHnt; 5H");
      assertNotNull(mockException0);
      
      MockError mockError0 = new MockError("net.sf.cglib.proxy.java.io.IOException", mockException0);
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertEquals("long", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<IOException> class1 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      System.setCurrentTimeMillis(6287L);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      MockThrowable mockThrowable0 = new MockThrowable(mockRuntimeException0);
      assertNotNull(mockThrowable0);
      
      MockIOException mockIOException0 = new MockIOException("%bpL'", mockThrowable0);
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertEquals("`int`", string0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Module> class0 = Module.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<Float> class1 = Float.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertEquals("float", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals(1041, class2.getModifiers());
      assertEquals("float", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertEquals("float", class3.toString());
      assertNotNull(class3);
      assertSame(class2, class3);
      assertSame(class3, class2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")}mrd>%_");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertEquals("`java.lang.reflect.AccessibleObject`", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)3;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)3}, byteArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ClassUtil.createInstance(class0, false);
      assertNotNull(object0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      Class<Character> class1 = Character.TYPE;
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertNotNull(class1);
      
      String string0 = ClassUtil.getPackageName(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("char", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class0);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      Integer integer0 = Integer.getInteger("*</Gv|!Hl\"sB'H|9fW4");
      assertNull(integer0);
      
      Integer integer1 = enumMap0.put(clientInfoStatus0, (Integer) null);
      assertEquals(1, enumMap0.size());
      assertNull(integer1);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertEquals(1, enumMap0.size());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertTrue(class1.isEnum());
      assertEquals(16401, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedExceptionTypes();
      assertEquals(0, annotatedTypeArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotatedTypeArray0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertFalse(boolean0);
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNull(class1);
      
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0L, object0);
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertFalse(boolean0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("long", class0.toString());
      assertFalse(class0.isAnnotation());
      
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, Integer> enumMap0 = new EnumMap<ClientInfoStatus, Integer>(class1);
      assertEquals(0, enumMap0.size());
      assertNotNull(enumMap0);
      
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(enumMap0);
      assertEquals(0, enumMap0.size());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.sql.ClientInfoStatus", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertEquals(16401, class2.getModifiers());
      assertNotNull(class2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLIntegrityConstraintViolationException0, true);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.lang.Float");
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-102);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0, byteArray0, 883, true);
      assertEquals(4, byteArray0.length);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(883, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-90), (byte) (-54), (byte) (-102)}, byteArray0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(883, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(883, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(2, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertArrayEquals(new byte[] {(byte) (-111), (byte) (-90), (byte) (-54), (byte) (-102)}, byteArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(2, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      String string0 = ClassUtil.nonNullString("=DK='BcK]rG/<h-a");
      assertEquals("=DK='BcK]rG/<h-a", string0);
      assertNotNull(string0);
      
      System.setCurrentTimeMillis((-246L));
      Iterator<PlaceholderForType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-721483190), objectMapper0, pipedOutputStream0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-721483190), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.overrideStdFeatures(0, 33);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals((-721483190), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals((-721483190), uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("=DK='BcK]rG/<h-a", "=DK='BcK]rG/<h-a", 0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: =DK='BcK]rG/<h-a", sQLFeatureNotSupportedException0.toString());
      assertEquals("=DK='BcK]rG/<h-a", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("=DK='BcK]rG/<h-a", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("=DK='BcK]rG/<h-a", "=DK='BcK]rG/<h-a", 57343, sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: =DK='BcK]rG/<h-a", sQLFeatureNotSupportedException0.toString());
      assertEquals("=DK='BcK]rG/<h-a", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("=DK='BcK]rG/<h-a", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: =DK='BcK]rG/<h-a", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("=DK='BcK]rG/<h-a", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("=DK='BcK]rG/<h-a", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(57343, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      MockIOException mockIOException0 = new MockIOException(sQLIntegrityConstraintViolationException0);
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.deser.std.NumberDeserializers$ByteDeserializer");
      assertFalse(boolean0);
      
      Class<ObjectNode> class0 = ObjectNode.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<Boolean> class1 = Boolean.class;
      boolean boolean1 = ClassUtil.hasEnclosingMethod(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ClassUtil.getClassDescription((Object) null);
      assertEquals("unknown", string0);
      assertNotNull(string0);
      
      Class<String> class2 = String.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertEquals(16, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class3, false);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      Class<MapLikeType> class4 = MapLikeType.class;
      String string1 = ClassUtil.isLocalType(class4, false);
      assertNull(string1);
      
      String string2 = ClassUtil.getPackageName(class2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.lang", string2);
      assertNotNull(string2);
      
      String string3 = ClassUtil.isLocalType(class2, true);
      assertNull(string3);
      
      Class<SimpleType> class5 = SimpleType.class;
      String string4 = ClassUtil.getPackageName(class5);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("com.fasterxml.jackson.databind.type", string4);
      assertNotNull(string4);
      
      Class<?> class6 = ClassUtil.getEnclosingClass(class2);
      assertNull(class6);
      
      Class<Long> class7 = Long.class;
      String string5 = ClassUtil.nameOf(class7);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("`java.lang.Long`", string5);
      assertNotNull(string5);
      
      Class<JsonMappingException> class8 = JsonMappingException.class;
      boolean boolean2 = ClassUtil.hasClass(class3, class8);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = ClassUtil.isProxyType(class0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JavaType javaType0 = defaultDeserializationContext_Impl0.getContextualType();
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(javaType0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "com.fasterxml.jackson.databind.type", "e>N1Dx(8");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("com.fasterxml.jackson.databind.type", invalidTypeIdException0.getTypeId());
      assertNotNull(invalidTypeIdException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) invalidTypeIdException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'com.fasterxml.jackson.databind.type' as a subtype of null: e>N1Dx(8
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)96;
      int[] intArray0 = new int[1];
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      HashMap<String, ReferenceType> hashMap0 = new HashMap<String, ReferenceType>(16);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertNotNull(simpleFilterProvider0);
      
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = new ObjectMapper();
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertNotNull(objectMapper2);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("IhwcpGbQDh");
      assertNotNull(mockPrintStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      assertNotNull(bufferedOutputStream0);
      
      try { 
        objectMapper0.writeValue((OutputStream) bufferedOutputStream0, (Object) objectMapper2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<MapLikeType> class2 = MapLikeType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class2);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, true);
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      Throwable throwable0 = null;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactoryConfig0, (Class<?>) null);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      
      MockIOException mockIOException0 = new MockIOException("B@'k7{_1P58@JS1", (Throwable) null);
      assertNotNull(mockIOException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      mockIOException0.setStackTrace(stackTraceElementArray0);
      assertEquals(0, stackTraceElementArray0.length);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // B@'k7{_1P58@JS1
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Error> class1 = Error.class;
      boolean boolean0 = false;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class1);
      assertEquals(1, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      Integer integer0 = new Integer(8);
      assertEquals(8, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = ClassUtil.nonNull((Integer) null, integer0);
      assertEquals(8, (int)integer1);
      assertNotNull(integer1);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class2 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertNotNull(mapType0);
      
      Class<HashMap> class3 = HashMap.class;
      MapType mapType1 = typeFactory0.constructMapType((Class<? extends Map>) class3, (JavaType) mapType0, (JavaType) mapType0);
      assertFalse(mapType1.equals((Object)mapType0));
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.isConcrete());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertNotNull(mapType1);
      assertSame(class2, class3);
      assertNotSame(mapType0, mapType1);
      assertSame(class3, class2);
      assertNotSame(mapType1, mapType0);
      
      MapType mapType2 = mapType0.withKeyType(mapType1);
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(mapType1.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType1));
      assertFalse(mapType2.equals((Object)mapType0));
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.isConcrete());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isFinal());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.hasHandlers());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.useStaticType());
      assertEquals(2, mapType2.containedTypeCount());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isAbstract());
      assertFalse(mapType2.isJavaLangObject());
      assertNotNull(mapType2);
      assertSame(class2, class3);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertSame(class3, class2);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      
      Class<AccessPattern> class4 = AccessPattern.class;
      JavaType[] javaTypeArray0 = mapType2.findTypeParameters(class4);
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(mapType0.equals((Object)mapType2));
      assertFalse(mapType1.equals((Object)mapType2));
      assertFalse(mapType1.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType1));
      assertFalse(mapType2.equals((Object)mapType0));
      assertEquals(0, javaTypeArray0.length);
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.isConcrete());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isFinal());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.hasHandlers());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.useStaticType());
      assertEquals(2, mapType2.containedTypeCount());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isAbstract());
      assertFalse(mapType2.isJavaLangObject());
      assertNotNull(javaTypeArray0);
      assertSame(class2, class3);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertSame(class3, class2);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(mapType0.equals((Object)mapType2));
      assertFalse(mapType1.equals((Object)mapType2));
      assertFalse(mapType1.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType1));
      assertFalse(mapType2.equals((Object)mapType0));
      assertFalse(mapLikeType0.equals((Object)mapType0));
      assertTrue(mapLikeType0.equals((Object)mapType2));
      assertFalse(mapLikeType0.equals((Object)mapType1));
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.isConcrete());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isFinal());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.hasHandlers());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.useStaticType());
      assertEquals(2, mapType2.containedTypeCount());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isAbstract());
      assertFalse(mapType2.isJavaLangObject());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isAbstract());
      assertNotNull(mapLikeType0);
      assertSame(class2, class3);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapLikeType0);
      assertSame(class3, class2);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapLikeType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapLikeType0);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapLikeType0, mapType0);
      assertNotSame(mapLikeType0, mapType1);
      assertNotSame(mapLikeType0, mapType2);
      
      MapType mapType3 = mapType2.withKeyType(mapType0);
      assertFalse(mapType3.equals((Object)mapType0));
      assertFalse(mapType3.equals((Object)mapType2));
      assertFalse(mapType3.equals((Object)mapLikeType0));
      assertFalse(mapType3.equals((Object)mapType1));
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(mapType0.equals((Object)mapType2));
      assertFalse(mapType0.equals((Object)mapLikeType0));
      assertFalse(mapType1.equals((Object)mapType2));
      assertFalse(mapType1.equals((Object)mapType0));
      assertFalse(mapType1.equals((Object)mapLikeType0));
      assertFalse(mapType2.equals((Object)mapType1));
      assertTrue(mapType2.equals((Object)mapLikeType0));
      assertFalse(mapType2.equals((Object)mapType0));
      assertFalse(mapType3.isEnumType());
      assertFalse(mapType3.isAbstract());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.isJavaLangObject());
      assertFalse(mapType3.hasValueHandler());
      assertFalse(mapType3.isCollectionLikeType());
      assertFalse(mapType3.hasHandlers());
      assertTrue(mapType3.isMapLikeType());
      assertTrue(mapType3.hasContentType());
      assertFalse(mapType3.isFinal());
      assertFalse(mapType3.isInterface());
      assertFalse(mapType3.isArrayType());
      assertTrue(mapType3.isConcrete());
      assertFalse(mapType3.isPrimitive());
      assertEquals(2, mapType3.containedTypeCount());
      assertFalse(mapType3.useStaticType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.isConcrete());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isFinal());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.hasHandlers());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.useStaticType());
      assertEquals(2, mapType2.containedTypeCount());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isAbstract());
      assertFalse(mapType2.isJavaLangObject());
      assertNotNull(mapType3);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapLikeType0);
      assertNotSame(mapType3, mapType1);
      assertSame(class2, class3);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapLikeType0);
      assertSame(class3, class2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapLikeType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapLikeType0);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType2, mapType0);
      
      Class<RuntimeException> class5 = RuntimeException.class;
      // Undeclared exception!
      try { 
        typeFactory0.constructSpecializedType(mapLikeType0, class5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.RuntimeException not subtype of [map type; class java.util.HashMap, [map type; class java.util.HashMap, [map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]] -> [map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]] -> [simple type, class java.lang.Object]]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("org.hibernate.proxy.java.io.IOException");
      assertNotNull(mockRuntimeException0);
      
      MockFile mockFile0 = new MockFile("unknown");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "unknown");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      File file0 = MockFile.createTempFile("d|_QSq`K", "`", (File) mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("unknown", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("unknown", mockFile0.toString());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isFile());
      assertEquals("unknown", mockFile1.getName());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("/experiment/unknown", mockFile1.getParent());
      assertEquals("/experiment/unknown/unknown", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("d|_QSq`K0`", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/experiment/unknown/unknown/d|_QSq`K0`", file0.toString());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/experiment/unknown/unknown", file0.getParent());
      assertFalse(file0.isDirectory());
      assertNotNull(file0);
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertNotNull(mockPrintStream0);
      
      mockRuntimeException0.printStackTrace((PrintStream) mockPrintStream0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)file0));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile0));
      assertFalse(file0.equals((Object)mockFile1));
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertEquals("unknown", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals("unknown", mockFile0.toString());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isFile());
      assertEquals("unknown", mockFile1.getName());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals("/experiment/unknown", mockFile1.getParent());
      assertEquals("/experiment/unknown/unknown", mockFile1.toString());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canWrite());
      assertEquals("d|_QSq`K0`", file0.getName());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/experiment/unknown/unknown/d|_QSq`K0`", file0.toString());
      assertEquals(140L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals("/experiment/unknown/unknown", file0.getParent());
      assertFalse(file0.isDirectory());
      assertNotSame(mockFile0, file0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, file0);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(file0, mockFile0);
      assertNotSame(file0, mockFile1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("`", "`", mockRuntimeException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("`", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: `", sQLNonTransientConnectionException0.toString());
      assertEquals("`", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      MockThrowable mockThrowable0 = new MockThrowable(sQLNonTransientConnectionException0);
      assertNotNull(mockThrowable0);
      
      Throwable throwable0 = ClassUtil.throwIfError(mockThrowable0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("`", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException: `", sQLNonTransientConnectionException0.toString());
      assertEquals("`", sQLNonTransientConnectionException0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLNonTransientConnectionException: `", mockThrowable0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: `", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLNonTransientConnectionException: `", throwable0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: `", throwable0.getMessage());
      assertNotNull(throwable0);
      assertSame(mockThrowable0, throwable0);
      assertSame(throwable0, mockThrowable0);
      
      Class<Annotation> class0 = Annotation.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.hasClass(class0, class0);
      assertFalse(boolean0);
      
      Class<MapType> class1 = MapType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertNotNull(simpleType0);
      
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isContainerType());
      assertNotNull(collectionLikeType0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertNotNull(referenceType0);
      
      ReferenceType referenceType1 = referenceType0.withTypeHandler(collectionLikeType0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.hasValueHandler());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.hasContentType());
      assertNotNull(referenceType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      
      JavaType javaType0 = referenceType1.getReferencedType();
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.hasValueHandler());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertTrue(javaType0.isContainerType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasHandlers());
      assertEquals(0, javaType0.containedTypeCount());
      assertNotNull(javaType0);
      assertSame(collectionLikeType0, javaType0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertSame(javaType0, collectionLikeType0);
      
      List<JavaType> list0 = ClassUtil.findSuperTypes(javaType0, class0, false);
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.hasValueHandler());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.hasHandlers());
      assertTrue(referenceType1.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertTrue(javaType0.isContainerType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasHandlers());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertSame(collectionLikeType0, javaType0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertSame(javaType0, collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("com.fasterxml.jackson.databind.deser.impl.CreatorCollector");
      assertEquals("com.fasterxml.jackson.databind.deser.impl.CreatorCollector", string0);
      assertNotNull(string0);
      
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<String> class0 = String.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(77, methodArray0.length);
      assertNotNull(methodArray0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(objectMapper0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      NamedType[] namedTypeArray0 = new NamedType[4];
      NamedType namedType0 = new NamedType(class0, "GiXJ#jj66uVI)_izn^9");
      assertEquals("GiXJ#jj66uVI)_izn^9", namedType0.getName());
      assertTrue(namedType0.hasName());
      assertNotNull(namedType0);
      
      namedTypeArray0[0] = namedType0;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      NamedType namedType1 = new NamedType(class1, "org.hibernate.proxy.java.lang.String");
      assertFalse(namedType1.equals((Object)namedType0));
      assertEquals("org.hibernate.proxy.java.lang.String", namedType1.getName());
      assertTrue(namedType1.hasName());
      assertNotNull(namedType1);
      
      namedTypeArray0[1] = namedType1;
      NamedType namedType2 = new NamedType(class0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType");
      assertFalse(namedType2.equals((Object)namedType1));
      assertTrue(namedType2.equals((Object)namedType0));
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", namedType2.getName());
      assertTrue(namedType2.hasName());
      assertNotNull(namedType2);
      
      namedTypeArray0[2] = namedType2;
      Class<CollectionType> class2 = CollectionType.class;
      NamedType namedType3 = new NamedType(class2);
      assertFalse(namedType3.equals((Object)namedType1));
      assertFalse(namedType3.equals((Object)namedType0));
      assertFalse(namedType3.equals((Object)namedType2));
      assertFalse(namedType3.hasName());
      assertNull(namedType3.getName());
      assertNotNull(namedType3);
      
      namedTypeArray0[3] = namedType3;
      objectMapper0.registerSubtypes(namedTypeArray0);
      assertEquals(4, namedTypeArray0.length);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 11, true);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      CharacterEscapes characterEscapes0 = uTF8JsonGenerator0.getCharacterEscapes();
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNull(characterEscapes0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(11, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(1, uTF8JsonGenerator1.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(11, uTF8JsonGenerator1.getOutputBuffered());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JSON", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("JSON", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: JSON", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator1, (Closeable) uTF8JsonGenerator0, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertNotNull(class0);
      
      Class<Error> class1 = Error.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<?> class2 = ClassUtil.wrapperType(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertEquals("class java.lang.Double", class2.toString());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertNotNull(class2);
      
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class3);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      Class<Module> class2 = Module.class;
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class class3 = (Class)ClassUtil.getGenericSuperclass(class2);
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isAnnotation());
      assertNotNull(class3);
      
      Class<String> class4 = String.class;
      ClassUtil.verifyMustOverride(class4, "Y<+i|kRa\"|l-@ZNi", "Y<+i|kRa\"|l-@ZNi");
      Class class5 = (Class)ClassUtil.getGenericSuperclass(class2);
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isAnnotation());
      assertEquals(1, class5.getModifiers());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isInterface());
      assertEquals("class java.lang.Object", class5.toString());
      assertFalse(class5.isArray());
      assertNotNull(class5);
      assertSame(class5, class3);
      
      String string0 = ClassUtil.canBeABeanType(class4);
      assertNull(string0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("s:ZOam'|x", (String) null);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: s:ZOam'|x", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("s:ZOam'|x", sQLTransientConnectionException0.getMessage());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLException sQLException0 = new SQLException((String) null, sQLTransientConnectionException0);
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: s:ZOam'|x", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("s:ZOam'|x", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertNull(sQLException0.getSQLState());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactory0, class0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.BeanDeserializerFactory`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      assertFalse(class0.isInterface());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isAnnotation());
      assertEquals("boolean", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertNotNull(class1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(2, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<AccessPattern> class2 = AccessPattern.class;
      boolean boolean1 = ClassUtil.isProxyType(class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.String");
      assertFalse(boolean0);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      LongNode longNode0 = LongNode.valueOf((-1008L));
      assertFalse(longNode0.isFloatingPointNumber());
      assertTrue(longNode0.isIntegralNumber());
      assertEquals((-1008.0), longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.canConvertToLong());
      assertNull(longNode0.textValue());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.booleanValue());
      assertEquals(0, longNode0.size());
      assertEquals((-1008L), longNode0.longValue());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isBigInteger());
      assertEquals((-1008), longNode0.intValue());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isNaN());
      assertEquals((short) (-1008), longNode0.shortValue());
      assertTrue(longNode0.canConvertToInt());
      assertEquals((-1008.0F), longNode0.floatValue(), 0.01F);
      assertNotNull(longNode0);
      
      BigInteger bigInteger0 = longNode0.bigIntegerValue();
      assertFalse(longNode0.isFloatingPointNumber());
      assertTrue(longNode0.isIntegralNumber());
      assertEquals((-1008.0), longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.canConvertToLong());
      assertNull(longNode0.textValue());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.booleanValue());
      assertEquals(0, longNode0.size());
      assertEquals((-1008L), longNode0.longValue());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isBigInteger());
      assertEquals((-1008), longNode0.intValue());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isNaN());
      assertEquals((short) (-1008), longNode0.shortValue());
      assertTrue(longNode0.canConvertToInt());
      assertEquals((-1008.0F), longNode0.floatValue(), 0.01F);
      assertEquals((byte)16, bigInteger0.byteValue());
      assertEquals((short) (-1008), bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Class<Long> class0 = Long.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "g");
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(longNode0.isFloatingPointNumber());
      assertTrue(longNode0.isIntegralNumber());
      assertEquals((-1008.0), longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isFloat());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isArray());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.canConvertToLong());
      assertNull(longNode0.textValue());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.booleanValue());
      assertEquals(0, longNode0.size());
      assertEquals((-1008L), longNode0.longValue());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isBigInteger());
      assertEquals((-1008), longNode0.intValue());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isNaN());
      assertEquals((short) (-1008), longNode0.shortValue());
      assertTrue(longNode0.canConvertToInt());
      assertEquals((-1008.0F), longNode0.floatValue(), 0.01F);
      assertEquals((byte)16, bigInteger0.byteValue());
      assertEquals((short) (-1008), bigInteger0.shortValue());
      assertNotNull(jsonMappingException0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Long` from number -1008: g
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Integer> class2 = Integer.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class2, class0, list0);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertFalse(list1.isEmpty());
      assertEquals(7, list1.size());
      assertNotNull(list1);
      assertSame(list0, list1);
      assertSame(list1, list0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "-_ha");
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("-_ha", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException0);
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("-_ha", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLFeatureNotSupportedException0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLFeatureNotSupportedException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLSyntaxErrorException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      Class<Annotation> class0 = Annotation.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertNotNull(valueInstantiator_Base0);
      
      AnnotatedWithParams annotatedWithParams0 = valueInstantiator_Base0.getWithArgsCreator();
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertNull(annotatedWithParams0);
      
      JacksonInject.Value jacksonInject_Value0 = annotationIntrospector0.findInjectableValue((AnnotatedMember) null);
      assertNull(jacksonInject_Value0);
      
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      assertNotNull(annotationIntrospector1);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1278);
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isConcrete());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertNotNull(placeholderForType0);
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(annotationIntrospector1);
      assertNotNull(objectReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Class<NoClass> class1 = NoClass.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class1);
      assertFalse(boolean0);
      
      Class<Object> class2 = Object.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertEquals(0, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Iterator<CollectionLikeType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1323;
      intArray0[1] = (-16711681);
      intArray0[2] = (-16711681);
      intArray0[3] = (-16711681);
      intArray0[4] = (-16711681);
      SQLException sQLException0 = new SQLException("NUMBER_INT");
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: NUMBER_INT", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("NUMBER_INT", sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("N;<u@", (String) null, intArray0, sQLException0);
      assertEquals(5, intArray0.length);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: NUMBER_INT", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("NUMBER_INT", sQLException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: N;<u@", batchUpdateException0.toString());
      assertEquals("N;<u@", batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {1323, (-16711681), (-16711681), (-16711681), (-16711681)}, intArray0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, "NUMBER_INT", (-16711681), batchUpdateException0);
      assertEquals(5, intArray0.length);
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: NUMBER_INT", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertEquals("NUMBER_INT", sQLException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: N;<u@", batchUpdateException0.toString());
      assertEquals("N;<u@", batchUpdateException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertEquals((-16711681), sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("NUMBER_INT", sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      assertArrayEquals(new int[] {1323, (-16711681), (-16711681), (-16711681), (-16711681)}, intArray0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, sQLFeatureNotSupportedException0);
      assertEquals(5, intArray0.length);
      assertNotNull(mockRuntimeException0);
      assertArrayEquals(new int[] {1323, (-16711681), (-16711681), (-16711681), (-16711681)}, intArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertNotNull(annotationArray0);
      
      Parameter[] parameterArray0 = constructor0.getParameters();
      assertEquals(0, parameterArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertNotNull(parameterArray0);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray1.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(0, annotationArray2.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertNotNull(annotationArray2);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      
      Class<?>[] classArray0 = constructor0.getParameterTypes();
      assertEquals(0, classArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertNotNull(classArray0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertNull(annotation0);
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      
      String string0 = ClassUtil.classNameOf(constructor0);
      assertEquals("`java.lang.reflect.Constructor`", string0);
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertNotNull(string0);
      
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      Class<Boolean> class1 = Boolean.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class1);
      assertFalse(boolean0);
      
      Class<Object> class2 = Object.class;
      String string0 = ClassUtil.isLocalType(class2, false);
      assertNull(string0);
      
      Class<AccessibleObject> class3 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor1 = ClassUtil.findConstructor(class3, true);
      assertFalse(constructor1.isVarArgs());
      assertEquals(4, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor1.toString());
      assertNotNull(constructor1);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor1);
      assertFalse(constructor1.isVarArgs());
      assertEquals(4, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor1.toString());
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor2 = classUtil_Ctor0.getConstructor();
      assertFalse(constructor1.isVarArgs());
      assertEquals(4, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor1.toString());
      assertFalse(constructor2.isVarArgs());
      assertEquals(4, constructor2.getModifiers());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor2.toString());
      assertFalse(constructor2.isSynthetic());
      assertTrue(constructor2.isAccessible());
      assertNotNull(constructor2);
      
      String string1 = ClassUtil.nonNullString("4Z");
      assertEquals("4Z", string1);
      assertNotNull(string1);
      
      ClassUtil.checkAndFixAccess((Member) constructor2);
      assertFalse(constructor1.isVarArgs());
      assertEquals(4, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor1.toString());
      assertFalse(constructor2.isVarArgs());
      assertEquals(4, constructor2.getModifiers());
      assertEquals("protected java.lang.reflect.AccessibleObject()", constructor2.toString());
      assertFalse(constructor2.isSynthetic());
      assertTrue(constructor2.isAccessible());
      
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      boolean boolean1 = ClassUtil.isConcrete((Member) constructor0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class4);
      assertEquals(1, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1819;
      intArray0[1] = 2315;
      intArray0[2] = 1819;
      intArray0[3] = 14;
      intArray0[4] = 2315;
      intArray0[5] = 14;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertEquals(6, intArray0.length);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {1819, 2315, 1819, 14, 2315, 14}, intArray0);
      
      SQLWarning sQLWarning0 = new SQLWarning("3S6Tz[1fqt6 KTQ'rz6", batchUpdateException0);
      assertEquals(6, intArray0.length);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLWarning: 3S6Tz[1fqt6 KTQ'rz6", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("3S6Tz[1fqt6 KTQ'rz6", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      assertArrayEquals(new int[] {1819, 2315, 1819, 14, 2315, 14}, intArray0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("QQ $", "3S6Tz[1fqt6 KTQ'rz6", sQLWarning0);
      assertEquals(6, intArray0.length);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLWarning: 3S6Tz[1fqt6 KTQ'rz6", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("3S6Tz[1fqt6 KTQ'rz6", sQLWarning0.getMessage());
      assertEquals("QQ $", sQLTimeoutException0.getMessage());
      assertEquals("3S6Tz[1fqt6 KTQ'rz6", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: QQ $", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      assertArrayEquals(new int[] {1819, 2315, 1819, 14, 2315, 14}, intArray0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "3S6Tz[1fqt6 KTQ'rz6", (Throwable) sQLTimeoutException0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(6, intArray0.length);
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLWarning: 3S6Tz[1fqt6 KTQ'rz6", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("3S6Tz[1fqt6 KTQ'rz6", sQLWarning0.getMessage());
      assertEquals("QQ $", sQLTimeoutException0.getMessage());
      assertEquals("3S6Tz[1fqt6 KTQ'rz6", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: QQ $", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(jsonMappingException0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertArrayEquals(new int[] {1819, 2315, 1819, 14, 2315, 14}, intArray0);
      
      MockIOException mockIOException0 = new MockIOException("+dI|");
      assertNotNull(mockIOException0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // +dI|
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "pbo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<String> class0 = String.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) class0);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<?> class0 = ClassUtil.rawClass((JavaType) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Constructor<ClientInfoStatus> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNull(constructor1);
      
      String string0 = ClassUtil.nonNullString("com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer");
      assertEquals("com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      Iterator<Integer> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<Double> class1 = Double.class;
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ClassUtil.getClassDescription(class1);
      assertEquals("`java.lang.Double`", string0);
      assertNotNull(string0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(beanProperty_Bogus0);
      
      String string1 = ClassUtil.nameOf((Named) beanProperty_Bogus0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("``", string1);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(string1);
      
      String string2 = ":Oj";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("`java.lang.Double`", ":Oj");
      assertEquals(":Oj", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: `java.lang.Double`", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("`java.lang.Double`", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("`java.lang.Double`", sQLInvalidAuthorizationSpecException0);
      assertEquals(":Oj", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: `java.lang.Double`", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("`java.lang.Double`", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: `java.lang.Double`", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("`java.lang.Double`", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      StackTraceElement[] stackTraceElementArray0 = null;
      StackTraceElement[] stackTraceElementArray1 = new StackTraceElement[7];
      String string3 = "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer";
      int int0 = (-1588);
      StackTraceElement stackTraceElement0 = new StackTraceElement("qRTHc\"1", "com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", ":MFt:t+]?]<3<", (-1588));
      assertEquals((-1588), stackTraceElement0.getLineNumber());
      assertEquals("qRTHc\"1.com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer(:MFt:t+]?]<3<)", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(":MFt:t+]?]<3<", stackTraceElement0.getFileName());
      assertEquals("qRTHc\"1", stackTraceElement0.getClassName());
      assertEquals("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", stackTraceElement0.getMethodName());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray1[0] = stackTraceElement0;
      int int1 = (-1484);
      StackTraceElement stackTraceElement1 = null;
      try {
        stackTraceElement1 = new StackTraceElement((String) null, "<xu", "IFfE;!4'P", (-1484));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertTrue(class0.isPrimitive());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertTrue(class0.isPrimitive());
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertTrue(class0.isPrimitive());
      
      MockIOException mockIOException0 = new MockIOException("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      assertNotNull(mockIOException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.util.ClassUtil");
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLTransactionRollbackException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLTransactionRollbackException0.getMessage());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(0, fieldArray0.length);
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertTrue(class0.isPrimitive());
      assertNotNull(fieldArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("char", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      
      MockIOException mockIOException0 = new MockIOException("org.hibernate.proxy.com.fasterxml.jackson.databind.util.AccessPattern");
      assertNotNull(mockIOException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.util.ClassUtil");
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLTransactionRollbackException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLTransactionRollbackException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNotNull(sQLClientInfoException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException1 = (SQLTransactionRollbackException)sQLTransactionRollbackException0.initCause(sQLClientInfoException0);
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLTransactionRollbackException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLTransactionRollbackException1.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLTransactionRollbackException1.toString());
      assertNull(sQLTransactionRollbackException1.getSQLState());
      assertEquals(0, sQLTransactionRollbackException1.getErrorCode());
      assertNotNull(sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      assertSame(sQLTransactionRollbackException1, sQLTransactionRollbackException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLTransactionRollbackException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertSame(sQLTransactionRollbackException0, sQLTransactionRollbackException1);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLTransactionRollbackException0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLTransactionRollbackException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.util.ClassUtil", sQLClientInfoException1.toString());
      assertNull(sQLClientInfoException1.getSQLState());
      assertNotNull(sQLClientInfoException1);
      
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Character character0 = Character.valueOf('e');
      assertEquals('e', (char)character0);
      assertNotNull(character0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.hasClass(character0, class0);
      assertFalse(boolean0);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("oCj\")pt6s", "oCj\")pt6s", 1536, mockError0);
      assertEquals(1536, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("oCj\")pt6s", sQLTransactionRollbackException0.getSQLState());
      assertEquals("oCj\")pt6s", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: oCj\")pt6s", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      MockException mockException0 = new MockException(sQLTransactionRollbackException0);
      assertNotNull(mockException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Error> class0 = Error.class;
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.Error`", string0);
      assertNotNull(string0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2814));
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "net.sf.cglib.proxy.java.io.IOException");
      assertNotNull(jsonMappingException0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      String string1 = ClassUtil.quotedOr(jsonMappingException0, "`java.lang.Error`");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"com.fasterxml.jackson.databind.JsonMappingException: net.sf.cglib.proxy.java.io.IOException\"", string1);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(string1);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      assertNotNull(mockIOException0);
      
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(".zrdt_aKgA8Z^5:kt*l", ".zrdt_aKgA8Z^5:kt*l");
      assertEquals(".zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: .zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(".zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Spliterator<Throwable> spliterator0 = sQLIntegrityConstraintViolationException0.spliterator();
      assertEquals(".zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: .zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(".zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNotNull(spliterator0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) sQLIntegrityConstraintViolationException0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(".zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: .zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(".zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      Class<?> class0 = ClassUtil.classOf(".zrdt_aKgA8Z^5:kt*l");
      assertEquals("class java.lang.String", class0.toString());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      Class<Float> class1 = Float.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertEquals(29, methodArray0.length);
      assertNotNull(methodArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("primitive", string0);
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(string0);
      
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(objectMapper0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertNotNull(jsonFactory1);
      
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertNotNull(jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory2.createGenerator((Writer) charArrayWriter0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertNotNull(writerBasedJsonGenerator0);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      Exception exception0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isAnnotation());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertEquals(0, simpleType0.containedTypeCount());
      assertNotNull(simpleType0);
      
      boolean boolean0 = ClassUtil.hasClass(simpleType0, class1);
      assertFalse(boolean0);
      assertFalse(class1.isAnnotation());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertTrue(simpleType0.isConcrete());
      assertEquals(0, simpleType0.containedTypeCount());
      
      Class<Object> class3 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class3, false);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      Parameter[] parameterArray0 = constructor0.getParameters();
      assertEquals(0, parameterArray0.length);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(parameterArray0);
      
      Class<Annotation> class4 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class4);
      assertFalse(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.Object()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNull(annotation0);
      
      Class<Long> class5 = Long.class;
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class5);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockIOException mockIOException0 = new MockIOException("not a valid long value");
      assertNotNull(mockIOException0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(jsonFactory3);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory3.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(30, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNotNull(writerBasedJsonGenerator0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", (String) null, mockIOException0);
      assertEquals("", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientConnectionException: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<Long> class0 = Long.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(7, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType");
      assertFalse(boolean0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("Ycsj:P|8f02");
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("Ycsj:P|8f02", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: Ycsj:P|8f02", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("ct`c");
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("ct`c", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ct`c", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLTransientException0.addSuppressed(sQLTransactionRollbackException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("Ycsj:P|8f02", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: Ycsj:P|8f02", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("ct`c", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ct`c", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      SQLTransientException sQLTransientException1 = (SQLTransientException)ClassUtil.throwIfIOE(sQLTransientException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("Ycsj:P|8f02", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: Ycsj:P|8f02", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals(0, sQLTransientException1.getErrorCode());
      assertNull(sQLTransientException1.getSQLState());
      assertEquals("Ycsj:P|8f02", sQLTransientException1.getMessage());
      assertEquals("java.sql.SQLTransientException: Ycsj:P|8f02", sQLTransientException1.toString());
      assertNotNull(sQLTransientException1);
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isPrimitive());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<?> class2 = ClassUtil.getDeclaringClass(class0);
      assertNull(class2);
      
      String string0 = ClassUtil.getClassDescription(sQLTransactionRollbackException0);
      assertEquals("`java.sql.SQLTransactionRollbackException`", string0);
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("ct`c", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: ct`c", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(string0);
      
      Class<Short> class3 = Short.class;
      boolean boolean2 = ClassUtil.isProxyType(class3);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<SimpleType> class2 = SimpleType.class;
      String string0 = ClassUtil.getPackageName(class2);
      assertEquals("com.fasterxml.jackson.databind.type", string0);
      assertNotNull(string0);
      
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      Class<Object> class4 = Object.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class3, class4, true);
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertNotNull(list0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.type", " (from class ");
      assertEquals("java.sql.SQLNonTransientConnectionException: com.fasterxml.jackson.databind.type", sQLNonTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.databind.type", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(" (from class ", sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.type", "ZERO_LENGTH_ENUM_ARRAY", sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: com.fasterxml.jackson.databind.type", sQLNonTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.databind.type", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(" (from class ", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.type", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.type", sQLTransactionRollbackException0.getMessage());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackson.databind.type", "com.fasterxml.jackson.databind.type", (-552), sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: com.fasterxml.jackson.databind.type", sQLNonTransientConnectionException0.toString());
      assertEquals("com.fasterxml.jackson.databind.type", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(" (from class ", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: com.fasterxml.jackson.databind.type", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.type", sQLTransactionRollbackException0.getMessage());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: com.fasterxml.jackson.databind.type", sQLIntegrityConstraintViolationException0.toString());
      assertEquals((-552), sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.type", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("com.fasterxml.jackson.databind.type", sQLIntegrityConstraintViolationException0.getSQLState());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals("double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertEquals("double", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class0, false);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertNotNull(list0);
      
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      Class<Double> class2 = Double.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isPrimitive());
      assertEquals("double", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1041, class3.getModifiers());
      assertNotNull(class3);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-7));
      assertEquals((byte) (-7), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) byte0);
      assertFalse(boolean0);
      
      Class<?> class0 = ClassUtil.classOf(byte0);
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Byte", class0.toString());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.equals((Object)class0));
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Byte", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("byte", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      assertNotSame(class0, class1);
      assertNotSame(class1, class0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class0, class1, list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list1.isEmpty());
      assertEquals(4, list1.size());
      assertNotNull(list1);
      assertSame(list0, list1);
      assertSame(list1, list0);
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertNotNull(resolvedRecursiveType0);
      
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler((Object) null);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isContainerType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertNotNull(javaType0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isContainerType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertNotNull(referenceType0);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentValueHandler(class0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isContainerType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isFinal());
      assertTrue(referenceType1.isEnumType());
      assertTrue(referenceType1.hasContentType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertNotNull(referenceType1);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      
      Class<?> class2 = ClassUtil.rawClass(referenceType1);
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isContainerType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.isFinal());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isCollectionLikeType());
      assertTrue(referenceType1.isFinal());
      assertTrue(referenceType1.isEnumType());
      assertTrue(referenceType1.hasContentType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isPrimitive());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(16385, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class2.toString());
      assertNotNull(class2);
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNull(annotation0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      Class<Character> class2 = Character.class;
      String string0 = ClassUtil.isLocalType(class2, true);
      assertNull(string0);
      
      Class<Character> class3 = Character.class;
      Class<JsonMappingException> class4 = JsonMappingException.class;
      String string1 = ClassUtil.isLocalType(class4, true);
      assertNull(string1);
      
      Class<Error> class5 = Error.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class5, class2);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      assertSame(class2, class3);
      
      Class<Long> class6 = Long.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class6);
      assertFalse(boolean0);
      
      MockIOException mockIOException0 = new MockIOException((String) null);
      assertNotNull(mockIOException0);
      
      Throwable throwable0 = ClassUtil.throwIfError(mockIOException0);
      assertNotNull(throwable0);
      assertSame(throwable0, mockIOException0);
      assertSame(mockIOException0, throwable0);
      
      Byte byte0 = new Byte((byte) (-79));
      assertEquals((byte) (-79), (byte)byte0);
      assertNotNull(byte0);
      
      String string2 = ClassUtil.getClassDescription(class3);
      assertEquals("`java.lang.Character`", string2);
      assertNotNull(string2);
      assertSame(class3, class2);
      
      Class<ObjectNode> class7 = ObjectNode.class;
      Constructor<ObjectNode> constructor1 = ClassUtil.findConstructor(class7, false);
      assertNull(constructor1);
      
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class0, class0);
      assertFalse(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1981);
      intArray0[1] = (-1653959476);
      intArray0[2] = (-575);
      intArray0[3] = 14;
      intArray0[4] = 2315;
      intArray0[5] = 1819;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-1981), (-1653959476), (-575), 14, 2315, 1819}, intArray0);
      
      SQLWarning sQLWarning0 = new SQLWarning("Unknown type ", batchUpdateException0);
      assertEquals(6, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("java.sql.SQLWarning: Unknown type ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("Unknown type ", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      assertArrayEquals(new int[] {(-1981), (-1653959476), (-575), 14, 2315, 1819}, intArray0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("+dI|", "QQ $", sQLWarning0);
      assertEquals(6, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("java.sql.SQLWarning: Unknown type ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("Unknown type ", sQLWarning0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: +dI|", sQLTimeoutException0.toString());
      assertEquals("QQ $", sQLTimeoutException0.getSQLState());
      assertEquals("+dI|", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      assertArrayEquals(new int[] {(-1981), (-1653959476), (-575), 14, 2315, 1819}, intArray0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "+dI|", (Throwable) sQLTimeoutException0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(6, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals("java.sql.SQLWarning: Unknown type ", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("Unknown type ", sQLWarning0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: +dI|", sQLTimeoutException0.toString());
      assertEquals("QQ $", sQLTimeoutException0.getSQLState());
      assertEquals("+dI|", sQLTimeoutException0.getMessage());
      assertNotNull(jsonMappingException0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertArrayEquals(new int[] {(-1981), (-1653959476), (-575), 14, 2315, 1819}, intArray0);
      
      MockIOException mockIOException0 = new MockIOException("QQ $");
      assertNotNull(mockIOException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1909);
      intArray0[1] = 273;
      intArray0[2] = (-1807324828);
      intArray0[3] = 65599;
      intArray0[4] = 60000;
      intArray0[5] = 128;
      intArray0[6] = (-1042);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-1909), 273, (-1807324828), 65599, 60000, 128, (-1042)}, intArray0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, batchUpdateException0);
      assertEquals(7, intArray0.length);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      assertArrayEquals(new int[] {(-1909), 273, (-1807324828), 65599, 60000, 128, (-1042)}, intArray0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "2nsnjboE/><{>qDT.:Y", (Throwable) sQLTimeoutException0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(7, intArray0.length);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNull(sQLTimeoutException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertNotNull(jsonMappingException0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertArrayEquals(new int[] {(-1909), 273, (-1807324828), 65599, 60000, 128, (-1042)}, intArray0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 2nsnjboE/><{>qDT.:Y
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNotNull(batchUpdateException0);
      
      SQLWarning sQLWarning0 = new SQLWarning("ZERO_LENGTH_ENUM_ARRAY", batchUpdateException0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ZERO_LENGTH_ENUM_ARRAY", sQLWarning0.toString());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType", "Unknown type ", sQLWarning0);
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ZERO_LENGTH_ENUM_ARRAY", sQLWarning0.toString());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("Unknown type ", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType", sQLTimeoutException0.toString());
      assertNotNull(sQLTimeoutException0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "ZERO_LENGTH_ENUM_ARRAY", (Throwable) sQLWarning0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning: ZERO_LENGTH_ENUM_ARRAY", sQLWarning0.toString());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(jsonMappingException0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ZERO_LENGTH_ENUM_ARRAY
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Class<String> class0 = String.class;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)100;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)8;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte) (-50), (byte) (-1), (byte)100, (byte)0, (byte)8}, byteArray0);
      
      boolean boolean3 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<Float> class2 = Float.class;
      boolean boolean4 = ClassUtil.isBogusClass(class2);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      Class<AccessPattern> class3 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class3, (Object) null, "WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = ClassUtil.quotedOr((Object) null, "57@1]p~JK`]B]*");
      assertNotNull(string0);
      
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<Double> class2 = Double.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertEquals(29, methodArray0.length);
      assertNotNull(methodArray0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Double> class0 = Double.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(65534);
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertNotNull(placeholderForType0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      HashMap<String, ReferenceType> hashMap0 = new HashMap<String, ReferenceType>(47);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertNotNull(simpleFilterProvider0);
      
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      ObjectMapper objectMapper2 = objectMapper1.addMixIn(class1, class0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertNotNull(objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      PropertyAccessor propertyAccessor0 = PropertyAccessor.CREATOR;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertNotNull(objectMapper3);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectMapper objectMapper4 = objectMapper2.enable(jsonParser_FeatureArray0);
      assertEquals(2, jsonParser_FeatureArray0.length);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertNotNull(objectMapper4);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper4);
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      ObjectMapper objectMapper5 = objectMapper1.disable(serializationFeature0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertNotNull(objectMapper5);
      assertSame(objectMapper5, objectMapper0);
      assertSame(objectMapper5, objectMapper3);
      assertSame(objectMapper5, objectMapper4);
      assertSame(objectMapper5, objectMapper2);
      assertSame(objectMapper5, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(object0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(simpleFilterProvider0.willFailOnUnknownId());
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNotNull(sQLNonTransientConnectionException0);
      
      Class<Object> class2 = Object.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte) (-7));
      assertEquals((byte) (-7), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) byte0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Double> class0 = Double.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1025, class1.getModifiers());
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertNotNull(class1);
      
      Class<?> class2 = ClassUtil.classOf((Object) null);
      assertNull(class2);
      
      boolean boolean2 = ClassUtil.isNonStaticInnerClass(class0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class3, false);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      Annotation[][] annotationArray0 = constructor0.getParameterAnnotations();
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotationArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor0);
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor1);
      
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(classUtil_Ctor1._ctor);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertFalse(classUtil_Ctor2.equals((Object)classUtil_Ctor0));
      assertFalse(classUtil_Ctor2.equals((Object)classUtil_Ctor1));
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor2);
      
      int int0 = classUtil_Ctor1.getParamCount();
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor2));
      assertEquals(0, int0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor2);
      
      ClassUtil.Ctor classUtil_Ctor3 = new ClassUtil.Ctor(classUtil_Ctor2._ctor);
      assertFalse(classUtil_Ctor3.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor3.equals((Object)classUtil_Ctor2));
      assertFalse(classUtil_Ctor3.equals((Object)classUtil_Ctor0));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor2));
      assertFalse(classUtil_Ctor2.equals((Object)classUtil_Ctor0));
      assertFalse(classUtil_Ctor2.equals((Object)classUtil_Ctor1));
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor3);
      
      Constructor<?> constructor1 = classUtil_Ctor1.getConstructor();
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor3));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor2));
      assertFalse(constructor1.isAccessible());
      assertEquals(1, constructor1.getModifiers());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor1);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor3);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor0);
      assertNotSame(classUtil_Ctor1, classUtil_Ctor2);
      
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertNotNull(simpleType0);
      
      ObjectIdGenerator<ArrayType> objectIdGenerator0 = (ObjectIdGenerator<ArrayType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(simpleType0, (PropertyName) null, objectIdGenerator0, false);
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertNotNull(objectIdWriter0);
      assertFalse(objectIdWriter0.alwaysAsId);
      
      ObjectIdWriter objectIdWriter1 = objectIdWriter0.withSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(objectIdWriter1.equals((Object)objectIdWriter0));
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertNotNull(objectIdWriter1);
      assertNotSame(objectIdWriter0, objectIdWriter1);
      assertNotSame(objectIdWriter1, objectIdWriter0);
      assertFalse(objectIdWriter0.alwaysAsId);
      assertFalse(objectIdWriter1.alwaysAsId);
      
      SimpleType simpleType1 = (SimpleType)objectIdWriter1.idType;
      assertFalse(simpleType1.isFinal());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.useStaticType());
      assertTrue(simpleType1.isJavaLangObject());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isAbstract());
      assertTrue(simpleType1.isConcrete());
      assertNotNull(simpleType1);
      assertSame(simpleType1, simpleType0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException(simpleType1, "JSON", "org.hibernate.proxy.java.lang.Float");
      assertFalse(objectIdWriter0.equals((Object)objectIdWriter1));
      assertFalse(objectIdWriter1.equals((Object)objectIdWriter0));
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType1.isFinal());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.useStaticType());
      assertTrue(simpleType1.isJavaLangObject());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isAbstract());
      assertTrue(simpleType1.isConcrete());
      assertEquals("JSON", invalidTypeIdException0.getTypeId());
      assertNotNull(invalidTypeIdException0);
      assertSame(simpleType0, simpleType1);
      assertNotSame(objectIdWriter0, objectIdWriter1);
      assertNotSame(objectIdWriter1, objectIdWriter0);
      assertSame(simpleType1, simpleType0);
      assertFalse(objectIdWriter0.alwaysAsId);
      assertFalse(objectIdWriter1.alwaysAsId);
      
      SQLWarning sQLWarning0 = new SQLWarning("JSON", "JSON");
      assertEquals("java.sql.SQLWarning: JSON", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("JSON", sQLWarning0.getSQLState());
      assertEquals("JSON", sQLWarning0.getMessage());
      assertNotNull(sQLWarning0);
      
      invalidTypeIdException0.addSuppressed(sQLWarning0);
      assertFalse(objectIdWriter0.equals((Object)objectIdWriter1));
      assertFalse(objectIdWriter1.equals((Object)objectIdWriter0));
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType1.isFinal());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.useStaticType());
      assertTrue(simpleType1.isJavaLangObject());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isAbstract());
      assertTrue(simpleType1.isConcrete());
      assertEquals("JSON", invalidTypeIdException0.getTypeId());
      assertEquals("java.sql.SQLWarning: JSON", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("JSON", sQLWarning0.getSQLState());
      assertEquals("JSON", sQLWarning0.getMessage());
      assertSame(simpleType0, simpleType1);
      assertNotSame(objectIdWriter0, objectIdWriter1);
      assertNotSame(objectIdWriter1, objectIdWriter0);
      assertSame(simpleType1, simpleType0);
      assertFalse(objectIdWriter0.alwaysAsId);
      assertFalse(objectIdWriter1.alwaysAsId);
      
      InvalidTypeIdException invalidTypeIdException1 = (InvalidTypeIdException)ClassUtil.getRootCause(invalidTypeIdException0);
      assertFalse(objectIdWriter0.equals((Object)objectIdWriter1));
      assertFalse(objectIdWriter1.equals((Object)objectIdWriter0));
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType1.isFinal());
      assertFalse(simpleType1.isArrayType());
      assertFalse(simpleType1.hasHandlers());
      assertFalse(simpleType1.hasContentType());
      assertFalse(simpleType1.isCollectionLikeType());
      assertFalse(simpleType1.isEnumType());
      assertFalse(simpleType1.isContainerType());
      assertFalse(simpleType1.isMapLikeType());
      assertFalse(simpleType1.isInterface());
      assertFalse(simpleType1.isPrimitive());
      assertFalse(simpleType1.hasValueHandler());
      assertFalse(simpleType1.useStaticType());
      assertTrue(simpleType1.isJavaLangObject());
      assertEquals(0, simpleType1.containedTypeCount());
      assertFalse(simpleType1.isAbstract());
      assertTrue(simpleType1.isConcrete());
      assertEquals("JSON", invalidTypeIdException0.getTypeId());
      assertEquals("JSON", invalidTypeIdException1.getTypeId());
      assertNotNull(invalidTypeIdException1);
      assertSame(simpleType0, simpleType1);
      assertNotSame(objectIdWriter0, objectIdWriter1);
      assertNotSame(objectIdWriter1, objectIdWriter0);
      assertSame(simpleType1, simpleType0);
      assertSame(invalidTypeIdException0, invalidTypeIdException1);
      assertSame(invalidTypeIdException1, invalidTypeIdException0);
      assertFalse(objectIdWriter0.alwaysAsId);
      assertFalse(objectIdWriter1.alwaysAsId);
      
      boolean boolean3 = ClassUtil.isJacksonStdImpl((Object) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{E]");
      assertFalse(boolean0);
      
      SimpleType simpleType0 = ClassUtil.nonNull((SimpleType) null, (SimpleType) null);
      assertNull(simpleType0);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertEquals(2, typeArray0.length);
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(typeArray0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null);
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransactionRollbackException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLTransactionRollbackException0.toString());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertNull(sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: java.sql.SQLTransactionRollbackException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException", sQLClientInfoException0.getMessage());
      assertNotNull(sQLClientInfoException0);
      
      String string0 = ClassUtil.getPackageName(class1);
      assertEquals("com.fasterxml.jackson.databind.type", string0);
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(string0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNull(annotation0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      Class<Character> class2 = Character.class;
      String string0 = ClassUtil.isLocalType(class2, true);
      assertNull(string0);
      
      Class<String> class3 = String.class;
      Class<AccessibleObject> class4 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class3, class4);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class1);
      assertFalse(boolean0);
      
      MockIOException mockIOException0 = new MockIOException("p/{");
      assertNotNull(mockIOException0);
      
      Throwable throwable0 = ClassUtil.throwIfError(mockIOException0);
      assertNotNull(throwable0);
      assertSame(mockIOException0, throwable0);
      assertSame(throwable0, mockIOException0);
      
      Byte byte0 = new Byte((byte) (-5));
      assertEquals((byte) (-5), (byte)byte0);
      assertNotNull(byte0);
      
      String string1 = ClassUtil.getClassDescription(byte0);
      assertEquals("`java.lang.Byte`", string1);
      assertNotNull(string1);
      
      Class<ObjectNode> class5 = ObjectNode.class;
      Constructor<ObjectNode> constructor1 = ClassUtil.findConstructor(class5, false);
      assertNull(constructor1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class0);
      assertFalse(boolean0);
      
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, (JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.RuntimeException with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      Class<Float> class2 = Float.class;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(".8m4b}O7", (String) null, (-2410));
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals((-2410), sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(".8m4b}O7", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: .8m4b}O7", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      String string1 = ClassUtil.nullOrToString((Object) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      assertNotNull(annotationIntrospector1);
      
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector1, annotationIntrospector0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      Class<?> class0 = ClassUtil.classOf(annotationIntrospector0);
      assertEquals("class com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector$1", class0.toString());
      assertEquals(8, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      Class<Float> class1 = Float.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      assertEquals(29, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNotNull(sQLClientInfoException0);
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("net.sf.cglib.proxy.java.lang.Object", "JSON", (-80), map0);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals("net.sf.cglib.proxy.java.lang.Object", sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException: net.sf.cglib.proxy.java.lang.Object", sQLClientInfoException1.toString());
      assertEquals("JSON", sQLClientInfoException1.getSQLState());
      assertEquals((-80), sQLClientInfoException1.getErrorCode());
      assertNotNull(sQLClientInfoException1);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.java.lang.Object
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<Character> class2 = Character.class;
      String string0 = ClassUtil.isLocalType(class2, false);
      assertNull(string0);
      assertSame(class2, class0);
      
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertEquals("char", class3.toString());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isPrimitive());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertNotNull(class3);
      assertSame(class2, class0);
      
      Class<Error> class4 = Error.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class4, class2, false);
      assertFalse(list0.contains(class3));
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      assertSame(class2, class0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)77, (byte)41, (byte) (-57), (byte) (-1), (byte) (-57), (byte)9, (byte) (-21), (byte)0}, byteArray0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      SimpleType simpleType0 = ClassUtil.nonNull((SimpleType) null, (SimpleType) null);
      assertNull(simpleType0);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class2);
      assertFalse(list0.isEmpty());
      assertEquals(6, list0.size());
      assertNotNull(list0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<ClientInfoStatus> class3 = ClientInfoStatus.class;
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class0, class3, true);
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.isEmpty());
      assertEquals(7, list1.size());
      assertNotNull(list1);
      assertNotSame(list1, list0);
      
      Class<Character> class4 = Character.class;
      List<Class<?>> list2 = ClassUtil.findSuperTypes(class4, class3, list0);
      assertFalse(list2.equals((Object)list1));
      assertFalse(list0.equals((Object)list1));
      assertFalse(list2.isEmpty());
      assertEquals(7, list2.size());
      assertFalse(list0.isEmpty());
      assertEquals(7, list0.size());
      assertNotNull(list2);
      assertSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotSame(list0, list1);
      assertSame(list0, list2);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Object> class1 = Object.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertNull(class2);
      
      SimpleType simpleType0 = ClassUtil.nonNull((SimpleType) null, (SimpleType) null);
      assertNull(simpleType0);
      
      Class<?> class3 = ClassUtil.primitiveType(class0);
      assertNull(class3);
      
      Class<Boolean> class4 = Boolean.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class4, true);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      Class<String> class5 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class5, class1, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      String string1 = ClassUtil.getClassDescription((Object) null);
      assertEquals("unknown", string1);
      assertNotNull(string1);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      boolean boolean2 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      System.setCurrentTimeMillis((-1135L));
      Class<Float> class3 = Float.class;
      Class class4 = (Class)ClassUtil.getGenericSuperclass(class3);
      assertFalse(class4.equals((Object)class2));
      assertEquals(1025, class4.getModifiers());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isArray());
      assertFalse(class4.isInterface());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals("class java.lang.Number", class4.toString());
      assertNotNull(class4);
      assertNotSame(class4, class2);
      
      Long long0 = new Long(1940L);
      assertEquals(1940L, (long)long0);
      assertNotNull(long0);
      
      Long long1 = ClassUtil.nonNull(long0, (Long) null);
      assertEquals(1940L, (long)long1);
      assertNotNull(long1);
      
      System.setCurrentTimeMillis(3L);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      String string2 = "l6s8?rIP,7";
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement("l6s8?rIP,7", (String) null, (String) null, (-1477));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertNull(annotation0);
      
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      assertNull(annotatedClass0);
      
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
      
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, class3, true);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Throwable throwable1 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<Character> class2 = Character.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, class2, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class2, (Class<?>) null);
      assertFalse(list1.equals((Object)list0));
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      String string0 = ClassUtil.classNameOf(list0);
      assertFalse(list0.equals((Object)list1));
      assertEquals("`java.util.LinkedList`", string0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertTrue(class1.isEnum());
      assertEquals(16401, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertNotNull(class1);
      
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(annotationArray0);
      
      Parameter[] parameterArray0 = constructor0.getParameters();
      assertEquals(0, parameterArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(parameterArray0);
      
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class3);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNull(annotation0);
      
      Class<?>[] classArray0 = constructor0.getParameterTypes();
      assertEquals(0, classArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classArray0);
      
      Class<Annotation> class4 = Annotation.class;
      Class<Annotation> class5 = Annotation.class;
      Annotation annotation1 = constructor0.getDeclaredAnnotation(class5);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNull(annotation1);
      assertSame(class5, class4);
      assertSame(class5, class3);
      
      String string0 = ClassUtil.classNameOf((Object) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      Class<Float> class6 = Float.class;
      Class<MapLikeType> class7 = MapLikeType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class6, class7);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      Class<Double> class8 = Double.class;
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class4, class8, false);
      assertFalse(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertSame(class4, class3);
      assertSame(class4, class5);
      
      Class<RuntimeException> class9 = RuntimeException.class;
      Class<ArrayType> class10 = ArrayType.class;
      List<Class<?>> list2 = ClassUtil.findRawSuperTypes(class9, class10, true);
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.isEmpty());
      assertEquals(4, list2.size());
      assertNotNull(list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class1.toString());
      assertNotNull(class1);
      
      SimpleType simpleType0 = ClassUtil.nonNull((SimpleType) null, (SimpleType) null);
      assertNull(simpleType0);
      
      Class<CollectionType> class2 = CollectionType.class;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"USl`A>ljZ9");
      assertFalse(boolean0);
      
      Class class3 = (Class)ClassUtil.getGenericSuperclass(class2);
      assertFalse(class3.isAnnotation());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionLikeType", class3.toString());
      assertNotNull(class3);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("\"USl`A>ljZ9", "keyType", 925);
      assertEquals("java.sql.SQLTransactionRollbackException: \"USl`A>ljZ9", sQLTransactionRollbackException0.toString());
      assertEquals("\"USl`A>ljZ9", sQLTransactionRollbackException0.getMessage());
      assertEquals(925, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("keyType", sQLTransactionRollbackException0.getSQLState());
      assertNotNull(sQLTransactionRollbackException0);
      
      sQLNonTransientConnectionException0.setNextException(sQLTransactionRollbackException0);
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: \"USl`A>ljZ9", sQLTransactionRollbackException0.toString());
      assertEquals("\"USl`A>ljZ9", sQLTransactionRollbackException0.getMessage());
      assertEquals(925, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("keyType", sQLTransactionRollbackException0.getSQLState());
      
      // Undeclared exception!
      try { 
        mockError0.setStackTrace((StackTraceElement[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotationArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertNotNull(constructor1);
      
      boolean boolean1 = ClassUtil.isConcrete((Member) constructor1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(0, annotationArray1.length);
      assertFalse(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertTrue(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(16401, class1.getModifiers());
      assertNotNull(class1);
      
      Class<MapType> class2 = MapType.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNull(class3);
      
      String string0 = ClassUtil.nameOf(class1);
      assertEquals("`java.sql.ClientInfoStatus`", string0);
      assertTrue(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(16401, class1.getModifiers());
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)31;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, class2, true);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      assertNotNull(annotationIntrospector1);
      
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector1, annotationIntrospector0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertNotNull(placeholderForType0);
      
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(placeholderForType0);
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectReader0, (OutputStream) null, byteArray0, (-10), false);
      assertEquals(2, byteArray0.length);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals((-10), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("C", "C", 3);
      assertEquals(3, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: C", sQLSyntaxErrorException0.toString());
      assertEquals("C", sQLSyntaxErrorException0.getSQLState());
      assertEquals("C", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("vals", sQLSyntaxErrorException0);
      assertEquals(3, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: C", sQLSyntaxErrorException0.toString());
      assertEquals("C", sQLSyntaxErrorException0.getSQLState());
      assertEquals("C", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: vals", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("vals", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      SQLDataException sQLDataException0 = new SQLDataException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", sQLRecoverableException0);
      assertEquals("java.sql.SQLDataException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType", sQLDataException0.getMessage());
      assertEquals(3, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: C", sQLSyntaxErrorException0.toString());
      assertEquals("C", sQLSyntaxErrorException0.getSQLState());
      assertEquals("C", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: vals", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("vals", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      MockException mockException0 = new MockException("C", sQLSyntaxErrorException0);
      assertNotNull(mockException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: C
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, (Class<?>) null, true);
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertNotNull(list0);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<AccessPattern> class3 = AccessPattern.class;
      List<Class<?>> list1 = ClassUtil.findSuperClasses(class2, class3, true);
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.isEmpty());
      assertEquals(4, list1.size());
      assertNotNull(list1);
      assertNotSame(list1, list0);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class2);
      assertFalse(boolean0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, list0, true);
      assertFalse(list0.equals((Object)list1));
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertNotNull(byteQuadsCanonicalizer0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Character> class4 = Character.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class4);
      assertEquals(2, typeArray0.length);
      assertNotNull(typeArray0);
      
      Type[] typeArray1 = ClassUtil.getGenericInterfaces(class0);
      assertFalse(typeArray1.equals((Object)typeArray0));
      assertEquals(1, typeArray1.length);
      assertNotNull(typeArray1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNotNull(sQLNonTransientConnectionException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientConnectionException0, "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<Character> class2 = Character.class;
      String string0 = ClassUtil.isLocalType(class2, false);
      assertNull(string0);
      assertSame(class2, class0);
      
      Class<Float> class3 = Float.class;
      Class<Object> class4 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class3, class4);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      boolean boolean1 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(class0, class2);
      
      Class<Long> class5 = Long.class;
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class4, class5, true);
      assertFalse(list1.equals((Object)list0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertNull(annotation0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(bufferRecycler0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ObjectMapper objectMapper2 = objectMapper0.copy();
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectMapper2);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      
      JsonFactory jsonFactory1 = new JsonFactory();
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotNull(jsonFactory1);
      
      BufferRecycler bufferRecycler1 = jsonFactory0._getBufferRecycler();
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(bufferRecycler1);
      assertNotSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(bufferRecycler1, bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1204), true);
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-1204), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = null;
      try {
        uTF8JsonGenerator1 = new UTF8JsonGenerator(iOContext0, 3968, objectMapper1, byteArrayBuilder0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isSynthetic());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNull(annotation0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      BufferRecycler bufferRecycler1 = jsonFactory0._getBufferRecycler();
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(bufferRecycler1);
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 3);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-489), objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3485, false);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3485, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-489), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      byteArrayBuilder0.appendFourBytes(2497);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(4, byteArrayBuilder0.size());
      assertEquals(4, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertNotNull(serializedString0);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(4, byteArrayBuilder0.size());
      assertEquals(4, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3485, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-489), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals((-489), uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(3485, uTF8JsonGenerator1.getOutputBuffered());
      assertNotNull(uTF8JsonGenerator1);
      assertNotSame(bufferRecycler0, bufferRecycler1);
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator1, "JSON");
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(4, byteArrayBuilder0.size());
      assertEquals(4, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3485, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-489), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals((-489), uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(3485, uTF8JsonGenerator1.getOutputBuffered());
      assertNotNull(jsonMappingException0);
      assertNotSame(bufferRecycler0, bufferRecycler1);
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      String string0 = ClassUtil.nullOrToString(jsonMappingException0);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(4, byteArrayBuilder0.size());
      assertEquals(4, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(3485, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals((-489), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals((-489), uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertEquals(3485, uTF8JsonGenerator1.getOutputBuffered());
      assertNotNull(string0);
      assertNotSame(bufferRecycler0, bufferRecycler1);
      assertNotSame(bufferRecycler1, bufferRecycler0);
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(16401, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertNotNull(class1);
      
      Class<MapType> class2 = MapType.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNull(class3);
      
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte) (-85);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)120, (byte) (-21), (byte) (-47), (byte)5, (byte)20, (byte) (-70), (byte)73, (byte)31, (byte) (-85)}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "REO:A:doy/}maa8K");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertEquals(0, typeArray0.length);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(16401, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertNotNull(typeArray0);
      
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertNotNull(annotationArray0);
      
      Parameter[] parameterArray0 = constructor0.getParameters();
      assertEquals(0, parameterArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertNotNull(parameterArray0);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray1.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(0, annotationArray2.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertNotNull(annotationArray2);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      
      Class<?>[] classArray0 = constructor0.getParameterTypes();
      assertEquals(0, classArray0.length);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertNotNull(classArray0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertNull(annotation0);
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      
      String string0 = ClassUtil.classNameOf(constructor0);
      assertEquals("`java.lang.reflect.Constructor`", string0);
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isAccessible());
      assertNotNull(string0);
      
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<String> class2 = String.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNull(class3);
      
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.Exception", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertNotNull(class2);
      
      Class<Integer> class3 = Integer.class;
      Class<?> class4 = ClassUtil.primitiveType(class3);
      assertEquals("int", class4.toString());
      assertEquals(1041, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertTrue(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertNotNull(class4);
      
      Class<IOException> class5 = IOException.class;
      Method[] methodArray1 = ClassUtil.getClassMethods(class5);
      assertFalse(methodArray1.equals((Object)methodArray0));
      assertEquals(0, methodArray1.length);
      assertNotNull(methodArray1);
      assertSame(class5, class0);
      assertNotSame(methodArray1, methodArray0);
      
      String string0 = ClassUtil.backticked("Value returned by 'any-getter' %s() not java.util.Map but %s");
      assertEquals("`Value returned by 'any-getter' %s() not java.util.Map but %s`", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotationArray0);
      
      Parameter[] parameterArray0 = constructor0.getParameters();
      assertEquals(0, parameterArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(parameterArray0);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray1.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(0, annotationArray2.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(annotationArray2);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      Class<?>[] classArray0 = constructor0.getParameterTypes();
      assertEquals(0, classArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(classArray0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNull(annotation0);
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      
      String string0 = ClassUtil.classNameOf(constructor0);
      assertEquals("`java.lang.reflect.Constructor`", string0);
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertNotNull(string0);
      
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<String> class2 = String.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNull(class3);
      
      Class<Long> class4 = Long.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class4);
      assertEquals(52, methodArray0.length);
      assertNotNull(methodArray0);
      
      String string1 = ClassUtil.backticked("&{>?X65>PFeS%u");
      assertFalse(string1.equals((Object)string0));
      assertEquals("`&{>?X65>PFeS%u`", string1);
      assertNotNull(string1);
      
      Class<Long> class5 = Long.class;
      Class<?> class6 = ClassUtil.getOuterClass(class5);
      assertNull(class6);
      assertSame(class5, class4);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      Class<JsonMappingException> class2 = JsonMappingException.class;
      Class<NoClass> class3 = NoClass.class;
      Class<Object> class4 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class4);
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertNotNull(simpleType0);
      
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class3, (JavaType) simpleType0);
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertNotNull(typeBindings0);
      
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class2, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0, javaTypeArray0[0]);
      assertEquals(1, javaTypeArray0.length);
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertNotNull(mapType0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException(mapType0, "\"%s\"", "Failed to instantiate class ");
      assertEquals(1, javaTypeArray0.length);
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertEquals("\"%s\"", invalidTypeIdException0.getTypeId());
      assertNotNull(invalidTypeIdException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Failed to instantiate class ", "*YH$lkwI", invalidTypeIdException0);
      assertEquals(1, javaTypeArray0.length);
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertEquals("\"%s\"", invalidTypeIdException0.getTypeId());
      assertEquals("*YH$lkwI", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Failed to instantiate class ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Failed to instantiate class ", sQLIntegrityConstraintViolationException0.toString());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      InvalidTypeIdException invalidTypeIdException1 = (InvalidTypeIdException)ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      assertEquals(1, javaTypeArray0.length);
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertEquals("\"%s\"", invalidTypeIdException0.getTypeId());
      assertEquals("*YH$lkwI", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Failed to instantiate class ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Failed to instantiate class ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("\"%s\"", invalidTypeIdException1.getTypeId());
      assertNotNull(invalidTypeIdException1);
      assertSame(invalidTypeIdException0, invalidTypeIdException1);
      assertSame(invalidTypeIdException1, invalidTypeIdException0);
      
      String string0 = ClassUtil.backticked("*YH$lkwI");
      assertEquals("`*YH$lkwI`", string0);
      assertNotNull(string0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      InvalidTypeIdException invalidTypeIdException2 = (InvalidTypeIdException)ClassUtil.getRootCause(invalidTypeIdException1);
      assertEquals(1, javaTypeArray0.length);
      assertEquals("\"%s\"", invalidTypeIdException2.getTypeId());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isArrayType());
      assertEquals("\"%s\"", invalidTypeIdException0.getTypeId());
      assertEquals("*YH$lkwI", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("Failed to instantiate class ", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: Failed to instantiate class ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("\"%s\"", invalidTypeIdException1.getTypeId());
      assertNotNull(invalidTypeIdException2);
      assertSame(invalidTypeIdException2, invalidTypeIdException0);
      assertSame(invalidTypeIdException2, invalidTypeIdException1);
      assertSame(invalidTypeIdException0, invalidTypeIdException1);
      assertSame(invalidTypeIdException0, invalidTypeIdException2);
      assertSame(invalidTypeIdException1, invalidTypeIdException2);
      assertSame(invalidTypeIdException1, invalidTypeIdException0);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, "qJi#V_^U=<581&zz6", "type must be provided", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertNotNull(list0);
      
      String string0 = ClassUtil.nonNullString("keyUniverse");
      assertEquals("keyUniverse", string0);
      assertNotNull(string0);
      
      Class<Short> class2 = Short.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      assertEquals(1025, class3.getModifiers());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.lang.Number", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isArray());
      assertNotNull(class3);
      
      Class<ClientInfoStatus> class4 = ClientInfoStatus.class;
      boolean boolean0 = ClassUtil.isProxyType(class4);
      assertFalse(boolean0);
      
      Class<ArrayType> class5 = ArrayType.class;
      boolean boolean1 = ClassUtil.isNonStaticInnerClass(class5);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "keyUniverse");
      assertNotNull(jsonMappingException0);
      
      Throwable throwable0 = ClassUtil.getRootCause(jsonMappingException0);
      assertNotNull(throwable0);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      
      SQLWarning sQLWarning0 = new SQLWarning(throwable0);
      assertEquals("java.sql.SQLWarning: com.fasterxml.jackson.databind.JsonMappingException: keyUniverse", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: keyUniverse", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      Throwable throwable1 = ClassUtil.getRootCause(sQLWarning0);
      assertEquals("java.sql.SQLWarning: com.fasterxml.jackson.databind.JsonMappingException: keyUniverse", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: keyUniverse", sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertNotNull(throwable1);
      assertSame(jsonMappingException0, throwable1);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      assertSame(throwable0, throwable1);
      assertSame(throwable1, jsonMappingException0);
      assertSame(throwable1, throwable0);
      
      Class<Object> class6 = Object.class;
      Class<? extends Enum<?>> class7 = ClassUtil.findEnumType(class6);
      assertNull(class7);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      SQLDataException sQLDataException0 = new SQLDataException("^vd");
      assertEquals("^vd", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ^vd", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("^vd", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLDataException0);
      assertEquals("^vd", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ^vd", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ^vd", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("^vd", sQLTimeoutException0.getMessage());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 3970);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertNotNull(coreXMLDeserializers_Std0);
      
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      assertEquals(AccessPattern.ALWAYS_NULL, accessPattern0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(accessPattern0, 8);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(8, jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      assertEquals("^vd", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ^vd", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ^vd", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("^vd", sQLTimeoutException0.getMessage());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTimeoutException0.getSQLState());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(8, jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType", "^vd", 3970, jsonMappingException0);
      assertEquals("^vd", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ^vd", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ^vd", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("^vd", sQLTimeoutException0.getMessage());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTimeoutException0.getSQLState());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(8, jsonMappingException_Reference0.getIndex());
      assertEquals("java.sql.SQLTransientException: org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTransientException0.toString());
      assertEquals("^vd", sQLTransientException0.getSQLState());
      assertEquals(3970, sQLTransientException0.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTransientException0.getMessage());
      assertNotNull(sQLTransientException0);
      
      SQLTransientException sQLTransientException1 = (SQLTransientException)ClassUtil.throwIfRTE(sQLTransientException0);
      assertEquals("^vd", sQLDataException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: ^vd", sQLDataException0.toString());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ^vd", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("^vd", sQLTimeoutException0.getMessage());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTimeoutException0.getSQLState());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals(8, jsonMappingException_Reference0.getIndex());
      assertEquals("java.sql.SQLTransientException: org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTransientException0.toString());
      assertEquals("^vd", sQLTransientException0.getSQLState());
      assertEquals(3970, sQLTransientException0.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException: org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTransientException1.toString());
      assertEquals("^vd", sQLTransientException1.getSQLState());
      assertEquals(3970, sQLTransientException1.getErrorCode());
      assertEquals("org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType", sQLTransientException1.getMessage());
      assertNotNull(sQLTransientException1);
      assertSame(sQLTransientException0, sQLTransientException1);
      assertSame(sQLTransientException1, sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Double double0 = new Double((-1753.8728137953478));
      assertEquals((-1753.8728137953478), (double)double0, 0.01);
      assertNotNull(double0);
      
      Class<?> class0 = ClassUtil.classOf(double0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class java.lang.Double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNotNull(class0);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class java.lang.Double", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertNull(string0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      int int0 = 96;
      JsonAutoDetect jsonAutoDetect0 = mock(JsonAutoDetect.class, new ViolatedAssumptionAnswer());
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).creatorVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).fieldVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).getterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).isGetterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).setterVisibility();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.from(jsonAutoDetect0);
      assertNull(jsonAutoDetect_Value0.getFieldVisibility());
      assertNull(jsonAutoDetect_Value0.getGetterVisibility());
      assertNull(jsonAutoDetect_Value0.getIsGetterVisibility());
      assertNull(jsonAutoDetect_Value0.getSetterVisibility());
      assertNull(jsonAutoDetect_Value0.getCreatorVisibility());
      assertNotNull(jsonAutoDetect_Value0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl1.getGenerator();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNull(jsonGenerator0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
      assertNotNull(typeArray0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertNotNull(iOContext0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      assertNotNull(annotationIntrospector1);
      
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector1, annotationIntrospector0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      int int0 = 0;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertNotNull(placeholderForType0);
      
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(placeholderForType0);
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertNotNull(objectReader0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      OutputStream outputStream0 = null;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNotNull(defaultSerializerProvider_Impl1);
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl1.getGenerator();
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertNull(jsonGenerator0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Float> class1 = Float.class;
      String string0 = ClassUtil.isLocalType(class1, false);
      assertNull(string0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null);
      assertNotNull(mockRuntimeException0);
      
      Throwable throwable0 = ClassUtil.getRootCause(mockRuntimeException0);
      assertNotNull(throwable0);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      
      String string1 = ClassUtil.backticked((String) null);
      assertEquals("[null]", string1);
      assertNotNull(string1);
      
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException();
      assertFalse(mockRuntimeException1.equals((Object)throwable0));
      assertFalse(mockRuntimeException1.equals((Object)mockRuntimeException0));
      assertNotNull(mockRuntimeException1);
      
      Throwable throwable1 = ClassUtil.getRootCause(throwable0);
      assertFalse(mockRuntimeException0.equals((Object)mockRuntimeException1));
      assertFalse(throwable0.equals((Object)mockRuntimeException1));
      assertFalse(throwable1.equals((Object)mockRuntimeException1));
      assertNotNull(throwable1);
      assertNotSame(mockRuntimeException0, mockRuntimeException1);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(mockRuntimeException0, throwable1);
      assertSame(throwable0, throwable1);
      assertSame(throwable0, mockRuntimeException0);
      assertNotSame(throwable0, mockRuntimeException1);
      assertSame(throwable1, throwable0);
      assertSame(throwable1, mockRuntimeException0);
      assertNotSame(throwable1, mockRuntimeException1);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, "[null]", (String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertEquals(0, annotationArray0.length);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotationArray0);
      
      Parameter[] parameterArray0 = constructor0.getParameters();
      assertEquals(0, parameterArray0.length);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(parameterArray0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotNull(typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1, 1);
      assertNotNull(lRUMap0);
      
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertNotNull(typeFactory2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory2, typeFactory1);
      assertNotSame(typeFactory2, typeFactory0);
      
      CoreXMLSerializers.XMLGregorianCalendarSerializer coreXMLSerializers_XMLGregorianCalendarSerializer0 = new CoreXMLSerializers.XMLGregorianCalendarSerializer();
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.isUnwrappingSerializer());
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.usesObjectId());
      assertNotNull(coreXMLSerializers_XMLGregorianCalendarSerializer0);
      
      Class<XMLGregorianCalendar> class1 = coreXMLSerializers_XMLGregorianCalendarSerializer0.handledType();
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.isUnwrappingSerializer());
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.usesObjectId());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class javax.xml.datatype.XMLGregorianCalendar", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      JavaType javaType0 = typeFactory0.constructType((Type) class1);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.isUnwrappingSerializer());
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.usesObjectId());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class javax.xml.datatype.XMLGregorianCalendar", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isConcrete());
      assertNotNull(javaType0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory0, typeFactory2);
      
      Class<?> class2 = ClassUtil.rawClass(javaType0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.isUnwrappingSerializer());
      assertFalse(coreXMLSerializers_XMLGregorianCalendarSerializer0.usesObjectId());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class javax.xml.datatype.XMLGregorianCalendar", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isConcrete());
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertFalse(class2.isPrimitive());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class javax.xml.datatype.XMLGregorianCalendar", class2.toString());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory0, typeFactory2);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      Constructor<RuntimeException> constructor1 = ClassUtil.findConstructor(class3, true);
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertTrue(constructor1.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertNotNull(constructor1);
      
      Parameter[] parameterArray1 = constructor1.getParameters();
      assertFalse(parameterArray1.equals((Object)parameterArray0));
      assertEquals(0, parameterArray1.length);
      assertFalse(constructor1.isSynthetic());
      assertEquals(1, constructor1.getModifiers());
      assertTrue(constructor1.isAccessible());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor1.isVarArgs());
      assertNotNull(parameterArray1);
      assertNotSame(parameterArray1, parameterArray0);
      
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      assertFalse(classUtil_Ctor1.equals((Object)classUtil_Ctor0));
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor1);
      
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      assertFalse(classUtil_Ctor2.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor2.equals((Object)classUtil_Ctor0));
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor2);
      
      Constructor<?> constructor2 = classUtil_Ctor2.getConstructor();
      assertFalse(classUtil_Ctor2.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor2.equals((Object)classUtil_Ctor0));
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor1));
      assertFalse(classUtil_Ctor0.equals((Object)classUtil_Ctor2));
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor2.isAccessible());
      assertEquals("public java.io.IOException()", constructor2.toString());
      assertEquals(1, constructor2.getModifiers());
      assertFalse(constructor2.isSynthetic());
      assertFalse(constructor2.isVarArgs());
      assertNotNull(constructor2);
      assertNotSame(classUtil_Ctor2, classUtil_Ctor1);
      assertNotSame(classUtil_Ctor2, classUtil_Ctor0);
      assertNotSame(classUtil_Ctor0, classUtil_Ctor1);
      assertNotSame(classUtil_Ctor0, classUtil_Ctor2);
      
      Class<MapLikeType> class4 = MapLikeType.class;
      boolean boolean0 = ClassUtil.isProxyType(class4);
      assertFalse(boolean0);
      
      Class<JsonMappingException> class5 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class5, "Cannot access ", "i2sRB");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.String (of class com.fasterxml.jackson.databind.JsonMappingException) must override method 'i2sRB'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertEquals(0, annotatedTypeArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotatedTypeArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray0.length);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotationArray0);
      
      AnnotatedType[] annotatedTypeArray1 = constructor0.getAnnotatedExceptionTypes();
      assertFalse(annotatedTypeArray1.equals((Object)annotatedTypeArray0));
      assertEquals(0, annotatedTypeArray1.length);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotatedTypeArray1);
      assertNotSame(annotatedTypeArray1, annotatedTypeArray0);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(0, annotationArray1.length);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotationArray1);
      
      Annotation[][] annotationArray2 = constructor0.getParameterAnnotations();
      assertFalse(annotationArray2.equals((Object)annotationArray1));
      assertEquals(0, annotationArray2.length);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotationArray2);
      assertNotSame(annotationArray2, annotationArray1);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNull(annotation0);
      
      Annotation[] annotationArray3 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray3.length);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotationArray3);
      assertSame(annotationArray3, annotationArray0);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(3, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor1 = ClassUtil.findConstructor(class2, true);
      assertFalse(constructor1.isSynthetic());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertTrue(constructor1.isAccessible());
      assertNotNull(constructor1);
      
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class2);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.isLocalType(class2, false);
      assertNull(string0);
      
      Class<Character> class3 = Character.TYPE;
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("char", class3.toString());
      assertFalse(class3.isAnnotation());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertNotNull(class3);
      
      Class<?> class4 = ClassUtil.getEnclosingClass(class3);
      assertTrue(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals("char", class3.toString());
      assertFalse(class3.isAnnotation());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertNull(class4);
      
      Constructor<?> constructor2 = classUtil_Ctor0.getConstructor();
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor2.isAccessible());
      assertFalse(constructor2.isSynthetic());
      assertFalse(constructor2.isVarArgs());
      assertEquals("public java.lang.String()", constructor2.toString());
      assertEquals(1, constructor2.getModifiers());
      assertNotNull(constructor2);
      
      String string1 = ClassUtil.nonNullString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      
      Class<String> class5 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class5, class1, false);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertSame(class5, class0);
      
      Class<Float> class6 = Float.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class6);
      assertEquals(29, methodArray0.length);
      assertNotNull(methodArray0);
      
      Constructor<?> constructor3 = classUtil_Ctor0.getConstructor();
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor3.isVarArgs());
      assertTrue(constructor3.isAccessible());
      assertEquals(1, constructor3.getModifiers());
      assertEquals("public java.lang.String()", constructor3.toString());
      assertFalse(constructor3.isSynthetic());
      assertNotNull(constructor3);
      assertSame(class0, class5);
      assertSame(constructor3, constructor2);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, ";LS]@c`h", 0, hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(";LS]@c`h", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNotNull(sQLClientInfoException0);
      
      SQLClientInfoException sQLClientInfoException1 = (SQLClientInfoException)ClassUtil.throwIfError(sQLClientInfoException0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(";LS]@c`h", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException1.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertEquals(";LS]@c`h", sQLClientInfoException1.getSQLState());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNotNull(sQLClientInfoException1);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(sQLClientInfoException0, sQLClientInfoException1);
      assertSame(sQLClientInfoException1, sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = ClassUtil.backticked("Q@Bxp.8M)3>");
      assertEquals("`Q@Bxp.8M)3>`", string0);
      assertNotNull(string0);
      
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      Throwable throwable0 = ClassUtil.getRootCause(mockRuntimeException0);
      assertNotNull(throwable0);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertEquals(0, annotationArray0.length);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(annotationArray0);
      
      Parameter[] parameterArray0 = constructor0.getParameters();
      assertEquals(0, parameterArray0.length);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(parameterArray0);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray1.length);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      
      Annotation[][] annotationArray2 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(0, annotationArray2.length);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(annotationArray2);
      
      Class<?>[] classArray0 = constructor0.getParameterTypes();
      assertEquals(0, classArray0.length);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classArray0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = constructor0.getDeclaredAnnotation(class1);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNull(annotation0);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      
      String string0 = ClassUtil.classNameOf(constructor0);
      assertEquals("`java.lang.reflect.Constructor`", string0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(string0);
      
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Integer> class2 = Integer.class;
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class2, class2, true);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      boolean boolean0 = ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      assertTrue(boolean0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals(16401, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertNotNull(class1);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<MapType> class2 = MapType.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNull(class3);
      
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-47);
      Class<Float> class4 = Float.class;
      Class<Object> class5 = Object.class;
      Class<String> class6 = String.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes((Class<?>) null, class6);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean2 = ClassUtil.isObjectOrPrimitive(class5);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class5, class4, true);
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      Class<MapLikeType> class7 = MapLikeType.class;
      List<Class<?>> list2 = ClassUtil.findSuperClasses(class7, class7, true);
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte) (-7));
      assertEquals((byte) (-7), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl((Object) byte0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Double> class0 = Double.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.Number", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<?> class2 = ClassUtil.classOf((Object) null);
      assertNull(class2);
      
      boolean boolean2 = ClassUtil.isNonStaticInnerClass(class0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Double double0 = new Double((-1753.8728137953478));
      assertEquals((-1753.8728137953478), (double)double0, 0.01);
      assertNotNull(double0);
      
      Class<?> class0 = ClassUtil.classOf(double0);
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Double", class0.toString());
      assertNotNull(class0);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("class java.lang.Double", class0.toString());
      assertNull(string0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(192, (String) null, (-1755), 96, 2301, 6414, 192, 6414, 2301, 6414);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Character character0 = Character.valueOf(']');
      assertEquals(']', (char)character0);
      assertNotNull(character0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.hasClass(character0, class0);
      assertFalse(boolean0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, (JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.RuntimeException with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(constructor0);
      
      AnnotatedType[] annotatedTypeArray0 = constructor0.getAnnotatedParameterTypes();
      assertEquals(0, annotatedTypeArray0.length);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(annotatedTypeArray0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classUtil_Ctor0);
      
      String string0 = constructor0.getName();
      assertEquals("java.lang.String", string0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(string0);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray0.length);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(annotationArray0);
      
      AnnotatedType[] annotatedTypeArray1 = constructor0.getAnnotatedExceptionTypes();
      assertFalse(annotatedTypeArray1.equals((Object)annotatedTypeArray0));
      assertEquals(0, annotatedTypeArray1.length);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(annotatedTypeArray1);
      assertNotSame(annotatedTypeArray1, annotatedTypeArray0);
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertEquals(0, int0);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      
      Annotation[][] annotationArray1 = constructor0.getParameterAnnotations();
      assertEquals(0, annotationArray1.length);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(annotationArray1);
      
      Annotation[] annotationArray2 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray2.length);
      assertTrue(constructor0.isAccessible());
      assertEquals(1, constructor0.getModifiers());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(annotationArray2);
      assertSame(annotationArray2, annotationArray0);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(3, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor1 = ClassUtil.findConstructor(class1, true);
      assertEquals("public java.io.IOException()", constructor1.toString());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertTrue(constructor1.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertNotNull(constructor1);
      
      Class<Long> class2 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class2, class0, false);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(")EZk7O>[XD=<", "JSON");
      assertEquals("JSON", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(")EZk7O>[XD=<", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: )EZk7O>[XD=<", sQLRecoverableException0.toString());
      assertNotNull(sQLRecoverableException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(")EZk7O>[XD=<", sQLRecoverableException0);
      assertEquals("JSON", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(")EZk7O>[XD=<", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: )EZk7O>[XD=<", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: )EZk7O>[XD=<", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(")EZk7O>[XD=<", sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON", sQLNonTransientConnectionException0);
      assertEquals("JSON", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(")EZk7O>[XD=<", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: )EZk7O>[XD=<", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLNonTransientConnectionException: )EZk7O>[XD=<", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(")EZk7O>[XD=<", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: JSON", sQLNonTransientException0.toString());
      assertEquals("JSON", sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0, ")EZk7O>[XD=<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // )EZk7O>[XD=<
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      DataTruncation dataTruncation0 = new DataTruncation(96, false, false, 2417, 96);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNotNull(dataTruncation0);
      
      SQLException sQLException0 = new SQLException();
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertNotNull(sQLException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("serialVersionUID", "vals", "vals", 96);
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("vals", stackTraceElement0.getFileName());
      assertEquals("serialVersionUID", stackTraceElement0.getClassName());
      assertEquals(96, stackTraceElement0.getLineNumber());
      assertEquals("vals", stackTraceElement0.getMethodName());
      assertEquals("serialVersionUID.vals(vals:96)", stackTraceElement0.toString());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("8xsDwE-", "serialVersionUID", "x5|~I4hJ;jSB$0J)", 96);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("serialVersionUID", stackTraceElement1.getMethodName());
      assertEquals("x5|~I4hJ;jSB$0J)", stackTraceElement1.getFileName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("8xsDwE-", stackTraceElement1.getClassName());
      assertEquals("8xsDwE-.serialVersionUID(x5|~I4hJ;jSB$0J):96)", stackTraceElement1.toString());
      assertEquals(96, stackTraceElement1.getLineNumber());
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("i:k]:q}WEk{$iCTKVw", "i:k]:q}WEk{$iCTKVw", "x5|~I4hJ;jSB$0J)", 0);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("i:k]:q}WEk{$iCTKVw", stackTraceElement2.getClassName());
      assertEquals("i:k]:q}WEk{$iCTKVw", stackTraceElement2.getMethodName());
      assertEquals("x5|~I4hJ;jSB$0J)", stackTraceElement2.getFileName());
      assertEquals(0, stackTraceElement2.getLineNumber());
      assertEquals("i:k]:q}WEk{$iCTKVw.i:k]:q}WEk{$iCTKVw(x5|~I4hJ;jSB$0J):0)", stackTraceElement2.toString());
      assertNotNull(stackTraceElement2);
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("keyType", "entrySet", "serialVersionUID", 96);
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals(96, stackTraceElement3.getLineNumber());
      assertEquals("entrySet", stackTraceElement3.getMethodName());
      assertEquals("keyType", stackTraceElement3.getClassName());
      assertEquals("serialVersionUID", stackTraceElement3.getFileName());
      assertEquals("keyType.entrySet(serialVersionUID:96)", stackTraceElement3.toString());
      assertNotNull(stackTraceElement3);
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("vals", "|\"uuqa~G5", "!y9", 960);
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertEquals("vals", stackTraceElement4.getClassName());
      assertEquals("vals.|\"uuqa~G5(!y9:960)", stackTraceElement4.toString());
      assertFalse(stackTraceElement4.isNativeMethod());
      assertEquals("|\"uuqa~G5", stackTraceElement4.getMethodName());
      assertEquals(960, stackTraceElement4.getLineNumber());
      assertEquals("!y9", stackTraceElement4.getFileName());
      assertNotNull(stackTraceElement4);
      
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("com.fasterxml.jackson.databind.ser.std.ToStringSerializer", "oRKM]&", (String) null, 960);
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement5.isNativeMethod());
      assertNull(stackTraceElement5.getFileName());
      assertEquals(960, stackTraceElement5.getLineNumber());
      assertEquals("com.fasterxml.jackson.databind.ser.std.ToStringSerializer.oRKM]&(Unknown Source)", stackTraceElement5.toString());
      assertEquals("oRKM]&", stackTraceElement5.getMethodName());
      assertEquals("com.fasterxml.jackson.databind.ser.std.ToStringSerializer", stackTraceElement5.getClassName());
      assertNotNull(stackTraceElement5);
      
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("oRKM]&", "com.fasterxml.jackson.databind.deser.impl.ReadableObjectId", "i:k]:q}WEk{$iCTKVw", 960);
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement5));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement0));
      assertEquals("i:k]:q}WEk{$iCTKVw", stackTraceElement6.getFileName());
      assertEquals("oRKM]&", stackTraceElement6.getClassName());
      assertEquals(960, stackTraceElement6.getLineNumber());
      assertEquals("oRKM]&.com.fasterxml.jackson.databind.deser.impl.ReadableObjectId(i:k]:q}WEk{$iCTKVw:960)", stackTraceElement6.toString());
      assertEquals("com.fasterxml.jackson.databind.deser.impl.ReadableObjectId", stackTraceElement6.getMethodName());
      assertFalse(stackTraceElement6.isNativeMethod());
      assertNotNull(stackTraceElement6);
      
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLException0.setStackTrace(stackTraceElementArray0);
      assertEquals(7, stackTraceElementArray0.length);
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      
      dataTruncation0.addSuppressed(sQLException0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getSQLState());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      
      Spliterator<Throwable> spliterator0 = dataTruncation0.spliterator();
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertNotNull(spliterator0);
      
      boolean boolean2 = dataTruncation0.getParameter();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.forEach(consumer0);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dataTruncation0.forEach(consumer1);
      assertEquals("22001", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) dataTruncation0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("vals");
      assertEquals("vals", string0);
      assertNotNull(string0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        typeFactory0.constructFromCanonical((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
      assertNotNull(typeArray0);
      
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertEquals("class java.lang.Exception", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertNotNull(class1);
      
      Class<CollectionType> class2 = CollectionType.class;
      Class class3 = (Class)ClassUtil.getGenericSuperclass(class2);
      assertFalse(class3.equals((Object)class1));
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.CollectionLikeType", class3.toString());
      assertNotNull(class3);
      assertNotSame(class3, class1);
      
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string0);
      assertNotNull(string0);
      
      Class<Boolean> class4 = Boolean.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Boolean is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Error> class0 = Error.class;
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.Error`", string0);
      assertNotNull(string0);
      
      String string1 = ClassUtil.quotedOr("`java.lang.Error`", "`java.lang.Error`");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"`java.lang.Error`\"", string1);
      assertNotNull(string1);
      
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<Boolean> class2 = Boolean.class;
      Constructor<Boolean> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      Class<Integer> class3 = Integer.class;
      boolean boolean0 = ClassUtil.isConcrete(class3);
      assertTrue(boolean0);
      
      Class<JsonMappingException> class4 = JsonMappingException.class;
      Class<? extends Enum<?>> class5 = ClassUtil.findEnumType(class4);
      assertEquals("class com.fasterxml.jackson.core.JsonProcessingException", class5.toString());
      assertEquals(1, class5.getModifiers());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      assertFalse(class5.isAnnotation());
      assertNotNull(class5);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      File file0 = MockFile.createTempFile("pP\"j-Wos", "pP\"j-Wos");
      assertEquals("/tmp/pP\"j-Wos0pP\"j-Wos", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("pP\"j-Wos0pP\"j-Wos", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      assertNotNull(mockFileReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(mockFileReader0);
      assertEquals("/tmp/pP\"j-Wos0pP\"j-Wos", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("pP\"j-Wos0pP\"j-Wos", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertNotNull(pushbackReader0);
      
      JsonMappingException jsonMappingException0 = new JsonMappingException(pushbackReader0, "");
      assertNotNull(jsonMappingException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(jsonMappingException0);
      assertEquals("/tmp/pP\"j-Wos0pP\"j-Wos", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("pP\"j-Wos0pP\"j-Wos", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.JsonMappingException: ", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      MockThrowable mockThrowable0 = new MockThrowable(sQLFeatureNotSupportedException0);
      assertNotNull(mockThrowable0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ZERO_LENGTH_ENUM_ARRAY", "ZERO_LENGTH_ENUM_ARRAY", 114, mockThrowable0);
      assertEquals("/tmp/pP\"j-Wos0pP\"j-Wos", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("pP\"j-Wos0pP\"j-Wos", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.JsonMappingException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.JsonMappingException: ", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.JsonMappingException: ", mockThrowable0.toString());
      assertEquals(114, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLSyntaxErrorException0.getSQLState());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ZERO_LENGTH_ENUM_ARRAY", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      JsonMappingException jsonMappingException1 = new JsonMappingException(pushbackReader0, "[]", sQLSyntaxErrorException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertNotNull(jsonMappingException1);
      
      Throwable throwable0 = ClassUtil.getRootCause(jsonMappingException1);
      assertFalse(jsonMappingException0.equals((Object)jsonMappingException1));
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
      assertFalse(throwable0.equals((Object)jsonMappingException1));
      assertEquals("/tmp/pP\"j-Wos0pP\"j-Wos", file0.toString());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp", file0.getParent());
      assertEquals("pP\"j-Wos0pP\"j-Wos", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canExecute());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.JsonMappingException: ", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.JsonMappingException: ", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.JsonMappingException: ", mockThrowable0.toString());
      assertEquals(114, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLSyntaxErrorException0.getSQLState());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: ZERO_LENGTH_ENUM_ARRAY", sQLSyntaxErrorException0.toString());
      assertNotNull(throwable0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException0, throwable0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
      assertNotSame(jsonMappingException1, throwable0);
      assertNotSame(throwable0, jsonMappingException1);
      assertSame(throwable0, jsonMappingException0);
      
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertNotNull(byteQuadsCanonicalizer0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      Class<Object> class1 = Object.class;
      Class<?> class2 = ClassUtil.getDeclaringClass(class1);
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(".zrdt_aKgA8Z^5:kt*l", ".zrdt_aKgA8Z^5:kt*l");
      assertEquals(".zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: .zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(".zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      assertEquals(".zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: .zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(".zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(".zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals(".zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: .zrdt_aKgA8Z^5:kt*l", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException0, sQLIntegrityConstraintViolationException1);
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      
      Class<NoClass> class0 = NoClass.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      assertFalse(beanSerializerBuilder0.hasProperties());
      assertNotNull(beanSerializerBuilder0);
      
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      assertFalse(beanSerializerBuilder0.hasProperties());
      assertNull(annotatedClass0);
      
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, (Class<?>) null, ".zrdt_aKgA8Z^5:kt*l", (JavaType) null);
      assertEquals(".zrdt_aKgA8Z^5:kt*l", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertNotNull(virtualAnnotatedMember0);
      
      Member member0 = virtualAnnotatedMember0.getMember();
      assertEquals(".zrdt_aKgA8Z^5:kt*l", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertNull(member0);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Character> class0 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray0.length);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertNotNull(annotationArray0);
      
      Class<?>[] classArray0 = constructor0.getExceptionTypes();
      assertEquals(0, classArray0.length);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertNotNull(classArray0);
      
      Annotation[] annotationArray1 = constructor0.getAnnotations();
      assertEquals(0, annotationArray1.length);
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertNotNull(annotationArray1);
      assertSame(annotationArray1, annotationArray0);
      
      Class<?> class1 = classUtil_Ctor0.getDeclaringClass();
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertEquals("public java.lang.String()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.String", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
      
      Class<?> class2 = ClassUtil.getEnclosingClass(class0);
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(1, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("enum", string0);
      assertNotNull(string0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(3, methodArray0.length);
      assertNotNull(methodArray0);
      
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNotNull(type0);
      
      Iterator<Annotation> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Double> class0 = Double.class;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1278);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, ReferenceType> hashMap0 = new HashMap<String, ReferenceType>(1278);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      ObjectMapper objectMapper2 = objectMapper1.addMixIn(class0, class0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      ObjectMapper objectMapper3 = objectMapper2.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[5];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      ObjectMapper objectMapper4 = objectMapper3.enable(jsonParser_FeatureArray0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      ObjectMapper objectMapper5 = objectMapper4.disable(serializationFeature0);
      objectMapper5.readerForUpdating(jsonParser_Feature1);
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getAnnotatedExceptionTypes();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.getGenericInterfaces(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.isLocalType(class1, false);
      Class<Character> class2 = Character.class;
      ClassUtil.getEnclosingClass(class2);
      classUtil_Ctor0.getConstructor();
      ClassUtil.nonNullString((String) null);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      Class<Float> class3 = Float.class;
      ClassUtil.getClassMethods(class3);
      classUtil_Ctor0.getConstructor();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>(hashMap0);
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.getClassMethods(class4);
      Class<Double> class5 = Double.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class5, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<?> class2 = ClassUtil.primitiveType(class0);
      assertNotNull(class2);
      
      ClassUtil.getGenericInterfaces(class0);
      Class<Long> class3 = Long.class;
      ClassUtil.findConstructor(class3, false);
      boolean boolean1 = ClassUtil.isConcrete(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.nameOf(class0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<List> class1 = List.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.isLocalType(class1, false);
      String string0 = "eJ\"-";
      ClassUtil.nonNullString("eJ\"-");
      Class<Error> class2 = Error.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.classOf((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isCollectionMapOrArray(class0);
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`java.lang.Short`", string0);
      
      Class<String> class1 = String.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean0);
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      SimpleType simpleType1 = referenceType0.withContentValueHandler((Object) null);
      Double double0 = new Double((-716.355));
      JavaType javaType0 = simpleType1.withContentTypeHandler(double0);
      List<JavaType> list0 = ClassUtil.findSuperTypes(javaType0, class1, true);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler1 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-489), objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3485, true);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "JSON");
      String string0 = ClassUtil.nullOrToString(jsonMappingException0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isConcrete(class0);
      Class<Character> class1 = Character.class;
      Class<Character> class2 = Character.class;
      ClassUtil.nonNull(class1, class2);
      ClassUtil.isJacksonStdImpl((Object) class2);
      Class<AccessPattern> class3 = AccessPattern.class;
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class3, double0, "&x=D,:M0vW4?'J^ 9T");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Double (of class com.fasterxml.jackson.databind.util.AccessPattern) must override method '&x=D,:M0vW4?'J^ 9T'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.findClassAnnotations(class0);
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, (Class<?>) null, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      ClassUtil.isCollectionMapOrArray(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, list0, true);
      int int0 = 1536;
      // Undeclared exception!
      try { 
        MockURL.openStream((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nullOrToString(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.isConcrete(class1);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      Class<RuntimeException> class3 = RuntimeException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, collectionLikeType0);
      Object object0 = new Object();
      typeBindings0.toString();
      ReferenceType referenceType1 = referenceType0.withTypeHandler(object0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = (JavaType) referenceType0;
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      typeBindings0.asKey(class4);
      javaTypeArray0[2] = (JavaType) referenceType1;
      javaTypeArray0[3] = (JavaType) referenceType0;
      javaTypeArray0[4] = (JavaType) referenceType1;
      javaTypeArray0[5] = (JavaType) referenceType0;
      ReferenceType referenceType2 = ReferenceType.construct((Class<?>) class3, typeBindings0, (JavaType) referenceType1, javaTypeArray0, (JavaType) referenceType0);
      Class<IOException> class5 = IOException.class;
      JavaType javaType0 = referenceType2.refine(class5, typeBindings0, javaTypeArray0[0], javaTypeArray0);
      ClassUtil.findSuperTypes(javaType0, class3, true);
      Class<IOException> class6 = IOException.class;
      ClassUtil.isProxyType(class6);
      Class<Character> class7 = Character.class;
      String string0 = ClassUtil.isLocalType(class7, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Short> class1 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Float float0 = new Float(2.14748365E9F);
      Float float1 = new Float(2.14748365E9F);
      ClassUtil.nonNull(float0, float1);
      Class<JsonMappingException> class0 = JsonMappingException.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
      
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.getClassMethods(class2);
      String string0 = ClassUtil.backticked("Value returned by 'any-getter' %s() not java.util.Map but %s");
      assertEquals("`Value returned by 'any-getter' %s() not java.util.Map but %s`", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.createInstance(class0, false);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findEnumType(class1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("o[");
      SQLDataException sQLDataException0 = new SQLDataException("o[", "#rho", sQLFeatureNotSupportedException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("o[", sQLDataException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("o[", (String) null, 0, sQLIntegrityConstraintViolationException0);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLRecoverableException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = (SQLFeatureNotSupportedException)ClassUtil.throwRootCauseIfIOE(throwable0);
      assertNull(sQLFeatureNotSupportedException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotatedParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getAnnotatedExceptionTypes();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getParameterAnnotations();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.getGenericInterfaces(class0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.isLocalType(class2, false);
      Class<Character> class3 = Character.class;
      ClassUtil.getEnclosingClass(class3);
      classUtil_Ctor0.getConstructor();
      ClassUtil.nonNullString((String) null);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      Class<String> class4 = String.class;
      ClassUtil.findSuperClasses(class4, class1, false);
      Class<Float> class5 = Float.class;
      ClassUtil.getClassMethods(class5);
      classUtil_Ctor0.getConstructor();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>(hashMap0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, ";LS]@c`h", 0, hashMap1);
      Throwable throwable0 = ClassUtil.throwIfError(sQLClientInfoException0);
      assertSame(sQLClientInfoException0, throwable0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.primitiveType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.noOverrides();
      objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Double double0 = new Double((-1753.8728137953478));
      Class<?> class0 = ClassUtil.classOf(double0);
      assertNotNull(class0);
      
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getAnnotations();
      constructor0.getParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertNotNull(annotationArray0);
      
      constructor0.getParameterTypes();
      Class<Annotation> class2 = Annotation.class;
      constructor0.getDeclaredAnnotation(class2);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      int int0 = classUtil_Ctor1.getParamCount();
      assertEquals(0, int0);
      
      String string1 = ClassUtil.classNameOf(classUtil_Ctor0);
      assertEquals("`com.fasterxml.jackson.databind.util.ClassUtil$Ctor`", string1);
      
      ClassUtil.emptyIterator();
      Class<CollectionType> class3 = CollectionType.class;
      Class<Float> class4 = Float.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class3, class4);
      assertEquals(7, list0.size());
      
      Class<ReferenceType> class5 = ReferenceType.class;
      Class<CollectionType> class6 = CollectionType.class;
      List<Class<?>> list1 = ClassUtil.findRawSuperTypes(class5, class6, false);
      assertEquals(7, list1.size());
      
      boolean boolean0 = ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      assertTrue(constructor0.isAccessible());
      
      Class<Short> class7 = Short.class;
      boolean boolean1 = ClassUtil.isConcrete(class7);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.primitiveType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.noOverrides();
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      String string0 = "b7IJ%+{CX<gd@tt>D";
      MockFile mockFile0 = new MockFile("b7IJ%+{CX<gd@tt>D");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, (-1287), objectMapper1, bufferedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Long> class0 = Long.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getGenericInterfaces(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(annotationIntrospector1, annotationIntrospector0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(placeholderForType0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectReader0, (OutputStream) null, byteArray0, 0, false);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("vals", "C", 1039);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("vals", sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("vals", sQLRecoverableException0);
      MockException mockException0 = new MockException((String) null, sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) null, (Exception) mockException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isLocalType(class1, false);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Throwable throwable0 = ClassUtil.getRootCause(mockRuntimeException0);
      String string0 = "Q@Bxp.8M\\)3>";
      ClassUtil.backticked("Q@Bxp.8M)3>");
      ClassUtil.throwIfError(throwable0);
      ClassUtil.getRootCause(throwable0);
      MockError mockError0 = new MockError();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      int int0 = 0;
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, "`Q@Bxp.8M)3>`", (String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientException0.forEach(consumer0);
      ClassUtil.getRootCause(sQLTransientException0);
      Class<String> class0 = String.class;
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
