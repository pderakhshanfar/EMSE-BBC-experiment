/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 08:54:01 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.KeyDeserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.TypeVariable;
import java.net.URI;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Iterator<Integer> iterator0 = ClassUtil.emptyIterator();
      Class<POJONode> class0 = POJONode.class;
      boolean boolean0 = true;
      ClassUtil.findSuperClasses(class0, class0, true);
      Class<?> class1 = ClassUtil.classOf(iterator0);
      ClassUtil.getDeclaringClass(class1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      String string0 = "java.lang.Void";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("java.lang.Void", "[null]", (-310), hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("[null]", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("java.lang.Void", "java.lang.Void", map0);
      String string1 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility1);
      objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      objectMapper0.readerForUpdating(jsonAutoDetect_Visibility0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) jsonAutoDetect_Visibility1);
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<List> class0 = List.class;
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<POJONode> class0 = POJONode.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class2 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class2);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      Class<ClientInfoStatus> class3 = ClientInfoStatus.class;
      collectionType1.isTypeOrSuperTypeOf(class3);
      CollectionLikeType collectionLikeType0 = collectionType1.withContentTypeHandler(typeFactory0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withTypeHandler(typeFactory0);
      ClassUtil.rawClass(collectionLikeType1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isConcrete(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockError mockError0 = new MockError((Throwable) null);
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.getOuterClass(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getDeclaredMethods(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte) (-80);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, objectReader0, (OutputStream) null, byteArray0, (byte) (-8), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((byte)45, (byte)45);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0, charset0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 57343, inputStreamReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) jsonParserSequence0, (Class<?>) class2, jsonToken0, "\"]DV.t*'\"`:");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected FIELD_NAME: \"]DV.t*'\"`:
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      ClassUtil.isProxyType(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) null);
      MockIOException mockIOException0 = new MockIOException("JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Void> class0 = Void.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.findClassAnnotations(class0);
      Class<MapType> class2 = MapType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class1, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      String string0 = "Cannot figure out type for EnumMap (odd JDK platform?)";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "Cannot figure out type for EnumMap (odd JDK platform?)", "Cannot figure out type for EnumMap (odd JDK platform?)");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.util.AccessPattern` from String \"Cannot figure out type for EnumMap (odd JDK platform?)\": Cannot figure out type for EnumMap (odd JDK platform?)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Os:VR_<A-EGfJFq");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ")>6kp&[@-I:`{1");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Os:VR_<A-EGfJFq");
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getDeclaredFields(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.emptyIterator();
      ClassUtil.isProxyType(class0);
      Class<Short> class2 = Short.class;
      ClassUtil.canBeABeanType(class2);
      SQLWarning sQLWarning0 = new SQLWarning("Cannot coerce %s to Null value %s (%s `%s.%s` to allow)");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLWarning0.forEach(consumer0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(")>6kp&[@-I:`{1");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "Os:VR_<A-EGfJFq");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("x9^#\fAZ^;Z/pjz+", (String) null, sQLWarning0);
      sQLWarning0.initCause(sQLTransactionRollbackException0);
      sQLWarning0.printStackTrace((PrintWriter) mockPrintWriter0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<AccessPattern> class0 = AccessPattern.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1654975209));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      IOContext iOContext0 = new IOContext(bufferRecycler0, accessPattern0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JavaType javaType0 = TypeFactory.unknownType();
      objectMapper0.readerFor(javaType0);
      MockFile mockFile0 = new MockFile(")ecC.j$");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "org.hibernate.proxy.com.fasterxml.jackson.databind.module.SimpleModule");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.hibernate.proxy.com.fasterxml.jackson.databind.module.SimpleModule
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "\"YenqiEPr97XR/C";
      MockIOException mockIOException0 = new MockIOException("\"YenqiEPr97XR/C");
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(788);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<IOException> class0 = IOException.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withContentValueHandler(class0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) arrayType1, jsonToken0, "java.lang.RuntimeEx");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_INT: java.lang.RuntimeEx
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      sQLNonTransientConnectionException0.getSuppressed();
      MockException mockException0 = new MockException((String) null, sQLNonTransientConnectionException0);
      mockException0.getCause();
      sQLNonTransientConnectionException0.initCause(mockException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      ClassUtil.isCollectionMapOrArray(class0);
      MockThrowable mockThrowable0 = new MockThrowable("03VWHv1TZu4.@");
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<String> class0 = String.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ClassUtil.createInstance(class0, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "");
      Long long0 = new Long((-1751L));
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) long0, "");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.String` from String \"\":  (through reference chain: java.lang.Long[\"\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<String>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      File file0 = MockFile.createTempFile("x_5~ucR.9tIFw5-/#", "bw~Y_.9bW%v_Ie&E@");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("x_5~ucR.9tIFw5-/#");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) mockFileWriter0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException: x_5~ucR.9tIFw5-/#
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.findConstructor(class0, false);
      ClassUtil.getClassMethods(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.nullOrToString((Object) null);
      Class<Long> class2 = Long.class;
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      Class<Object> class4 = Object.class;
      ClassUtil.findSuperTypes((JavaType) null, class4, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Long long0 = new Long((-2141L));
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(long0, class1, ";w`<={A%JZja");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<InputStream> class1 = InputStream.class;
      String string0 = "com.fasterxml.jacks";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "com.fasterxml.jacks");
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("array", "Cannot access ", 2859);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) "Cannot access ", "array");
      sQLRecoverableException0.addSuppressed(jsonMappingException0);
      Throwable throwable0 = sQLRecoverableException0.fillInStackTrace();
      sQLRecoverableException0.getLocalizedMessage();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "array");
      ClassUtil.getRootCause(sQLRecoverableException0);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      Class<Long> class0 = Long.class;
      Class<Boolean> class1 = Boolean.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.canBeABeanType(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperTypes(class0, class2, list0);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.getDeclaringClass(class3);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, throwable0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      Class<String> class4 = String.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class4);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-235), objectReader0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-1807324828), false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(3, 2);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // array (through reference chain: java.lang.String[\"array\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getPackageName(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.quotedOr("com.fasterxml.jackson.databind.type", "com.fasterxml.jackson.databind.type");
      Byte byte0 = new Byte((byte)113);
      ClassUtil.getClassDescription(byte0);
      ClassUtil.getDeclaringClass(class0);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class3);
      Class<IOException> class4 = IOException.class;
      ClassUtil.isCollectionMapOrArray(class4);
      Class<Long> class5 = Long.class;
      ClassUtil.isJacksonStdImpl(class5);
      ClassUtil.hasEnclosingMethod(class1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      MockPrintStream mockPrintStream0 = new MockPrintStream("`java.lang.Byte`");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      mockPrintStream0.write(byteArray0, 28, (int) (byte)113);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "\"com.fasterxml.jackson.databind.type\"");
      sQLNonTransientConnectionException0.printStackTrace(printStream0);
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientConnectionException0);
      Class<AccessibleObject> class6 = AccessibleObject.class;
      ClassUtil.getDeclaringClass(class6);
      ClassUtil.nonNullString("CXN/ Ax");
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.defaultValue(class0);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
      int[] intArray0 = new int[8];
      intArray0[0] = 240;
      intArray0[1] = 240;
      intArray0[2] = 240;
      intArray0[3] = 240;
      intArray0[4] = (-2944);
      intArray0[5] = 240;
      intArray0[6] = 240;
      intArray0[7] = 240;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Cannot construct AnnotatedMethod with null Method", "java.lang.annotatio", 240, intArray0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "java.lang.annotatio");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.annotatio
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      MockThrowable mockThrowable0 = new MockThrowable("V%qH#]Gyv,");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(mockThrowable0);
      mockThrowable0.initCause(sQLIntegrityConstraintViolationException0);
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      File file0 = MockFile.createTempFile("JSON", "JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLInvalidAuthorizationSpecException0);
      Class<ReferenceType> class0 = ReferenceType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaTypeArray0[2]);
      MapType mapType1 = mapType0.withTypeHandler(sQLInvalidAuthorizationSpecException0);
      Byte byte0 = new Byte((byte) (-65));
      MapType mapType2 = mapType1.withContentValueHandler(byte0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) mapType2, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) dataOutputStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException (through reference chain: com.fasterxml.jackson.databind.type.MapType[\"JSON\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<MapType> class1 = MapType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      ClassUtil.findSuperTypes(class0, class0, list0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      enumSet0.clear();
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = ']';
      charArray0[2] = '/';
      charArray0[3] = '^';
      charArray0[4] = ']';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, ",D8.CNPM|g");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_INT: ,D8.CNPM|g
         //  at [Source: (char[])\"`]/^]\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.getConstructors(class0);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "\"%7d4");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setOutputDecorator(outputDecorator0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory5 = jsonFactory4.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory6 = jsonFactory5.configure(jsonFactory_Feature0, true);
      OutputDecorator outputDecorator1 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Writer) null).when(outputDecorator1).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.Writer.class));
      jsonFactory6.setOutputDecorator(outputDecorator1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jsonFactory5.createGenerator((Writer) charArrayWriter0);
      File file0 = MockFile.createTempFile("JSON", "JSON");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("JSON", "'l}`90UVWq");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, file0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(33);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, objectMapper0, byteArrayOutputStream0, byteArray0, 2, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.node.POJONode", "array", (-630405494));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockFileWriter0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException: net.sf.cglib.proxy.com.fasterxml.jackson.databind.node.POJONode
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getConstructors(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "/F>=10t.YgR");
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isJacksonStdImpl((Object) fileSystemHandling0);
      Class<RuntimeException> class1 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findSuperTypes(class2, class2, list0);
      ClassUtil.nameOf(class1);
      ClassUtil.getDeclaredMethods(class2);
      Short short0 = new Short((short)1593);
      ClassUtil.getClassDescription(short0);
      ClassUtil.nullOrToString((Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      enumSet0.add(accessPattern0);
      ArrayDeque<AccessPattern> arrayDeque0 = new ArrayDeque<AccessPattern>();
      arrayDeque0.add(accessPattern1);
      enumSet0.addAll(arrayDeque0);
      enumSet0.add(accessPattern1);
      enumSet0.add(accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<Object> class1 = Object.class;
      ClassUtil.nameOf(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.getConstructors(class1);
      Class<MockFileInputStream> class3 = MockFileInputStream.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassUtil.primitiveType(class3);
      Class<? extends Enum<?>> class4 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.isBogusClass((Class<?>) null);
      ClassUtil.findRawSuperTypes(class4, class0, false);
      Class<MapType> class5 = MapType.class;
      ClassUtil.canBeABeanType(class5);
      ClassUtil.isConcrete(class0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Double double0 = new Double(0.0);
      ClassUtil.nullOrToString(double0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<POJONode> class1 = POJONode.class;
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperTypes(class1, class2);
      ClassUtil.hasEnclosingMethod(class1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(14);
      ClassUtil.nonNullString("=");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "=");
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('{');
      int int0 = 60000;
      // Undeclared exception!
      try { 
        charArrayWriter2.append((CharSequence) "=", 60000, 14);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("US-ASCII", "US-ASCII");
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, mockPrintWriter0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Character> class0 = Character.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Integer integer0 = new Integer(0);
      SimpleType simpleType1 = simpleType0.withTypeHandler(integer0);
      Long.getLong("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      SimpleType simpleType2 = simpleType1.withValueHandler((Object) null);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(simpleType2, "Class ", ",P &yS");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'Class ' as a subtype of [simple type, class java.lang.Character]: ,P &yS
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.getOuterClass(class0);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaringClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("array", "Cannot access ", 2859);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) "Cannot access ", "array");
      sQLRecoverableException0.addSuppressed(jsonMappingException0);
      sQLRecoverableException0.fillInStackTrace();
      sQLRecoverableException0.getLocalizedMessage();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "array");
      sQLRecoverableException0.fillInStackTrace();
      ClassUtil.getRootCause(sQLRecoverableException0);
      ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      Class<Long> class0 = Long.class;
      Class<Boolean> class1 = Boolean.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.canBeABeanType(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperTypes(class0, class2, list0);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.getDeclaringClass(class3);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.canBeABeanType(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isBogusClass(class0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0, resolvedRecursiveType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapLikeType0, (TypeBindings) null, (Object) mapLikeType0, (Object) resolvedRecursiveType0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) mapLikeType0;
      javaTypeArray0[1] = (JavaType) mapLikeType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) arrayType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, javaTypeArray0[3]);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) referenceType0, javaTypeArray0, javaTypeArray0[2]);
      CollectionType collectionType1 = collectionType0.withTypeHandler((Object) null);
      ReferenceType referenceType1 = referenceType0.withValueHandler(collectionType1);
      SimpleType simpleType0 = referenceType1.withTypeHandler(javaTypeArray0[0]);
      ClassUtil.rawClass(simpleType0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isProxyType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("primitive");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findConstructor(class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-6), objectMapper0, mockFileOutputStream0, byteArray0, 4496, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-2052), 99);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      SQLWarning sQLWarning0 = new SQLWarning("JSON", "JSON", 3);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("", batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-7);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<Character> class1 = Character.class;
      Class<Integer> class2 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("J;XT<F1IR^u!A\"?Y<<");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class3 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class3);
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler((Object) null);
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.findSuperTypes(javaType0, class4, false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.canBeABeanType(class0);
      Class<String> class1 = String.class;
      ClassUtil.verifyMustOverride(class1, "primitive", "primitive");
      ClassUtil.classOf("primitive");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<IOException>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isLocalType(class0, true);
      Class<Void> class1 = Void.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.quotedOr(class0, (String) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("jZb,xZW@w$=~4j6{x_J", "");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Uu^eMCiej|#H");
      objectMapper0.writeValue((OutputStream) mockPrintStream0, (Object) sQLNonTransientConnectionException0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSON", false);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) mockFileWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException: jZb,xZW@w$=~4j6{x_J
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      System.setCurrentTimeMillis((-275L));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, IOException> enumMap0 = new EnumMap<AccessPattern, IOException>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "Rc2>vX", (Throwable) sQLNonTransientConnectionException0);
      enumMap0.put(accessPattern0, (IOException) jsonMappingException0);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YS,Q+/Jcs>L=7P*");
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      ClassUtil.isJacksonStdImpl((Object) iOException0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.nameOf(class0);
      try { 
        ClassUtil.throwRootCauseIfIOE(iOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.primitiveType(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isProxyType(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.int");
      ClassUtil.backticked("Argument #%d of factory method %s has no property name annotation; must have name when multiple-parameter constructor annotated as Creator");
      ClassUtil.primitiveType(class0);
      Class<String> class1 = String.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "`Argument #%d of factory method %s has no property name annotation; must have name when multiple-parameter constructor annotated as Creator`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      ClassUtil.isJacksonStdImpl((Object) accessPattern0);
      Class<Long> class0 = Long.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.backticked("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer");
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.getConstructors(class1);
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nameOf((Named) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isBogusClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.nonNullString("");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      ClassUtil.classOf(jsonGenerator_Feature0);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("jZb,xZW@w$=~4j6{x_J", "");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Yi-", false);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((Writer) mockFileWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException: jZb,xZW@w$=~4j6{x_J
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
      Boolean boolean0 = Boolean.FALSE;
      ClassUtil.classOf(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<Object> class0 = Object.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      ClassUtil.findEnumType(enumSet0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[8];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.allOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getDeclaredFields(class0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredMethods(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{3BY7av>;~<!Ir");
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.emptyIterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = "9j/sv.VS%4ZcWxa l\\i";
      ClassUtil.backticked("9j/sv.VS%4ZcWxa li");
      Class<Integer> class3 = Integer.class;
      ClassUtil.isBogusClass(class3);
      ClassUtil.getDeclaringClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.getConstructors(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Object object0 = ClassUtil.defaultValue(class0);
      ClassUtil.isJacksonStdImpl(object0);
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, true);
      Class<Integer> class1 = Integer.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      Class<Integer> class2 = Integer.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class2, false);
      TypeBindings typeBindings0 = TypeBindings.create(class1, list0);
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      javaTypeArray0[6] = (JavaType) placeholderForType0;
      javaTypeArray0[7] = (JavaType) placeholderForType0;
      javaTypeArray0[8] = (JavaType) placeholderForType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[6]);
      ClassUtil.getClassDescription(collectionType0);
      Class<CollectionType> class3 = CollectionType.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isBogusClass(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      mockFileOutputStream0.close();
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("; failed to set access: ");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLRecoverableException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getPackageName(class0);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Object object0 = ClassUtil.defaultValue(class1);
      ClassUtil.nameOf(class1);
      ClassUtil.classOf(object0);
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.printStackTrace();
      sQLTransactionRollbackException0.getLocalizedMessage();
      ClassUtil.getRootCause(sQLTransactionRollbackException0);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class3);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(5);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withCache((LRUMap<Object, JavaType>) null);
      MapLikeType mapLikeType0 = typeFactory1.constructRawMapLikeType(class2);
      mapLikeType0.isThrowable();
      typeFactory1.constructRawCollectionLikeType(class3);
      StringBuilder stringBuilder0 = new StringBuilder(5);
      StringBuilder stringBuilder1 = mapLikeType0.getGenericSignature(stringBuilder0);
      placeholderForType0.getGenericSignature(stringBuilder1);
      // Undeclared exception!
      try { 
        placeholderForType0.withValueHandler(class3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) constructor0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.findClassAnnotations(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((Throwable) null);
      MockError mockError0 = new MockError("9C__Dz?LP[]L311/I", sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isLocalType(class0, false);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getClassMethods(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      collectionType0.withStaticTyping();
      ClassUtil.classNameOf(collectionType0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) collectionType0);
      ArrayType arrayType1 = arrayType0.withValueHandler(class0);
      ArrayType arrayType2 = arrayType1.withTypeHandler(arrayType0);
      arrayType2.toString();
      ClassUtil.quotedOr(arrayType2, " has no property name annotation; must have name when multiple-parameter constructor annotated as Creator");
      ClassUtil.throwIfError((Throwable) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<?> class1 = ClassUtil.rawClass(arrayType2);
      arrayType2.getInterfaces();
      collectionType0.withContentType(arrayType0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.findEnumType(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findRawSuperTypes(class2, class1, false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Long long0 = new Long((-1787L));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nullOrToString(long0);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isBogusClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      deserializerFactoryConfig0.keyDeserializers();
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<RuntimeException> class0 = RuntimeException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(defaultDeserializationContext_Impl0, class0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.RuntimeException` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findEnumType(class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.canBeABeanType(class1);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      sQLClientInfoException0.getSuppressed();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Method method0 = null;
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, true);
      Class<String> class3 = String.class;
      ClassUtil.findSuperTypes((Class<?>) null, class3, list0);
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.isJacksonStdImpl(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.findClassAnnotations(class4);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("problem: (%s) %s", "org.hibernate.proxy.java.lang.String", (-605166913), hashMap0);
      sQLClientInfoException0.getSuppressed();
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLClientInfoException0);
      ClassUtil.throwRootCauseIfIOE(throwable0);
      Class<PlaceholderForType> class5 = PlaceholderForType.class;
      try { 
        ClassUtil.createInstance(class5, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.PlaceholderForType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.getConstructors(class2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isConcrete(class0);
      ClassUtil.throwIfError((Throwable) null);
      Class<String> class1 = String.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      ClassUtil.findEnumType(class1);
      Class<Character> class2 = Character.TYPE;
      ClassUtil.defaultValue(class2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.isConcrete(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.throwIfError((Throwable) null);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.nonNullString("Invalid abstract type resolution from ");
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.getClassMethods(class2);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isJacksonStdImpl(class1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.emptyIterator();
      Class<MapType> class1 = MapType.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("Sqf5TZF_E5?");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((DataOutput) objectOutputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "6ubn\"VT7]H:d", (Throwable) null);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 6ubn\"VT7]H:d
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.emptyIterator();
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, IOException> enumMap0 = new EnumMap<AccessPattern, IOException>(class1);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.getClassDescription(class0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("V+.#|cnVVN1yG6");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("V+.#|cnVVN1yG6", sQLSyntaxErrorException0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "V+.#|cnVVN1yG6");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      sQLNonTransientException0.printStackTrace();
      sQLSyntaxErrorException0.initCause(sQLNonTransientException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0, "V+.#|cnVVN1yG6");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      MockError mockError0 = new MockError("[]");
      mockError0.getCause();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.nonNull((AccessibleObject) constructor0, (AccessibleObject) constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Problem with definition of ", "GETTER");
      sQLWarning0.spliterator();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("org.hibernate.proxy.java.lang.Long", "GETTER", "org.hibernate.proxy.java.lang.Long", 2712);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("net.sf.cglib.proxy.java.lang.String", "GETTER", "net.sf.cglib.proxy.java.lang.Long", 1411);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement(", problem: ", "com.fasterxml.jackson.databind.util.RootNameLookup", "org.hibernate.proxy.java.lang.Long", 1411);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("org.hibernate.proxy.java.lang.Long", "net.sf.cglib.proxy.java.lang.String", "Problem with definition of ", 1411);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("elementType", "org.hibernate.proxy.java.lang.Long", "GETTER", 2712);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("elementType", "com.fasterxml.jackson.databind.util.RootNameLookup", "`](*.gQe&0![2A`Ox", 1411);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement(", problem: ", "net.sf.cglib.proxy.java.lang.Long", ", problem: ", (-4718));
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("`](*.gQe&0![2A`Ox", ", problem: ", (String) null, 1411);
      stackTraceElementArray0[7] = stackTraceElement7;
      StackTraceElement stackTraceElement8 = new StackTraceElement("elementType", "#>=rjpi(/r&eaIB", "v[h!v]eo5UGx]_<8Z", 519);
      stackTraceElementArray0[8] = stackTraceElement8;
      sQLWarning0.setStackTrace(stackTraceElementArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.throwIfError(sQLWarning0);
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("1lGY}n", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "1lGY}n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Integer> class1 = Integer.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = false;
      Class<RuntimeException> class1 = RuntimeException.class;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = false;
      boolean boolean2 = false;
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "net.sf.cglib.proxy.java.io.IOException");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getOuterClass(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.findSuperClasses((Class<?>) null, class1, false);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Double> class0 = Double.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      Class<Short> class3 = Short.class;
      ClassUtil.getDeclaringClass(class3);
      ClassUtil.getDeclaringClass(class2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isConcrete((Member) constructor0);
      MockError mockError0 = new MockError("xBD=!G(O");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.allOf(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class1 = Short.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("entrySet", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("FQoe`<f6", "FQoe`<f6", 74, (Map<String, ClientInfoStatus>) null, (Throwable) null);
      ClassUtil.findSuperTypes(class0, class0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Long> class1 = Long.TYPE;
      ClassUtil.getPackageName(class1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.isLocalType(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<RuntimeException> class0 = RuntimeException.class;
      defaultDeserializationContext_Impl0.weirdNativeValueException(defaultDeserializationContext0, class0);
      Class<String> class1 = String.class;
      ClassUtil.getConstructors(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.getGenericInterfaces(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getDeclaringClass(class3);
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.isBogusClass(class1);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockThrowable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ClassUtil.backticked("No 'injectableValues' configured, cannot inject value with id [%s]");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nameOf(class0);
      Class<Long> class1 = Long.TYPE;
      ClassUtil.defaultValue(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      assertEquals(3, enumSet0.size());
      assertNotNull(enumSet0);
      
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      boolean boolean0 = enumSet0.add(accessPattern0);
      assertEquals(3, enumSet0.size());
      assertTrue(enumSet0.contains(accessPattern0));
      assertFalse(boolean0);
      
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertEquals(3, enumSet0.size());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertEquals(16385, class1.getModifiers());
      assertTrue(enumSet0.contains(accessPattern0));
      assertNotNull(class1);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class2, false);
      assertEquals(3, enumSet0.size());
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
      assertEquals(16385, class1.getModifiers());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(enumSet0.contains(accessPattern0));
      assertNotNull(list0);
      
      Class<RuntimeException> class3 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class3, true);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertSame(class3, class2);
      assertNotNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[][] annotationArray0 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor0.isSynthetic());
      assertSame(class3, class2);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      Class<Annotation> class4 = Annotation.class;
      classUtil_Ctor0._ctor.getDeclaredAnnotation(class4);
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<String> class1 = String.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Float float0 = new Float(1.0);
      Float float1 = new Float(1.0);
      ClassUtil.nonNull(float0, float1);
      Class<Void> class2 = Void.class;
      ClassUtil.getClassMethods(class2);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getClassMethods(class0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.getTypeParameters();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.hasEnclosingMethod(class1);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getTypeParameters();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      classUtil_Ctor0.getDeclaredAnnotations();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.hasClass((Object) null, class0);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.nonNullString((String) null);
      ClassUtil.getDeclaringClass(class0);
      Character character0 = Character.valueOf('i');
      ClassUtil.nullOrToString(character0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility2 = JsonAutoDetect.Visibility.DEFAULT;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility2);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultVisibility(jsonAutoDetect_Value0);
      ObjectMapper objectMapper3 = objectMapper2.copy();
      ObjectReader objectReader0 = objectMapper3.readerForUpdating(jsonAutoDetect_Visibility0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      jsonFactory1.configure(jsonParser_Feature0, false);
      jsonFactory2.setCodec(objectReader0);
      Class<Byte> class0 = Byte.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      Integer.getInteger((String) null);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor1.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", (String) null, 13, sQLNonTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("Q7JoZd+ I_#", "No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ", 13, sQLNonTransientConnectionException0);
      ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<RuntimeException> class0 = RuntimeException.class;
      defaultDeserializationContext_Impl0.weirdNativeValueException(defaultDeserializationContext0, class0);
      Class<String> class1 = String.class;
      ClassUtil.getConstructors(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.backticked("hYD_2d");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ClassUtil.nonNullString("net.sf.cglib.proxy.");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nullOrToString("net.sf.cglib.proxy.");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      ObjectReader objectReader1 = objectReader0.with(deserializationFeature0);
      objectReader1.getTypeFactory();
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Long long0 = new Long(1L);
      ClassUtil.quotedOr(long0, (String) null);
      ClassUtil.classNameOf("\"1\"");
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`java.lang.String`");
      ClassUtil.getConstructors(class0);
      ClassUtil.quotedOr((Object) null, "`java.lang.String`");
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findEnumType(class1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`java.lang.String`", "kKA^\"#8");
      ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class2);
      CollectionType collectionType1 = collectionType0.withContentValueHandler((Object) null);
      CollectionType collectionType2 = collectionType1.withStaticTyping();
      CollectionLikeType collectionLikeType0 = collectionType2.withContentValueHandler((Object) null);
      ClassUtil.rawClass(collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<String> class1 = String.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Float float0 = new Float(1.0);
      ClassUtil.nonNull(float0, float0);
      Class<Object> class2 = Object.class;
      ClassUtil.getClassMethods(class2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      System.setCurrentTimeMillis(895L);
      ClassUtil.getConstructors(class0);
      ClassUtil.isCollectionMapOrArray(class2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      enumSet0.add(accessPattern0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)96;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.findEnumType(enumSet0);
      Class<Long> class1 = Long.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getPackageName(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.getOuterClass(class2);
      Class<NoClass> class3 = NoClass.class;
      boolean boolean0 = false;
      ClassUtil.isLocalType(class3, false);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<MapType> class3 = MapType.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor1.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getDeclaredMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(31, methodArray0.length);
      
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ClassUtil.nonNullString("a6J(+t|00Wb");
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getClassDescription("a6J(+t|00Wb");
      Class<IOException> class1 = IOException.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.backticked("`java.lang.String`");
      ClassUtil.emptyIterator();
      int[] intArray0 = new int[2];
      intArray0[0] = 5550;
      intArray0[1] = 5550;
      Throwable throwable0 = null;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("serialVersionUID", "`java.lang.String`", 5550, intArray0, (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("serialVersionUID", "keyUniverse", batchUpdateException0);
      sQLTimeoutException0.spliterator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("a6J(+t|00Wb", hashMap0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "a6J(+t|00Wb", (Throwable) batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.backticked("serialVersionUID");
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.canBeABeanType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "!uxa6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      ClassUtil.findEnumType(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.getDeclaredFields(class0);
      Class<MapType> class3 = MapType.class;
      ClassUtil.nameOf(class3);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Float float0 = new Float((-1.0));
      ClassUtil.hasClass(float0, class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      Long long0 = new Long((-731L));
      CollectionType collectionType1 = collectionType0.withContentValueHandler(long0);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) collectionType1, (JavaType) collectionType0);
      Class<Float> class2 = Float.class;
      typeFactory0.constructReferenceType(class2, collectionType1);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class0, true);
      Class<RuntimeException> class3 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class3, true);
      Class<Annotation> class4 = Annotation.class;
      constructor0.getDeclaredAnnotation(class4);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.missingTypeIdException(mapLikeType0, "_~ZUeV[pZH9jXna`");
      Class<MapLikeType> class5 = MapLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class5, (Object) null, "_~ZUeV[pZH9jXna`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      Float float0 = new Float(0.0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.hasClass(enumSet0, class1);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet.range(accessPattern0, accessPattern0);
      SQLWarning sQLWarning0 = new SQLWarning("_~ZUeV[pZH9jXna`", "size");
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      enumSet0.add(accessPattern1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getOuterClass(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isLocalType(class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Long");
      SQLWarning sQLWarning0 = new SQLWarning();
      sQLWarning0.fillInStackTrace();
      sQLWarning0.getLocalizedMessage();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Q\",vg3HJz", sQLWarning0);
      sQLTransactionRollbackException0.addSuppressed(sQLWarning0);
      SQLWarning sQLWarning1 = new SQLWarning();
      sQLWarning1.getStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLWarning0.spliterator();
      sQLTransactionRollbackException0.forEach(consumer0);
      sQLWarning0.setNextWarning(sQLWarning1);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
      ClassUtil.getRootCause(throwable0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      sQLTransactionRollbackException0.setNextException(sQLWarning0);
      ClassUtil.getPackageName(class0);
      Object object0 = new Object();
      sQLTransactionRollbackException0.printStackTrace();
      Class<?> class1 = ClassUtil.classOf(object0);
      ClassUtil.getRootCause(throwable0);
      ClassUtil.throwRootCauseIfIOE(sQLWarning1);
      ClassUtil.getClassDescription(sQLWarning1);
      ClassUtil.isJacksonStdImpl((Object) throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findEnumType(class1);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.hasEnclosingMethod(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Long> class1 = Long.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isJacksonStdImpl(class2);
      Class<Error> class3 = Error.class;
      ClassUtil.hasEnclosingMethod(class3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.nameOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("org.hibernate.proxy.", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0, "`java.lang.Integer`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader1);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1816, 1816);
      TypeFactory typeFactory2 = typeFactory0.withCache(lRUMap0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<LinkedList> class2 = LinkedList.class;
      Class<LinkedList> class3 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class3);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(class2);
      MapLikeType mapLikeType0 = typeFactory1.constructMapLikeType((Class<?>) class1, (JavaType) collectionType1, (JavaType) collectionType1);
      Class<Object> class4 = Object.class;
      typeFactory2.constructReferenceType(class4, mapLikeType0);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class3, false);
      ClassUtil.findConstructor(class0, false);
      String string0 = "[]";
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAdditionalKeyDeserializers((KeyDeserializers) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null KeyDeserializers
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ClassUtil.backticked(" (from class ");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nullOrToString(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<RuntimeException> class0 = RuntimeException.class;
      Long long0 = new Long(0L);
      defaultDeserializationContext0.weirdNativeValueException(long0, class0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.nonNullString("7");
      ClassUtil.getDeclaredMethods(class0);
      MockError mockError0 = new MockError();
      ClassUtil.getClassDescription(mockError0);
      Class<Float> class1 = Float.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.backticked("RB= !'q3Po[er(*P2`t");
      ClassUtil.findSuperClasses(class1, class0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory3 = new JsonFactory(objectMapper0);
      jsonFactory3.disable(jsonGenerator_Feature0);
      jsonFactory2.setCodec(objectMapper0);
      Class<Byte> class2 = Byte.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      Integer.getInteger("Ry`&");
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ClassUtil.backticked("No 'injectableValues' configured, cannot inject value with id [%s]");
      Class<SimpleType> class0 = SimpleType.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonFactory0.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature1, true);
      jsonFactory2.setCodec(objectMapper0);
      Class<Byte> class2 = Byte.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      classUtil_Ctor0.getConstructor();
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      Integer.getInteger(">1 h");
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor1.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findEnumType(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.canBeABeanType(class2);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Long> class3 = Long.class;
      ClassUtil.hasEnclosingMethod(class3);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        beanDeserializerBuilder0.buildAbstract();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Float float0 = new Float((-1.0));
      ClassUtil.hasClass(float0, class0);
      Class<Void> class1 = Void.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader1);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2000, 2000);
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class2);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(class2);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) collectionType1, (JavaType) collectionType1);
      JavaType javaType0 = typeFactory2.constructReferenceType(class1, mapLikeType0);
      Class<Double> class3 = Double.class;
      ClassUtil.findSuperTypes((JavaType) collectionType1, (Class<?>) class3, true);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class4 = Annotation.class;
      constructor0.getDeclaredAnnotation(class4);
      Class<AccessPattern> class5 = AccessPattern.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.missingTypeIdException(javaType0, "[]");
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class5, jsonMappingException0, "%");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.exc.InvalidTypeIdException (of class com.fasterxml.jackson.databind.util.AccessPattern) must override method '%'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(124);
      // Undeclared exception!
      try { 
        placeholderForType0.withContentValueHandler((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.nameOf(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object object0 = new Object();
      Class<Double> class0 = Double.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      Class<Short> class2 = Short.class;
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findSuperTypes(class2, class3);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("*0lpwSI5!+I'", "*0lpwSI5!+I'", sQLTimeoutException0);
      sQLTransactionRollbackException0.addSuppressed(sQLTimeoutException0);
      Class<Float> class4 = Float.class;
      ClassUtil.findSuperClasses(class2, class4, false);
      Class<RuntimeException> class5 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class5, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.findSuperTypes(class3, class1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Boolean boolean0 = new Boolean("Default constructor for ");
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.canBeABeanType(class0);
      Float float0 = new Float((-99.3F));
      ClassUtil.isJacksonStdImpl((Object) "Default constructor for ");
      ClassUtil.getPackageName(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getOuterClass(class1);
      Class<Float> class2 = Float.class;
      ClassUtil.isLocalType(class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.canBeABeanType(class1);
      ClassUtil.isJacksonStdImpl(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getOuterClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Object object0 = new Object();
      Class<Double> class0 = Double.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      Class<Short> class2 = Short.class;
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findSuperTypes(class2, class3);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("*0lpwSI5!+I'", "*0lpwSI5!+I'", sQLTimeoutException0);
      sQLTransactionRollbackException0.addSuppressed(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      ClassUtil.findEnumType(class1);
      Class<Character> class2 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ClassUtil.backticked("elementType");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nullOrToString((Object) null);
      Integer.getInteger("`elementType`");
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getGenericExceptionTypes();
      constructor0.getGenericExceptionTypes();
      constructor0.getAnnotations();
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nullOrToString(constructor0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ClassUtil.nonNullString("a6J(+t|00Wb");
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.getClassDescription(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getGenericSuperclass(class1);
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.backticked("`java.lang.Character`");
      ClassUtil.findSuperClasses(class0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      jsonFactory2.setCodec(objectMapper0);
      Class<Byte> class2 = Byte.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      Integer.getInteger("JSON");
      Class<AccessPattern> class3 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.backticked((String) null);
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class1 = String.class;
      ClassUtil.createInstance(class1, true);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getGenericExceptionTypes();
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isProxyType(class1);
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.classOf(class1);
      DeserializationContext deserializationContext0 = null;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "");
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockError mockError0 = new MockError("l/II)&tj7CmEgo=d");
      Throwable throwable0 = ClassUtil.throwIfError(mockRuntimeException0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isLocalType(class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(throwable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getTypeParameters();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      classUtil_Ctor0.getDeclaredAnnotations();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isProxyType(class1);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Character> class2 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, class0, "entrySet");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Character) must override method 'entrySet'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Boolean boolean0 = new Boolean("Default constructor for ");
      ClassUtil.quotedOr(boolean0, "Default constructor for ");
      Class<Long> class0 = Long.class;
      ClassUtil.canBeABeanType(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<Float> class3 = Float.class;
      ClassUtil.hasClass(class1, class3);
      Class<Void> class4 = Void.class;
      try { 
        ClassUtil.findConstructor(class4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getGenericExceptionTypes();
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isProxyType(class1);
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.isConcrete((Member) constructor0);
      Class<Double> class2 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, class0, "entrySet");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Double) must override method 'entrySet'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.findEnumType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("keyUniverse", "@>|t%?d", 2836, mockRuntimeException0);
      ClassUtil.throwIfError(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<RuntimeException> class0 = RuntimeException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(defaultDeserializationContext0, class0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.RuntimeException` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("entrySet", (Map<String, ClientInfoStatus>) null);
      sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("FQoe`<f6", "FQoe`<f6", 74, (Map<String, ClientInfoStatus>) null, (Throwable) null);
      ClassUtil.throwIfIOE(sQLClientInfoException1);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotation(class1);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      String string0 = null;
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("keyUniverse", "keyUniverse", (-3125));
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("ZCAA8i~%+[rO2\"yL-", "GDsczNK", "ZCAA8i~%+[rO2\"yL-", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("GDsczNK", "keyUniverse", "ZCAA8i~%+[rO2\"yL-", 2098);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("keyUniverse", "GDsczNK", "NULL", 3440);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("keyUniverse", "NULL", "~z", 1154);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("ZERO_LENGTH_ENUM_ARRAY", "XaVV>1T{\"ya=", "~z", (-3125));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("GDsczNK", "I]Fa,]Md*GQa(Ed", "~z", 1154);
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLIntegrityConstraintViolationException0.setStackTrace(stackTraceElementArray0);
      sQLIntegrityConstraintViolationException0.getStackTrace();
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "serialVersionUID");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Object) must override method 'serialVersionUID'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader1);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2000, 2000);
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      Class<AccessPattern> class1 = AccessPattern.class;
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class2);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(class2);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) collectionType1, (JavaType) collectionType1);
      typeFactory2.constructReferenceType(class1, mapLikeType0);
      Class<Double> class3 = Double.class;
      ClassUtil.findSuperTypes((JavaType) collectionType1, (Class<?>) class3, true);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class4 = Annotation.class;
      constructor0.getDeclaredAnnotation(class4);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "[]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      SQLException sQLException0 = new SQLException("Du6)b=Oh7S&dCD/x$", " has no default (no arg) constructor");
      assertEquals("Du6)b=Oh7S&dCD/x$", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: Du6)b=Oh7S&dCD/x$", sQLException0.toString());
      assertEquals(" has no default (no arg) constructor", sQLException0.getSQLState());
      assertNotNull(sQLException0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Du6)b=Oh7S&dCD/x$", "tEO|q[>Rp{;afgp6", " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", (-1167));
      assertEquals("Du6)b=Oh7S&dCD/x$.tEO|q[>Rp{;afgp6( is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type)", stackTraceElement0.toString());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("tEO|q[>Rp{;afgp6", stackTraceElement0.getMethodName());
      assertEquals("Du6)b=Oh7S&dCD/x$", stackTraceElement0.getClassName());
      assertEquals(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", stackTraceElement0.getFileName());
      assertEquals((-1167), stackTraceElement0.getLineNumber());
      assertNotNull(stackTraceElement0);
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("tEO|q[>Rp{;afgp6", "kcg63k+p~aXz%%w", "kcg63k+p~aXz%%w", (-1167));
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals("tEO|q[>Rp{;afgp6", stackTraceElement1.getClassName());
      assertEquals("kcg63k+p~aXz%%w", stackTraceElement1.getFileName());
      assertEquals((-1167), stackTraceElement1.getLineNumber());
      assertEquals("tEO|q[>Rp{;afgp6.kcg63k+p~aXz%%w(kcg63k+p~aXz%%w)", stackTraceElement1.toString());
      assertEquals("kcg63k+p~aXz%%w", stackTraceElement1.getMethodName());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement1);
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "Class ", "Failed to find default constructor of class ", 8);
      assertEquals("Class ", stackTraceElement2.getMethodName());
      assertEquals(".Class (Failed to find default constructor of class :8)", stackTraceElement2.toString());
      assertEquals("", stackTraceElement2.getClassName());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals(8, stackTraceElement2.getLineNumber());
      assertEquals("Failed to find default constructor of class ", stackTraceElement2.getFileName());
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertNotNull(stackTraceElement2);
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("OOCt%0ie7 aOT+", "kcg63k+p~aXz%%w", "kcg63k+p~aXz%%w", 8);
      assertEquals("OOCt%0ie7 aOT+.kcg63k+p~aXz%%w(kcg63k+p~aXz%%w:8)", stackTraceElement3.toString());
      assertEquals(8, stackTraceElement3.getLineNumber());
      assertEquals("OOCt%0ie7 aOT+", stackTraceElement3.getClassName());
      assertEquals("kcg63k+p~aXz%%w", stackTraceElement3.getFileName());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertEquals("kcg63k+p~aXz%%w", stackTraceElement3.getMethodName());
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertNotNull(stackTraceElement3);
      
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLException0.setStackTrace(stackTraceElementArray0);
      assertEquals("Du6)b=Oh7S&dCD/x$", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: Du6)b=Oh7S&dCD/x$", sQLException0.toString());
      assertEquals(" has no default (no arg) constructor", sQLException0.getSQLState());
      assertEquals(4, stackTraceElementArray0.length);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(" has no default (no arg) constructor");
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(" has no default (no arg) constructor", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException:  has no default (no arg) constructor", sQLFeatureNotSupportedException0.toString());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      SQLException sQLException1 = (SQLException)sQLException0.initCause(sQLFeatureNotSupportedException0);
      assertEquals("Du6)b=Oh7S&dCD/x$", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: Du6)b=Oh7S&dCD/x$", sQLException0.toString());
      assertEquals(" has no default (no arg) constructor", sQLException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(" has no default (no arg) constructor", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException:  has no default (no arg) constructor", sQLFeatureNotSupportedException0.toString());
      assertEquals(" has no default (no arg) constructor", sQLException1.getSQLState());
      assertEquals("Du6)b=Oh7S&dCD/x$", sQLException1.getMessage());
      assertEquals(0, sQLException1.getErrorCode());
      assertEquals("java.sql.SQLException: Du6)b=Oh7S&dCD/x$", sQLException1.toString());
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException1, sQLException0);
      assertNotNull(sQLException1);
      
      SQLException sQLException2 = (SQLException)ClassUtil.throwIfRTE(sQLException0);
      assertEquals("Du6)b=Oh7S&dCD/x$", sQLException0.getMessage());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException: Du6)b=Oh7S&dCD/x$", sQLException0.toString());
      assertEquals(" has no default (no arg) constructor", sQLException0.getSQLState());
      assertEquals("Du6)b=Oh7S&dCD/x$", sQLException2.getMessage());
      assertEquals("java.sql.SQLException: Du6)b=Oh7S&dCD/x$", sQLException2.toString());
      assertEquals(" has no default (no arg) constructor", sQLException2.getSQLState());
      assertEquals(0, sQLException2.getErrorCode());
      assertSame(sQLException0, sQLException2);
      assertSame(sQLException0, sQLException1);
      assertSame(sQLException2, sQLException1);
      assertSame(sQLException2, sQLException0);
      assertNotNull(sQLException2);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      assertFalse(beanSerializerBuilder0.hasProperties());
      assertNotNull(beanSerializerBuilder0);
      
      AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
      assertFalse(beanSerializerBuilder0.hasProperties());
      assertNull(annotatedClass0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<LinkedList> class1 = LinkedList.class;
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Class<RuntimeException> class3 = RuntimeException.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class3, javaTypeArray0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertNotNull(typeBindings0);
      assertEquals(0, javaTypeArray0.length);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1167));
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertNotNull(placeholderForType0);
      
      JavaType[] javaTypeArray1 = new JavaType[0];
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) placeholderForType0, javaTypeArray1, (JavaType) placeholderForType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(javaTypeArray0.equals((Object)javaTypeArray1));
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      assertNotSame(javaTypeArray0, javaTypeArray1);
      assertNotSame(javaTypeArray1, javaTypeArray0);
      assertNotNull(collectionType0);
      assertEquals(0, javaTypeArray0.length);
      assertEquals(0, javaTypeArray1.length);
      
      CollectionType collectionType1 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) collectionType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.isContainerType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(javaTypeArray0.equals((Object)javaTypeArray1));
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      assertFalse(collectionType1.equals((Object)collectionType0));
      assertNotSame(javaTypeArray0, javaTypeArray1);
      assertNotSame(javaTypeArray1, javaTypeArray0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotNull(collectionType1);
      assertEquals(0, javaTypeArray0.length);
      assertEquals(0, javaTypeArray1.length);
      
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "kcg63k+p~aXz%%w", collectionType1);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.isContainerType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isMapLikeType());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals("kcg63k+p~aXz%%w", virtualAnnotatedMember0.getName());
      assertFalse(javaTypeArray0.equals((Object)javaTypeArray1));
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      assertFalse(collectionType0.equals((Object)collectionType1));
      assertFalse(collectionType1.equals((Object)collectionType0));
      assertNotNull(virtualAnnotatedMember0);
      assertEquals(0, javaTypeArray0.length);
      assertEquals(0, javaTypeArray1.length);
      
      Member member0 = virtualAnnotatedMember0.getMember();
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isCollectionLikeType());
      assertTrue(collectionType1.isContainerType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isArrayType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isMapLikeType());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals("kcg63k+p~aXz%%w", virtualAnnotatedMember0.getName());
      assertFalse(javaTypeArray0.equals((Object)javaTypeArray1));
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      assertFalse(collectionType0.equals((Object)collectionType1));
      assertFalse(collectionType1.equals((Object)collectionType0));
      assertNotSame(javaTypeArray0, javaTypeArray1);
      assertNotSame(javaTypeArray1, javaTypeArray0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNull(member0);
      assertEquals(0, javaTypeArray0.length);
      assertEquals(0, javaTypeArray1.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<CollectionType> class1 = CollectionType.class;
      Constructor<CollectionType> constructor0 = ClassUtil.findConstructor(class1, true);
      assertNull(constructor0);
      
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier1 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier1);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory1, deserializerFactory0);
      assertNotSame(deserializerFactory1, beanDeserializerFactory0);
      assertNotNull(deserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)deserializerFactory1));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      String string0 = null;
      Class<IOException> class0 = IOException.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(constructor0);
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(classUtil_Ctor0);
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertSame(annotationArray1, annotationArray0);
      assertNotNull(annotationArray1);
      assertEquals(0, annotationArray1.length);
      
      TypeVariable<Constructor<NoClass>>[] typeVariableArray0 = constructor0.getTypeParameters();
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertNotNull(typeVariableArray0);
      assertEquals(0, typeVariableArray0.length);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor1.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor1.toString());
      assertTrue(constructor1.isAccessible());
      assertEquals(2, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      assertNotNull(constructor1);
      
      ClassUtil.checkAndFixAccess((Member) constructor1);
      assertEquals(2, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertFalse(constructor1.isVarArgs());
      assertEquals("private com.fasterxml.jackson.databind.annotation.NoClass()", constructor1.toString());
      assertTrue(constructor1.isAccessible());
      assertEquals(2, constructor1.getModifiers());
      assertFalse(constructor1.isSynthetic());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<ReferenceType> class1 = ReferenceType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class1, "entrySet");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotNull(jsonMappingException0);
      
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      assertNotNull(throwable0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotNull(jsonFactory1);
      
      // Undeclared exception!
      try { 
        MockURI.normalize((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Integer`", string0);
      
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals("class java.lang.Number", class1.toString());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      
      String string0 = ClassUtil.classNameOf((Object) null);
      assertNotNull(string0);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Constructor<CollectionType> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "]z8581;?wN)h");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(jsonMappingException0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultDeserializationContext_Impl0, (-4796));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-4796), jsonMappingException_Reference0.getIndex());
      assertNotNull(jsonMappingException_Reference0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(jsonMappingException_Reference0.getFieldName());
      assertEquals((-4796), jsonMappingException_Reference0.getIndex());
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException1, jsonMappingException0);
      assertNotNull(jsonMappingException1);
      
      MockError mockError0 = new MockError();
      assertNotNull(mockError0);
      
      StackTraceElement[] stackTraceElementArray0 = mockError0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonMappingException0, jsonMappingException1);
      assertNotNull(string0);
      assertEquals("]z8581;?wN)h (through reference chain: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[?])", string0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) mockError0, "@hI(\"1*");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonMappingException0, jsonMappingException2);
      assertSame(jsonMappingException0, jsonMappingException1);
      assertSame(jsonMappingException2, jsonMappingException0);
      assertSame(jsonMappingException2, jsonMappingException1);
      assertNotNull(jsonMappingException2);
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException2, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(3, methodArray0.length);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", (-2988), sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals((-2988), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLSyntaxErrorException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLSyntaxErrorException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals((-2988), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLSyntaxErrorException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLSyntaxErrorException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLFeatureNotSupportedException0.toString());
      assertEquals("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNotNull(sQLFeatureNotSupportedException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0, "com.fasterxml.jackson.core.JsonGenerator$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.core.JsonGenerator$1
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertNotNull(resolvedRecursiveType0);
      
      String string0 = ClassUtil.getClassDescription(resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertNotNull(string0);
      assertEquals("`com.fasterxml.jackson.databind.type.ResolvedRecursiveType`", string0);
      
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
      assertFalse(beanSerializerBuilder0.hasProperties());
      assertNotNull(beanSerializerBuilder0);
      
      // Undeclared exception!
      try { 
        beanSerializerBuilder0.getClassInfo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BeanSerializerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<Long> class0 = Long.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("a6J(+t|00Wb");
      assertNotNull(string0);
      assertEquals("a6J(+t|00Wb", string0);
      
      Class<Character> class0 = Character.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(94, methodArray0.length);
      
      String string1 = ClassUtil.getClassDescription(class0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`java.lang.Character`", string1);
      
      Class<Float> class1 = Float.class;
      Class class2 = (Class)ClassUtil.getGenericSuperclass(class1);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.Number", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertNotNull(class2);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class1);
      assertFalse(boolean0);
      
      String string2 = ClassUtil.backticked("`java.lang.Character`");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("``java.lang.Character``", string2);
      
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertNotNull(jsonFactory3);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertNotNull(dataOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory3.createGenerator((DataOutput) dataOutputStream0);
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(uTF8JsonGenerator0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "elementType");
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: ", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("elementType", sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLInvalidAuthorizationSpecException: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
      
      Class<String> class2 = String.class;
      String string0 = ClassUtil.canBeABeanType(class2);
      assertNull(string0);
      
      Float float0 = new Float((-4493.18F));
      assertNotNull(float0);
      assertEquals((-4493.18F), (float)float0, 0.01F);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) float0);
      assertFalse(boolean0);
      
      String string1 = ClassUtil.getPackageName(class2);
      assertNotNull(string1);
      assertEquals("java.lang", string1);
      
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class2, true);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<NoClass> class3 = NoClass.class;
      Class<?> class4 = ClassUtil.getOuterClass(class3);
      assertNull(class4);
      
      String string2 = ClassUtil.isLocalType(class0, true);
      assertNull(string2);
      
      Class<Void> class5 = Void.class;
      try { 
        ClassUtil.findConstructor(class5, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Class<Long> class1 = Long.class;
      Class<? extends Enum<?>> class2 = ClassUtil.findEnumType(class1);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Number", class2.toString());
      assertFalse(class2.isPrimitive());
      assertSame(class1, class0);
      assertNotNull(class2);
      
      String string0 = ClassUtil.canBeABeanType(class1);
      assertSame(class1, class0);
      assertNull(string0);
      
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class2);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals(1025, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Number", class2.toString());
      assertFalse(class2.isPrimitive());
      assertTrue(boolean1 == boolean0);
      assertSame(class1, class0);
      assertFalse(boolean1);
      
      Class<Error> class3 = Error.class;
      boolean boolean2 = ClassUtil.hasEnclosingMethod(class3);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(beanDeserializerBuilder0);
      
      // Undeclared exception!
      try { 
        beanDeserializerBuilder0.buildAbstract();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Constructor<MapType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = ClassUtil.backticked(">m7x}TOD");
      assertNotNull(string0);
      assertEquals("`>m7x}TOD`", string0);
      
      Class<Object> class0 = Object.class;
      String string1 = ClassUtil.isLocalType(class0, true);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = ClassUtil.backticked("No 'injectableValues' configured, cannot inject value with id [%s]");
      assertNotNull(string0);
      assertEquals("`No 'injectableValues' configured, cannot inject value with id [%s]`", string0);
      
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      String string1 = ClassUtil.nameOf(class0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", string1);
      
      Class<Long> class2 = Long.TYPE;
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("long", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertNotNull(class2);
      
      Object object0 = ClassUtil.defaultValue(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("long", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertNotNull(object0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Void> class0 = Void.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ClassUtil.backticked("elementType");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.nullOrToString((Object) null);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      String string0 = "vals";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, "vals");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class com.fasterxml.jackson.databind.type.MapType) must override method 'vals'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Boolean boolean0 = new Boolean("Default constructor for ");
      ClassUtil.quotedOr(boolean0, "Default constructor for ");
      Class<Long> class0 = Long.class;
      ClassUtil.canBeABeanType(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getDeclaredMethods(class2);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Number is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
