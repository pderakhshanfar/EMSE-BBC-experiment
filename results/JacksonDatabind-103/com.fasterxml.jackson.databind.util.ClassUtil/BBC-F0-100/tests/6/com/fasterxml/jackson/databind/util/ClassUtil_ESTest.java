/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 05:13:15 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataInput;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double double1 = new Double(2.147483647E9);
      Double double2 = ClassUtil.nonNull(double0, double1);
      assertEquals(0.0, (double)double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockRuntimeException0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("cwzUFN2d");
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 8, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 1689, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLClientInfoException0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeatureArray0[0];
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2143);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectReader0, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 2, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[8];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) jsonParser0, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockError mockError0 = new MockError();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Failed to find default constructor of class ", "Failed to find default constructor of class ", mockError0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)ClassUtil.throwIfRTE(sQLNonTransientConnectionException0);
      assertEquals(0, sQLNonTransientConnectionException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long[] longArray0 = new long[9];
      MockIOException mockIOException0 = new MockIOException();
      SQLException sQLException0 = new SQLException(mockIOException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("}~j}>bRY!yHa})", "Cannot figure out type for EnumMap (odd JDK platform?)", (-1644), longArray0, sQLException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Cannot figure out type for EnumMap (odd JDK platform?)", batchUpdateException0);
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)ClassUtil.throwIfIOE(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException1.getSQLState());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<?> class0 = ClassUtil.rawClass((JavaType) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<?> class1 = ClassUtil.rawClass(simpleType0);
      assertTrue(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<String> class1 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[8];
      Class<HashMap> class2 = HashMap.class;
      Class<Double> class3 = Double.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class3, class1);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) mapType0);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) referenceType0, javaTypeArray0[4]);
      Class<?> class4 = ClassUtil.rawClass(mapLikeType0);
      assertFalse(class4.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
      Class<?> class1 = ClassUtil.rawClass(arrayType0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = ClassUtil.quotedOr((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("serialVersionUID");
      assertEquals("serialVersionUID", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Double double0 = ClassUtil.nonNull((Double) null, (Double) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = (MapType)ClassUtil.nonNull((MapLikeType) mapType0, (MapLikeType) mapType0);
      assertFalse(mapType1.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("com.fasterxml.jackson.databind.type", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<FloatNode> class0 = FloatNode.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(13, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Class<?> class1 = classUtil_Ctor0.getDeclaringClass();
      ClassUtil.getDeclaredMethods(class1);
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(7, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(2, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(22, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ArrayList<Class<AccessPattern>> arrayList0 = new ArrayList<Class<AccessPattern>>();
      List<Class<?>> list0 = ClassUtil.findSuperTypes((Class<?>) class0, (Class<?>) class0, arrayList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<Module> class1 = Module.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<String> class2 = String.class;
      List<Class<?>> list1 = ClassUtil.findSuperTypes(class2, class2, list0);
      assertEquals(3, list1.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<Error> class1 = Error.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<NoClass> class1 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class0.toString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Constructor<CollectionType> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Void> class0 = Void.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1186));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      Class<?> class1 = ClassUtil.classOf(accessPattern0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf("serialVersionUID");
      assertEquals("class java.lang.String", class0.toString());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "enum");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "A,*J4`9)+dX 0r13");
      MockException mockException0 = new MockException(sQLDataException0);
      sQLDataException0.initCause(mockException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLDataException0, "keyType");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "keyType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockError mockError0 = new MockError();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Failed to find default constructor of class ", "Failed to find default constructor of class ", mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0, "Failed to find default constructor of class ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLException sQLException0 = new SQLException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.node.FloatNode", "D0a<w;", batchUpdateException0);
      batchUpdateException0.initCause(sQLException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Error error0 = ClassUtil.createInstance(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) error0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.java.io.IOException", "] that wasn't previously registered.");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("\"Ad- HY)I1{vII", sQLTransientException0);
      sQLTransientException0.initCause(sQLTimeoutException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[0];
      MockIOException mockIOException0 = new MockIOException("Instances of ");
      SQLDataException sQLDataException0 = new SQLDataException("Failed to instantiate class ", mockIOException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0, sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "Failed to instantiate class ", 3, batchUpdateException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Boolean> class0 = Boolean.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("org.hibernate.proxy.java.io.IOException", class0, ".fR/nc#q");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Boolean` from String \"org.hibernate.proxy.java.io.IOException\": .fR/nc#q
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Module> class0 = Module.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FloatNode floatNode0 = new FloatNode(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, floatNode0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, (-866), (DataInput) null, objectMapper0, byteQuadsCanonicalizer0, 2);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) uTF8DataInputJsonParser0, (Class<?>) class0, jsonToken0, (String) null);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_FALSE
         //  at [Source: (com.fasterxml.jackson.databind.node.FloatNode); line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, (String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null, (-2529), jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultDeserializationContext_Impl0, true);
      StringReader stringReader0 = new StringReader("\"&)gIT`&?J@;i");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1744709515), stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 3, 239, false);
      Class<FloatNode> class0 = FloatNode.class;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class0, jsonToken0, "\"&)gIT`&?J@;i");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_OBJECT: \"&)gIT`&?J@;i
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibernate.proxy.short", "org.hibernate.proxy.short", 473, intArray0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(batchUpdateException0);
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.sql.SQLNonTransientException: java.sql.BatchUpdateException: org.hibernate.proxy.short
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "org.hibernate.proxy.java.io.IOException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockError mockError0 = new MockError("yhdM+t+w0wu{4");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("com.fasterxml.jackson.databind.type.ArrayType");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("com.fasterxml.jackson.databind.type.ArrayType", mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("Cannot figure out type for EnumMap (odd JDK platform?)");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockIOException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot figure out type for EnumMap (odd JDK platform?)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, referenceType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) beanProperty_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanProperty$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("net.sf.cglib.proxy.", "net.sf.cglib.proxy.", 1897, sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLTransientException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLTransientException0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<String> class1 = String.class;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class1, class2, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<Object>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      File file0 = MockFile.createTempFile("JSON", ">L31YDfs");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator(file0, jsonEncoding0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1539), objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      MockIOException mockIOException0 = new MockIOException("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionLikeType> enumMap0 = new EnumMap<AccessPattern, CollectionLikeType>(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, resolvedRecursiveType0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3242), (ObjectCodec) null, pipedOutputStream0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(resolvedRecursiveType0, "e!r/_t|_ne", "zyF");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'e!r/_t|_ne' as a subtype of [recursive type; UNRESOLVED: zyF
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "S@v.u7=*?y|r@rL");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // S@v.u7=*?y|r@rL
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, CollectionLikeType> enumMap0 = new EnumMap<AccessPattern, CollectionLikeType>(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      char[] charArray0 = new char[2];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, (String) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) byteArrayOutputStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_FLOAT
         //  at [Source: (char[])\"\u0000\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1746839910), objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) byteArrayBuilder0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      assertEquals("class org.evosuite.shaded.org.mockito.codegen.Enum$MockitoMock$1390397926", class0.toString());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = ClassUtil.backticked("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType");
      assertEquals("`org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType`", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "Zv5e$J[@");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `long` from number 0: Zv5e$J[@
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("entrySet");
      SQLWarning sQLWarning0 = new SQLWarning("+", "+", 0, sQLSyntaxErrorException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLWarning0);
      MockThrowable mockThrowable0 = new MockThrowable("entrySet", sQLTransientConnectionException0);
      Throwable throwable0 = ClassUtil.getRootCause(mockThrowable0);
      assertEquals("java.sql.SQLSyntaxErrorException: entrySet", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("#$v^N6>\"2?*3v$E");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      MockError mockError0 = new MockError(sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Cannot access ", "Cannot access ", 3, (long[]) null, sQLDataException0);
      BatchUpdateException batchUpdateException1 = (BatchUpdateException)ClassUtil.throwIfError(batchUpdateException0);
      assertEquals(3, batchUpdateException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<Integer> class1 = Integer.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Cannot access ", "Cannot access ", 3, (long[]) null, sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0, "Cannot access ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot access 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertFalse(constructor0.isAccessible());
      assertNotNull(annotationArray0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(0, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(0, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      String string0 = ClassUtil.getPackageName(class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      Class<Object> class0 = Object.class;
      ObjectReader objectReader1 = objectReader0.forType(class0);
      assertNotSame(objectReader0, objectReader1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Character character0 = new Character('}');
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) character0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals(16385, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Byte> enumMap0 = new EnumMap<AccessPattern, Byte>(class0);
      Byte byte0 = new Byte((byte) (-69));
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      enumMap0.put(accessPattern0, byte0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertEquals(16385, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      assertTrue(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("char", class1.toString());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("short", class1.toString());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("byte", class1.toString());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("float", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("double", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("boolean", class1.toString());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("long", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertTrue(class1.isPrimitive());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals(17, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("class java.lang.Double", class1.toString());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals(17, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("class java.lang.Character", class1.toString());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals('\u0000', object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0.0F, object0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals((byte)0, object0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = ClassUtil.backticked((String) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      String string0 = ClassUtil.getClassDescription(class0);
      assertEquals("`short`", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = ClassUtil.nameOf((Class<?>) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = ClassUtil.classNameOf((Object) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<Void> class2 = Void.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class0);
      String string0 = ClassUtil.classNameOf(mapType0);
      assertEquals("`com.fasterxml.jackson.databind.type.MapType`", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = ClassUtil.getClassDescription("9`_N_");
      assertEquals("`java.lang.String`", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = ClassUtil.getClassDescription((Object) null);
      assertEquals("unknown", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = ClassUtil.quotedOr((Object) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      String string0 = ClassUtil.quotedOr(mapType0, "vals");
      assertEquals("\"[map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]\"", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = ClassUtil.nonNullString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Short short0 = new Short((short)1873);
      String string0 = ClassUtil.nullOrToString(short0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double double1 = ClassUtil.nonNull((Double) null, double0);
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      Class<?> class1 = ClassUtil.classOf(enumSet0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Long> class0 = Long.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Long has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("byv*:&W:e{<");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, mockPrintStream0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "byv*:&W:e{<");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) mockPrintStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.ResolvedRecursiveType` from String \"\": byv*:&W:e{<
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGeneratorDelegate0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("net.sf.cglib.proxy.java.lang.RuntimeException");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(resolvedRecursiveType0, "=|:/hM*~(");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [recursive type; UNRESOLVED: =|:/hM*~(
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "'[jP ");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // '[jP 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("P6L)U/mM)|S", "org.hibernate.proxy.com.fasterxml.jackson.core.JsonProcessingException", (-641314725));
      MockError mockError0 = new MockError(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Character character0 = new Character('}');
      Class<AccessPattern> class0 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, character0, "keyType");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Character (of class com.fasterxml.jackson.databind.util.AccessPattern) must override method 'keyType'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      IOException iOException0 = ClassUtil.createInstance(class0, true);
      ClassUtil.verifyMustOverride(class0, iOException0, "%*LaK8/s`%8{L8|NzHg");
      assertNull(iOException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Character character0 = new Character('r');
      boolean boolean0 = ClassUtil.hasClass(character0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.hasClass(class0, class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.hasClass((Object) null, class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper_DefaultTyping0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<Module> class0 = Module.class;
      Constructor<Module> constructor0 = ClassUtil.findConstructor(class0, true);
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(boolean0);
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      String string0 = ClassUtil.isLocalType(class0, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("primitive", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("enum", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class0, true);
      Class<Float> class2 = Float.class;
      Class<String> class3 = String.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper0.reader();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<ReferenceType> class1 = ReferenceType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class1, class1);
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class0, false);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<Annotation> class1 = Annotation.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Double> class0 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, class0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<Float> class0 = Float.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, class0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Float> class0 = Float.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      Class<Object> class1 = Object.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class1, true);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class0, false);
      TypeBindings typeBindings0 = TypeBindings.create(class0, list0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class0, false);
      assertSame(list0, list1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertTrue(constructor1.isAccessible());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Class<Object> class0 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Iterator<SimpleType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      MockIOException mockIOException0 = new MockIOException(sQLWarning0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class1);
      assertEquals(0, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Class<Module> class0 = Module.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
  }
}
