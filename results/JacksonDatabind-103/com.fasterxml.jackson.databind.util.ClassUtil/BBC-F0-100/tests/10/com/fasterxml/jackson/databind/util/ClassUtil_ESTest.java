/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 21:07:35 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1652333975), objectMapper0, byteArrayBuilder0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Class<ReferenceType> class1 = ReferenceType.class;
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = (JavaType) mapLikeType0;
      ObjectIdGenerator<Double> objectIdGenerator0 = (ObjectIdGenerator<Double>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaTypeArray0[1], (PropertyName) null, objectIdGenerator0, false);
      MapLikeType mapLikeType1 = (MapLikeType)objectIdWriter0.idType;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, javaType0, javaTypeArray0, (JavaType) mapLikeType1);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ReferenceType referenceType2 = referenceType1.withTypeHandler(objectMapper0);
      javaTypeArray0[2] = (JavaType) referenceType2;
      javaTypeArray0[3] = (JavaType) mapLikeType0;
      javaTypeArray0[4] = javaType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, objectIdWriter0.idType, javaTypeArray0, (JavaType) mapLikeType1);
      MapLikeType mapLikeType2 = mapLikeType0.withValueHandler(collectionType0);
      Short short0 = new Short((short)2278);
      MapLikeType mapLikeType3 = mapLikeType2.withKeyTypeHandler(short0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(mapLikeType3, "net.sf.cglib.proxy.float", "net.sf.cglib.proxy.float");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'net.sf.cglib.proxy.float' as a subtype of [map-like type; class java.lang.Object, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]: net.sf.cglib.proxy.float
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<String> class0 = String.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(arrayType0, "|*;ar.eH%kVF@8Fjb", "com.fasterxml.jackson.databind.ser.std.SerializableSerializer");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '|*;ar.eH%kVF@8Fjb' as a subtype of [array type, component type: [simple type, class java.lang.String]]: com.fasterxml.jackson.databind.ser.std.SerializableSerializer
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      List<Class<?>> list0 = new Vector<Class<Long>>();
      ClassUtil.findSuperTypes(class0, class0, list0);
      Class<MockFileInputStream> class1 = MockFileInputStream.class;
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isConcrete(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
      MockError mockError0 = new MockError();
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0, (Object) mockError0, (Object) typeBindings0);
      ArrayType arrayType1 = arrayType0.withTypeHandler((Object) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, arrayType1, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
      File file0 = MockFile.createTempFile("b$E[s.", "b$E[s.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, mockPrintStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.nameOf(class0);
      int int0 = (-1513967666);
      Random.setNextRandom((-1513967666));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getDeclaredFields(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.getConstructors(class0);
      Class<SimpleModule> class2 = SimpleModule.class;
      ClassUtil.findSuperTypes(class2, class2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`java.lang.Object`");
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findConstructor(class3, false);
      Class<RuntimeException> class4 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class4, false);
      ClassUtil.findClassAnnotations(class4);
      Class<CollectionType> class5 = CollectionType.class;
      ClassUtil.getOuterClass(class5);
      ClassUtil.quotedOr((Object) null, "");
      Class<AccessibleObject> class6 = AccessibleObject.class;
      ClassUtil.canBeABeanType(class6);
      Class<Short> class7 = Short.class;
      ClassUtil.isLocalType(class7, false);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) runtimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Object");
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap0 = new EnumMap<AccessPattern, ResolvedRecursiveType>(class0);
      enumMap0.values();
      ClassUtil.findEnumType(enumMap0);
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.getOuterClass(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(class0, (Class<?>) null);
      jsonMappingException0.toString();
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getConstructors(class0);
      Class<IOException> class1 = IOException.class;
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class1, class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class1, class1);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withValueHandler((Object) null);
      ClassUtil.findSuperTypes((JavaType) collectionLikeType1, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.createInstance(class0, false);
      Class<Float> class1 = Float.TYPE;
      ClassUtil.wrapperType(class1);
      Class<Module> class2 = Module.class;
      ClassUtil.findConstructor(class2, true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializerFactory0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-65);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (-2472));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JsonFactory jsonFactory0 = null;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, bufferedInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, (-2472), 809, false);
      Class<NoClass> class0 = NoClass.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) uTF8StreamJsonParser0, (Class<?>) class0, jsonToken0, (String) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_ARRAY
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isConcrete(class0);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Byte> class1 = Byte.class;
      Vector<JavaType> vector0 = new Vector<JavaType>(8, (-1012));
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) vector0);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1012));
      Double double0 = new Double((-1012));
      ArrayType arrayType1 = ArrayType.construct((JavaType) arrayType0, typeBindings0, (Object) placeholderForType0, (Object) double0);
      ArrayType arrayType2 = arrayType1.withStaticTyping();
      ArrayType arrayType3 = arrayType2.withContentTypeHandler(javaType0);
      ClassUtil.rawClass(arrayType3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.createInstance(class0, false);
      Class<Float> class1 = Float.TYPE;
      ClassUtil.defaultValue(class1);
      System.setCurrentTimeMillis((-2147483648L));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap0 = new EnumMap<AccessPattern, ResolvedRecursiveType>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" t>}WX!I?", "Cannot figure out type for EnumMap (odd JDK platform?)", hashMap0);
      MockError mockError0 = new MockError(" t>}WX!I?", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.defaultValue(class0);
      MockIOException mockIOException0 = new MockIOException("DeserializationProblemHandler.handleWeirdStringValue() for type %s returned value of type %s");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockIOException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DeserializationProblemHandler.handleWeirdStringValue() for type %s returned value of type %s
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<RuntimeException>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Error> class0 = Error.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      simpleType0.isTypeOrSuperTypeOf(class0);
      ClassUtil.classNameOf(simpleType0);
      ClassUtil.classOf(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, arrayNode0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      File file0 = MockFile.createTempFile("&w~w{9+|Uh39", "[null]");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, mockFileOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
      MockException mockException0 = new MockException("dDy .pyhS", (Throwable) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileOutputStream0, "dDy .pyhS", mockException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): dDy .pyhS
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.createInstance(class0, true);
      Class<Float> class1 = Float.class;
      boolean boolean0 = new Boolean(true);
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Float>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "5N`c8$+W>Rg.y@_");
      MockIOException mockIOException0 = new MockIOException(sQLException0);
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.getOuterClass(class1);
      ClassUtil.canBeABeanType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Character> class0 = Character.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, true);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class0, class1, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "org.hibernate.proxy.java.lang.String");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isConcrete(class2);
      ClassUtil.getClassDescription(class2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.wrapperType(class1);
      Class<Character> class3 = Character.class;
      ClassUtil.getEnclosingClass(class3);
      Class<Float> class4 = Float.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Byte> class1 = Byte.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLException sQLException0 = new SQLException("/$&j?f)]");
      Class<Void> class0 = Void.TYPE;
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.isBogusClass(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(4, 8);
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeFactory typeFactory3 = typeFactory2.withClassLoader(classLoader1);
      try { 
        typeFactory3.constructFromCanonical("/$&j?f)]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse type '/$&j?f)]' (remaining: ''): Cannot locate class '/$&j?f)]', problem: /$&j?f)]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet.of(accessPattern0, accessPattern0, accessPattern1, accessPattern0, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) accessPattern1);
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      ClassUtil.findSuperClasses(class1, class1, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<RuntimeException> class2 = RuntimeException.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class2);
      ObjectReader objectReader1 = objectReader0.forType(class0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      typeBindings0.getBoundType((-499));
      JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, simpleType0);
      ClassUtil.rawClass(javaType0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-499);
      intArray0[1] = 8;
      intArray0[2] = 8;
      SQLDataException sQLDataException0 = new SQLDataException((Throwable) null);
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("No value type configured for ObjectReader", "No value type configured for ObjectReader", throwable0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "No value type configured for ObjectReader", 8, intArray0, sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0, "file");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, false);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.hasClass(runtimeException0, class0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Character> class1 = Character.TYPE;
      ClassUtil.findSuperTypes(class0, class1);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      JsonGeneratorDelegate jsonGeneratorDelegate1 = new JsonGeneratorDelegate(jsonGeneratorDelegate0, false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate1, (Closeable) jsonGeneratorDelegate1, (Exception) runtimeException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.nameOf(class0);
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      ClassUtil.getOuterClass(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap0 = new EnumMap<AccessPattern, ResolvedRecursiveType>(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      objectMapper2.readerFor(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.createInstance(class0, true);
      Class<Module> class1 = Module.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      SimpleType.constructUnsafe(class2);
      Integer integer0 = new Integer(1426);
      Class<AccessPattern> class3 = AccessPattern.class;
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap0 = new EnumMap<AccessPattern, ResolvedRecursiveType>(class3);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      enumMap0.put(accessPattern0, resolvedRecursiveType0);
      enumMap0.clone();
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap1 = new EnumMap<AccessPattern, ResolvedRecursiveType>(enumMap0);
      ClassUtil.findEnumType(enumMap1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isBogusClass(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0);
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) referenceType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      Character character0 = Character.valueOf('M');
      SimpleType simpleType0 = referenceType0.withContentValueHandler(character0);
      JavaType javaType1 = resolvedRecursiveType0.withContentTypeHandler(simpleType0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.findSuperTypes(javaType1, class1, false);
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.createInstance(class0, true);
      Class<Module> class1 = Module.class;
      Class<Integer> class2 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, (JavaType[]) null);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      ArrayType arrayType1 = ArrayType.construct((JavaType) arrayType0, typeBindings0, (Object) null, (Object) typeBindings0);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) arrayType1, (JavaType[]) null, (JavaType) arrayType1, (JavaType) simpleType0);
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      typeBindings0.asKey(class4);
      Integer integer0 = new Integer((-1239));
      MapType mapType1 = mapType0.withValueHandler(integer0);
      ArrayType arrayType2 = arrayType1.withContentValueHandler(mapType1);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) arrayType2, (JavaType[]) null, (JavaType) arrayType1);
      CollectionLikeType collectionLikeType0 = collectionType0.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class3, true);
      Class<AccessPattern> class5 = AccessPattern.class;
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap0 = new EnumMap<AccessPattern, ResolvedRecursiveType>(class5);
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap1 = new EnumMap<AccessPattern, ResolvedRecursiveType>(enumMap0);
      EnumMap<AccessPattern, ResolvedRecursiveType> enumMap2 = new EnumMap<AccessPattern, ResolvedRecursiveType>(enumMap1);
      ClassUtil.findEnumType(enumMap2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      ClassUtil.backticked((String) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "$[?");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      EnumSet<AccessPattern> enumSet1 = enumSet0.clone();
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      enumSet0.add(accessPattern1);
      AccessPattern accessPattern2 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern3 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern4 = AccessPattern.ALWAYS_NULL;
      enumSet1.add(accessPattern4);
      AccessPattern accessPattern5 = AccessPattern.CONSTANT;
      AccessPattern accessPattern6 = AccessPattern.CONSTANT;
      EnumSet.of(accessPattern2, accessPattern3, accessPattern5, accessPattern6, accessPattern2);
      ClassUtil.findEnumType(enumSet1);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Float float0 = new Float(2646.67F);
      ClassUtil.nonNull((Float) null, float0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockError mockError0 = new MockError("net.sf.cglib.proxy.java.lang.Integer");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("ymm-]~Z7v\"dr]3", "ymm-]~Z7v\"dr]3", mockError0);
      mockError0.initCause(sQLNonTransientException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, (String) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.createInstance(class0, true);
      Class<Module> class1 = Module.class;
      Class<Integer> class2 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, (JavaType[]) null);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class3);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      ArrayType arrayType1 = ArrayType.construct((JavaType) arrayType0, typeBindings0, (Object) null, (Object) typeBindings0);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) arrayType1, (JavaType[]) null, (JavaType) arrayType1, (JavaType) simpleType0);
      Integer integer0 = new Integer((-1239));
      MapType mapType1 = mapType0.withValueHandler(integer0);
      ArrayType arrayType2 = arrayType1.withContentValueHandler(mapType1);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, typeBindings0, (JavaType) arrayType2, (JavaType[]) null, (JavaType) arrayType1);
      CollectionLikeType collectionLikeType0 = collectionType0.withStaticTyping();
      ClassUtil.findSuperTypes((JavaType) collectionLikeType0, (Class<?>) class3, true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<String> class0 = String.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException(arrayType0, "|*;ar.eH%kVF@8Fjb", "com.fasterxml.jackson.databind.ser.std.SerializableSerializer");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.exc.InvalidTypeIdException): Could not resolve type id '|*;ar.eH%kVF@8Fjb' as a subtype of [array type, component type: [simple type, class java.lang.String]]: com.fasterxml.jackson.databind.ser.std.SerializableSerializer
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<Float> class1 = Float.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper1.readerWithView(class1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 2);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-48);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, objectReader0, filterOutputStream0, byteArray0, (byte)2, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "[null]");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.nameOf((Named) null);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isLocalType(class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, objectMapper2, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar(1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.primitiveType(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.findSuperClasses((Class<?>) null, class0, false);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.nameOf(class2);
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "non-static member class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.findSuperTypes(class0, class0, list0);
      Class<MockFileInputStream> class1 = MockFileInputStream.class;
      ClassUtil.isNonStaticInnerClass(class1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      SQLWarning sQLWarning0 = new SQLWarning("Cannot use source of type ", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLWarning0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.java.lang.Character");
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) runtimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "67rh3|");
      Class<Error> class0 = Error.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.backticked("67rh3|");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.backticked("Cannot figure out type for EnumMap (odd JDK platform?)");
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.Module$SetupContext");
      Class<InputStream> class0 = InputStream.class;
      Constructor<InputStream> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.InputStream is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.findSuperTypes(class1, class1, list0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionType> class0 = CollectionType.class;
      Class<SimpleModule> class1 = SimpleModule.class;
      objectMapper0.readerFor(class1);
      Class<Byte> class2 = Byte.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1488);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[0]);
      // Undeclared exception!
      try { 
        collectionLikeType0.withContentValueHandler(class2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, true);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonParser_FeatureArray0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      ObjectMapper objectMapper4 = objectMapper3.setSerializationInclusion(jsonInclude_Include0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<CollectionType> class2 = CollectionType.class;
      ObjectMapper objectMapper5 = objectMapper4.addMixIn(class1, class2);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonSetter.Value jsonSetter_Value0 = configOverrides0.getDefaultSetterInfo();
      ObjectMapper objectMapper6 = objectMapper5.setDefaultSetterInfo(jsonSetter_Value0);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      objectMapper6.readerFor(class3);
      ClassUtil.isBogusClass(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fasterxml.jackson.databind.ser.std.DateSerializer");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.ser.std.DateSerializer
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.hasClass(class0, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class0, (String) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapLikeType` from String [N/A]: null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Constructor<InputStream> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3);
      placeholderForType0.actualType();
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-199));
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Byte byte0 = new Byte((byte)107);
      arrayList0.add((Object) byte0);
      ClassUtil.nullOrToString(arrayList0);
      ClassUtil.nonNullString("java.util.ArrayList@0000000002");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ClassUtil.rawClass(mapLikeType0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLException sQLException0 = new SQLException((String) null, (String) null, 90);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null, sQLException0);
      sQLTimeoutException0.getLocalizedMessage();
      sQLTimeoutException0.addSuppressed(sQLException0);
      sQLException0.initCause(sQLTimeoutException0);
      sQLException0.fillInStackTrace();
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLException0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findSuperTypes(class0, class0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.char");
      sQLFeatureNotSupportedException0.printStackTrace();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d M");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("i26d)c", "i26d)c", "i26d)c", 16384);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("i26d)c", "4I}yW.", "local/anonymous", (-1744709515));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("i26d)c", "com.fasterxml.jackso", "[GMv+06bad03LK%", (-1744709515));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement(":46L:;Mkj!!-ScVq", ":46L:;Mkj!!-ScVq", "i26d)c", 16384);
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLFeatureNotSupportedException0.setStackTrace(stackTraceElementArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "local/anonymous");
      ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaredFields(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.isProxyType(class2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MockError mockError0 = new MockError();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, " is not a primitive type");
      mockError0.addSuppressed(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) runtimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1744094291));
      coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.getDeclaredFields(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.JavaType");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.Boolean");
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isLocalType(class0, false);
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vCYE`j)");
      Class<MapType> class0 = MapType.class;
      ClassUtil.getPackageName(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Throwable throwable0 = null;
      String string0 = "non-static member class";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null, "non-static member class");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // non-static member class
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Float> class0 = Float.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-638502591));
      coreXMLDeserializers_Std0.getKnownPropertyNames();
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Float` from String \"\": net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 344;
      ObjectCodec objectCodec0 = null;
      String string0 = "float";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("float", "float");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // float
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.findConstructor(class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      Boolean boolean0 = new Boolean(true);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      ClassUtil.throwIfIOE(sQLTransientException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType javaType0 = typeFactory1.constructSpecializedType(simpleType0, class0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, javaType0, jsonToken0, "S +]m{|>?bP");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(jsonMappingException0);
      SQLDataException sQLDataException0 = new SQLDataException("S +]m{|>?bP", batchUpdateException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLDataException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // S +]m{|>?bP
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Void> class0 = Void.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-199));
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Byte byte0 = new Byte((byte)107);
      arrayList0.add((Object) byte0);
      ClassUtil.nullOrToString(arrayList0);
      ClassUtil.backticked("java.util.ArrayList@0000000002");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      ClassUtil.rawClass(mapLikeType0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      deserializationFeatureArray0[4] = deserializationFeature4;
      DeserializationFeature deserializationFeature5 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      deserializationFeatureArray0[5] = deserializationFeature5;
      DeserializationFeature deserializationFeature6 = DeserializationFeature.USE_LONG_FOR_INTS;
      deserializationFeatureArray0[6] = deserializationFeature6;
      objectReader0.withFeatures(deserializationFeatureArray0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-1246572939));
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Class<Double> class1 = Double.class;
      ClassUtil.isBogusClass(class1);
      Class<ArrayType> class2 = ArrayType.class;
      Class<Long> class3 = Long.class;
      ClassUtil.findRawSuperTypes(class2, class3, true);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.emptyIterator();
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.nameOf(class2);
      ClassUtil.quotedOr(class0, "F?|0`ML9_<l9");
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.getConstructors(class3);
      ClassUtil.getDeclaredFields(class2);
      Short short0 = new Short((short)2120);
      ClassUtil.nullOrToString(short0);
      ClassUtil.getOuterClass(class0);
      SQLDataException sQLDataException0 = new SQLDataException("R[nXe!~");
      sQLDataException0.fillInStackTrace();
      ClassUtil.throwIfIOE(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.canBeABeanType(class0);
      List<Class<?>> list0 = new Vector<Class<ResolvedRecursiveType>>();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Short> class0 = Short.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      simpleType0.getInterfaces();
      defaultSerializerProvider_Impl0.invalidTypeIdException(simpleType0, "expected closing END_OBJECT after type information and deserialized value", "");
      ClassUtil.backticked("");
      Class<Object> class1 = Object.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Void> class0 = Void.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!aa*~qOK}]0<QQI");
      ClassUtil.isLocalType(class0, true);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.getGenericInterfaces(class0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ClassUtil.isJacksonStdImpl(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "%nNLW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, true);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.throwRootCauseIfIOE(runtimeException0);
      Class<Long> class2 = Long.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getConstructors(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.primitiveType(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "fl#R8R~Ok6d", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      annotatedField0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.primitiveType(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class1, true);
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.nameOf(class0);
      Class<Boolean> class2 = Boolean.class;
      Class<IOException> class3 = IOException.class;
      ClassUtil.isProxyType(class3);
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.getClassMethods(class4);
      ClassUtil.throwRootCauseIfIOE(runtimeException0);
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      PipedReader pipedReader0 = new PipedReader(2);
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'u';
      charArray0[5] = ']';
      charArray0[6] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 3);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class1 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      // Undeclared exception!
      try { 
        objectReader0.withFeatures((DeserializationFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Boolean> class1 = Boolean.class;
      Class<Short> class2 = Short.TYPE;
      ClassUtil.defaultValue(class2);
      ClassUtil.isProxyType(class1);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.getClassMethods(class3);
      int[] intArray0 = new int[8];
      intArray0[0] = (-5);
      intArray0[1] = 8;
      intArray0[2] = (-705045486);
      intArray0[3] = (-5);
      intArray0[4] = (-5);
      intArray0[5] = (-5);
      intArray0[6] = (-5);
      intArray0[7] = (-5);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("[]", sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "[]", (Throwable) sQLTransactionRollbackException1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("elementType", jsonMappingException0);
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class4, "ZERO_LENGTH_ENUM_ARRAY", "ZRcBa`/}");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("[]", "org.hibernate.proxy.java.lang.Double", (-5), intArray0, sQLTransientException0);
      ClassUtil.throwRootCauseIfIOE(batchUpdateException0);
      Class<MapType> class5 = MapType.class;
      ClassUtil.primitiveType(class5);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getConstructors(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      Constructor<?> constructor1 = classUtil_Ctor1.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      ClassUtil.Ctor classUtil_Ctor2 = new ClassUtil.Ctor(classUtil_Ctor1._ctor);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.primitiveType(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Float> class0 = Float.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-844));
      coreXMLDeserializers_Std0.getKnownPropertyNames();
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      SQLException sQLException0 = new SQLException();
      sQLException0.getLocalizedMessage();
      ClassUtil.backticked("ZERO_LENGTH_ENUM_ARRAY");
      Class<Float> class1 = Float.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isObjectOrPrimitive(class0);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[6];
      Class<IOException> class1 = IOException.class;
      ClassUtil.getConstructors(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanDeserializerFactory0, false);
      PipedReader pipedReader0 = new PipedReader(93);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-2641));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, lineNumberReader0, objectReader1, charsToNameCanonicalizer1);
      readerBasedJsonParser0.skipChildren();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(referenceType0, "V!om2fqg\"tPgJ'X\"b|n");
      MockError mockError0 = new MockError(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(mockError0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [reference type, class com.fasterxml.jackson.databind.type.PlaceholderForType<com.fasterxml.jackson.databind.type.PlaceholderForType><[simple type, class com.fasterxml.jackson.databind.type.PlaceholderForType]>]: V!om2fqg\"tPgJ'X\"b|n
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-40);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.throwIfIOE((Throwable) null);
      MockError mockError0 = new MockError("net.sf.cglib.proxy.java.lang.R-ntimeException", (Throwable) null);
      ClassUtil.emptyIterator();
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Long long0 = new Long(2232L);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getEnclosingClass(class0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = new Float(0.0);
      ClassUtil.isJacksonStdImpl((Object) float1);
      Class<Float> class0 = Float.TYPE;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.isLocalType(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      Long long0 = new Long(1614L);
      MockError mockError0 = new MockError("java.lang.Object");
      Class<Object> class0 = Object.class;
      ClassUtil.hasClass((Object) null, class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = new Float(0.0);
      ClassUtil.isJacksonStdImpl((Object) float1);
      MockError mockError0 = new MockError("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType", (Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isJacksonStdImpl((Object) null);
      Float float0 = new Float(1.0);
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredMethods(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.getGenericInterfaces(class1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaringClass(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class2, false);
      ClassUtil.getOuterClass(class0);
      ClassUtil.emptyIterator();
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getDeclaringClass(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Character");
      Class<Float> class1 = Float.class;
      ClassUtil.findClassAnnotations(class1);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.isConcrete(class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.findRawSuperTypes(class3, class0, false);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.getEnclosingClass(class4);
      ClassUtil.getGenericInterfaces(class3);
      ClassUtil.throwIfRTE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "bZ5x&mQ{'r3]1\"Y4RS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Byte> class0 = Byte.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "elementType");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      ClassUtil.getOuterClass(class1);
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      Long long0 = new Long(2232L);
      SQLException sQLException0 = new SQLException("DI&");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ClassUtil.nullOrToString(long0);
      Class<Void> class1 = Void.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1653959476));
      Float float0 = new Float(0.0);
      ClassUtil.classNameOf(placeholderForType0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SQLException sQLException0 = new SQLException("com.fasterxml.jacks");
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaringClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      Float float0 = new Float((double) 1536);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.isObjectOrPrimitive(class1);
      MockError mockError0 = new MockError();
      Class<String> class2 = String.class;
      ClassUtil.hasClass(mockError0, class2);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory0.enable(jsonFactory_Feature0);
      int int0 = 1536;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1536);
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(byteArrayBuilder0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaringClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      Float float0 = new Float((double) 1536);
      ClassUtil.classNameOf(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(", problem: ", "Failed to find default constructor of class ", 8, (Throwable) null);
      SQLDataException sQLDataException0 = new SQLDataException("`java.lang.Class`", ", problem: ", (Throwable) null);
      sQLDataException0.spliterator();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "Failed to find default constructor of class ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      Long long0 = new Long(2232L);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.getClassDescription(class1);
      Class<NoClass> class2 = NoClass.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isLocalType(class2, true);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.isJacksonStdImpl(class3);
      Class<RuntimeException> class4 = RuntimeException.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings.create(class4, javaTypeArray0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      TypeReference<Double> typeReference0 = (TypeReference<Double>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        typeFactory1.constructType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getClassDescription(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.backticked("java.lang");
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.isJacksonStdImpl(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-7);
      intArray0[1] = (-7);
      intArray0[2] = (-7);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"%s\"");
      intArray0[3] = (-7);
      intArray0[4] = (-7);
      intArray0[5] = (-7);
      intArray0[7] = 3704;
      intArray0[8] = (-7);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Vt", "Vt", (-7), intArray0);
      MockError mockError0 = new MockError(batchUpdateException0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute("java.lang", mockError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<Void> class1 = Void.class;
      Float float0 = new Float((double) 1536);
      ClassUtil.classNameOf(class0);
      ClassUtil.getDeclaredMethods(class1);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.getDeclaredMethods(class1);
      Class<ArrayType> class3 = ArrayType.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ArrayType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      System.setCurrentTimeMillis(1L);
      Character character0 = Character.valueOf('[');
      ClassUtil.nonNull(character0, character0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getClassMethods(class1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<Long> class2 = Long.class;
      ClassUtil.findConstructor(class2, true);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor0);
      ClassUtil.isLocalType(class2, false);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, true);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.throwIfError((Throwable) null);
      Class<Object> class2 = Object.class;
      ClassUtil.getConstructors(class2);
      Class<IOException> class3 = IOException.class;
      ClassUtil.findEnumType(class3);
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getGenericSuperclass(class0);
      Long long0 = new Long(2232L);
      Class<Integer> class2 = Integer.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(simpleType0, "DI&", "DI&");
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, jsonMappingException0, "org.hibernate.proxy.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.exc.InvalidTypeIdException (of class java.lang.Integer) must override method 'org.hibernate.proxy.'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = ClassUtil.nonNull(float0, float0);
      ClassUtil.isJacksonStdImpl((Object) float1);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SQLException sQLException0 = new SQLException("1r3\"6z|du&b%O", "uR!m)/", 0, (Throwable) null);
      Throwable throwable0 = ClassUtil.getRootCause(sQLException0);
      MockError mockError0 = new MockError("com.fasterxml.jackson.databind.BeanProperty", throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ZERO_LENGTH_ENUM_ARRAY");
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLSyntaxErrorException0);
      ClassUtil.throwIfError(throwable0);
      Class<Long> class1 = Long.class;
      ClassUtil.findConstructor(class1, false);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.throwIfError((Throwable) null);
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<Long> class3 = Long.class;
      ClassUtil.findConstructor(class3, false);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getTypeParameters();
      Class<Float> class4 = Float.class;
      ClassUtil.findSuperClasses(class3, class4, false);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "value not one of declared Enum instance names: %s");
      ClassUtil.throwIfError((Throwable) null);
      Class<Float> class5 = Float.class;
      ClassUtil.findSuperTypes(class5, class5);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Void> class1 = Void.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      Float float0 = new Float((double) 1536);
      ClassUtil.classNameOf(class0);
      ClassUtil.getDeclaredMethods(class1);
      Class<String> class2 = String.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.getDeclaredMethods(class3);
      ClassUtil.nullOrToString(class2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isProxyType(class0);
      System.setCurrentTimeMillis(0L);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "elementType");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      ClassUtil.getOuterClass(class1);
      Class<MapType> class2 = MapType.class;
      ClassUtil.findClassAnnotations(class2);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.getGenericSuperclass(class0);
      Class<Long> class1 = Long.class;
      Long long0 = new Long(2232L);
      ClassUtil.verifyMustOverride(class1, long0, "DI&");
      SQLException sQLException0 = new SQLException("Fc#Rh.B:cZczYwau");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Void> class0 = Void.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-182));
      Float float0 = new Float(0.0);
      ClassUtil.classNameOf(placeholderForType0);
      ClassUtil.getDeclaredMethods(class0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Object object0 = new Object();
      Class<?> class1 = ClassUtil.classOf(object0);
      Class<Integer> class2 = Integer.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.emptyIterator();
      ClassUtil.hasClass(object0, class0);
      ClassUtil.getConstructors(class1);
      ClassUtil.findEnumType(class0);
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      Class<Integer> class3 = Integer.class;
      ClassUtil.getClassMethods(class3);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaringClass(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[PrefixTransformer('", "[PrefixTransformer('", 1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[PrefixTransformer('", "[PrefixTransformer('", 1);
      sQLFeatureNotSupportedException0.addSuppressed(sQLSyntaxErrorException0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<?> class1 = ClassUtil.classOf(class0);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<Double> class3 = Double.class;
      ClassUtil.getEnclosingClass(class3);
      Class<IOException> class4 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class4, false);
      constructor0.getParameterTypes();
      // Undeclared exception!
      try { 
        BasicBeanDescription.forDeserialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.backticked("@g?Ls:NoG/z-No A ");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      Class<Double> class3 = Double.class;
      ClassUtil.getEnclosingClass(class3);
      Class<IOException> class4 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class4, false);
      constructor0.getParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.getFactoryMethods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Object object0 = new Object();
      ClassUtil.classOf(object0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.createInstance(class1, true);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.getConstructors(class3);
      Class<Byte> class4 = Byte.class;
      ClassUtil.getDeclaredMethods(class4);
      Class<IOException> class5 = IOException.class;
      Class<Long> class6 = Long.TYPE;
      ClassUtil.nameOf(class6);
      Class<RuntimeException> class7 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class7);
      Class<Character> class8 = Character.class;
      ClassUtil.isProxyType(class8);
      Class<RuntimeException> class9 = RuntimeException.class;
      ClassUtil.getGenericSuperclass(class9);
      ClassUtil.findSuperClasses(class5, class2, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      MockFile mockFile0 = new MockFile((File) null, "java.lang.RuntimeExc");
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isObjectOrPrimitive(class0);
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[6];
      Class<IOException> class1 = IOException.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.findEnumType(class0);
      ClassUtil.nonNull(accessibleObjectArray0[3], accessibleObjectArray0[3]);
      Class<Double> class2 = Double.class;
      ClassUtil.getClassMethods(class2);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Short short0 = new Short((short) (-1401));
      Character character0 = new Character('I');
      ClassUtil.backticked((String) null);
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ReferenceType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaringClass(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[PrefixTransformer('", "[PrefixTransformer('", 1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[PrefixTransformer('", "[PrefixTransformer('", 1, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.addSuppressed(sQLSyntaxErrorException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[PrefixTransformer('");
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("net.sf.cglib.proxy.java.lang.RuntimeException", "Incompatible types: declared root type (%s) vs %s", 1524);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("$[M%:Q8&QtC", sQLFeatureNotSupportedException0);
      ClassUtil.getRootCause(mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<Long> class3 = Long.class;
      ClassUtil.findConstructor(class3, false);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getGenericParameterTypes();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, ">QJxb:I`");
      ClassUtil.getClassDescription(")Jy8!*WI1?j)k`pC");
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      ClassUtil.nonNull(accessPattern1, accessPattern0);
      Class<Integer> class4 = Integer.class;
      ClassUtil.primitiveType(class4);
      Long long0 = new Long((-710L));
      Long long1 = new Long((-2147483648L));
      ClassUtil.nonNull(long1, long0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // >QJxb:I`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Short short0 = new Short((short)63);
      String string0 = null;
      ClassUtil.quotedOr(short0, (String) null);
      Class<Character> class0 = Character.class;
      ClassUtil.isProxyType(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<Annotation> class2 = Annotation.class;
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      // Undeclared exception!
      try { 
        beanDeserializerFactory1.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<Long> class3 = Long.class;
      ClassUtil.findConstructor(class3, false);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getGenericParameterTypes();
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("Incompatible types: declared root type (%s) vs %s", "yT", (-2009));
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.primitiveType(class0);
      SQLDataException sQLDataException0 = new SQLDataException("qC>.E)>*HT>hQcsG", "E:Rg@jhx ", 0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("1)S<r}Z;", sQLDataException0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      ClassUtil.emptyIterator();
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.canBeABeanType(class1);
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<Long> class2 = Long.class;
      Long long0 = new Long(2232L);
      ClassUtil.verifyMustOverride(class2, long0, "DI&");
      SQLException sQLException0 = new SQLException("Fc#Rh.B:cZczYwau");
      ClassUtil.throwIfError(sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.annotation.Annotation is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getDeclaringClass(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[PrefixTransformer('", "[PrefixTransformer('", 1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[PrefixTransformer('", "[PrefixTransformer('", 1, sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.addSuppressed(sQLSyntaxErrorException0);
      Short short0 = new Short((short) (-3714));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) short0, 0);
      jsonMappingException0.getCause();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[PrefixTransformer('");
      jsonMappingException0.prependPath((Object) ")Jy8!*WI1?j)k`pC", "p");
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, ")Jy8!*WI1?j)k`pC");
      ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
      ClassUtil.getClassDescription((Object) null);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      ClassUtil.nonNull(accessPattern0, accessPattern0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.primitiveType(class1);
      Long long0 = new Long(0L);
      ClassUtil.nonNull(long0, (Long) null);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.throwIfError((Throwable) null);
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<Long> class3 = Long.class;
      ClassUtil.findConstructor(class3, false);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getTypeParameters();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1234);
      coreXMLDeserializers_Std0.getKnownPropertyNames();
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.classOf(accessPattern0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Void> class2 = Void.TYPE;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class void has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getConstructors(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getConstructors(class2);
      Class<?> class3 = ClassUtil.primitiveType(class0);
      Class<AccessibleObject> class4 = AccessibleObject.class;
      ClassUtil.primitiveType(class4);
      Class<Object> class5 = Object.class;
      ClassUtil.findSuperClasses(class3, class5, false);
      ClassUtil.primitiveType(class5);
      Class<MapLikeType> class6 = MapLikeType.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class6, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Character character0 = new Character('G');
      Character character1 = Character.valueOf('9');
      ClassUtil.nonNull(character0, character1);
      ClassUtil.throwIfError((Throwable) null);
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.nameOf(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      boolean boolean0 = true;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<Void> class2 = Void.class;
      ClassUtil.isLocalType(class2, true);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonLocation jsonLocation0 = JsonLocation.NA;
      jsonLocation0.sourceDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "com.fasterxml.jackson.core.type.TypeReference", jsonLocation0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(jsonMappingException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.core.type.TypeReference", "com.fasterxml.jackson.core.type.TypeReference", 0, sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.spliterator();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      jsonMappingException0.toString();
      sQLTransactionRollbackException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLTransactionRollbackException0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      String string0 = "keyType";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("keyType");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)100;
      try { 
        mockFileOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = true;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getGenericSuperclass(class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.hibernate.proxy.", "org.hibernate.proxy.");
      MockIOException mockIOException0 = new MockIOException("i_WLYJ-{", sQLIntegrityConstraintViolationException0);
      mockIOException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        mockIOException0.initCause(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Long> class0 = Long.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1234);
      coreXMLDeserializers_Std0.getKnownPropertyNames();
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.classOf(accessPattern0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Void> class2 = Void.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Void> class0 = Void.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Character> class0 = Character.class;
      SimpleType.constructUnsafe(class0);
      ClassUtil.backticked((String) null);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Object object0 = new Object();
      Class<?> class1 = ClassUtil.classOf(object0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.createInstance(class2, true);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.getConstructors(class3);
      ClassUtil.getDeclaredMethods(class3);
      Class<IOException> class4 = IOException.class;
      ClassUtil.findConstructor(class4, true);
      ClassUtil.nameOf(class1);
      ClassUtil.getGenericSuperclass(class1);
      Class<Double> class5 = Double.class;
      ClassUtil.isProxyType(class5);
      Class<Integer> class6 = Integer.class;
      ClassUtil.getGenericSuperclass(class6);
      Class<Annotation> class7 = Annotation.class;
      ClassUtil.findSuperClasses(class0, class7, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      MockFile mockFile0 = new MockFile((File) null, "1I7kk/De@eBr/o\"\"O");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileWriter0, "`java.lang.Object`");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1247);
      coreXMLDeserializers_Std0.getKnownPropertyNames();
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Float float0 = new Float(1271.424756192971);
      ClassUtil.nullOrToString(float0);
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.classOf(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findEnumType(class1);
      String string0 = " af7 _>";
      boolean boolean0 = false;
      DataTruncation dataTruncation0 = new DataTruncation((-839), false, false, (-839), (-839));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(" af7 _>", dataTruncation0);
      dataTruncation0.setNextException(sQLSyntaxErrorException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" af7 _>", " af7 _>", (-839), dataTruncation0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
      Iterator<Character> iterator0 = ClassUtil.emptyIterator();
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.hasClass(iterator0, class2);
      ClassUtil.getConstructors(class2);
      ClassUtil.findEnumType(class1);
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      ClassUtil.getClassMethods(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Throwable throwable0 = ClassUtil.throwIfIOE(batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("\"_Jz)z", "\"_Jz)z", throwable0);
      ClassUtil.throwIfRTE(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(class0, class0);
      Class<NoClass> class1 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getParameterCount();
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      MockError mockError0 = new MockError((String) null, sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<Integer> class1 = Integer.TYPE;
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.findSuperClasses(class0, class0, false);
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      ClassUtil.isLocalType(class1, false);
      ClassUtil.classNameOf(class1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Void> class0 = Void.class;
      Class<String> class1 = String.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.isCollectionMapOrArray(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.getOuterClass(class2);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "org.hibernate.proxy.", (-1653959476));
      Long long0 = new Long((-510L));
      SQLException sQLException0 = new SQLException("Fc#Rh.B:cZczYwau");
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.emptyIterator();
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotatedReturnType();
      constructor0.getAnnotatedReceiverType();
      constructor0.getAnnotations();
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      constructor0.getTypeParameters();
      classUtil_Ctor0.getParamCount();
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<Long> class3 = Long.class;
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getPackageName(class3);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getClassMethods(class2);
      MockError mockError0 = new MockError((String) null);
      mockError0.fillInStackTrace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockError0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      mockError0.initCause(sQLFeatureNotSupportedException0);
      mockError0.getCause();
      mockError0.getCause();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      Class<Short> class1 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isConcrete(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotations();
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[4];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      accessibleObjectArray0[1] = (AccessibleObject) null;
      constructor0.getGenericExceptionTypes();
      accessibleObjectArray0[2] = (AccessibleObject) constructor0;
      accessibleObjectArray0[3] = (AccessibleObject) constructor0;
      // Undeclared exception!
      try { 
        AccessibleObject.setAccessible(accessibleObjectArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<Long> class0 = Long.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1247);
      coreXMLDeserializers_Std0.getKnownPropertyNames();
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.classOf(accessPattern0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Void> class2 = Void.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("a{47z9=:2&RiE W");
      sQLNonTransientException0.setNextException(sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "entrySet", (Throwable) sQLNonTransientException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("entrySet", jsonMappingException1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "a1#+v6X09tII<wsVhU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a1#+v6X09tII<wsVhU
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      typeBindings0.withUnboundVariable("' (of type ");
      SQLDataException sQLDataException0 = new SQLDataException("atU,x-+f{jylB3%1IG");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      mockRuntimeException0.toString();
      typeBindings0.equals(mockRuntimeException0);
      TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      Class<Character> class1 = Character.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassUtil.classNameOf(resolvedRecursiveType0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class2);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Float float0 = new Float((-1.0));
      ClassUtil.classNameOf(float0);
      SQLWarning sQLWarning0 = new SQLWarning("3;ZpbG'Jd23");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3;ZpbG'Jd23", "3;ZpbG'Jd23", Integer.MAX_VALUE, sQLWarning0);
      String string0 = "enum";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("enum");
      // Undeclared exception!
      try { 
        Charset.forName("Cannot figure out type for EnumSet (odd JDK platform?)");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Cannot figure out type for EnumSet (odd JDK platform?)
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Long> class0 = Long.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1247);
      coreXMLDeserializers_Std0.getKnownPropertyNames();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1536);
      Float float0 = new Float((-40.866));
      ClassUtil.classNameOf((Object) null);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getDeclaredMethods(class1);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.getDeclaredMethods(class3);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<?> class2 = ClassUtil.primitiveType(class1);
      ClassUtil.findSuperClasses(class2, class1, true);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getGenericSuperclass(class0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      String string0 = "keyUniverse";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("keyUniverse");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, mockPrintStream0, byteArray0, (byte)0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "string value");
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<MockFileInputStream> class1 = MockFileInputStream.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.nonNull((AccessibleObject) null, (AccessibleObject) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "string value");
      Throwable throwable0 = ClassUtil.getRootCause(jsonMappingException0);
      MockError mockError0 = new MockError("00\"X[/G7?Ys~xy{", throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string value
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = ClassUtil.nonNull(float0, float0);
      ClassUtil.isJacksonStdImpl((Object) float1);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, classUtil0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      iOContext0.allocBase64Buffer();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler1 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1672, objectMapper1, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("JSON", "JSON");
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      objectMapper1.disable(serializationFeature0);
      SQLWarning sQLWarning0 = new SQLWarning("JSON", "JSON", 1114111, sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getConstructors(class0);
      String string0 = "Leading zeroes not allowed";
      ClassUtil.nonNullString("Leading zeroes not allowed");
      Class<MapType> class1 = MapType.class;
      ClassUtil.getDeclaredFields(class1);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      NoClass noClass1 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      ClassUtil.nonNull(noClass0, noClass1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);
      Class<HashMap> class2 = HashMap.class;
      Class<Short> class3 = Short.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      Class<HashMap> class4 = HashMap.class;
      Class<CollectionType> class5 = CollectionType.class;
      // Undeclared exception!
      try { 
        typeFactory2.constructMapType(class4, class1, class5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$409167719) return null for type [simple type, class com.fasterxml.jackson.databind.type.TypeBase]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1, accessPattern0, accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      ClassUtil.getOuterClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2470);
      ClassUtil.classNameOf(placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.backticked("Sub-class %s (of class %s) must override method '%s'");
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forDeserialization((DeserializationConfig) null, (JavaType) null, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'v';
      charArray0[1] = '.';
      charArray0[2] = 'f';
      charArray0[3] = ')';
      charArray0[4] = 'd';
      jsonFactory1.createParser(charArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileOutputStream0.flush();
      SQLException sQLException0 = new SQLException("entrySet", "vals");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockFileInputStream0, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException: entrySet
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getConstructors(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getClassMethods(class1);
      String string0 = "/#%81UDS.abl-\\!X_L@";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/#%81UDS.abl-!X_L@", "/#%81UDS.abl-!X_L@");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Q", "Q", sQLTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Cannot figure out type for EnumMap (odd JDK platform?)", "\"L*Hl^kX-jAd$>=dA", "\"L*Hl^kX-jAd$>=dA", (-4025));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "\"L*Hl^kX-jAd$>=dA", "Cannot figure out type for EnumMap (odd JDK platform?)", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /#%81UDS.abl-!X_L@
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = ClassUtil.nonNull(float0, float0);
      ClassUtil.isJacksonStdImpl((Object) float1);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getDeclaredMethods(class1);
      Long long0 = new Long((-1574L));
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      ClassUtil.isLocalType(class0, true);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.isObjectOrPrimitive(class2);
      System.setCurrentTimeMillis(0L);
      Class<Character> class3 = Character.class;
      ClassUtil.getDeclaredMethods(class3);
      ClassUtil.emptyIterator();
      Class<Float> class4 = Float.class;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ClassUtil.findSuperTypes(class3, class4);
      ClassUtil.nonNullString((String) null);
      Class<Object> class5 = Object.class;
      ClassUtil.findRawSuperTypes(class3, class5, true);
      Class<Void> class6 = Void.class;
      ClassUtil.getOuterClass(class6);
      ClassUtil.isProxyType(class0);
      Class<InputStream> class7 = InputStream.class;
      ClassUtil.findRawSuperTypes(class2, class7, false);
      Class<Integer> class8 = Integer.class;
      ClassUtil.getGenericInterfaces(class8);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.Double");
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      Class<String> class3 = String.class;
      ClassUtil.findRawSuperTypes(class2, class3, true);
      ClassUtil.getOuterClass(class1);
      ClassUtil.emptyIterator();
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getParameterAnnotations();
      constructor0.getParameterCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getDeclaredAnnotations();
      constructor0.getGenericExceptionTypes();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.toGenericString();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isNonStaticInnerClass(class1);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getGenericSuperclass(class0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<Double> class3 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.hasEnclosingMethod(class0);
      String string0 = "size";
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-550);
      longArray0[1] = (long) (-550);
      longArray0[2] = (long) (-550);
      longArray0[3] = (long) (-550);
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition", (String) null, (-550));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("size", "size", (-550), longArray0, sQLDataException0);
      batchUpdateException0.getLargeUpdateCounts();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition", (String) null, batchUpdateException0);
      batchUpdateException0.getLocalizedMessage();
      sQLRecoverableException0.getStackTrace();
      sQLDataException0.getLocalizedMessage();
      sQLDataException0.initCause(batchUpdateException0);
      sQLRecoverableException0.getSuppressed();
      batchUpdateException0.getStackTrace();
      sQLRecoverableException0.spliterator();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0, "V`Nidmsd#g.X9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // V`Nidmsd#g.X9
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanDeserializerFactory0, false);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      PipedReader pipedReader0 = new PipedReader(93);
      assertNotNull(pipedReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 1);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-2618));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, lineNumberReader0, objectReader1, charsToNameCanonicalizer1);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      Class<Short> class1 = Short.class;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, " is not a primitive type");
      SQLWarning sQLWarning0 = new SQLWarning("V!om2fqg\"tPgJ'X\"b|n", "com.fasterxml.jackson.databind.PropertyNamingStrategy$SnakeCaseStrategy", 240);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("DeserializationProblemHandler.handleWeirdNativeValue() for type %s returned value of type %s", " is not a primitive type", 0, sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "No (native) type id found when one was expected for polymorphic type handling", (Throwable) sQLInvalidAuthorizationSpecException0);
      ClassUtil.getClassDescription(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
      
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Short short0 = new Short((short)63);
      assertEquals((short)63, (short)short0);
      assertNotNull(short0);
      
      String string0 = ClassUtil.quotedOr((Object) null, (String) null);
      assertNull(string0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ReferenceType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Short short0 = new Short((short)63);
      assertEquals((short)63, (short)short0);
      assertNotNull(short0);
      
      String string0 = ClassUtil.quotedOr(short0, (String) null);
      assertEquals("\"63\"", string0);
      assertNotNull(string0);
      
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, short0, "DI&");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Short (of class java.lang.Boolean) must override method 'DI&'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Short short0 = new Short((short)63);
      assertEquals((short)63, (short)short0);
      assertNotNull(short0);
      
      String string0 = null;
      String string1 = ClassUtil.quotedOr(short0, (String) null);
      assertEquals("\"63\"", string1);
      assertNotNull(string1);
      
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, short0, "DI&");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Short (of class java.lang.Boolean) must override method 'DI&'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      assertNotNull(collectionType0);
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom(collectionType0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }
}
