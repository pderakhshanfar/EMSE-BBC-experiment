/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 27 03:55:17 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, SimpleType> enumMap0 = new EnumMap<AccessPattern, SimpleType>(class0);
      ClassUtil.findEnumType(enumMap0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      TypeFactory typeFactory2 = typeFactory1.withCache((LRUMap<Object, JavaType>) null);
      Class<HashMap> class1 = HashMap.class;
      Class<NoClass> class2 = NoClass.class;
      Class<Integer> class3 = Integer.class;
      typeFactory1.constructCollectionLikeType(class2, class3);
      MapType mapType0 = typeFactory2.constructRawMapType(class1);
      Class<Object> class4 = Object.class;
      ClassUtil.findSuperTypes((JavaType) mapType0, (Class<?>) class4, false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isConcrete(class0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      constructor0.getTypeParameters();
      ClassUtil.isConcrete((Member) constructor0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      Class<JsonSerializer> class1 = JsonSerializer.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.emptyIterator();
      ClassUtil.findClassAnnotations(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.canBeABeanType(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ClassUtil.getClassDescription(class0);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getEnclosingClass(class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.hasEnclosingMethod(class3);
      DecimalNode decimalNode0 = DecimalNode.valueOf((BigDecimal) null);
      // Undeclared exception!
      try { 
        ClassUtil.quotedOr(decimalNode0, "`com.fasterxml.jackson.databind.JsonMappingException`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.node.DecimalNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = false;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockThrowable0);
      MockError mockError0 = new MockError("C}-2", mockRuntimeException0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, false);
      PipedReader pipedReader0 = new PipedReader(2);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-813));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, lineNumberReader0, objectReader0, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Error> class2 = Error.class;
      defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class2, jsonToken0, "C}-2");
      ClassUtil.getRootCause(mockRuntimeException0);
      ClassUtil.primitiveType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      annotatedField0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" 4])L9T-Idj");
      sQLNonTransientException0.spliterator();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      SQLException sQLException0 = new SQLException("UTF-8", sQLNonTransientException0);
      sQLNonTransientException0.initCause(sQLException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "java.lang.Character");
      MockException mockException0 = new MockException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("java.lang.Character", (String) null, mockException0);
      mockException0.initCause(sQLTransientException0);
      mockException0.toString();
      mockException0.printStackTrace();
      mockException0.printStackTrace();
      mockException0.printStackTrace();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockException0, ",V0lWnCz");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "org.hibernate.proxy.java.lang.Error";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.Error");
      Class<Double> class0 = Double.class;
      ClassUtil.findClassAnnotations(class0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "org.hibernate.proxy.java.lang.Error");
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Float> class0 = Float.class;
      ClassUtil.findClassAnnotations(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.nonNullString((String) null);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.isConcrete(class0);
      Class<?> class2 = ClassUtil.wrapperType(class1);
      ClassUtil.getDeclaredMethods(class2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(accessPattern0);
      NamedType[] namedTypeArray0 = new NamedType[5];
      NamedType namedType0 = new NamedType(class0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.PlaceholderForType");
      namedTypeArray0[0] = namedType0;
      Class<IOException> class1 = IOException.class;
      NamedType namedType1 = new NamedType(class1, "org.evosuite.runtim");
      namedTypeArray0[1] = namedType1;
      NamedType namedType2 = new NamedType(class1);
      namedTypeArray0[2] = namedType2;
      NamedType namedType3 = new NamedType(class0);
      namedTypeArray0[3] = namedType3;
      NamedType namedType4 = new NamedType(class1, "N{Xy+_;xPiG");
      namedTypeArray0[4] = namedType4;
      objectMapper1.registerSubtypes(namedTypeArray0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      JavaType javaType0 = typeFactory1.constructType((Type) class0);
      Class<Error> class2 = Error.class;
      ClassUtil.findSuperTypes(javaType0, class2, false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      ClassUtil.classOf(enumSet0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.nonNullString((String) null);
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
      Class<Float> class1 = Float.TYPE;
      ClassUtil.defaultValue(class1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getPackageName(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Module> class2 = Module.class;
      ClassUtil.isLocalType(class2, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      Predicate<AccessPattern> predicate0 = Predicate.isEqual((Object) accessPattern0);
      Predicate<AccessPattern> predicate1 = predicate0.negate();
      Predicate<AccessPattern> predicate2 = predicate1.or(predicate0);
      predicate1.and(predicate2);
      Predicate<AccessPattern> predicate3 = predicate2.and(predicate0);
      enumSet0.removeIf(predicate3);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.isProxyType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("net.sf.cglib.proxy.java.lang.Double");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "net.sf.cglib.proxy.java.lang.Double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.findSuperTypes(class0, class1);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet.range(accessPattern0, accessPattern1);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.range(accessPattern0, accessPattern0);
      enumSet0.add(accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.findSuperClasses(class0, class0, false);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      JavaType[] javaTypeArray0 = new JavaType[5];
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-155));
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0);
      // Undeclared exception!
      try { 
        collectionLikeType0.withStaticTyping();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.findSuperTypes((JavaType) null, class0, false);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getOuterClass(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<ReferenceType> class1 = ReferenceType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "", (String) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.ReferenceType` from String \"\": null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      Class<Short> class1 = Short.TYPE;
      Class<?> class2 = ClassUtil.wrapperType(class1);
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Double> class3 = Double.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.getDeclaredFields(class0);
      String string0 = "qC>.E)>*HT>hQcsG";
      String string1 = "Multiple fields representing property \"";
      String string2 = "m";
      int int0 = 0;
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      ObjectMapper objectMapper2 = objectMapper1.configure(mapperFeature0, false);
      SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0);
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule("Ss`sx?mXG<Ct/g", version0);
      ObjectMapper objectMapper4 = objectMapper3.registerModule(simpleModule0);
      ObjectMapper objectMapper5 = objectMapper4.copy();
      Class<Object> class0 = Object.class;
      objectMapper5.readerFor(class0);
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URL uRL1 = MockURL.URL(uRL0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ArrayType");
      // Undeclared exception!
      try { 
        MockURL.openStream(uRL1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.canBeABeanType(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile(", array size ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)105;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1200), (ObjectCodec) null, printStream0, byteArray0, (-1200), true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-139), 2);
      Exception exception0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) printStream0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      File file0 = MockFile.createTempFile("JSON", "JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((Writer) mockPrintWriter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory0.disable(jsonFactory_Feature0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(jsonFactory0, class0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) mockPrintWriter0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Error` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.core.JsonFactory`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.springframework.", ") to output");
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLRecoverableException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("org.springframework.", sQLTransientException0);
      MockError mockError0 = new MockError(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.emptyIterator();
      ClassUtil.findClassAnnotations(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.canBeABeanType(class1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<IOException> class2 = IOException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class2);
      MockError mockError0 = new MockError("org.hibernate.proxy.java.lang.Class", jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(mockError0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.io.IOException` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.BeanDeserializerFactory`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanDeserializerFactory0, false);
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-2618));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, lineNumberReader0, objectReader0, charsToNameCanonicalizer1);
      Class<Short> class1 = Short.class;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class1, jsonToken0, " is not a primitive type");
      ClassUtil.getRootCause(jsonMappingException0);
      ClassUtil.primitiveType(class1);
      ClassUtil.throwIfError(jsonMappingException0);
      Class<Long> class2 = Long.class;
      ClassUtil.isNonStaticInnerClass(class2);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected NOT_AVAILABLE:  is not a primitive type
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassUtil.nonNull("net.sf.cglib.proxy.java.lang.Object", "net.sf.cglib.proxy.java.lang.Object");
      Class<String> class0 = String.class;
      ClassUtil.hasClass("net.sf.cglib.proxy.java.lang.Object", class0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Short> class0 = Short.class;
      ClassUtil.getEnclosingClass(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, (Class<?>) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.hibernate.proxy.java.io.IOException");
      sQLDataException0.printStackTrace((PrintWriter) mockPrintWriter0);
      Throwable throwable0 = ClassUtil.getRootCause(sQLDataException0);
      Class<Module> class2 = Module.class;
      Class<Integer> class3 = Integer.class;
      ClassUtil.findSuperTypes(class2, class3, list0);
      Class<CollectionType> class4 = CollectionType.class;
      ClassUtil.getDeclaringClass(class4);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, "org.hibernate.proxy.java.io.IOException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // org.hibernate.proxy.java.io.IOException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasClass(class0, class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findEnumType(class1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.getOuterClass(class0);
      MockIOException mockIOException0 = new MockIOException("Q4:G-");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) "Q4:G-", 1110);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.getOuterClass(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.isConcrete(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, SimpleType> enumMap0 = new EnumMap<AccessPattern, SimpleType>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      enumMap0.put(accessPattern0, (SimpleType) null);
      ClassUtil.findEnumType(enumMap0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getOuterClass(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(javaType0);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      ArrayType arrayType1 = ArrayType.construct(javaType0, typeBindings0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findSuperTypes((JavaType) arrayType1, (Class<?>) class0, false);
      Class<String> class1 = String.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = '7';
      charArray0[1] = 'v';
      charArray0[2] = 'n';
      charArray0[3] = 'H';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, pipedReader0, objectMapper1, charsToNameCanonicalizer0, charArray0, (-444), 2, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 6000, objectMapper1, byteArrayBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(readerBasedJsonParser0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException$Reference");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      DataTruncation dataTruncation0 = new DataTruncation(74, true, true, 74, (-1170), sQLDataException0);
      ClassUtil.getRootCause(dataTruncation0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      System.setCurrentTimeMillis((-1027L));
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findClassAnnotations(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.nonNull((Character) null, (Character) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getEnclosingClass(class0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.nameOf(class1);
      Class<MockFileInputStream> class2 = MockFileInputStream.class;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with((DeserializerFactory) null);
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = (-1543);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.hibernate.proxy.", "org.hibernate.proxy.", (-1543));
      String string0 = "G: J1=nZF/H.Ttka>dW";
      sQLRecoverableException0.getStackTrace();
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("org.hibernate.proxy.", "G: J1=nZF/H.Ttka>dW", sQLRecoverableException0);
      sQLRecoverableException0.initCause(sQLRecoverableException1);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ReferenceType> enumMap0 = new EnumMap<AccessPattern, ReferenceType>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      BiFunction<Object, SimpleType, ReferenceType> biFunction0 = (BiFunction<Object, SimpleType, ReferenceType>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      enumMap0.computeIfPresent(accessPattern0, biFunction0);
      EnumMap<AccessPattern, SimpleType> enumMap1 = new EnumMap<AccessPattern, SimpleType>((Map<AccessPattern, ? extends SimpleType>) enumMap0);
      ClassUtil.findEnumType(enumMap0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot figure out type for EnumMap (odd JDK platform?)");
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.getOuterClass(class1);
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.getConstructors(class2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";::JFQZ5rJ!QV]q,");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lf&");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.backticked("\"\"$D");
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getEnclosingClass(class0);
      JavaType javaType0 = null;
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassUtil.nameOf((Named) null);
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.getGenericInterfaces(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isConcrete(class1);
      System.setCurrentTimeMillis(3L);
      System.setCurrentTimeMillis(3L);
      Object object0 = ClassUtil.defaultValue(class0);
      ClassUtil.classNameOf(object0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1657472572));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.getOuterClass(class1);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      Class<Byte> class2 = Byte.class;
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      SimpleType simpleType0 = referenceType0.withTypeHandler(javaTypeArray0[0]);
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) referenceType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaTypeArray0);
      CollectionType collectionType0 = CollectionType.construct(class2, typeBindings0, javaTypeArray0[4], javaTypeArray0, javaTypeArray0[1]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(collectionType0);
      AccessPattern accessPattern1 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ReferenceType referenceType2 = referenceType1.withContentTypeHandler(accessPattern1);
      ClassUtil.verifyMustOverride(class0, referenceType2, "com.fasterxml.jackson.core.JsonGenerator");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.isObjectOrPrimitive(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockIOException mockIOException0 = new MockIOException();
      ClassUtil.getClassDescription(mockIOException0);
      ClassUtil.getDeclaringClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassUtil.nonNullString("Cannot figure out type for EnumSet (odd JDK platform?)");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Error> class0 = Error.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Error` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1244651605));
      placeholderForType0.toString();
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      Class<NoClass> class1 = NoClass.class;
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<CollectionType>[] classArray0 = (Class<CollectionType>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1657472572));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ClassUtil.throwIfError(sQLTransactionRollbackException0);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isLocalType(class0, false);
      Named named0 = null;
      ClassUtil.nameOf((Named) null);
      Class<Integer> class1 = Integer.class;
      ClassUtil.nameOf(class1);
      Class<Byte> class2 = Byte.TYPE;
      ClassUtil.getGenericInterfaces(class2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2483);
      // Undeclared exception!
      try { 
        placeholderForType0.withStaticTyping();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isLocalType(class0, false);
      Named named0 = null;
      ClassUtil.nameOf((Named) null);
      Class<Integer> class1 = Integer.class;
      ClassUtil.nameOf(class1);
      Class<Byte> class2 = Byte.class;
      ClassUtil.getGenericInterfaces(class2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2483);
      // Undeclared exception!
      try { 
        placeholderForType0.withStaticTyping();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      PropertyName propertyName0 = new PropertyName("J9)T", "J9)T");
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getArrayDelegateCreator();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("[reference type, class ");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, collectionLikeType0, propertyName0, (AnnotatedMember) null, propertyMetadata1);
      ClassUtil.nameOf((Named) beanProperty_Std0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.hasEnclosingMethod(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackson.databind.deser.impl.MergingSettableBeanProperty", "dt{", Integer.MIN_VALUE);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.deser.impl.MergingSettableBeanProperty", sQLIntegrityConstraintViolationException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "com.fasterxml.jackson.databind.deser.impl.MergingSettableBeanProperty", (Throwable) sQLRecoverableException0);
      sQLRecoverableException0.addSuppressed(jsonMappingException0);
      ClassUtil.getClassDescription(jsonMappingException0);
      ClassUtil.classNameOf(jsonMappingException0);
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.findSuperTypes(class0, class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class2);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(typeFactory0);
      ClassUtil.findSuperTypes((JavaType) collectionType1, (Class<?>) class0, false);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.rawClass(collectionType1);
      Class<CollectionType> class3 = CollectionType.class;
      ClassUtil.findConstructor(class3, false);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0, serializationFeatureArray0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper3 = objectMapper2.addHandler(deserializationProblemHandler0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectMapper objectMapper4 = objectMapper3.disable(deserializationFeature0, deserializationFeatureArray0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      mapperFeatureArray0[2] = mapperFeature2;
      ObjectMapper objectMapper5 = objectMapper4.enable(mapperFeatureArray0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      objectMapper5.readerFor(class1);
      ClassUtil.getOuterClass(class0);
      ClassUtil.findEnumType((Enum<?>) serializationFeature0);
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<RuntimeException> class0 = RuntimeException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("JSON", class0, "JSON");
      objectMapper1.readerForUpdating(jsonMappingException0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassUtil.rawClass((JavaType) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = "4qAD# vv_\"";
      SQLException sQLException0 = new SQLException("zo!IDF", "4qAD# vv_\"");
      sQLException0.getLocalizedMessage();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("n");
      sQLNonTransientConnectionException0.fillInStackTrace();
      sQLNonTransientConnectionException0.getStackTrace();
      sQLException0.setNextException(sQLNonTransientConnectionException0);
      ClassUtil.throwIfError(sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<String> class0 = String.class;
      ClassUtil.isLocalType(class0, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, ReferenceType> enumMap0 = new EnumMap<AccessPattern, ReferenceType>(class1);
      EnumMap<AccessPattern, SimpleType> enumMap1 = new EnumMap<AccessPattern, SimpleType>((Map<AccessPattern, ? extends SimpleType>) enumMap0);
      ClassUtil.findEnumType(enumMap1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.hibernate.proxy.java.lang.Byte", "; failed to set access: ", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, "w2", map0, batchUpdateException0);
      sQLIntegrityConstraintViolationException0.setNextException(sQLClientInfoException1);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      ClassUtil.primitiveType(class1);
      ClassUtil.getPackageName(class1);
      ClassUtil.backticked("&xypNV{G");
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy)PropertyNamingStrategy.UPPER_CAMEL_CASE;
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_UpperCamelCaseStrategy0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectMapper objectMapper3 = new ObjectMapper();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper3);
      SQLException sQLException0 = new SQLException("JSON", "O");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLException0);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Long> class0 = Long.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<Double> class1 = Double.class;
      ClassUtil.hasClass(list0, class1);
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperTypes(class2, class0, list0);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.isJacksonStdImpl(class3);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(" is not a primitive type", (String) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isProxyType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class1 = String.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      JavaType javaType1 = typeFactory0.constructReferenceType(class1, collectionLikeType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType1, collectionLikeType0);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      Class<String> class3 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class2, class3, class1);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(mapLikeType0);
      ClassUtil.findSuperTypes((JavaType) referenceType1, (Class<?>) class3, false);
      ClassUtil.classOf(javaType1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.isConcrete(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassUtil.nonNullString("S_S5(q5| ~`E7rPVRXv");
      Class<Error> class0 = Error.class;
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<Error>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      Class<String> class2 = String.class;
      ClassUtil.isNonStaticInnerClass(class2);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1657472572));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.hasClass((Object) null, class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      Class<Long> class1 = Long.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class1);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<LinkedList> class2 = LinkedList.class;
      CollectionType collectionType0 = typeFactory1.constructRawCollectionType(class2);
      JavaType javaType0 = typeFactory0.moreSpecificType(collectionType0, collectionType0);
      ClassUtil.rawClass(javaType0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.nullOrToString(void0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "java.lang.Void@0000000001");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-177));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.getOuterClass(class1);
      Double double0 = new Double(9.00853);
      Double double1 = new Double(9.00853);
      ClassUtil.nonNull(double0, double1);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Short short0 = new Short((short)72);
      ClassUtil.backticked((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.class;
      ClassUtil.isLocalType(class0, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.fasterxml.jackso");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanDeserializerFactory0, false);
      PipedReader pipedReader0 = new PipedReader(93);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-2618));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, lineNumberReader0, objectReader1, charsToNameCanonicalizer1);
      readerBasedJsonParser0.skipChildren();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-34);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 6, objectMapper0, byteArrayOutputStream0, byteArray0, 0, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanDeserializerFactory0, false);
      PipedReader pipedReader0 = new PipedReader(93);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      objectReader0.withFeatures(deserializationFeatureArray0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findConstructor(class1, false);
      ClassUtil.throwIfRTE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.util.ClassUtil");
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLTransactionRollbackException0);
      Class<Float> class0 = Float.class;
      ClassUtil.getEnclosingClass(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("=A<nJYp 3e", "not a valid double value (as String to convert)");
      SQLWarning sQLWarning0 = new SQLWarning("ne.sf.cglib.proxy.java.lan.String", (String) null, (-734), throwable0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("QSuOxJl|Z`Kb#QM", ", problem: ", (-734), hashMap0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.nameOf(class0);
      Class<String> class1 = String.class;
      ClassUtil.getConstructors(class1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`java.lang.Error`");
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.nonNullString("`java.lang.Error`");
      Class<Long> class2 = Long.class;
      ClassUtil.getOuterClass(class2);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.instantiationException((Class<?>) null, "`java.lang.Error`");
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot construct instance of [null]: `java.lang.Error`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.rawClass((JavaType) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Void> class0 = Void.TYPE;
      ClassUtil.getClassDescription(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassUtil.nonNullString("S_S5(q5| ~`E7rPVRXv");
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Object> class2 = Object.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      // Undeclared exception!
      try { 
        CollectionLikeType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getOuterClass(class0);
      Class<DecimalNode> class1 = DecimalNode.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("unable to parse key as Class", "unable to parse key as Class", 7);
      MockPrintStream mockPrintStream0 = new MockPrintStream("2_l]qr[m<2d u");
      sQLTimeoutException0.getSuppressed();
      sQLTimeoutException0.printStackTrace((PrintStream) mockPrintStream0);
      PrintStream printStream0 = mockPrintStream0.format("2_l]qr[m<2d u", (Object[]) typeArray0);
      sQLTimeoutException0.fillInStackTrace();
      sQLTimeoutException0.getLocalizedMessage();
      sQLTimeoutException0.printStackTrace(printStream0);
      sQLFeatureNotSupportedException0.initCause(sQLTimeoutException0);
      Throwable throwable0 = ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
      Class<String> class2 = String.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.getRootCause(throwable0);
      Class<Double> class3 = Double.class;
      ClassUtil.getConstructors(class3);
      Class<ArrayType> class4 = ArrayType.class;
      ClassUtil.findConstructor(class4, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedReader pipedReader0 = new PipedReader(93);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      objectReader0.withFeatures(deserializationFeatureArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-2618));
      Class<Object> class1 = Object.class;
      SimpleType.constructUnsafe(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getDeclaredMethods(class2);
      ClassUtil.getDeclaredFields(class1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("n!t PLo6CF*u.S$`");
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isBogusClass(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ClassUtil.isLocalType(class0, true);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isBogusClass(class2);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.nonNullString((String) null);
      Class<Long> class0 = Long.class;
      ClassUtil.getOuterClass(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MockError mockError0 = new MockError((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1234);
      Vector<Object> vector0 = new Vector<Object>();
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("net.sf.cglib.proxy.", "net.sf.cglib.proxy.", 1234);
      ClassUtil.nullOrToString(coreXMLDeserializers_Std0);
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      typeBindings0.equals((Object) null);
      ClassUtil.nullOrToString(typeBindings0);
      SQLException sQLException0 = new SQLException("0Vn39rN)B+ARb;}", "Already had POJO for id (", 3192);
      ClassUtil.throwIfRTE(sQLException0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" args from Class '", "SoI-_FOcL:lVUiFi'|,");
      Class<Long> class0 = Long.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable((String) null);
      SQLDataException sQLDataException0 = new SQLDataException("d8", "p@:#");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(sQLTransientConnectionException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLInvalidAuthorizationSpecException0);
      mockRuntimeException0.toString();
      typeBindings1.equals("SoI-_FOcL:lVUiFi'|,");
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" args from Class '", "bI-_FOcW:lVUiFi'|,");
      sQLTransientConnectionException0.getStackTrace();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "|lPY+CWRdBP&!~oy*", sQLTransientConnectionException0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("|lPY+CWRdBP&!~oy*", "NULL", "org.hibernate.proxy.java.lang.Double", (-4025));
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Long> class0 = Long.TYPE;
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1Ss?>q6");
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.isJacksonStdImpl((Object) null);
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      Class<Void> class2 = Void.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaTypeArray0);
      Class<Void> class3 = Void.class;
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      MapType mapType0 = MapType.construct((Class<?>) class3, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0, (JavaType) mapLikeType0);
      simpleType0.refine(class1, typeBindings0, mapType0, javaTypeArray0);
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, mapLikeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = ClassUtil.nonNull(float0, float0);
      ClassUtil.isJacksonStdImpl((Object) float1);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" args from Class '", "SoI-_FOcL:lVUiFi'|,");
      sQLTransientConnectionException0.getStackTrace();
      Class<Character> class0 = Character.class;
      ClassUtil.getConstructors(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.primitiveType(class1);
      Class<Object> class2 = Object.class;
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.primitiveType(class3);
      Class<Integer> class4 = Integer.class;
      ClassUtil.findSuperClasses(class4, class2, true);
      Class<Integer> class5 = Integer.class;
      ClassUtil.primitiveType(class5);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(" args from Class '", "SoI-_FOcL:lVUiFi'|,");
      sQLTransientConnectionException0.getStackTrace();
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.getConstructors(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.primitiveType(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.primitiveType(class2);
      Class<Integer> class3 = Integer.class;
      ClassUtil.findSuperClasses(class3, class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.nameOf(class0);
      Class<String> class1 = String.class;
      ClassUtil.getConstructors(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      iOContext1.allocBase64Buffer();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
      objectMapper1.setSerializerFactory(beanSerializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), objectMapper1, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("UNWRAP_SINGLE_VALUE_ARRAYS", "`java.lang.Error`", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLClientInfoException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLClientInfoException1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException: UNWRAP_SINGLE_VALUE_ARRAYS
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1Ss?>q6");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.primitiveType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<Double> class2 = Double.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.Byte");
      Class<Float> class0 = Float.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Character> class2 = Character.class;
      ClassUtil.getPackageName(class2);
      ClassUtil.getOuterClass(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findDefaultConstructor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.findClassAnnotations(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isBogusClass(class1);
      MockException mockException0 = new MockException((String) null);
      Byte byte0 = new Byte((byte)13);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.hasClass(byte0, class2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.rawClass((JavaType) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isProxyType(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.getDeclaringClass(class2);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      typeBindings0.withUnboundVariable("' (of type ");
      SQLDataException sQLDataException0 = new SQLDataException("atU,x-+f{jylB3%1IG", "' (of type ");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      mockRuntimeException0.toString();
      typeBindings0.equals(mockRuntimeException0);
      ClassUtil.throwIfError(mockRuntimeException0);
      ClassUtil.nullOrToString(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockError mockError0 = new MockError();
      SQLTransientException sQLTransientException0 = new SQLTransientException(mockError0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLTransientException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0, "26");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      Throwable throwable0 = ClassUtil.throwIfRTE(sQLTransientException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("tsT", throwable0);
      mockRuntimeException0.fillInStackTrace();
      sQLTransientException0.getSuppressed();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class2);
      AnnotationMap annotationMap0 = new AnnotationMap();
      annotationMap0.annotations();
      AnnotationMap.merge(annotationMap0, annotationMap0);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      JsonFormat.Features jsonFormat_Features0 = JsonFormat.Features.empty();
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
      jsonFormat_Features0.get(jsonFormat_Feature0);
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("primitive");
      Class<Byte> class0 = Byte.class;
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Long> class0 = Long.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1234);
      Vector<Object> vector0 = new Vector<Object>();
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.classOf(accessPattern0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.throwIfIOE((Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonFactory_Feature0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory4, true);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, (OutputStream) null, byteArray0, 3, true);
      uTF8JsonGenerator0.getCharacterEscapes();
      JsonFactory jsonFactory5 = jsonFactory4.setCharacterEscapes((CharacterEscapes) null);
      jsonFactory5.createGenerator((Writer) null);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getClassDescription(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getPackageName(class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonFactory2.enable(jsonGenerator_Feature0);
      MockFile mockFile0 = new MockFile((File) null, "enum");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"JSON\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.util.ClassUtil");
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.findClassAnnotations(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.isBogusClass(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ClassUtil.isLocalType(class0, true);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Long> class1 = Long.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper1);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "serialVersionUID";
      objectArray0[6] = (Object) jsonFactory1;
      objectArray0[7] = (Object) serializationFeature0;
      objectArray0[8] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "serialVersionUID", objectArray0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((Writer) printWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) pipedWriter0, (Exception) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.util.ClassUtil");
      ClassUtil.throwIfError(sQLTransactionRollbackException0);
      Class<Object> class0 = Object.class;
      ClassUtil.hasEnclosingMethod(class0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = ClassUtil.nonNull(float0, float0);
      ClassUtil.isJacksonStdImpl((Object) float1);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil classUtil0 = new ClassUtil();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Long> class2 = Long.class;
      ClassUtil.primitiveType(class2);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.primitiveType(class3);
      LinkedList<Class<Object>> linkedList0 = new LinkedList<Class<Object>>();
      Class<Integer> class4 = Integer.class;
      ClassUtil.primitiveType(class4);
      Class<Object> class5 = Object.class;
      ClassUtil.isObjectOrPrimitive(class5);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getEnclosingClass(class1);
      Class<IOException> class2 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.getFactoryMethods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap.merge(annotationMap0, annotationMap0);
      annotationMap0.toString();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("viL'Vh1VHa)s6l");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // viL'Vh1VHa)s6l
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<Error> class0 = Error.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Long> class2 = Long.class;
      ClassUtil.primitiveType(class2);
      Class<Void> class3 = Void.class;
      ClassUtil.primitiveType(class3);
      LinkedList<Class<Object>> linkedList0 = new LinkedList<Class<Object>>();
      Class<InputStream> class4 = InputStream.class;
      ClassUtil.primitiveType(class4);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isLocalType(class0, true);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.nameOf(class0);
      Class<String> class1 = String.class;
      ClassUtil.getConstructors(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      iOContext1.allocBase64Buffer();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
      objectMapper1.setSerializerFactory(beanSerializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ClassUtil.getDeclaredMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = ClassUtil.nonNull(float0, float0);
      ClassUtil.isJacksonStdImpl((Object) float1);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<Void> class1 = Void.class;
      Class<String> class2 = String.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<String> class3 = String.class;
      ClassUtil.isBogusClass(class3);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Long> class4 = Long.class;
      Class<?> class5 = ClassUtil.primitiveType(class4);
      ClassUtil.defaultValue(class5);
      Class<Integer> class6 = Integer.class;
      ClassUtil.getDeclaredFields(class6);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      typeBindings0.withUnboundVariable("' (of type ");
      SQLDataException sQLDataException0 = new SQLDataException("atU,x-+f{jylB3%1IG");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      Class<Boolean> class1 = Boolean.class;
      Class<Void> class2 = Void.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class3);
      Class<IOException> class4 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor1.getConstructor();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.getFactoryMethods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = true;
      Class<Void> class0 = Void.class;
      ClassUtil.isLocalType(class0, true);
      MockIOException mockIOException0 = new MockIOException((String) null);
      ClassUtil.throwIfError((Throwable) null);
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)0;
      byte byte0 = (byte) (-21);
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)123;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1Ss?>q6");
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "US-ASCII");
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeBindings.create(class0, (JavaType[]) null);
      SQLDataException sQLDataException0 = new SQLDataException("atU,x-+f{jylB3%1IG", "' (of type ");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("java.lang.String");
      ClassUtil.throwIfError(sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.createInstance(class0, true);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      ClassUtil.nonNull(noClass0, noClass0);
      ClassUtil.getClassDescription(class1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "com.fasterxml.jackson.databind.util.ClassUtil";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.util.ClassUtil");
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isObjectOrPrimitive(class1);
      ClassUtil.getClassDescription(class1);
      JavaType javaType0 = null;
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.nonNullString("`com.fasterxml.jackson.databind.JsonMappingException`");
      ClassUtil.isConcrete(class0);
      ClassUtil.getDeclaredFields(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      TypeBindings.emptyBindings();
      SQLDataException sQLDataException0 = new SQLDataException("atU,x-+f{jylB3%1IG");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      mockRuntimeException0.toString();
      typeBindings0.equals(mockRuntimeException0);
      TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      Class<Character> class1 = Character.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassUtil.classNameOf(resolvedRecursiveType0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) dataOutputStream0, jsonEncoding0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonGenerator0, "`com.fasterxml.jackson.databind.type.ResolvedRecursiveType`");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isLocalType(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.createInstance(class0, true);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.getDeclaredMethods(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findConstructor(class2, true);
      Class<Double> class3 = Double.class;
      ClassUtil.isProxyType(class3);
      Class<Integer> class4 = Integer.class;
      ClassUtil.getGenericSuperclass(class4);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      MockFile mockFile0 = new MockFile((File) null, "1I7kk/De@eBr/o\"\"O");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<DecimalNode> class1 = DecimalNode.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, false);
      ClassUtil.isJacksonStdImpl((Object) list0);
      Class<Character> class2 = Character.class;
      ClassUtil.hasEnclosingMethod(class2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1Ss?>q6");
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.primitiveType(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, true);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.primitiveType(class2);
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class3, false);
      Class<Character> class4 = Character.class;
      ClassUtil.getEnclosingClass(class4);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper1);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) locale0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "serialVersionUID";
      ClassUtil.classNameOf(beanDeserializerFactory0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLTransientConnectionException0);
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.throwIfRTE(throwable0);
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Long> class0 = Long.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1234);
      coreXMLDeserializers_Std0.getKnownPropertyNames();
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.classOf(accessPattern0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.findRawSuperTypes(class2, class3, true);
      Class<Double> class4 = Double.class;
      ClassUtil.getEnclosingClass(class4);
      Class<IOException> class5 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class5, false);
      constructor0.getParameterTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.getFactoryMethods();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanDeserializerFactory0, false);
      PipedReader pipedReader0 = new PipedReader(93);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-2618));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, lineNumberReader0, objectReader1, charsToNameCanonicalizer1);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      Class<Short> class1 = Short.class;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, " is not a primitive type");
      ClassUtil.getRootCause(jsonMappingException0);
      ClassUtil.primitiveType(class1);
      ClassUtil classUtil0 = new ClassUtil();
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.nameOf(class0);
      Class<String> class1 = String.class;
      ClassUtil.getConstructors(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.primitiveType(class2);
      Class<Character> class3 = Character.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.findSuperClasses(class3, class0, true);
      Class<?> class4 = ClassUtil.primitiveType(class3);
      ClassUtil.getPackageName(class4);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = ClassUtil.nonNull(float0, float0);
      ClassUtil.isJacksonStdImpl((Object) float1);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, classUtil0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      SQLDataException sQLDataException0 = new SQLDataException("m", "s", 0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("s", sQLDataException0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      classUtil_Ctor0.getDeclaringClass();
      ClassUtil.emptyIterator();
      Class<Error> class3 = Error.class;
      ClassUtil.canBeABeanType(class3);
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.nameOf(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<IOException> class2 = IOException.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.nameOf(class2);
      Class<Double> class3 = Double.class;
      ClassUtil.getGenericSuperclass(class3);
      Class<ReferenceType> class4 = ReferenceType.class;
      ClassUtil.isProxyType(class4);
      Class<Boolean> class5 = Boolean.class;
      ClassUtil.getGenericSuperclass(class5);
      Class<Long> class6 = Long.class;
      ClassUtil.findSuperClasses(class6, class0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      String string0 = "keyUniverse";
      MockFile mockFile0 = new MockFile((File) null, "keyUniverse");
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Character character0 = new Character('G');
      Character character1 = Character.valueOf('9');
      ClassUtil.nonNull(character0, character1);
      ClassUtil.throwIfError((Throwable) null);
      Class<String> class0 = String.class;
      ClassUtil.getDeclaredMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.nameOf(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      boolean boolean0 = true;
      ClassUtil.findSuperClasses(class0, class1, true);
      Class<Void> class2 = Void.class;
      ClassUtil.isLocalType(class2, true);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonLocation jsonLocation0 = JsonLocation.NA;
      jsonLocation0.sourceDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "com.fasterxml.jackson.core.type.TypeReference", jsonLocation0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(jsonMappingException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.core.type.TypeReference", "com.fasterxml.jackson.core.type.TypeReference", 0, sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLTransactionRollbackException0);
      sQLTransactionRollbackException0.spliterator();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLTransactionRollbackException0.setStackTrace(stackTraceElementArray0);
      jsonMappingException0.toString();
      sQLTransactionRollbackException0.getLocalizedMessage();
      ClassUtil.throwIfError(sQLTransactionRollbackException0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Class<Object> class0 = Object.class;
          ClassUtil.isNonStaticInnerClass(class0);
          String string0 = "keyType";
          SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("keyType");
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor235.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      boolean boolean0 = true;
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getGenericSuperclass(class1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("org.hibernate.proxy.", "org.hibernate.proxy.");
      MockIOException mockIOException0 = new MockIOException("i_WLYJ-{", sQLIntegrityConstraintViolationException0);
      mockIOException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        mockIOException0.initCause(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLIntegrityConstraintViolationException: org.hibernate.proxy.
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Long> class0 = Long.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1234);
      coreXMLDeserializers_Std0.getKnownPropertyNames();
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.classOf(accessPattern0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Void> class2 = Void.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      typeBindings0.withUnboundVariable("' (of type ");
      SQLDataException sQLDataException0 = new SQLDataException("atU,x-+f{jylB3%1IG");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      mockRuntimeException0.toString();
      typeBindings0.equals(mockRuntimeException0);
      TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      Class<Character> class1 = Character.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassUtil.classNameOf(resolvedRecursiveType0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<NoClass> class3 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<Void> class0 = Void.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.getConstructors(class0);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<?> class2 = ClassUtil.primitiveType(class1);
      ClassUtil.findSuperClasses(class2, class1, true);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.primitiveType(class3);
      ClassUtil.classOf(class0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
      Class<InputStream> class1 = InputStream.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<Integer> class2 = Integer.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor1.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.classOf(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findEnumType(class1);
      String string0 = " af7 _>";
      boolean boolean0 = false;
      DataTruncation dataTruncation0 = new DataTruncation((-839), false, false, (-839), (-839));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(" af7 _>", dataTruncation0);
      dataTruncation0.setNextException(sQLSyntaxErrorException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" af7 _>", " af7 _>", (-839), dataTruncation0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      objectIdGenerators_IntSequenceGenerator0.generateId((Object) null);
      ClassUtil.classOf((Object) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findEnumType(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.primitiveType(class1);
      Class<InputStream> class2 = InputStream.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Throwable throwable0 = ClassUtil.throwIfIOE(batchUpdateException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("\"_Jz)z", "\"_Jz)z", throwable0);
      ClassUtil.throwIfRTE(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Class<IOException> class0 = IOException.class;
      ClassUtil.isJacksonStdImpl(class0);
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator", 9, sQLDataException0);
      MockError mockError0 = new MockError(sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      MockError mockError0 = new MockError();
      ClassUtil.isJacksonStdImpl((Object) mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.emptyIterator();
      Class<Object> class1 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotatedReturnType();
      constructor0.getAnnotatedReceiverType();
      constructor0.getAnnotations();
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      constructor0.getTypeParameters();
      classUtil_Ctor0.getParamCount();
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.isJacksonStdImpl(class2);
      Class<Long> class3 = Long.class;
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getPackageName(class3);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getClassMethods(class2);
      MockError mockError0 = new MockError((String) null);
      mockError0.fillInStackTrace();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(mockError0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      mockError0.initCause(sQLFeatureNotSupportedException0);
      mockError0.getCause();
      mockError0.getCause();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isBogusClass(class0);
      Class<Short> class1 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isConcrete(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      constructor0.getAnnotations();
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[4];
      accessibleObjectArray0[0] = (AccessibleObject) constructor0;
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      accessibleObjectArray0[1] = (AccessibleObject) null;
      constructor0.getGenericExceptionTypes();
      accessibleObjectArray0[2] = (AccessibleObject) constructor0;
      accessibleObjectArray0[3] = (AccessibleObject) constructor0;
      // Undeclared exception!
      try { 
        AccessibleObject.setAccessible(accessibleObjectArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      int int0 = 1234;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1234);
      coreXMLDeserializers_Std0.getKnownPropertyNames();
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.classOf(accessPattern0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<Void> class2 = Void.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("a{47z9=:2&RiE W");
      sQLNonTransientException0.setNextException(sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "entrySet", (Throwable) sQLNonTransientException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("entrySet", jsonMappingException1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "a1#+v6X09tII<wsVhU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // a1#+v6X09tII<wsVhU
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class1, class0, true);
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class2);
      Class<IOException> class3 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getParamCount();
      classUtil_Ctor0.getConstructor();
      Double double0 = new Double(0);
      ClassUtil.isJacksonStdImpl((Object) double0);
      Class<Integer> class4 = Integer.class;
      try { 
        ClassUtil.createInstance(class4, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      try { 
        ClassUtil.createInstance(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      typeBindings0.withUnboundVariable("' (of type ");
      SQLDataException sQLDataException0 = new SQLDataException("atU,x-+f{jylB3%1IG");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      mockRuntimeException0.toString();
      typeBindings0.equals(mockRuntimeException0);
      TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      Class<Character> class1 = Character.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ClassUtil.classNameOf(resolvedRecursiveType0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isJacksonStdImpl(class2);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Float float0 = new Float((-1.0));
      ClassUtil.classNameOf(float0);
      SQLWarning sQLWarning0 = new SQLWarning("3;ZpbG'Jd23");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("3;ZpbG'Jd23", "3;ZpbG'Jd23", Integer.MAX_VALUE, sQLWarning0);
      String string0 = "enum";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("enum");
      // Undeclared exception!
      try { 
        Charset.forName("Cannot figure out type for EnumSet (odd JDK platform?)");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Cannot figure out type for EnumSet (odd JDK platform?)
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<MockFileInputStream> class1 = MockFileInputStream.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      typeBindings0.withUnboundVariable("atU,x-+f{jylB3%1IG");
      SQLDataException sQLDataException0 = new SQLDataException("iR2k7g_");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLDataException0);
      mockRuntimeException0.toString();
      Class<Integer> class2 = Integer.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, 0);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getEmptyAccessPattern();
      typeBindings0.equals(accessPattern0);
      TypeBindings.createIfNeeded(class1, (JavaType[]) null);
      Class<Character> class3 = Character.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      Class<Character> class4 = Character.class;
      TypeBindings typeBindings1 = TypeBindings.create((Class<?>) class4, (List<JavaType>) stack0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, typeBindings1);
      ClassUtil.classNameOf((Object) null);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      ClassUtil.isJacksonStdImpl(class3);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, "net.sf.cglib.proxy.java.io.IOException", 27, hashMap0, throwable0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("iR2k7g_", "EAGER_DESERIALIZER_FETCH", map0);
      ClassUtil.throwIfRTE(sQLClientInfoException1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getGenericSuperclass(class0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      String string0 = "keyUniverse";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("keyUniverse");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      boolean boolean0 = true;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, mockPrintStream0, byteArray0, (byte)0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.isConcrete((Member) constructor1);
      Character character0 = new Character('U');
      ClassUtil.nonNull((Character) null, character0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = ClassUtil.nonNull(float0, float0);
      ClassUtil.isJacksonStdImpl((Object) float1);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, classUtil0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      iOContext0.allocBase64Buffer();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler1 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1672, objectMapper1, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("JSON", "JSON");
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      objectMapper1.disable(serializationFeature0);
      SQLWarning sQLWarning0 = new SQLWarning("JSON", "JSON", 1114111, sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.nonNullString((String) null);
      Class<Float> class0 = Float.class;
      ClassUtil.isConcrete(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.getConstructors(class0);
      String string0 = "Leading zeroes not allowed";
      ClassUtil.nonNullString("Leading zeroes not allowed");
      Class<MapType> class1 = MapType.class;
      ClassUtil.getDeclaredFields(class1);
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noClass0).toString();
      NoClass noClass1 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      ClassUtil.nonNull(noClass0, noClass1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);
      Class<HashMap> class2 = HashMap.class;
      Class<Short> class3 = Short.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      Class<HashMap> class4 = HashMap.class;
      Class<CollectionType> class5 = CollectionType.class;
      // Undeclared exception!
      try { 
        typeFactory2.constructMapType(class4, class1, class5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1465735075) return null for type [simple type, class com.fasterxml.jackson.databind.type.TypeBase]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.backticked("Sub-class %s (of class %s) must override method '%s'");
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forDeserialization((DeserializationConfig) null, (JavaType) null, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          JsonFactory jsonFactory0 = new JsonFactory();
          ObjectMapper objectMapper0 = new ObjectMapper();
          JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
          JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
          JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
          JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
          jsonFactory2.enable(jsonParser_Feature0);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor235.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getConstructors(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.getClassMethods(class1);
      String string0 = "/#%81UDS.abl-\\!X_L@";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("/#%81UDS.abl-!X_L@", "/#%81UDS.abl-!X_L@");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Q", "Q", sQLTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Cannot figure out type for EnumMap (odd JDK platform?)", "\"L*Hl^kX-jAd$>=dA", "\"L*Hl^kX-jAd$>=dA", (-4025));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "\"L*Hl^kX-jAd$>=dA", "Cannot figure out type for EnumMap (odd JDK platform?)", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLRecoverableException0.setStackTrace(stackTraceElementArray0);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // /#%81UDS.abl-!X_L@
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<String> class0 = String.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-2221));
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "PyHlzNX-n$hs!-D:HWD");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getConstructors(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, false);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotationsByType(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      constructor0.getParameterAnnotations();
      constructor0.getParameterCount();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getDeclaredAnnotations();
      constructor0.getGenericExceptionTypes();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      constructor0.toGenericString();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isNonStaticInnerClass(class1);
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.getGenericSuperclass(class0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<Double> class3 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.hasEnclosingMethod(class0);
      String string0 = "size";
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-550);
      longArray0[1] = (long) (-550);
      longArray0[2] = (long) (-550);
      longArray0[3] = (long) (-550);
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition", (String) null, (-550));
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("size", "size", (-550), longArray0, sQLDataException0);
      batchUpdateException0.getLargeUpdateCounts();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition", (String) null, batchUpdateException0);
      batchUpdateException0.getLocalizedMessage();
      sQLRecoverableException0.getStackTrace();
      sQLDataException0.getLocalizedMessage();
      sQLDataException0.initCause(batchUpdateException0);
      sQLRecoverableException0.getSuppressed();
      batchUpdateException0.getStackTrace();
      sQLRecoverableException0.spliterator();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0, "V`Nidmsd#g.X9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // V`Nidmsd#g.X9
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanDeserializerFactory0, false);
      PipedReader pipedReader0 = new PipedReader(93);
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0, 1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader1 = objectReader0.withFeatures(deserializationFeatureArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-2618));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, lineNumberReader0, objectReader1, charsToNameCanonicalizer1);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      Class<Short> class1 = Short.class;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, " is not a primitive type");
      SQLWarning sQLWarning0 = new SQLWarning("V!om2fqg\"tPgJ'X\"b|n", "com.fasterxml.jackson.databind.PropertyNamingStrategy$SnakeCaseStrategy", 240);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("DeserializationProblemHandler.handleWeirdNativeValue() for type %s returned value of type %s", " is not a primitive type", 0, sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "No (native) type id found when one was expected for polymorphic type handling", (Throwable) sQLInvalidAuthorizationSpecException0);
      String string0 = ClassUtil.getClassDescription(jsonMappingException0);
      assertEquals("`com.fasterxml.jackson.databind.JsonMappingException`", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.hasEnclosingMethod(class0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Short short0 = new Short((short)72);
      ClassUtil.quotedOr((Object) null, (String) null);
      Class<Float> class0 = Float.class;
      ClassUtil.isLocalType(class0, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "ZERO_LENGTH_ENUM_ARRAY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZERO_LENGTH_ENUM_ARRAY
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Short short0 = new Short((short)72);
      ClassUtil.quotedOr(short0, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.class;
      ClassUtil.isLocalType(class0, false);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.fasterxml.jackso");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = ClassUtil.nonNull(float0, float0);
      ClassUtil.isJacksonStdImpl((Object) float1);
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil classUtil0 = new ClassUtil();
      Class<String> class1 = String.class;
      ClassUtil.isBogusClass(class1);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, classUtil0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      bufferRecycler0.allocByteBuffer(2);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler1 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1672, objectMapper1, byteArrayBuilder0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, false, false);
      filteringGeneratorDelegate0.getCharacterEscapes();
      uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("JSON", "JSON");
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      objectMapper1.disable(serializationFeature0);
      SQLWarning sQLWarning0 = new SQLWarning("JSON", "JSON", 1114111, sQLRecoverableException0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, sQLWarning0, "JSON");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.sql.SQLWarning (of class com.fasterxml.jackson.databind.type.ArrayType) must override method 'JSON'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Short short0 = new Short((short)63);
      String string0 = null;
      ClassUtil.quotedOr(short0, (String) null);
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, short0, "DI&");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Short (of class java.lang.Boolean) must override method 'DI&'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom(collectionType0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }
}
