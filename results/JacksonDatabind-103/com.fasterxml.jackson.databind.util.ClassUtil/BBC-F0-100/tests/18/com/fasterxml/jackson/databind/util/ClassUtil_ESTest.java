/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 21:09:31 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import com.fasterxml.jackson.databind.util.RawValue;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Comparator;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<RuntimeException>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
      Class<Character> class1 = Character.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Character is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.classNameOf(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Integer> class1 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "6{Eval(Wrkcq.b P", "6{Eval(Wrkcq.b P");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Integer` from String \"6{Eval(Wrkcq.b P\": 6{Eval(Wrkcq.b P
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassUtil.backticked("203XZLc+8~O`:}2-j");
      Class<String> class0 = String.class;
      ClassUtil.isCollectionMapOrArray(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1482, 1482);
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory2.constructRawCollectionType(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      CollectionLikeType collectionLikeType0 = collectionType0.withTypeHandler(mockRuntimeException0);
      collectionLikeType0.hasGenericTypes();
      Class<?> class2 = ClassUtil.rawClass(collectionLikeType0);
      ClassUtil.emptyIterator();
      ClassUtil.isJacksonStdImpl(class2);
      Member member0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.getDeclaredFields(class0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      sQLInvalidAuthorizationSpecException0.initCause(sQLInvalidAuthorizationSpecException1);
      sQLInvalidAuthorizationSpecException0.getSuppressed();
      sQLInvalidAuthorizationSpecException0.getLocalizedMessage();
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = true;
      List<Class<?>> list0 = new Vector<Class<Character>>();
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.primitiveType(class1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      MockError mockError0 = new MockError("com.mchange.v2.c3p0.");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "java.lang.Chara0cter");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^:R8z=DlY,O");
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.allOf(class0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      ArrayType arrayType1 = arrayType0.withValueHandler(typeBindings0);
      Short short0 = new Short((short)96);
      Character character0 = new Character('P');
      ArrayType arrayType2 = ArrayType.construct((JavaType) arrayType1, typeBindings0, (Object) short0, (Object) character0);
      ArrayType arrayType3 = arrayType2.withStaticTyping();
      ClassUtil.rawClass(arrayType3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      enumSet0.clear();
      enumSet0.add(accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ClassUtil.rawClass(referenceType0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.reflect.AccessibleObject is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
      ClassUtil.wrapperType(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("net.sf.cglib.proxy.");
      ClassUtil.classOf(mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern0);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.nonNullString("$h\u0002JO`)`os'6:dB");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "$h\u0002JO`)`os'6:dB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // $h\u0002JO`)`os'6:dB
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType[] javaTypeArray0 = new JavaType[6];
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      // Undeclared exception!
      try { 
        typeFactory1.constructType((Type) class0, typeBindings0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier Mock for TypeModifier, hashCode: 1376205175 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$805297991) return null for type [simple type, class double]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
      TypeFactory.defaultInstance();
      JavaType[] javaTypeArray0 = new JavaType[6];
      Class<AccessibleObject> class1 = AccessibleObject.class;
      TypeBindings.createIfNeeded(class1, javaTypeArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes(class0, class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializerFactoryConfig0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      Class<IOException> class2 = IOException.class;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class2, jsonToken0, "");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_OBJECT: 
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.defaultValue(class0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("m", "ZDq_GfDN@WIQIt$");
      MockException mockException0 = new MockException("m", sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(mockException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("\"+e!LJ>n(!B[Ly_", "\"+e!LJ>n(!B[Ly_", (-1839), sQLRecoverableException0);
      ClassUtil.getRootCause(sQLInvalidAuthorizationSpecException0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<Byte> class1 = Byte.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.primitiveType(class1);
      ClassUtil.backticked("W<DwgZIa~(;@QU}jf:");
      // Undeclared exception!
      try { 
        BasicBeanDescription.forDeserialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("\"aHG`kDfm", "\"aHG`kDfm", sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLSyntaxErrorException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, ReferenceType> enumMap0 = new EnumMap<AccessPattern, ReferenceType>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler(accessPattern0);
      ReferenceType referenceType2 = referenceType1.withContentValueHandler(javaType0);
      ReferenceType referenceType3 = referenceType2.withContentTypeHandler((Object) null);
      referenceType1.getTypeName();
      ReferenceType referenceType4 = referenceType3.withTypeHandler(enumMap0);
      enumMap0.put(accessPattern0, referenceType4);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      Stack<NoClass> stack0 = new Stack<NoClass>();
      enumSet0.retainAll(stack0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.findSuperClasses((Class<?>) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<DataInputStream> class0 = DataInputStream.class;
      Class<Double> class1 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, list0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-322);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<AccessPattern> class2 = AccessPattern.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class2);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      objectReader0.with((InjectableValues) injectableValues_Std0);
      ByteArrayBuilder byteArrayBuilder0 = null;
      try {
        byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null, (-322));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.ByteArrayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.canBeABeanType(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<HashMap> class1 = HashMap.class;
      Class<NoClass> class2 = NoClass.class;
      Class<Object> class3 = Object.class;
      MapType mapType0 = typeFactory1.constructMapType(class1, class2, class3);
      MapLikeType mapLikeType0 = mapType0.withKeyValueHandler((Object) null);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class3, false);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isLocalType(class0, true);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isLocalType(class0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(filteringGeneratorDelegate0, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null, 8);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.createInstance(class0, true);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTransactionRollbackException0);
      MockThrowable mockThrowable0 = new MockThrowable(sQLSyntaxErrorException0);
      ClassUtil.throwIfError(mockThrowable0);
      IOContext iOContext0 = null;
      int int0 = 949;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      JavaType javaType0 = TypeFactory.unknownType();
      objectReader0.forType(javaType0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("nZ/5{A(K\bu", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getOuterClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperClasses(class1, (Class<?>) null, false);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte) (-105);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findSuperTypes(class0, class1, list0);
      Class<Short> class2 = Short.class;
      ClassUtil.findSuperTypes(class2, class2);
      Class<SimpleType> class3 = SimpleType.class;
      JavaType javaType0 = null;
      Class<RuntimeException> class4 = RuntimeException.class;
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) null, class4, false);
      TypeBindings typeBindings0 = TypeBindings.create(class3, list1);
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      javaTypeArray0[3] = null;
      javaTypeArray0[4] = null;
      javaTypeArray0[5] = null;
      javaTypeArray0[6] = null;
      javaTypeArray0[7] = null;
      javaTypeArray0[8] = null;
      // Undeclared exception!
      try { 
        CollectionType.construct(class3, typeBindings0, (JavaType) null, javaTypeArray0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.CollectionLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.canBeABeanType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      MapType mapType1 = mapType0.withTypeHandler(typeFactory0);
      ClassUtil.isJacksonStdImpl((Object) mapType1);
      Class<String> class2 = String.class;
      ClassUtil.findSuperTypes(class1, class2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.isLocalType(class0, false);
      ClassUtil.getConstructors(class0);
      Class<InputStream> class1 = InputStream.class;
      ClassUtil.primitiveType(class1);
      MockException mockException0 = new MockException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~GaK^:}");
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isConcrete((Member) constructor0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "~GaK^:}");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): ~GaK^:}
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.isConcrete((Member) constructor0);
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      EnumSet.of(accessPattern0, accessPattern0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getDeclaringClass(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      ClassUtil.findRawSuperTypes(class2, class3, false);
      ClassUtil.nameOf((Class<?>) null);
      ClassUtil.nullOrToString((Object) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "com.fasterxml.jackson.databind.ext.NioPathDeserializer");
      ClassUtil.throwRootCauseIfIOE(sQLTimeoutException0);
      ClassUtil.getEnclosingClass(class3);
      Class<Character> class4 = Character.class;
      ClassUtil.isLocalType(class4, true);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.getDeclaringClass(class0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getConstructors(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "net.sf.cglib.proxy.");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of null: net.sf.cglib.proxy.
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Byte byte0 = new Byte((byte)67);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isLocalType(class0, true);
      Class<Double> class1 = Double.class;
      ClassUtil.nameOf(class1);
      Class<Void> class2 = Void.TYPE;
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, ReferenceType> enumMap0 = new EnumMap<AccessPattern, ReferenceType>(class1);
      EnumMap<AccessPattern, ReferenceType> enumMap1 = new EnumMap<AccessPattern, ReferenceType>(enumMap0);
      EnumMap<AccessPattern, ReferenceType> enumMap2 = new EnumMap<AccessPattern, ReferenceType>(enumMap1);
      ClassUtil.findEnumType(enumMap2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<Object> class1 = Object.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, true);
      Boolean boolean0 = new Boolean(true);
      Class<Float> class2 = Float.class;
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isProxyType(class0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Annotation> class1 = Annotation.class;
      annotationMap0.get(class1);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.classNameOf(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getEnclosingClass(class1);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<DataInputStream> class0 = DataInputStream.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Argument #%d has no property name, is not Injectable: can not use as Creator %s";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Argument #%d has no property name, is not Injectable: can not use as Creator %s");
      ClassUtil.isNonStaticInnerClass(class1);
      Class<ReferenceType> class2 = ReferenceType.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ReferenceType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isNonStaticInnerClass(class0);
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.findSuperTypes(class1, class1, list0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("j6X#?hz/", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "j6X#?hz/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getEnclosingClass(class0);
      String string0 = "Failed to find default constructor of class ";
      ClassUtil.backticked("Failed to find default constructor of class ");
      Class<Float> class1 = Float.class;
      ClassUtil.canBeABeanType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      NoClass noClass0 = ClassUtil.createInstance(class0, true);
      ClassUtil.verifyMustOverride(class0, noClass0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapLikeType");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientConnectionException0, "net.sf.cglib.proxy.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // net.sf.cglib.proxy.
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern1, accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.isCollectionMapOrArray(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-1744674775), objectMapper2, (Writer) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      MockIOException mockIOException0 = new MockIOException("JSON", sQLTransientConnectionException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) writerBasedJsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Double> class0 = Double.class;
      ClassUtil.throwIfError((Throwable) null);
      MockError mockError0 = new MockError((Throwable) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) mockError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, true);
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeBindings.emptyBindings();
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ClassUtil.getClassDescription((Object) null);
      Integer integer0 = new Integer(685);
      ClassUtil.getClassDescription((Object) null);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("unknown", "unknown");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLTransientException sQLTransientException0 = new SQLTransientException("unknown", sQLNonTransientException0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.findEnumType((Enum<?>) accessPattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.emptyIterator();
      ClassUtil.nonNullString(", problem: ");
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.findSuperTypes(class1, class2, list0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Character character0 = new Character('[');
      Class<Character> class0 = Character.class;
      ClassUtil.hasClass(character0, class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.classOf((Object) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isJacksonStdImpl((Object) class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte) (-38);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.getClassDescription((Object) null);
      Integer integer0 = new Integer(3);
      ClassUtil.getClassDescription(integer0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("`java.lang.Integer`", "`java.lang.Integer`");
      SQLTransientException sQLTransientException0 = new SQLTransientException("v`4#(G`5f;;GkGyvEH;", sQLNonTransientException0);
      MockThrowable mockThrowable0 = new MockThrowable("v`4#(G`5f;;GkGyvEH;", sQLTransientException0);
      ClassUtil.throwRootCauseIfIOE(mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Class<IOException> class1 = IOException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ClassUtil.findSuperTypes((JavaType) resolvedRecursiveType0, (Class<?>) class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[7];
      annotationMapArray0[0] = annotationMap0;
      annotationMapArray0[1] = annotationMap0;
      annotationMapArray0[2] = annotationMap0;
      annotationMapArray0[3] = annotationMap0;
      annotationMapArray0[4] = annotationMap0;
      annotationMapArray0[5] = annotationMap0;
      annotationMapArray0[6] = annotationMap0;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, constructor0, annotationMap0, annotationMapArray0);
      Member member0 = annotatedConstructor0.getMember();
      ClassUtil.checkAndFixAccess(member0, false);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor1 = ClassUtil.findConstructor(class1, true);
      ClassUtil.isConcrete((Member) constructor1);
      Boolean boolean0 = new Boolean(true);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isProxyType(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.primitiveType(class2);
      Class<InputStream> class3 = InputStream.class;
      try { 
        ClassUtil.createInstance(class3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLDataException sQLDataException0 = new SQLDataException("J\"ZQd>bF{&5B,{J&kz\"", "J\"ZQd>bF{&5B,{J&kz\"", sQLNonTransientException0);
      sQLNonTransientException0.initCause(sQLDataException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0, "ut>dh#$E>?9Sf");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil.isConcrete((Member) constructor0);
      Boolean boolean0 = new Boolean(true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<NoClass>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Error> class0 = Error.class;
      SQLTransientException sQLTransientException0 = new SQLTransientException("non-static member class", "non-static member class");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[4];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 7, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCodec(objectMapper1);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) byteArrayBuilder0, (Exception) sQLTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransientException: non-static member class
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.isLocalType(class1, false);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.throwIfIOE((Throwable) null);
      Class<Character> class3 = Character.class;
      ClassUtil.getConstructors(class3);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("GH7BZFm");
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "GH7BZFm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      MockFile mockFile0 = new MockFile("!zARF5");
      MockFile mockFile1 = new MockFile(mockFile0, ",%}*qo aMx|");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)15;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1287, objectMapper1, mockFileOutputStream0, byteArray0, (byte) (-104), true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      DataTruncation dataTruncation0 = new DataTruncation(1009, true, false, 2, 3, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.DataTruncation: Data truncation
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "R#$zw}!CG!x1hhAm&v";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("!A(H.");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("R#$zw}!CG!x1hhAm&v", "!A(H.");
      sQLInvalidAuthorizationSpecException0.setNextException(sQLNonTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("R#$zw}!CG!x1hhAm&v", "R#$zw}!CG!x1hhAm&v", 1023, sQLInvalidAuthorizationSpecException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MapType> class0 = MapType.class;
      try { 
        objectMapper0.convertValue((Object) "!A(H.", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.type.MapType` (no Creators, like default construct, exist): no String-argument constructor/factory method to deserialize from String value ('!A(H.')
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isConcrete(class0);
      MockError mockError0 = new MockError((String) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, mockError0);
      SQLException sQLException0 = new SQLException((String) null, sQLNonTransientException0);
      ClassUtil.throwIfIOE(sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      ClassUtil.getGenericSuperclass(class0);
      ClassUtil.classNameOf(list0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Object object0 = new Object();
      ClassUtil.hasClass(object0, class0);
      ClassUtil.quotedOr(class0, (String) null);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Class<Float> class1 = Float.class;
      ClassUtil.findSuperTypes(class1, class0);
      Class<Short> class2 = Short.class;
      ClassUtil.getOuterClass(class2);
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class0);
      Class<NoClass> class1 = NoClass.class;
      Class<Error> class2 = Error.class;
      Class<MapType> class3 = MapType.class;
      List<JavaType> list1 = ClassUtil.findSuperTypes((JavaType) null, class3, true);
      TypeBindings typeBindings0 = TypeBindings.create(class2, list1);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(list0);
      ClassUtil.findSuperTypes(javaType0, class3, false);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      Long long0 = Long.valueOf(2269L);
      Long long1 = ClassUtil.nonNull(long0, long0);
      ClassUtil.classNameOf(long1);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.getDeclaredMethods(class0);
      Class<NoClass> class2 = NoClass.class;
      NoClass noClass0 = ClassUtil.createInstance(class2, true);
      ClassUtil.getClassDescription(noClass0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("qsrn X(*{{K~y*t$sU");
      MockIOException mockIOException0 = new MockIOException("hMK=<tVqz-4#)d", sQLNonTransientException0);
      sQLNonTransientException0.addSuppressed(mockIOException0);
      MockError mockError0 = new MockError("n6\"Wbo1u{E.-k/$S");
      sQLNonTransientException0.initCause(mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Object object0 = new Object();
      ClassUtil.isObjectOrPrimitive(class0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getOuterClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.isConcrete(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.createInstance(class2, true);
      Class<Error> class3 = Error.class;
      ClassUtil.nameOf(class3);
      Class<SimpleType> class4 = SimpleType.class;
      ClassUtil.getOuterClass(class4);
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.getDeclaredMethods(class2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Byte byte0 = new Byte((byte)67);
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.isLocalType(class0, true);
      Class<Double> class1 = Double.class;
      ClassUtil.nameOf(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "ZERO_LENGTH_ENUM_ARRAY");
      SQLDataException sQLDataException1 = new SQLDataException("T@mZ'LLSfRS'&ebLp", sQLDataException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "T@mZ'LLSfRS'&ebLp");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ZERO_LENGTH_ENUM_ARRAY", "array", sQLNonTransientException0);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("T@mZ'LLSfRS'&ebLp", "T@mZ'LLSfRS'&ebLp", 2, sQLNonTransientException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("array");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) dataOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) dataOutputStream0, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<Double> class1 = Double.TYPE;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Boolean boolean0 = new Boolean(true);
      ClassUtil.getPackageName(class1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) constructor0);
      Integer integer0 = new Integer(0);
      classUtil_Ctor0.getConstructor();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      LinkedHashSet<Module> linkedHashSet0 = new LinkedHashSet<Module>();
      LinkedList<Module> linkedList0 = new LinkedList<Module>(linkedHashSet0);
      ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<? extends Module>) linkedList0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
      JsonAutoDetect.Value.construct(propertyAccessor0, jsonAutoDetect_Visibility0);
      ObjectMapper objectMapper3 = objectMapper2.clearProblemHandlers();
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      MockIOException mockIOException0 = new MockIOException(sQLTimeoutException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): java.sql.SQLTimeoutException
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean.valueOf(true);
      MockIOException mockIOException0 = new MockIOException();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<NoClass> class0 = NoClass.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ClassUtil.rawClass(simpleType0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.findSuperTypes(class1, class1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Float float0 = new Float((-955.1649F));
      ClassUtil.getClassDescription((Object) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getOuterClass(class0);
      Class<String> class1 = String.class;
      ClassUtil.isConcrete(class1);
      Class<NoClass> class2 = NoClass.class;
      NoClass noClass0 = ClassUtil.createInstance(class2, true);
      Class<Integer> class3 = Integer.class;
      ClassUtil.hasClass(noClass0, class3);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Float float0 = new Float((-955.1649F));
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("java.lang.Number", "java.lang.Number");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.lang.Number", "java.lang.Number", sQLNonTransientException0);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("r|HQ", "r|HQ", Integer.MIN_VALUE, sQLIntegrityConstraintViolationException0);
      JsonGenerator jsonGenerator0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLNonTransientException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: r|HQ
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "Oo8^1^g*_fbywfv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Class<Long> class0 = Long.class;
      ClassUtil.isBogusClass(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.nameOf(class2);
      ClassUtil.getEnclosingClass(class1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<NoClass> class1 = NoClass.class;
      Class<Short> class2 = Short.TYPE;
      ClassUtil.findEnumType(class2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class2, "0VfJ*<1g!f-fwyu", "com.fasterxml.jackson.databind.cfg.ContextAttributes");
      ClassUtil.hasClass(jsonMappingException0, class1);
      ClassUtil.isCollectionMapOrArray(class0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Class<String> class0 = String.class;
      Class<Module> class1 = Module.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.isConcrete(class2);
      ClassUtil.isProxyType(class2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class2, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 505);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)112;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-1512867866), (ObjectCodec) null, byteArrayBuilder0, byteArray0, (-2505), false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      SQLException sQLException0 = new SQLException("", "");
      SQLWarning sQLWarning0 = new SQLWarning(sQLException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: java.sql.SQLException: 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.primitiveType(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.rawClass((JavaType) null);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<Void> class1 = Void.TYPE;
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.getClassMethods(class2);
      MockError mockError0 = new MockError();
      mockError0.fillInStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockError mockError0 = new MockError("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      StackTraceElement stackTraceElement0 = new StackTraceElement("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType", "/ m>g`WbK4?6]Dx)", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType", (-478));
      stackTraceElementArray0[0] = stackTraceElement0;
      mockError0.setStackTrace(stackTraceElementArray0);
      ClassUtil.classNameOf(mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType
         //
         verifyException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isJacksonStdImpl(class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      sQLSyntaxErrorException0.getLocalizedMessage();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(" (one known property: \"", "5^UnIM/fwG", sQLSyntaxErrorException0);
      MockError mockError0 = new MockError("keyUniverse", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Float float0 = new Float((-974.88794F));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.findEnumType(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.hasClass((Object) null, class1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Float float0 = new Float((-974.88794F));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.findEnumType(class0);
      Class<String> class1 = String.class;
      ClassUtil.hasClass(float0, class1);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.getClassDescription(class0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`short`", "`short`");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Yo");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientException0, "`short`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // `short`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = new Float((-973.6F));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, byteArrayOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(14, 100);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, true, true);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) filteringGeneratorDelegate0, "net.sf.cglib.proxy.java.lang.Void");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // net.sf.cglib.proxy.java.lang.Void
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.Void");
      ClassUtil.isBogusClass(class0);
      ClassUtil.nonNullString("Wd6[UK\"`byr.iekiH[");
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(mockRuntimeException0);
      sQLTimeoutException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Float float0 = new Float((-974.88794F));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.findEnumType(class0);
      Class<String> class1 = String.class;
      ClassUtil.hasClass(float0, class1);
      ClassUtil.findRawSuperTypes((Class<?>) null, (Class<?>) null, false);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1504));
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findEnumType(class2);
      Class<String> class3 = String.class;
      ClassUtil.hasClass(class1, class3);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.isConcrete(class1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.rawClass((JavaType) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1051));
      placeholderForType0.getContentType();
      ClassUtil.findSuperTypes((JavaType) null, (Class<?>) null, true);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<ArrayType> class1 = ArrayType.class;
      Class<IOException> class2 = IOException.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      Long long0 = new Long((-514L));
      JavaType javaType0 = resolvedRecursiveType0.withValueHandler(long0);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.findSuperTypes(javaType0, class3, true);
      Class<Integer> class4 = Integer.class;
      ClassUtil.canBeABeanType(class4);
      ClassUtil.nonNullString((String) null);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Double> class1 = Double.TYPE;
      Class<Long> class2 = Long.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.isConcrete(class0);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.getPackageName(class3);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.Void");
      ClassUtil.isBogusClass(class0);
      ClassUtil.nonNullString("Wd6[UK\"`byr.iekiH[");
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getGenericSuperclass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Class<ArrayType> class0 = ArrayType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.rawClass((JavaType) null);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, (Object) null, "b2iPCfbz*RMxIw/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "", (JavaType) null);
      virtualAnnotatedMember0.getMember();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isConcrete(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isObjectOrPrimitive(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.with(beanDeserializerFactory0);
      Class<Short> class2 = Short.class;
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.findEnumType(class3);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.findEnumType(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1652333975));
      placeholderForType0.getContentType();
      ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class0, true);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.canBeABeanType(class2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ClassUtil.nonNullString("7eYK/$Q!KQI@l");
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<String> class1 = String.class;
      ClassUtil.isLocalType(class1, true);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, true);
      ClassUtil.getGenericSuperclass(class1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Short> class0 = Short.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.emptyIterator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H");
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      MockIOException mockIOException0 = new MockIOException(sQLDataException0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-32);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockIOException0.toString();
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isConcrete(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.findEnumType(class1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1652333975));
      placeholderForType0.getContentType();
      ClassUtil.findSuperTypes((JavaType) null, class0, true);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float float0 = new Float((-973.6F));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.findEnumType(class0);
      Class<String> class1 = String.class;
      ClassUtil.hasClass(float0, class1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.getClassDescription(mockRuntimeException0);
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.isObjectOrPrimitive(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "AUTO_DETECT_FIELDS");
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.getDeclaredMethods(class2);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_QF8A_yOPHDj");
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileOutputStream0, "XXRh6VEL8#");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("_QF8A_yOPHDj", "_QF8A_yOPHDj", 1024, jsonMappingException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(" with format auto-detection: must be byte- not char-based");
      Locale locale0 = Locale.CHINESE;
      locale0.stripExtensions();
      String string0 = "non-static member class";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "non-static member class", objectArray0);
      sQLTimeoutException0.printStackTrace(printStream0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // XXRh6VEL8#
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Short> class0 = Short.TYPE;
      List<Class<?>> list0 = new Vector<Class<MapLikeType>>();
      ClassUtil.isConcrete(class0);
      Class<Float> class1 = Float.TYPE;
      ClassUtil.findEnumType(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.isConcrete(class2);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      ClassUtil.nonNullString((String) null);
      Class<Void> class0 = Void.class;
      ClassUtil.getPackageName(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.isJacksonStdImpl(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTransientException0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class0 = Double.class;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.findRawSuperTypes(class1, class1, false);
      ClassUtil.isConcrete(class0);
      Class<SimpleType> class2 = SimpleType.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      ClassUtil.getClassDescription(class1);
      ClassUtil.findClassAnnotations(class3);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector$1");
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getPackageName(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.isJacksonStdImpl(class1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector$1", (String) null);
      SQLTransientException sQLTransientException1 = (SQLTransientException)ClassUtil.throwIfError(sQLTransientException0);
      sQLTransientException1.setNextException(sQLTransientException0);
      ClassUtil.nullOrToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Short> class0 = Short.TYPE;
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.isConcrete(class0);
      SQLDataException sQLDataException0 = new SQLDataException("#?%", "]Q8yN");
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      Double double0 = new Double((-1113.3));
      ClassUtil.getClassDescription(double0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      ClassUtil.nonNull(accessPattern0, accessPattern1);
      ClassUtil.backticked("com.fasterxml.jackson.databind.jsonschema.JsonSchema");
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.classNameOf(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockException mockException0 = new MockException();
      MockIOException mockIOException0 = new MockIOException("`java.lang.Class`", mockException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("org.hibernate.proxy.", hashMap0, mockIOException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("Z!@BN8H", "org.hibernate.proxy.", sQLClientInfoException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientException0);
      SQLTransientException sQLTransientException1 = new SQLTransientException(batchUpdateException0);
      sQLTransientException1.getStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("`com.fasterxml.jackson.databind.jsonschema.JsonSchema`");
      ClassUtil.getRootCause(sQLTransientException1);
      SQLDataException sQLDataException0 = new SQLDataException("org.hibernate.proxy.", "com.fasterxml.jackson.core.io.CharacterEscapes", batchUpdateException0);
      sQLTransientException0.setNextException(sQLTransientException1);
      ClassUtil.getDeclaringClass(class0);
      Boolean.valueOf("com.fasterxml.jackson.core.io.CharacterEscapes");
      ClassUtil.nullOrToString("`com.fasterxml.jackson.databind.jsonschema.JsonSchema`");
      Class<Long> class1 = Long.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.findClassAnnotations(class0);
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      sQLException0.fillInStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, (-831), sQLException0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Field field0 = null;
      Class<Double> class1 = Double.class;
      ClassUtil.getClassMethods(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotation(class3);
      AnnotationMap annotationMap0 = AnnotationMap.of(class2, (Annotation) null);
      // Undeclared exception!
      try { 
        AnnotationMap.merge(annotationMap0, annotationMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotationMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.nameOf(class0);
      Class<Integer> class1 = Integer.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class2);
      Class<Boolean> class3 = Boolean.class;
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      String string0 = "";
      MockFile mockFile0 = new MockFile("`java.lang.Integer`", "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockIOException mockIOException0 = new MockIOException();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 1410);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "f{YP<nEvy02s'z2:";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) bufferedOutputStream0;
      objectArray0[3] = (Object) "f{YP<nEvy02s'z2:";
      objectArray0[4] = (Object) fileSystemHandling0;
      objectArray0[5] = (Object) mockIOException0;
      PrintStream printStream0 = mockPrintStream0.printf("f{YP<nEvy02s'z2:", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.printf("Zb).Y-\u0002e", objectArray0);
      mockIOException0.printStackTrace(printWriter0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) mockIOException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.nameOf(class1);
      ClassUtil.isJacksonStdImpl(class0);
      Class<Character> class2 = Character.class;
      ClassUtil.primitiveType(class2);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.findClassAnnotations(class0);
      SQLException sQLException0 = new SQLException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, (-831), sQLException0);
      SQLTransientException sQLTransientException1 = new SQLTransientException(sQLTransientException0);
      sQLTransientException1.getStackTrace();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      ClassUtil.getRootCause(sQLTimeoutException0);
      SQLDataException sQLDataException0 = new SQLDataException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType", sQLException0);
      sQLTimeoutException0.setNextException(sQLTransientException1);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getDeclaringClass(class1);
      Boolean boolean0 = Boolean.valueOf("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException");
      ClassUtil.nullOrToString(boolean0);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.getEnclosingClass(class2);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isProxyType(class0);
      String string0 = "Q{FP=k";
      Long long0 = new Long((-1L));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("A\"l|oPCNu-o", "Q{FP=k");
      MockException mockException0 = new MockException();
      mockException0.addSuppressed(sQLRecoverableException0);
      mockException0.addSuppressed(sQLRecoverableException0);
      sQLRecoverableException0.fillInStackTrace();
      sQLRecoverableException0.printStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(1.0F);
      ClassUtil.nullOrToString(float0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      Class<Float> class0 = Float.class;
      Class<Integer> class1 = Integer.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      Class<Float> class2 = Float.class;
      Class<? extends Enum<?>> class3 = ClassUtil.findEnumType(class2);
      ClassUtil.findSuperClasses(class0, class3, true);
      ClassUtil.findEnumType(class2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isJacksonStdImpl(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("A^$~|#", clientInfoStatus0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("A^$~|#", "A^$~|#", hashMap0);
      sQLClientInfoException0.getStackTrace();
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("elementType", clientInfoStatus1);
      sQLClientInfoException0.spliterator();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A^$~|#
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getEnclosingClass(class0);
      boolean boolean0 = false;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonFactory0.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ClassUtil.classNameOf((Object) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("entrySet", "keyUniverse", 1974);
      SQLWarning sQLWarning0 = new SQLWarning("keyUniverse", sQLRecoverableException0);
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException(sQLWarning0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(" in a value", ">X]%Z&B", (-2000), sQLRecoverableException1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(" in a value", ">X]%Z&B", (-2000), sQLFeatureNotSupportedException0);
      ClassUtil.getRootCause(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getClassDescription(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getEnclosingClass(class0);
      Class<String> class1 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class1, true);
      constructor0.getGenericExceptionTypes();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotations();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      Class<String> class2 = String.class;
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.isLocalType(class3, true);
      classUtil_Ctor1.getConstructor();
      Class<Object> class4 = Object.class;
      ClassUtil.findClassAnnotations(class4);
      ClassUtil.isBogusClass(class2);
      Float float0 = new Float(0.0F);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.isLocalType(class3, true);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.emptyIterator();
      Class<Short> class1 = Short.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Double> class2 = Double.class;
      ClassUtil.isConcrete(class2);
      Class<Float> class3 = Float.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.isNonStaticInnerClass(class3);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.findSuperClasses(class1, class1, false);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "entrySet";
      ClassUtil.backticked("entrySet");
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperClasses(class0, class1, true);
      BooleanNode.getTrue();
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      booleanNode0.asDouble();
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature mapperFeature0 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
      MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_SETTERS;
      MapperFeature mapperFeature2 = MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[4];
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeature1;
      mapperFeatureArray0[2] = mapperFeature2;
      mapperFeatureArray0[3] = mapperFeature0;
      ObjectMapper objectMapper1 = objectMapper0.disable(mapperFeatureArray0);
      ObjectNode objectNode0 = objectMapper1.createObjectNode();
      RawValue rawValue0 = new RawValue("Q#bh-1z\"<");
      objectNode0.putRawValue("Q#bh-1z\"<", rawValue0);
      objectNode0.putObject("Q#bh-1z\"<");
      Comparator<JsonNode> comparator0 = (Comparator<JsonNode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(com.fasterxml.jackson.databind.JsonNode.class) , any(com.fasterxml.jackson.databind.JsonNode.class));
      booleanNode0.equals(comparator0, (JsonNode) objectNode0);
      ClassUtil.classOf("Q#bh-1z\"<");
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isObjectOrPrimitive(class2);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isProxyType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<JsonMappingException> class1 = JsonMappingException.class;
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      ClassUtil.nonNullString("org.hibernate.proxy.java.lang.Integer");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("org.hibernate.proxy.java.lang.Integer");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("org.hibernate.proxy.java.lang.Integer", sQLTransactionRollbackException0);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLInvalidAuthorizationSpecException0);
      MockError mockError0 = new MockError(throwable0);
      ClassUtil.classOf(mockError0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MockException mockException0 = new MockException();
      mockException0.printStackTrace();
      mockException0.toString();
      MockIOException mockIOException0 = new MockIOException();
      ClassUtil.quotedOr(mockIOException0, "Q{FP=k");
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getClassMethods(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      Class<Annotation> class2 = Annotation.class;
      constructor0.getAnnotation(class2);
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      annotatedField0.getMember();
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 2);
      Class<Byte> class3 = Byte.class;
      classArray0[0] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[1] = class4;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findSingleArgConstructor(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.isLocalType(class1, false);
      Class<IOException> class2 = IOException.class;
      ClassUtil.nameOf(class2);
      ClassUtil.primitiveType(class1);
      Class<JsonMappingException> class3 = JsonMappingException.class;
      Class<JsonMappingException> class4 = JsonMappingException.class;
      ClassUtil.findSuperTypes(class3, class4);
      ClassUtil.findSuperTypes(class1, class0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getEnclosingClass(class0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      Class<Short> class1 = Short.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.isConcrete(class0);
      Class<Long> class2 = Long.class;
      ClassUtil.isNonStaticInnerClass(class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.findEnumType(class4);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.isObjectOrPrimitive(class0);
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ClassUtil.getDeclaredMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLDataException sQLDataException0 = new SQLDataException("ZERO_LENGTH_ENUM_ARRAY", "", sQLTransientException0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      sQLDataException0.printStackTrace((PrintWriter) mockPrintWriter0);
      sQLTransientException0.setNextException(sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (-8), sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("serialVersionUID", sQLInvalidAuthorizationSpecException0);
      sQLFeatureNotSupportedException0.spliterator();
      ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<String> class2 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class2, false);
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotation(class3);
      ClassUtil.getDeclaredMethods(class3);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      constructor0.getDeclaredAnnotations();
      Class<NoClass> class4 = NoClass.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.annotation.NoClass is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.isProxyType(class0);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector$1");
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getPackageName(class1);
      Class<Short> class2 = Short.TYPE;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.isJacksonStdImpl(class1);
      SQLTransientException sQLTransientException0 = new SQLTransientException("com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector$1", (String) null);
      Throwable throwable0 = ClassUtil.throwIfError(sQLTransientException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, "com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector$1
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperClasses(class1, class0, false);
      ClassUtil.quotedOr((Object) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Short> class1 = Short.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class1, class0, false);
      ClassUtil.getClassDescription(list0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      ClassUtil.isConcrete((Member) constructor0);
      Class<Object> class1 = Object.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      ClassUtil.nonNull(accessPattern0, accessPattern1);
      ClassUtil.backticked("com.fasterxml.jackson.databind.jsonschema.JsonSchema");
      Class<Object> class0 = Object.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.classNameOf(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Field field0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.emptyIterator();
      Class<Short> class1 = Short.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      Class<Double> class2 = Double.class;
      ClassUtil.isConcrete(class2);
      ClassUtil.nonNullString("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s");
      Class<MapLikeType> class3 = MapLikeType.class;
      ClassUtil.getPackageName(class3);
      ClassUtil.hasEnclosingMethod(class3);
      ClassUtil.isJacksonStdImpl(class3);
      SQLTransientException sQLTransientException0 = new SQLTransientException("I", "Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s");
      Throwable throwable0 = ClassUtil.throwIfError(sQLTransientException0);
      String string0 = "YB #HEe.67/;.{[f+i";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, "YB #HEe.67/;.{[f+i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YB #HEe.67/;.{[f+i
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLDataException sQLDataException0 = new SQLDataException("X8_9|$8Izf8mu2i[o", "Q8zDo}~gs1.QJ1", sQLTransientException0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      sQLDataException0.printStackTrace((PrintWriter) mockPrintWriter0);
      sQLTransientException0.setNextException(sQLDataException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "");
      sQLFeatureNotSupportedException0.spliterator();
      ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      ClassUtil.isJacksonStdImpl(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.findClassAnnotations(class1);
      Class<Object> class2 = Object.class;
      ClassUtil.isBogusClass(class2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1512867866));
      ClassUtil.nonNull((PlaceholderForType) null, placeholderForType0);
      ClassUtil.isJacksonStdImpl((Object) "p[z%KVG3#4\"Y");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<Float> class0 = Float.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.isProxyType(class1);
      ClassUtil.isLocalType(class1, false);
      Class<IOException> class2 = IOException.class;
      ClassUtil.nameOf(class2);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "ZERO_LENGTH_ENUM_ARRAY");
      SQLDataException sQLDataException1 = new SQLDataException("T@mZ'LLSfRS'&ebLp", sQLDataException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "T@mZ'LLSfRS'&ebLp");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("ZERO_LENGTH_ENUM_ARRAY", "array", sQLNonTransientException0);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("T@mZ'LLSfRS'&ebLp", "T@mZ'LLSfRS'&ebLp", 2, sQLNonTransientException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("array");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((DataOutput) dataOutputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) dataOutputStream0, (Exception) sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLDataException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Float float0 = new Float((-973.6F));
      ClassUtil.isJacksonStdImpl((Object) float0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<IOException> class0 = IOException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "INFER_PROPERTY_MUTATORS", "Va7~;5~O;!@<j4p4 L");
      MockIOException mockIOException0 = new MockIOException("enum", jsonMappingException0);
      ClassUtil.throwIfRTE(mockIOException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.io.IOException` from String \"INFER_PROPERTY_MUTATORS\": Va7~;5~O;!@<j4p4 L
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLDataException sQLDataException0 = new SQLDataException("Ufc+JLsj,n", (String) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "]");
      sQLDataException0.initCause(jsonMappingException0);
      SQLDataException sQLDataException1 = new SQLDataException("T@mZ'LLSfRS'&ebLp", sQLDataException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLDataException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Character` from number 0: ]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "enable");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // enable
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(classUtil_Ctor0._ctor);
      classUtil_Ctor1.getDeclaredAnnotations();
      ClassUtil.canBeABeanType(class0);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isNonStaticInnerClass(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      ClassUtil.nonNull(accessPattern0, accessPattern1);
      ClassUtil.backticked("com.fasterxml.jackson.databind.jsonschema.JsonSchema");
      Class<Object> class1 = Object.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.classNameOf(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"", "Xbc+9R#4m_a6rV9|", 1431);
      sQLTransientConnectionException0.getSuppressed();
      ClassUtil.throwIfError(sQLTransientConnectionException0);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "Rd~B+q<&M6{0]:)7#7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Character character0 = Character.valueOf('G');
      ClassUtil.quotedOr(character0, "keyUniverse");
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.findEnumType(class1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("keyUniverse");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("\"G\"", "\"G\"", ":/~;])u6['", 67);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(" (from class ", "\"exLyXWD6", "6mGwmlsJ;H4T:0Z(~C", (-1126));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("NULL", "\"G\"", ";t-", 67);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("s/1$rt?", "/db^JzY/>xfR", "5nT", (-274));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("B", ":/~;])u6['", "6mGwmlsJ;H4T:0Z(~C", 67);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("\"G\"", "}<or.+", (String) null, (-274));
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLNonTransientException0.setStackTrace(stackTraceElementArray0);
      mockPrintWriter0.print("hiQAaPoP#S");
      PrintWriter printWriter0 = mockPrintWriter0.append('5');
      sQLNonTransientException0.printStackTrace(printWriter0);
      ClassUtil.throwIfRTE(sQLNonTransientException0);
      Class<NoClass> class2 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class2, true);
      constructor0.getParameters();
      constructor0.getParameterAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.classOf((Object) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      String string0 = null;
      String string1 = "com.fasterxml.jackson.databind.PropertyNamingStrategy$PropertyNamingStrategyBase";
      int int0 = 2;
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement((String) null, "com.fasterxml.jackson.databind.PropertyNamingStrategy$PropertyNamingStrategyBase", "com.fasterxml.jackson.databind.PropertyNamingStrategy$PropertyNamingStrategyBase", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      Long long0 = new Long((-4363L));
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0, (Object) simpleType0, (Object) long0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, javaTypeArray0[1]);
      Float float0 = new Float(0.0F);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(float0);
      ArrayType.construct((JavaType) arrayType0, typeBindings0);
      Character character0 = Character.valueOf('(');
      ReferenceType referenceType2 = referenceType1.withContentTypeHandler(character0);
      ArrayType arrayType1 = ArrayType.construct((JavaType) referenceType2, typeBindings0);
      ReferenceType referenceType3 = referenceType2.withTypeHandler(arrayType1);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      referenceType3.refine(class1, (TypeBindings) null, simpleType0, javaTypeArray0);
      SimpleType simpleType1 = referenceType3.withValueHandler(javaTypeArray0[3]);
      ClassUtil.classOf(simpleType1);
      ClassUtil.nonNullString("NULL");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("<*ukz${PK}&0", "NULL", 116);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLRecoverableException0, "<*ukz${PK}&0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // <*ukz${PK}&0
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ClassUtil.backticked("c{ *");
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isLocalType(class0, true);
      Class<Short> class1 = Short.TYPE;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.getConstructors(class1);
      // Undeclared exception!
      try { 
        BasicBeanDescription.forSerialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isLocalType(class0, true);
      Class<Short> class1 = Short.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.getConstructors(class1);
      // Undeclared exception!
      try { 
        BasicBeanDescription.forSerialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.isLocalType(class0, true);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.getConstructors(class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      basicBeanDescription0.findProperties();
      classArray0[0] = class0;
      classArray0[1] = class0;
      // Undeclared exception!
      try { 
        basicBeanDescription0.getConstructors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      String string0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.reflect.AccessibleObject) must override method 'null'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.nameOf(class1);
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLDataException sQLDataException0 = new SQLDataException("ZERO_LENGTH_ENUM_ARRAY", "", sQLTransientException0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      sQLDataException0.printStackTrace((PrintWriter) mockPrintWriter0);
      sQLTransientException0.setNextException(sQLDataException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", 3, sQLTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("serialVersionUID", sQLInvalidAuthorizationSpecException0);
      sQLFeatureNotSupportedException0.spliterator();
      ClassUtil.throwIfRTE(sQLFeatureNotSupportedException0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.isJacksonStdImpl(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.isBogusClass(class0);
      ClassUtil.nonNull((PlaceholderForType) null, (PlaceholderForType) null);
      ClassUtil.isJacksonStdImpl((Object) class0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.backticked("0>Yfz#fQ`1P2|t+");
      Class<Integer> class1 = Integer.class;
      ClassUtil.getGenericInterfaces(class1);
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("M/3s)3v^:zGBO", "pN-h>LTet>s?%$");
      sQLWarning0.setNextException(sQLFeatureNotSupportedException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((String) null, sQLWarning0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("0>Yfz#fQ`1P2|t+", mockRuntimeException0);
      // Undeclared exception!
      try { 
        sQLTimeoutException0.forEach((Consumer<? super Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = false;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ClassUtil.nonNullString("7eYK/$Q!KQI@l");
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<String> class1 = String.class;
      ClassUtil.isLocalType(class1, true);
      classUtil_Ctor0.getConstructor();
      Class<MapLikeType> class2 = MapLikeType.class;
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotation(class3);
      ClassUtil.getDeclaredMethods(class2);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      constructor0.getDeclaredAnnotations();
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.isNonStaticInnerClass(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      ClassUtil.nonNull(accessPattern0, accessPattern1);
      String string0 = "com.fasterxml.jackson.databind.jsonschema.JsonSchema";
      ClassUtil.backticked("com.fasterxml.jackson.databind.jsonschema.JsonSchema");
      Class<Object> class1 = Object.class;
      ClassUtil.getOuterClass(class1);
      ClassUtil.classNameOf(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.ResolvedRecursiveType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<Float> class0 = Float.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.emptyIterator();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "ZERO_LENGTH_ENUM_ARRAY");
      SQLDataException sQLDataException1 = new SQLDataException("T@mZ'LLSfRS'&ebLp", sQLDataException0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.getDeclaredFields(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ClassUtil.backticked((String) null);
      ClassUtil.nonNullString("[null]");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ClassUtil.backticked((String) null);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.nameOf(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.nonNullString("[null]");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(deserializerFactoryConfig0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isNonStaticInnerClass(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.isProxyType(class1);
      ClassUtil.isLocalType(class1, false);
      Class<IOException> class2 = IOException.class;
      ClassUtil.nameOf(class2);
      Class<PlaceholderForType> class3 = PlaceholderForType.class;
      ClassUtil.isJacksonStdImpl(class3);
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("keyUniverse", "local/anonymous");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null, sQLTransientException0);
      batchUpdateException0.getNextException();
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.primitiveType(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "!rY&u/.T//XP]:B)L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // !rY&u/.T//XP]:B)L
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException();
      String string0 = "d`Tm'hQbYX'Y~bzI";
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1017;
      intArray0[2] = 0;
      Throwable throwable0 = ClassUtil.getRootCause(sQLDataException0);
      // Undeclared exception!
      try { 
        sQLDataException0.initCause(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Self-causation not permitted
         //
         verifyException("java.lang.Throwable", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Float float0 = new Float(1.0F);
      ClassUtil.nullOrToString(float0);
      Class<Object> class0 = Object.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.quotedOr(class0, "NULL");
      Class<Long> class1 = Long.class;
      Class<Object> class2 = Object.class;
      Class<Object> class3 = Object.class;
      Class<String> class4 = String.class;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        TypeBindings.create(class4, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.String with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      boolean boolean0 = false;
      ClassUtil.findConstructor(class0, false);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotatedConstructor annotatedConstructor0 = null;
      try {
        annotatedConstructor0 = new AnnotatedConstructor((TypeResolutionContext) null, (Constructor<?>) null, annotationMap1, (AnnotationMap[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null constructor not allowed
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedConstructor", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getEnclosingClass(class0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      int int0 = 73;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectReader objectReader1 = objectReader0.withoutRootName();
      Locale locale0 = Locale.US;
      objectReader1.with(locale0);
      MockFile mockFile0 = new MockFile((File) null, "JSON");
      String string0 = ";Ku3N-lF";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, ";Ku3N-lF");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ;Ku3N-lF
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ClassUtil.nonNullString("7eYK/$Q!KQI@l");
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getGenericExceptionTypes();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      constructor0.getAnnotations();
      classUtil_Ctor0.getParamCount();
      Class<String> class1 = String.class;
      ClassUtil.isLocalType(class1, true);
      classUtil_Ctor0.getConstructor();
      Class<MapLikeType> class2 = MapLikeType.class;
      Class<Annotation> class3 = Annotation.class;
      constructor0.getAnnotation(class3);
      ClassUtil.getDeclaredMethods(class2);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      constructor0.getDeclaredAnnotations();
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionLikeType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
