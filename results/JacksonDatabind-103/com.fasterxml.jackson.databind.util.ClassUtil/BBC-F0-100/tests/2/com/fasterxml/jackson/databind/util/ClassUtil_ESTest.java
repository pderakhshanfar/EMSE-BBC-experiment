/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 05:15:21 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.net.URI;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Spliterator;
import java.util.TreeSet;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isJacksonStdImpl(class0);
      System.setCurrentTimeMillis(1421L);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[8];
      MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.INFER_PROPERTY_MUTATORS;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.USE_STATIC_TYPING;
      mapperFeatureArray0[4] = mapperFeature4;
      MapperFeature mapperFeature5 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      mapperFeatureArray0[5] = mapperFeature5;
      MapperFeature mapperFeature6 = MapperFeature.ALLOW_COERCION_OF_SCALARS;
      mapperFeatureArray0[6] = mapperFeature6;
      MapperFeature mapperFeature7 = MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS;
      mapperFeatureArray0[7] = mapperFeature7;
      ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(decimalNode0);
      Class<String> class1 = String.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class1, jsonToken0, "eyN5:<WlaZ3EnMl6B");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_FLOAT: eyN5:<WlaZ3EnMl6B
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.isLocalType(class1, true);
      try { 
        Float.valueOf("8Rd?Sq2(KqTHxN<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod((Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isConcrete(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "java.lang.Character");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.Character
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("pa}`ex#m )UlQ{G");
      mockIOException0.toString();
      mockIOException0.getStackTrace();
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.isLocalType(class0, false);
      ClassUtil.defaultValue(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.defaultValue(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.getDeclaringClass(class1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isJacksonStdImpl(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float0 = new Float((float) 3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = Boolean.valueOf("z}&<+[`@ZQ>W$");
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("z}&<+[`@ZQ>W$");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3259, objectMapper1, mockFileOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(1, 3);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, (String) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.findConstructor(class0, false);
      String string0 = null;
      MockIOException mockIOException0 = new MockIOException((String) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonGenerator_Feature0);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "JSON", 1, 1);
      StringWriter stringWriter2 = stringWriter1.append('y');
      JsonGenerator jsonGenerator0 = jsonFactory4.createGenerator((Writer) stringWriter2);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.defaultValue(class0);
      Class<Byte> class1 = Byte.class;
      ClassUtil.getGenericInterfaces(class1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      Class<Long> class1 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, object0, "org.hibernate.proxy.com.fasterxml.jackson.databind.util.LinkedNode");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Integer (of class java.lang.Long) must override method 'org.hibernate.proxy.com.fasterxml.jackson.databind.util.LinkedNode'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.noneOf(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "aeTbv{#vZ1Cm6*U", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTyping();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper2, pipedOutputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-83);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, charset0);
      ObjectMapper objectMapper3 = new ObjectMapper((JsonFactory) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '(';
      charArray0[2] = '^';
      charArray0[3] = '\'';
      charArray0[4] = '*';
      charArray0[5] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-16842752), inputStreamReader0, objectMapper3, charsToNameCanonicalizer0, charArray0, (byte) (-83), 0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "Failed to instantiate class ");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) pipedOutputStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_TRUE: Failed to instantiate class 
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<String> class0 = String.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.findRawSuperTypes(class0, class0, true);
      MockException mockException0 = new MockException();
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", mockException0);
      mockException0.printStackTrace();
      mockException0.getLocalizedMessage();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLDataException0);
      ClassUtil.getRootCause(sQLIntegrityConstraintViolationException0);
      Class<Long> class1 = Long.class;
      Long long0 = new Long((-1902L));
      ClassUtil.verifyMustOverride(class1, long0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.findClassAnnotations(class2);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.isCollectionMapOrArray(class3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, " has no default (no arg) constructor");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         //  has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      boolean boolean0 = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "net.sf.cglib.proxy.");
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, true);
      Class<ClassNameIdResolver> class1 = ClassNameIdResolver.class;
      ClassUtil.findSuperTypes((Class<?>) null, class1, list0);
      ClassUtil.findRawSuperTypes(class1, class0, false);
      Class<Byte> class2 = Byte.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Byte is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, Integer> enumMap0 = new EnumMap<AccessPattern, Integer>(class0);
      ClassUtil.findEnumType(enumMap0);
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.findConstructor(class0, true);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<Object> class1 = Object.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper2 = objectMapper1.enable(serializationFeature0);
      ObjectMapper objectMapper3 = objectMapper2.disableDefaultTyping();
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility2 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility3 = JsonAutoDetect.Visibility.NONE;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility2, jsonAutoDetect_Visibility3, jsonAutoDetect_Visibility2);
      ObjectMapper objectMapper4 = objectMapper3.setDefaultVisibility(jsonAutoDetect_Value0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper5 = objectMapper4.enableDefaultTyping(objectMapper_DefaultTyping0);
      objectMapper5.convertValue((Object) jsonAutoDetect_Visibility0, class1);
      ClassUtil.findSuperTypes(class0, class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.isProxyType(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.canBeABeanType(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.getEnclosingClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short) (-2006));
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, objectMapper1, mockPrintStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(1, 1);
      SQLException sQLException0 = new SQLException("JSON", "JSON");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) filterOutputStream0, (Exception) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLException: JSON
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      ClassUtil.findSuperTypes(javaType0, (Class<?>) null, false);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<Float> class1 = Float.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<InputStream> class2 = InputStream.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) objectMapper_DefaultTyping0);
      ClassUtil.getOuterClass(class0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<MissingNode> class0 = MissingNode.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<AccessPattern> class0 = AccessPattern.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      NoClass noClass0 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      enumMap0.put(accessPattern0, noClass0);
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      NoClass noClass1 = mock(NoClass.class, new ViolatedAssumptionAnswer());
      enumMap0.put(accessPattern1, noClass1);
      ClassUtil.findEnumType(enumMap0);
      Class<Character> class1 = Character.TYPE;
      boolean boolean0 = new Boolean(true);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class0);
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      enumMap0.put(accessPattern0, (NoClass) null);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      ClassUtil.isConcrete(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      HashSet<Module> hashSet0 = new HashSet<Module>(1);
      ObjectMapper objectMapper2 = objectMapper1.registerModules((Iterable<? extends Module>) hashSet0);
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("JSON", class0, "JSON");
      try { 
        ClassUtil.throwAsMappingException(deserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.io.InputStream` from String \"JSON\": JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumMap<AccessPattern, NoClass> enumMap0 = new EnumMap<AccessPattern, NoClass>(class1);
      ClassUtil.findEnumType(enumMap0);
      Class<Long> class2 = Long.class;
      ClassUtil.findClassAnnotations(class2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "bp");
      ClassUtil.getDeclaringClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern0, accessPattern1, accessPattern1);
      enumSet0.clear();
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.isBogusClass(class0);
      Class<MapType> class1 = MapType.class;
      ClassUtil.canBeABeanType(class1);
      Class<Long> class2 = Long.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isNonStaticInnerClass(class0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Class<Double> class1 = Double.class;
      ClassUtil.getDeclaredFields(class1);
      SQLDataException sQLDataException0 = new SQLDataException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
      sQLDataException0.printStackTrace();
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      ClassUtil.isConcrete(class0);
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, javaType0, collectionLikeType0);
      MapLikeType mapLikeType1 = mapLikeType0.withContentTypeHandler("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType");
      MapLikeType mapLikeType2 = mapLikeType1.withTypeHandler(mapLikeType0);
      mapLikeType2.withKeyTypeHandler(mapLikeType1);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapLikeType2, (TypeBindings) null, (Object) class0, (Object) javaType0);
      arrayType0.getGenericSignature();
      ClassUtil.rawClass(arrayType0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ReferenceType", ":&m]ye39d|*RF}*?#~");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.String (of class com.fasterxml.jackson.databind.annotation.NoClass) must override method ':&m]ye39d|*RF}*?#~'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.backticked("java.util.Collection");
      Class<Float> class1 = Float.class;
      ClassUtil.isProxyType(class1);
      Class<ClassNameIdResolver> class2 = ClassNameIdResolver.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class2);
      Class<Short> class3 = Short.class;
      ClassUtil.findSuperTypes(class3, class2, list0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Cannot handle managed/back reference '");
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("~@Rln*+`qA-v", "", 3373);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 3373, sQLNonTransientException0);
      MockThrowable mockThrowable0 = new MockThrowable("4)fBFAVk*bC@\"eskVb&", sQLTransientException0);
      MockError mockError0 = new MockError("4)fBFAVk*bC@\"eskVb&", mockThrowable0);
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.emptyIterator();
      MockError mockError0 = new MockError("TQeY,/jZnTBq;");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Void> class0 = Void.class;
      ClassUtil.isBogusClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.findRawSuperTypes(class1, class1, true);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<NoClass> class0 = NoClass.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.isBogusClass(class0);
      ClassUtil.getEnclosingClass(class0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind.type", string0);
      
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<Short> class2 = Short.TYPE;
      ClassUtil.canBeABeanType(class2);
      Class<Character> class3 = Character.class;
      ClassUtil.findRawSuperTypes(class3, (Class<?>) null, false);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0);
      enumSet0.clear();
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.backticked("@gQ\"");
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockError mockError0 = new MockError();
      mockError0.getLocalizedMessage();
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(mockError0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      mockError0.initCause(throwable0);
      // Undeclared exception!
      ClassUtil.getRootCause(mockError0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class1, false);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, class1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 10, (ObjectCodec) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("e+~;\"XB8)UBx4U=", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, false);
      Locale locale0 = Locale.CANADA;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ReferenceType", objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 3, (ObjectCodec) null, printStream0, byteArray0, 3, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<MissingNode> class0 = MissingNode.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.findSuperClasses((Class<?>) null, (Class<?>) null, false);
      Class<AccessPattern> class1 = AccessPattern.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      javaTypeArray0[6] = javaType0;
      CollectionType.construct(class1, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[1]);
      // Undeclared exception!
      try { 
        BasicBeanDescription.forSerialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.isProxyType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassUtil.throwIfRTE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<IOException> class1 = IOException.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("java.lang.Character");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("-5m!Pl", "java.lang.Character", (-1744094291), mockRuntimeException0);
      SQLException sQLException0 = new SQLException("-5m!Pl", "java.lang.Character", sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-1654975209));
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 135, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("(AIu9BKX-", "(AIu9BKX-", 2, hashMap0, mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0, "java.io.IOException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "a)FQ'`>", sQLClientInfoException0);
      sQLClientInfoException0.initCause(sQLNonTransientConnectionException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0, (String) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double double0 = new Double((-608.810143582));
      ClassUtil.nonNull((Double) null, (Double) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      MockError mockError0 = new MockError((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 9;
      intArray0[1] = (-1244651605);
      intArray0[2] = 8;
      intArray0[3] = (-605166913);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("T", "T", intArray0);
      MockIOException mockIOException0 = new MockIOException("A!cl", batchUpdateException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type org.evosuite.runtime.mock.java.io.MockIOException): A!cl
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "P[dat";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("P[dat", "P[dat", (-1558));
      String string1 = "com.fasterxml.jackson.databind.cfg.MutableConfigOverride";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.databind.cfg.MutableConfigOverride", "P[dat", (-1558), sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.initCause(sQLFeatureNotSupportedException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLIntegrityConstraintViolationException0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ClassUtil.getOuterClass(class0);
      Class<Character> class1 = Character.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.getOuterClass(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getGenericInterfaces(class1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(" (from class ");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException:  (from class 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isConcrete(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class1 = Annotation.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withTypeHandler(collectionLikeType0);
      collectionLikeType2.isTypeOrSubTypeOf(class1);
      CollectionLikeType collectionLikeType3 = collectionLikeType2.withContentValueHandler(typeFactory0);
      ClassUtil.rawClass(collectionLikeType3);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(collectionLikeType2, "z7Ae\"");
      ClassUtil.throwIfRTE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.canBeABeanType(class0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getConstructors(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isLocalType(class2, true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Void> class1 = Void.class;
      ClassUtil.findClassAnnotations(class1);
      Class<IOException> class2 = IOException.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.isBogusClass(class2);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Void> class1 = Void.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-477279648));
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class2, (TypeBindings) null, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0);
      Integer integer0 = new Integer(0);
      placeholderForType0.getInterfaces();
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, (TypeBindings) null, (Object) integer0, (Object) class2);
      TypeBindings typeBindings0 = arrayType0.getBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler(class0);
      Class<CollectionLikeType> class3 = CollectionLikeType.class;
      ClassUtil.findSuperTypes(javaType0, class3, true);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.findClassAnnotations(class0);
      Class<MissingNode> class1 = MissingNode.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      Class<Character> class2 = Character.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      ClassUtil.nonNullString("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionType");
      ClassUtil.nameOf(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getEnclosingClass(class3);
      Class<NoClass> class4 = NoClass.class;
      ClassUtil.getPackageName(class4);
      Class<IOException> class5 = IOException.class;
      ClassUtil.getEnclosingClass(class5);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isBogusClass(class0);
      ClassUtil.backticked(">\"_.~h0niL");
      Class<ArrayType> class1 = ArrayType.class;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class2, (JavaType) referenceType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      resolvedRecursiveType0.getSelfReferencedType();
      Class<Void> class3 = Void.class;
      ClassUtil.findSuperTypes((JavaType) null, class3, false);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassUtil.isJacksonStdImpl((Object) "\"n");
      Boolean boolean0 = new Boolean(true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("\"n");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockException mockException0 = new MockException();
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Double double0 = new Double((-608.810143582));
      ClassUtil.nonNull((Double) null, (Double) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockError mockError0 = new MockError((String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(mockError0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, 8, jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientException0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Double double0 = new Double((-608.810143582));
      ClassUtil.nonNull((Double) null, double0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaringClass(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ClassUtil.emptyIterator();
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.throwIfError((Throwable) null);
      ClassUtil.isJacksonStdImpl((Object) null);
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<k(DwLNe1K>8a(!");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ClassUtil.createInstance(class0, true);
      ClassUtil.getPackageName(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.deserializerModifiers();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null);
      jsonMappingException0.getLocalizedMessage();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) mockRuntimeException0, "<k(DwLNe1K>8a(!");
      ClassUtil.getRootCause(jsonMappingException0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getDeclaredFields(class0);
      System.setCurrentTimeMillis(9223372036854775807L);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassMethods(class0);
      ClassUtil.getClassMethods(class0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      ClassUtil.throwIfRTE(sQLClientInfoException0);
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      AccessPattern accessPattern1 = AccessPattern.DYNAMIC;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern1);
      ClassUtil.findEnumType(enumSet0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "Short", "com.fasterxml.jackson.databind.node.BooleanNode");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Short", jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(sQLFeatureNotSupportedException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.annotation.NoClass` from String \"Short\": com.fasterxml.jackson.databind.node.BooleanNode
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockError mockError0 = new MockError();
      Throwable throwable0 = mockError0.fillInStackTrace();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0);
      mockRuntimeException0.getSuppressed();
      mockError0.getMessage();
      mockError0.initCause(throwable0);
      StackTraceElement[] stackTraceElementArray0 = mockRuntimeException0.getStackTrace();
      mockRuntimeException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "com.fasterxml.jackson.databind.ser.std.NumberSerializer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<String> class1 = String.class;
      ClassUtil.getOuterClass(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.", "net.sf.cglib.proxy.java.lang.StackTraceElement", (-4616), (Throwable) null);
      ClassUtil.throwIfError(sQLNonTransientException0);
      ClassUtil.throwIfIOE((Throwable) null);
      ClassUtil.primitiveType(class0);
      ClassUtil.emptyIterator();
      Class<Float> class2 = Float.class;
      ClassUtil.getDeclaredFields(class2);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException("49s)P6lce@<", "D9lH8/@k@");
      ClassUtil.throwIfError(sQLNonTransientException1);
      ClassUtil.primitiveType(class1);
      ClassUtil.isProxyType(class1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Byte> class0 = Byte.class;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null, (-6));
      MockIOException mockIOException0 = new MockIOException(sQLTransactionRollbackException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null);
      ClassUtil.throwIfError(sQLTransactionRollbackException0);
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Byte> class0 = Byte.class;
      ClassUtil.getClassMethods(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.isProxyType(class1);
      ClassUtil.primitiveType(class0);
      ClassUtil.isProxyType(class1);
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null, "non-static member class", (-840), (Throwable) null);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null, sQLIntegrityConstraintViolationException0);
      MockIOException mockIOException0 = new MockIOException((String) null, sQLWarning0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl1, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Byte> class0 = Byte.class;
      ClassUtil.getClassMethods(class0);
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.isJacksonStdImpl(class0);
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.getConstructors(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      ClassUtil.isNonStaticInnerClass(class0);
      Class<Float> class3 = Float.class;
      ClassUtil.findSuperTypes(class0, class3, list0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Byte> class0 = Byte.class;
      ClassUtil.getClassMethods(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.isProxyType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("j&=E` ?{ $ga8|(", "", (-2760), (Throwable) null);
      sQLNonTransientException0.getLocalizedMessage();
      Throwable throwable0 = ClassUtil.throwIfError(sQLNonTransientException0);
      ClassUtil.throwIfIOE(throwable0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.primitiveType(class1);
      ClassUtil.emptyIterator();
      ClassUtil.getDeclaredFields(class1);
      ClassUtil.throwIfError((Throwable) null);
      Class<InputStream> class2 = InputStream.class;
      ClassUtil.primitiveType(class2);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.isProxyType(class3);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassUtil.backticked("44wyo");
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unknown");
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<String> class1 = String.class;
      ClassUtil.createInstance(class1, false);
      Class<CollectionType> class2 = CollectionType.class;
      ClassUtil.getConstructors(class2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassUtil.nonNullString("[44wyo");
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unknown");
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
      Class<Object> class0 = Object.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Float> class1 = Float.class;
      ClassUtil.getDeclaredFields(class1);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[44wyo");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("^v`Tm:,Ms>>MWQwj ", "[44wyo");
      sQLTransientException0.getSuppressed();
      sQLRecoverableException0.initCause(sQLTransientException0);
      sQLRecoverableException0.getSuppressed();
      ClassUtil.throwIfIOE(sQLRecoverableException0);
      Short short0 = new Short((short)500);
      ClassUtil.nullOrToString(short0);
      ClassUtil.isProxyType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, beanProperty_Bogus0, "abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.BeanProperty$Bogus (of class java.lang.Object) must override method 'abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.lang.Byte");
      mockPrintStream0.append('%');
      Class<String> class0 = String.class;
      ClassUtil.createInstance(class0, true);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getClassMethods(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getClassMethods(class0);
      ClassUtil.primitiveType(class0);
      Class<Double> class2 = Double.class;
      ClassUtil.isProxyType(class2);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.isProxyType(class3);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Byte> class0 = Byte.class;
      ClassUtil.getClassMethods(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.primitiveType(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Byte> class0 = Byte.class;
      ClassUtil.getClassMethods(class0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.getTypeParameters();
      Class<Annotation> class1 = Annotation.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      arrayList0.remove((Object) class0);
      arrayList0.trimToSize();
      TypeBindings typeBindings1 = TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      Class<Object> class2 = Object.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings1);
      ClassUtil.getClassDescription(typeBindings0);
      Class<ResolvedRecursiveType> class3 = ResolvedRecursiveType.class;
      ClassUtil.getGenericInterfaces(class3);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.canBeABeanType(class0);
      Class<Float> class1 = Float.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.hasClass((Object) null, (Class<?>) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ClassUtil.getPackageName(class1);
      Class<Void> class2 = Void.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.Void is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassMethods(class0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      Class<Object> class1 = Object.class;
      ClassUtil.findConstructor(class1, true);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.findConstructor(class0, true);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassMethods(class0);
      Class<SimpleModule> class1 = SimpleModule.class;
      ClassUtil.getClassMethods(class1);
      Class<SimpleType> class2 = SimpleType.class;
      Class<Float> class3 = Float.class;
      ClassUtil.getGenericSuperclass(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.isProxyType(class4);
      Class<ArrayType> class5 = ArrayType.class;
      ClassUtil.findConstructor(class5, true);
      Class<String> class6 = String.class;
      ClassUtil.createInstance(class6, false);
      ClassUtil.getConstructors(class2);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.getClassMethods(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassUtil.classNameOf((Object) null);
      Class<Float> class0 = Float.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class1 = Object.class;
      MockError mockError0 = new MockError();
      objectMapper0.convertValue((Object) mockError0, class1);
      Boolean boolean0 = new Boolean(true);
      Class<Double> class2 = Double.class;
      ClassUtil.hasEnclosingMethod(class2);
      ClassUtil.throwIfIOE(mockError0);
      ClassUtil.isObjectOrPrimitive(class1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class1 = Object.class;
      MockError mockError0 = new MockError();
      objectMapper0.convertValue((Object) mockError0, class1);
      Boolean boolean0 = new Boolean(true);
      Class<Module> class2 = Module.class;
      ClassUtil.isJacksonStdImpl(class2);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, "java.lang.Character");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getClassMethods(class0);
      Double double0 = new Double((-608.810143582));
      ClassUtil.nonNull(double0, double0);
      Float float0 = new Float(1.0F);
      Class<Float> class1 = Float.class;
      ClassUtil.hasClass(float0, class1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getGenericSuperclass(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getPackageName(class1);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.isLocalType(class2, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Double double0 = new Double(3);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(double0);
      ObjectReader objectReader1 = objectReader0.forType(class0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.io");
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-605166913), objectReader1, mockPrintStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 57343;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "\"_c\"p", intArray0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.BatchUpdateException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.nonNullString("primitive");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      int[] intArray0 = new int[8];
      intArray0[0] = (-729690785);
      intArray0[1] = (-477279648);
      intArray0[2] = 101;
      intArray0[3] = 1115;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("primitive", "org.hibernate.proxy.java.lang.Character", "primitive", 600);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("serialization type ", "net.sf.cglib.proxy.sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl", "java.lang.StackTrac", 1115);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("java.lang.StackTrac", "; failed to set access: ", "S`UEZE@ML9e)_W$z", 101);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("GAS", "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector", "java.lang.StackTrac", (-477279648));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("; failed to set access: ", "net.sf.cglib.proxy.sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl", "o|*?", (-729690785));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("o|*?", "org.hibernate.proxy.com.fasterxml.jackson.databind.node.MissingNode", ";#KU Q~DY1#:-", 91);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("DEGzQ #tf", "org.hibernate.proxy.java.lang.Character", "S`UEZE@ML9e)_W$z", 101);
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("_", "Failed to find default constructor of class ", "primitive", (-477279648));
      stackTraceElementArray0[7] = stackTraceElement7;
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      intArray0[4] = 995;
      intArray0[5] = 1579;
      sQLTimeoutException0.getStackTrace();
      intArray0[6] = 8;
      intArray0[7] = 2105;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-65);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassMethods(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      Class<String> class2 = String.class;
      ClassUtil.findClassAnnotations(class2);
      Class<Void> class3 = Void.class;
      ClassUtil.isLocalType(class3, true);
      Class<Module> class4 = Module.class;
      ClassUtil.isConcrete(class4);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassMethods(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isLocalType(class2, true);
      Double double0 = new Double(691.2448668);
      Double double1 = new Double(691.2448668);
      Double double2 = ClassUtil.nonNull(double0, double1);
      ClassUtil.hasClass(double2, class0);
      ClassUtil.throwIfRTE((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2285, 1054);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, javaType0, javaType0);
      Character.valueOf('\\');
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      ClassUtil.rawClass(mapLikeType0);
      Class<InputStream> class1 = InputStream.class;
      ClassUtil.isCollectionMapOrArray(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.findClassAnnotations(class2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassMethods(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.isLocalType(class0, true);
      ClassUtil.nameOf((Class<?>) null);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.hasEnclosingMethod(class3);
      Class<Object> class4 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class4);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withValueHandler((Object) null);
      ReferenceType referenceType2 = referenceType1.withContentTypeHandler(class2);
      SimpleType simpleType1 = referenceType2.withTypeHandler((Object) null);
      ClassUtil.quotedOr(simpleType1, "L");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Class<Object> class0 = Object.class;
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassMethods(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getGenericSuperclass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.findEnumType((Enum<?>) objectMapper_DefaultTyping0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Character> class0 = Character.TYPE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactoryConfig0, class0);
      JsonMappingException jsonMappingException1 = ClassUtil.nonNull(jsonMappingException0, jsonMappingException0);
      ClassUtil.isJacksonStdImpl((Object) deserializerFactory0);
      ClassUtil.nullOrToString(jsonMappingException1);
      ClassUtil.isProxyType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "com.fasterxml.jackson.databind.exc.InvalidFormatException@0000000007");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.exc.InvalidFormatException@0000000007
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.nameOf(class0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassMethods(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.getEnclosingClass(class1);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isLocalType(class2, true);
      Double double0 = new Double(691.2448668);
      Double double1 = new Double(691.2448668);
      Double double2 = ClassUtil.nonNull(double0, double1);
      ClassUtil.hasClass(double2, class0);
      ClassUtil.classOf((Object) null);
      ClassUtil.canBeABeanType(class1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaringClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getPackageName(class1);
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.getEnclosingClass(class2);
      Class<Character> class3 = Character.class;
      ClassUtil.hasEnclosingMethod(class3);
      Class<InputStream> class4 = InputStream.class;
      ClassUtil.isNonStaticInnerClass(class4);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory jsonFactory4 = jsonFactory3.setRootValueSeparator("'Hh,Jr:,Nya1id5[");
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory5 = jsonFactory4.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory6 = jsonFactory5.disable(jsonParser_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory7 = jsonFactory6.enable(jsonParser_Feature1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      BufferRecycler bufferRecycler0 = jsonFactory3._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      JsonGenerator jsonGenerator0 = jsonFactory7.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(placeholderForType0, class0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionLikeType` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.type.PlaceholderForType`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Byte> class1 = Byte.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("(n&g&SE3J^Va26;q ", class1, "(n&g&SE3J^Va26;q ");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Byte` from String \"(n&g&SE3J^Va26;q \": (n&g&SE3J^Va26;q 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Character> class0 = Character.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactoryConfig0, class0);
      ClassUtil.nonNull(jsonMappingException0, jsonMappingException0);
      ClassUtil.isJacksonStdImpl((Object) deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-65);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 14, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 0, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) byteArrayOutputStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Character` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Character> class0 = Character.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactoryConfig0, class0);
      ClassUtil.nonNull(jsonMappingException0, jsonMappingException0);
      ClassUtil.isJacksonStdImpl((Object) deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class1 = Object.class;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
      objectMapper1.convertValue((Object) jsonGenerator_Feature0, class1);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ClassUtil.emptyIterator();
      MockError mockError0 = new MockError();
      mockError0.getMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.CLOSE_CLOSEABLE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[3];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      SerializationFeature serializationFeature1 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature1, true);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      ObjectMapper objectMapper4 = objectMapper3.enable(jsonParser_FeatureArray0);
      Class<Object> class0 = Object.class;
      objectMapper4.convertValue((Object) serializationFeature0, class0);
      Boolean boolean0 = new Boolean(true);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaringClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getPackageName(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getName();
      constructor0.getDeclaredAnnotations();
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      Class<SimpleType> class3 = SimpleType.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class0, class3);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType0, mapType0);
      JavaType javaType0 = referenceType0.withContentType(mapType0);
      mapType0.withContentType(javaType0);
      MapType mapType1 = mapType0.withContentValueHandler(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(mapType1, "unknown", "java.lang.String");
      ClassUtil.throwIfRTE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<MissingNode> class0 = MissingNode.class;
      ClassUtil.findSuperTypes(class0, class0);
      MissingNode missingNode0 = MissingNode.getInstance();
      missingNode0.isNumber();
      missingNode0.binaryValue();
      missingNode0.isTextual();
      missingNode0.findPath("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType");
      ClassUtil.classNameOf(missingNode0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ClassUtil.getClassDescription(missingNode0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("`com.fasterxml.jackson.databind.node.MissingNode`", "`com.fasterxml.jackson.databind.node.MissingNode`", (-740));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sQLTransientException0.getLocalizedMessage();
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLTransientException0);
      Class<String> class1 = String.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.isProxyType(class0);
      ClassUtil.getRootCause(throwable0);
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(2, true, true, 1054, 1054);
      DataTruncation dataTruncation1 = (DataTruncation)ClassUtil.throwRootCauseIfIOE(dataTruncation0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2, 1054);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      MapLikeType mapLikeType0 = typeFactory1.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(dataTruncation1);
      Character character0 = Character.valueOf('\\');
      MapLikeType mapLikeType2 = mapLikeType1.withTypeHandler(character0);
      ClassUtil.findSuperTypes((JavaType) mapLikeType2, (Class<?>) class0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2539);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) dataTruncation1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaringClass(class0);
      Class<Boolean> class1 = Boolean.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Long> class0 = Long.class;
      ClassUtil.getDeclaredFields(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.isProxyType(class1);
      ClassUtil.classNameOf(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(placeholderForType0, placeholderForType0, placeholderForType0);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class2, (JavaType) mapLikeType0, (JavaType) placeholderForType0);
      MapType mapType1 = mapType0.withKeyValueHandler(typeFactory0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapType1, typeBindings0, (Object) class0, (Object) class1);
      ClassUtil.findSuperTypes((JavaType) arrayType0, (Class<?>) class0, false);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.getGenericSuperclass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      Class<IOException> class2 = IOException.class;
      ClassUtil.findSuperClasses(class2, class2, false);
      Boolean boolean0 = new Boolean(true);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getName();
      constructor0.getDeclaredAnnotations();
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      Class<SimpleType> class3 = SimpleType.class;
      Class<Boolean> class4 = Boolean.class;
      Class<Integer> class5 = Integer.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class4, class5);
      Class<Float> class6 = Float.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) mapType0;
      javaTypeArray0[1] = (JavaType) mapType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class3, javaTypeArray0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class6, typeBindings0);
      mapType0.withContentValueHandler(resolvedRecursiveType0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(mapType0, "java.lang.String", "Y=/Zg+^bR");
      ClassUtil.throwIfRTE(jsonMappingException0);
      Class<Short> class7 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class6, class7, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ClassUtil.nonNullString("44JM{Q?%8f");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      ClassUtil.emptyIterator();
      Class<MapType> class0 = MapType.class;
      ClassUtil.getOuterClass(class0);
      ClassUtil.nonNullString("N?");
      Class<Integer> class1 = Integer.class;
      ClassUtil.getDeclaredMethods(class1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.emptyIterator();
      ClassUtil.quotedOr(class0, "pXIPc2<Is0:o/rO");
      ClassUtil.findSuperClasses(class1, class1, true);
      Boolean boolean0 = new Boolean(true);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, true);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getPackageName(class0);
      ClassUtil.getDeclaringClass(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.canBeABeanType(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.findRawSuperTypes(class2, (Class<?>) null, false);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(2, true, true, 1054, 96);
      assertNotNull(dataTruncation0);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      
      DataTruncation dataTruncation1 = (DataTruncation)ClassUtil.throwRootCauseIfIOE(dataTruncation0);
      assertNotNull(dataTruncation1);
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation1.getSQLState());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation1.toString());
      assertEquals("Data truncation", dataTruncation1.getMessage());
      assertEquals(0, dataTruncation1.getErrorCode());
      assertSame(dataTruncation0, dataTruncation1);
      assertSame(dataTruncation1, dataTruncation0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2285, 1054);
      assertNotNull(lRUMap0);
      
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      MapLikeType mapLikeType0 = typeFactory1.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(dataTruncation1);
      Character character0 = Character.valueOf('\\');
      MapLikeType mapLikeType2 = mapLikeType1.withTypeHandler(character0);
      ClassUtil.findSuperTypes((JavaType) mapLikeType2, (Class<?>) class0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      ClassUtil.nonNull((NoClass) null, (NoClass) null);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 96, sequenceInputStream0, objectMapper0, byteQuadsCanonicalizer0, (byte[]) null, 2, 2285, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, true);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.createInstance((DeserializationConfig) null, filteringParserDelegate0, injectableValues_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("[null]");
      ClassUtil.throwIfRTE(sQLTransientException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Boolean> class2 = Boolean.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.getEnclosingClass(class2);
      ClassUtil.isLocalType(class1, false);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.isBogusClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "IfTJND^&_:o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      constructor0.getTypeParameters();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor1.getParamCount();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor1.getDeclaredAnnotations();
      classUtil_Ctor1.getParameterAnnotations();
      classUtil_Ctor1.getDeclaredAnnotations();
      Integer integer0 = new Integer((-8));
      classUtil_Ctor0.getParameterAnnotations();
      Class<MapType> class2 = MapType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.isConcrete((Member) constructor1);
      Class<Object> class3 = Object.class;
      ClassUtil.findSuperClasses(class0, class3, true);
      ClassUtil.canBeABeanType(class3);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.emptyIterator();
      ClassUtil.quotedOr(class0, "pXIPc2<Is0:o/rO");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "\"class java.lang.Character\"", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "fma:", sQLNonTransientConnectionException0);
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Integer integer0 = new Integer(0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.nonNullString("pXIPc2<Is0:o/rO");
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      ClassUtil.throwIfRTE(sQLTransactionRollbackException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, constructor0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class2 = Object.class;
      objectMapper0.convertValue((Object) classUtil_Ctor0, class2);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Class<Double> class3 = Double.TYPE;
      ClassUtil.isCollectionMapOrArray(class3);
      ClassUtil.findEnumType((Enum<?>) objectMapper_DefaultTyping0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive(class0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<ReferenceType> class0 = ReferenceType.class;
      ClassUtil.getClassMethods(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getGenericSuperclass(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.isProxyType(class2);
      Class<ArrayType> class3 = ArrayType.class;
      ClassUtil.findConstructor(class3, false);
      Class<String> class4 = String.class;
      ClassUtil.createInstance(class4, false);
      ClassUtil.getConstructors(class0);
      Class<String> class5 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.findSuperClasses(class1, class0, false);
      Class<NoClass> class2 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class2);
      Class<Object> class3 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getPackageName(class0);
      Boolean boolean0 = Boolean.valueOf("java.lang");
      ClassUtil.classOf(boolean0);
      Class<Short> class1 = Short.TYPE;
      ClassUtil.getConstructors(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      Class<String> class3 = String.class;
      ClassUtil.isCollectionMapOrArray(class3);
      Class<CollectionType> class4 = CollectionType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.CollectionType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.getGenericSuperclass(class0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("[null]");
      ClassUtil.throwIfRTE(sQLTransientException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.findEnumType((Enum<?>) jsonTypeInfo_As0);
      ClassUtil.getClassDescription(class0);
      Class<MissingNode> class2 = MissingNode.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.node.MissingNode is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.emptyIterator();
      System.setCurrentTimeMillis((-968L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Double> class1 = Double.class;
      ClassUtil.nameOf(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findConstructor(class3, true);
      ClassUtil.quotedOr(class1, "7-CV@S]e)N4et");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Long> class2 = Long.class;
      String string0 = ",=nak";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, class2, ",=nak");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Long) must override method ',=nak'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Double double2 = ClassUtil.nonNull(double0, double1);
      ClassUtil.quotedOr(double2, "tR^=QtbyCk");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.emptyIterator();
      ClassUtil.quotedOr(class0, "pXIPc2<Is0:o/rO");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "\"class java.lang.Character\"", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "fma:", sQLNonTransientConnectionException0);
      ClassUtil.throwIfRTE(sQLNonTransientException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      Class<Object> class2 = Object.class;
      try { 
        objectMapper0.convertValue((Object) bufferRecycler0, class2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No serializer found for class com.fasterxml.jackson.core.util.BufferRecycler and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      boolean boolean0 = new Boolean(false);
      Class<Object> class2 = Object.class;
      Constructor<Object> constructor0 = ClassUtil.findConstructor(class2, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getPackageName(class0);
      Boolean boolean0 = Boolean.valueOf("java.lang");
      Class<?> class1 = ClassUtil.classOf(boolean0);
      Class<Short> class2 = Short.class;
      ClassUtil.getConstructors(class2);
      ClassUtil.getPackageName(class1);
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      ClassUtil.getEnclosingClass(class3);
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      String string0 = null;
      ClassUtil.backticked((String) null);
      boolean boolean0 = false;
      Class<Integer> class1 = Integer.class;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      FileSystemHandling.shouldAllThrowIOExceptions();
      classUtil_Ctor0.getConstructor();
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Integer integer0 = new Integer(0);
      classUtil_Ctor0.getParameterAnnotations();
      Class<MapType> class2 = MapType.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.isConcrete((Member) classUtil_Ctor0._ctor);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isConcrete(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.isBogusClass(class1);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.emptyIterator();
      ClassUtil.quotedOr(class0, "pXIPc2<Is0:o/rO");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "\"class java.lang.Character\"", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "\"class java.lang.Character\"", sQLNonTransientConnectionException0);
      Class<Byte> class2 = Byte.TYPE;
      ClassUtil.getClassMethods(class2);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.isBogusClass(class3);
      Class<RuntimeException> class4 = RuntimeException.class;
      ClassUtil.getOuterClass(class4);
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      Integer integer0 = new Integer(0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getClassDescription(constructor0);
      ClassUtil.checkAndFixAccess((Member) constructor0, true);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.emptyIterator();
      ClassUtil.quotedOr(class0, "pXIPc2<Is0:o/rO");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "\"class java.lang.Character\"", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "fma:", sQLNonTransientConnectionException0);
      ClassUtil.throwIfRTE(sQLNonTransientException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)98;
      Class<Double> class2 = Double.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.findEnumType((Enum<?>) objectMapper_DefaultTyping0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassMethods(class0);
      ClassUtil.getClassMethods(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getDeclaringClass(class3);
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.getDeclaredFields(class4);
      Double double0 = new Double((-2505.785164));
      Character character0 = Character.valueOf('{');
      ClassUtil.quotedOr(character0, "[null]");
      Class<Integer> class5 = Integer.TYPE;
      ClassUtil.getEnclosingClass(class5);
      Class<IOException> class6 = IOException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      ClassUtil.emptyIterator();
      ClassUtil.quotedOr(class0, "pXIPc2<Is0:o/rO");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "\"class java.lang.Character\"", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "fma:", sQLNonTransientConnectionException0);
      ClassUtil.throwIfRTE(sQLNonTransientException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-65);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, pipedOutputStream0, byteArray0, (-4618), true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      Class<NoClass> class2 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "array");
      Class<IOException> class0 = IOException.class;
      ClassUtil.getGenericInterfaces(class0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DataTruncation dataTruncation0 = new DataTruncation(2, true, true, 1054, 96);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(dataTruncation0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2285, 1054);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = typeFactory1.constructMapLikeType(class0, javaType0, javaType0);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(throwable0);
      Character character0 = Character.valueOf('\\');
      MapLikeType mapLikeType2 = mapLikeType1.withTypeHandler(character0);
      ClassUtil.findSuperTypes((JavaType) mapLikeType2, (Class<?>) class0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ClassUtil.nonNullString("primitive");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassUtil.getClassMethods(class0);
      ClassUtil.getClassMethods(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.isCollectionMapOrArray(class0);
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaringClass();
      Class<Annotation> class2 = Annotation.class;
      ClassUtil.isObjectOrPrimitive(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.getDeclaringClass(class3);
      Class<Boolean> class4 = Boolean.class;
      ClassUtil.getDeclaredFields(class4);
      Double double0 = new Double((-2505.785164));
      Character character0 = Character.valueOf('{');
      ClassUtil.quotedOr(character0, "[null]");
      Class<Integer> class5 = Integer.class;
      ClassUtil.getEnclosingClass(class5);
      Class<IOException> class6 = IOException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Object> class0 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      Class<SimpleType> class2 = SimpleType.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class1, class2);
      Long.getLong("JSON");
      MapType mapType1 = mapType0.withContentValueHandler((Object) null);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(mapType1, "elementType", "JSON");
      ClassUtil.throwIfRTE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Character> class0 = Character.class;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)41;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$E`");
      byteArray0[7] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.findClassAnnotations(class0);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getPackageName(class1);
      ClassUtil.isJacksonStdImpl((Object) class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.getDeclaredMethods(class2);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getConstructor();
      constructor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      ClassUtil classUtil0 = new ClassUtil();
      ClassUtil.getClassDescription(constructor0);
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[0];
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DataTruncation dataTruncation0 = new DataTruncation(2, true, true, 1054, 96);
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(dataTruncation0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2285, 1054);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = typeFactory1.constructMapLikeType(class0, javaType0, javaType0);
      mapLikeType0.withValueHandler(throwable0);
      ClassUtil.nullOrToString(class0);
      Class<String> class1 = String.class;
      ClassUtil.getEnclosingClass(class1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.backticked("coDA-xE]'zc6uxk7v");
      int[] intArray0 = new int[4];
      int int0 = 96;
      intArray0[0] = 96;
      Class<String> class1 = String.class;
      Class<Float> class2 = Float.class;
      ClassUtil.getOuterClass(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class3, false);
      constructor0.getDeclaredAnnotations();
      Class<String> class4 = String.class;
      ClassUtil.getGenericSuperclass(class4);
      Class<Character> class5 = Character.class;
      ClassUtil.isCollectionMapOrArray(class5);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaringClass();
      Class<Float> class6 = Float.class;
      ClassUtil.isObjectOrPrimitive(class6);
      ClassUtil.getDeclaringClass(class4);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.hibernate.proxy.java.lang.RuntimeException");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x6!'QvEi");
      ClassUtil.classNameOf("x6!'QvEi");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Short> class0 = Short.class;
      ClassUtil.getConstructors(class0);
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Byte byte0 = new Byte((byte)127);
      ClassUtil.nullOrToString(byte0);
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      SQLDataException sQLDataException0 = new SQLDataException("org.hibernate.proxy.java.lang.RuntimeException", "x6!'QvEi");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLDataException0.addSuppressed(sQLTransactionRollbackException0);
      MockThrowable mockThrowable0 = new MockThrowable("org.hibernate.proxy.java.lang.RuntimeException", sQLDataException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(mockThrowable0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.printf("org.hibernate.proxy.java.lang.StackTraceElement", (Object[]) methodArray0);
      MockThrowable.replacement_printStackTrace((Throwable) sQLDataException0, printWriter0);
      MockError mockError0 = new MockError("`java.lang.String`", sQLTransientConnectionException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("`java.lang.String`", mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockError mockError0 = new MockError();
      mockError0.printStackTrace();
      Class<Object> class0 = Object.class;
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      injectableValues_Std0.addValue("com.fasterxml.jackson.databind.ext.Java7Support", (Object) "com.fasterxml.jackson.databind.ext.Java7Support");
      objectMapper0.convertValue((Object) mockError0, class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.isObjectOrPrimitive(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.backticked("coDA-xE]'zc6uxk7v");
      int[] intArray0 = new int[4];
      intArray0[0] = 96;
      intArray0[1] = 1202;
      intArray0[2] = 0;
      intArray0[3] = 2;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("net.sf.cglib.proxy.", intArray0, sQLRecoverableException0);
      SQLDataException sQLDataException0 = new SQLDataException("`coDA-xE]'zc6uxk7v`", "`coDA-xE]'zc6uxk7v`", batchUpdateException0);
      ClassUtil.throwIfError(sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.getClassMethods(class0);
      ClassUtil.getClassMethods(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.primitiveType(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      try { 
        ClassUtil.createInstance(class2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapLikeType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isConcrete(class0);
      Class<JsonMappingException> class1 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.getDeclaringClass(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      Class<AccessibleObject> class2 = AccessibleObject.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<NoClass> class3 = NoClass.class;
      ClassUtil.isCollectionMapOrArray(class3);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.getEnclosingClass(class0);
      Class<Character> class1 = Character.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
      ClassUtil.emptyIterator();
      ClassUtil.quotedOr(class1, "pXIPc2<Is0:o/rO");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, "\"class java.lang.Character\"", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLTransactionRollbackException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, "fma:", sQLNonTransientConnectionException0);
      ClassUtil.throwIfRTE(sQLNonTransientException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-65);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper1, pipedOutputStream0, byteArray0, (-4618), true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getGenericSuperclass(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Iterator<JsonMappingException> iterator0 = ClassUtil.emptyIterator();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findClassAnnotations(class0);
      Class<RuntimeException> class1 = RuntimeException.class;
      ClassUtil.getConstructors(class1);
      ClassUtil.getClassDescription(iterator0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializerFactory0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = 'e';
      charArray0[2] = '%';
      charArray0[3] = 'R';
      charArray0[4] = '>';
      charArray0[5] = 'q';
      charArray0[6] = '`';
      charArray0[7] = '$';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectMapper0, charsToNameCanonicalizer0, charArray0, 1, 1, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, "3xIfQ)DkdI");
      MockError mockError0 = new MockError(sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "`java.util.Collections$EmptyIterator`", (Throwable) mockError0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // `java.util.Collections$EmptyIterator`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, (-2067));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, sQLSyntaxErrorException0);
      sQLTimeoutException0.fillInStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("Failed to instantiate class ", "i-o)\"|Y`* ", "i-o)\"|Y`* ", (-2067));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("i-o)\"|Y`* ", "Failed to instantiate class ", (String) null, 1220);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("READ_ENUMS_USING_TO_STRING", "READ_ENUMS_USING_TO_STRING", (String) null, 1220);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("??2DIl@;}I}=7~", "vals", "READ_ENUMS_USING_TO_STRING", (-1928));
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      Throwable throwable0 = ClassUtil.getRootCause(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, ",Rbt/;n<!!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ,Rbt/;n<!!
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("vals");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLTransientConnectionException0);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLFeatureNotSupportedException0);
      String string0 = null;
      MockError mockError0 = new MockError((String) null, throwable0);
      sQLFeatureNotSupportedException0.fillInStackTrace();
      mockError0.printStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      mockError0.getMessage();
      ClassUtil.quotedOr(mockError0, "ZERO_LENGTH_ENUM_ARRAY");
      Short short0 = new Short((short) (-710));
      ClassUtil.classOf(short0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      MockError mockError0 = new MockError();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Z7eZ] a{mLCT0", "Z7eZ] a{mLCT0", mockError0);
      ClassUtil.throwIfIOE(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectMapper2, objectOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getPackageName(class0);
      Class<Object> class1 = Object.class;
      Class<Long> class2 = Long.class;
      ClassUtil.findSuperClasses(class1, class2, true);
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class1, class1, "serialVersionUID");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Object) must override method 'serialVersionUID'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isBogusClass(class0);
      ClassUtil.primitiveType(class0);
      Character character0 = new Character('|');
      ClassUtil.nonNull(character0, character0);
      Class<NoClass> class1 = NoClass.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[0];
      // Undeclared exception!
      try { 
        ReferenceType.construct(class1, typeBindings0, (JavaType) null, javaTypeArray0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getPackageName(class0);
      Boolean boolean0 = Boolean.valueOf("java.lang");
      ClassUtil.classOf(boolean0);
      Class<Short> class1 = Short.class;
      Class<Character> class2 = Character.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactory0, class1);
      ClassUtil.nonNull(jsonMappingException0, jsonMappingException0);
      ClassUtil.isJacksonStdImpl((Object) class2);
      ClassUtil.nullOrToString(deserializerFactory0);
      Class<Module> class3 = Module.class;
      ClassUtil.isProxyType(class3);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "java.lang");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.findEnumType(class0);
      ClassUtil.quotedOr((Object) null, "m'To?");
      ClassUtil.isJacksonStdImpl((Object) "m'To?");
      ClassUtil.nullOrToString((Object) null);
      ClassUtil.isProxyType(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 506);
      coreXMLDeserializers_Std0.getNullAccessPattern();
      boolean boolean0 = false;
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        coreXMLDeserializers_Std0.deserialize((JsonParser) jsonParserSequence0, (DeserializationContext) defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Character> class0 = Character.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(deserializerFactoryConfig0, class0);
      ClassUtil.nonNull(jsonMappingException0, jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      ClassUtil.quotedOr((Object) null, "elementType");
      ClassUtil.isCollectionMapOrArray(class1);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      ClassUtil.findConstructor(class2, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParameterAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ClassUtil.nullOrToString((Object) null);
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      constructor0.getName();
      constructor0.getDeclaredAnnotations();
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class0, class1, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class2 = HashMap.class;
      Class<SimpleType> class3 = SimpleType.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class0, class3);
      MapType mapType1 = mapType0.withContentValueHandler(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(mapType1, (String) null, "java.lang.String");
      ClassUtil.throwIfRTE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.nameOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Error> class0 = Error.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
      
      Boolean boolean0 = Boolean.valueOf("java.lang");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Class<?> class1 = ClassUtil.classOf(boolean0);
      assertNotNull(class1);
      assertEquals("class java.lang.Boolean", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Class<Short> class2 = Short.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class2);
      assertEquals(2, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      String string1 = ClassUtil.nonNullString("y ;`?Qe+CHDE4 :");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("y ;`?Qe+CHDE4 :", string1);
      
      Class<Boolean> class3 = Boolean.class;
      Constructor<Boolean> constructor0 = ClassUtil.findConstructor(class3, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
      
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNotNull(constructor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      Annotation[] annotationArray0 = constructor0.getAnnotations();
      assertEquals(0, annotationArray0.length);
      assertNotNull(annotationArray0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      int int0 = classUtil_Ctor0.getParamCount();
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, int0);
      
      Annotation[][] annotationArray1 = classUtil_Ctor0.getParameterAnnotations();
      assertEquals(0, annotationArray1.length);
      assertNotNull(annotationArray1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      
      Annotation[] annotationArray2 = classUtil_Ctor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray2.length);
      assertNotNull(annotationArray2);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertSame(annotationArray2, annotationArray0);
      
      int int1 = classUtil_Ctor0.getParamCount();
      assertTrue(int1 == int0);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, int1);
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertFalse(constructor1.isVarArgs());
      assertFalse(constructor1.isSynthetic());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertTrue(constructor1.isAccessible());
      assertEquals(1, constructor1.getModifiers());
      
      Class<Float> class3 = Float.class;
      Annotation[] annotationArray3 = constructor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray3.length);
      assertNotNull(annotationArray3);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertSame(annotationArray3, annotationArray2);
      assertSame(annotationArray3, annotationArray0);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class3);
      assertEquals(29, methodArray0.length);
      assertNotNull(methodArray0);
      
      Class<CollectionLikeType> class4 = CollectionLikeType.class;
      boolean boolean1 = ClassUtil.isBogusClass(class4);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<String> class5 = String.class;
      Class<?> class6 = ClassUtil.getOuterClass(class5);
      assertNull(class6);
      
      Annotation[] annotationArray4 = constructor0.getDeclaredAnnotations();
      assertEquals(0, annotationArray4.length);
      assertNotNull(annotationArray4);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertSame(annotationArray4, annotationArray0);
      assertSame(annotationArray4, annotationArray3);
      assertSame(annotationArray4, annotationArray2);
      
      Class class7 = (Class)ClassUtil.getGenericSuperclass(class2);
      assertNotNull(class7);
      assertFalse(class7.equals((Object)class1));
      assertFalse(class7.isAnnotation());
      assertEquals(1, class7.getModifiers());
      assertFalse(class7.isEnum());
      assertFalse(class7.isSynthetic());
      assertEquals("class java.lang.Exception", class7.toString());
      assertFalse(class7.isPrimitive());
      assertFalse(class7.isInterface());
      assertFalse(class7.isArray());
      assertNotSame(class7, class1);
      
      Class<Character> class8 = Character.class;
      boolean boolean2 = ClassUtil.isCollectionMapOrArray(class8);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(class8, class0);
      assertFalse(boolean2);
      
      Class<?> class9 = classUtil_Ctor0.getDeclaringClass();
      assertNotNull(class9);
      assertFalse(constructor0.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertTrue(constructor0.isAccessible());
      assertEquals("class java.lang.RuntimeException", class9.toString());
      assertFalse(class9.isAnnotation());
      assertFalse(class9.isInterface());
      assertFalse(class9.isArray());
      assertFalse(class9.isPrimitive());
      assertFalse(class9.isEnum());
      assertFalse(class9.isSynthetic());
      assertEquals(1, class9.getModifiers());
      
      Class<IOException> class10 = IOException.class;
      boolean boolean3 = ClassUtil.isObjectOrPrimitive(class10);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Class<Annotation> class11 = Annotation.class;
      Class<?> class12 = ClassUtil.getDeclaringClass(class11);
      assertNull(class12);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class4);
      assertEquals(2, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      String string0 = ClassUtil.quotedOr(double0, "'D");
      assertNotNull(string0);
      assertEquals("\"0.0\"", string0);
      
      Class<MapType> class13 = MapType.class;
      Class<?> class14 = ClassUtil.getEnclosingClass(class13);
      assertNull(class14);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      String string0 = ClassUtil.nonNullString("keyUniverse");
      assertNotNull(string0);
      assertEquals("keyUniverse", string0);
      
      Class<Integer> class1 = Integer.class;
      Constructor<Integer> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Iterator<ResolvedRecursiveType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(1, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(0, methodArray0.length);
      assertNotNull(methodArray0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = bigDecimal0.abs();
      assertNotNull(bigDecimal1);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "keyType");
      assertNotNull(jsonMappingException0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      
      Throwable throwable0 = ClassUtil.getRootCause(jsonMappingException0);
      assertNotNull(throwable0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(jsonMappingException0, throwable0);
      assertSame(throwable0, jsonMappingException0);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) jsonMappingException0, "ZERO_LENGTH_ENUM_ARRAY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ZERO_LENGTH_ENUM_ARRAY
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
      
      Class<Object> class1 = Object.class;
      String string0 = ClassUtil.canBeABeanType(class1);
      assertNull(string0);
      
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(16, classUtil_CtorArray0.length);
      assertNotNull(classUtil_CtorArray0);
      
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      Constructor<PlaceholderForType> constructor0 = ClassUtil.findConstructor(class2, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<NoClass> class1 = NoClass.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      assertNotNull(collectionLikeType0);
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isArrayType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isEnumType());
      assertTrue(collectionLikeType0.hasContentType());
      
      String string0 = "m(Rz]D3l+IK4 9+";
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, collectionLikeType0, "m(Rz]D3l+IK4 9+");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class com.fasterxml.jackson.databind.type.CollectionLikeType (of class java.lang.Byte) must override method 'm(Rz]D3l+IK4 9+'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Class<Double> class1 = Double.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Double has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<Object> class0 = Object.class;
      String string0 = ClassUtil.nameOf(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Object`", string0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class1 = HashMap.class;
      Class<JsonMappingException>[] classArray0 = (Class<JsonMappingException>[]) Array.newInstance(Class.class, 8);
      Class<JsonMappingException> class2 = JsonMappingException.class;
      classArray0[0] = class2;
      Class<JsonMappingException> class3 = JsonMappingException.class;
      classArray0[1] = class3;
      Class<JsonMappingException> class4 = JsonMappingException.class;
      classArray0[2] = class4;
      Class<JsonMappingException> class5 = JsonMappingException.class;
      classArray0[3] = class5;
      Class<JsonMappingException> class6 = JsonMappingException.class;
      classArray0[4] = class6;
      Class<JsonMappingException> class7 = JsonMappingException.class;
      classArray0[5] = class7;
      Class<JsonMappingException> class8 = JsonMappingException.class;
      classArray0[6] = class8;
      Class<JsonMappingException> class9 = JsonMappingException.class;
      classArray0[7] = class9;
      // Undeclared exception!
      try { 
        typeFactory0.constructParametricType(class1, classArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.util.HashMap with 8 type parameters: class expects 2
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(13, fieldArray0.length);
      assertNotNull(fieldArray0);
      
      Class<RuntimeException> class1 = RuntimeException.class;
      boolean boolean0 = ClassUtil.isBogusClass(class1);
      assertFalse(boolean0);
      
      Class<Float> class2 = Float.class;
      try { 
        ClassUtil.createInstance(class2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Iterator<AccessPattern> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      Class<MapType> class0 = MapType.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(28, methodArray0.length);
      assertNotNull(methodArray0);
      
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
      
      Class<AccessPattern> class1 = AccessPattern.class;
      boolean boolean1 = ClassUtil.isCollectionMapOrArray(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      String string0 = ClassUtil.getPackageName(class2);
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind.type", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_INVALID;
      hashMap0.put("elementType", clientInfoStatus0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("elementType", hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: elementType", sQLClientInfoException0.toString());
      assertEquals("elementType", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("elementType", sQLClientInfoException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: elementType", sQLClientInfoException0.toString());
      assertEquals("elementType", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("elementType", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: elementType", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      Spliterator<Throwable> spliterator0 = sQLInvalidAuthorizationSpecException0.spliterator();
      assertNotNull(spliterator0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: elementType", sQLClientInfoException0.toString());
      assertEquals("elementType", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("elementType", sQLInvalidAuthorizationSpecException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: elementType", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLInvalidAuthorizationSpecException0, "elementType");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // elementType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Constructor<SimpleType> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }
}
