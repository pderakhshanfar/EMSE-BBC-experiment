/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:26:28 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.Named;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.chrono.ChronoLocalDate;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Double double0 = new Double(3388.831265);
      Double double1 = ClassUtil.nonNull((Double) null, double0);
      assertEquals(3388.831265, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Constructor<?> constructor0 = classUtil_Ctor0.getConstructor();
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Class<Module> class0 = Module.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[5];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1746839910), objectMapper0, byteArrayOutputStream0, byteArray0, 1435, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientConnectionException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0);
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException(">^~D-brVter2Z<", (Throwable) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.core.filter.TokenFilter", "Cannot figure out type for EnumMap (odd JDK platform?)", sQLTransientException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = (SQLInvalidAuthorizationSpecException)ClassUtil.throwIfRTE(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException1.getErrorCode());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(",D-EZ'7", (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      Throwable throwable0 = ClassUtil.throwIfIOE(sQLIntegrityConstraintViolationException0);
      assertSame(sQLIntegrityConstraintViolationException0, throwable0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Throwable throwable0 = ClassUtil.throwIfError(sQLNonTransientConnectionException0);
      assertSame(throwable0, sQLNonTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<?> class0 = ClassUtil.rawClass((JavaType) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Class<Void> class1 = Void.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(102);
      Class<RuntimeException> class2 = RuntimeException.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) placeholderForType0, (Class<?>) class2, false);
      TypeBindings typeBindings0 = TypeBindings.create(class1, list0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[1]);
      Class<?> class3 = ClassUtil.rawClass(collectionType0);
      assertEquals("interface java.time.chrono.ChronoLocalDate", class3.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<AccessPattern> class0 = AccessPattern.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      Class<?> class1 = ClassUtil.rawClass(mapLikeType0);
      assertEquals(16385, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, (TypeBindings) null);
      Class<?> class1 = ClassUtil.rawClass(arrayType0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = ClassUtil.nonNullString("\"class java.lang.Short\"");
      assertEquals("\"class java.lang.Short\"", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      boolean boolean0 = ClassUtil.isProxyType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Double> class0 = Double.class;
      String string0 = ClassUtil.getPackageName(class0);
      assertEquals("java.lang", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Type type0 = ClassUtil.getGenericSuperclass(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(1, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertEquals(0, typeArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(3, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(0, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class1, class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Long> class1 = Long.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) simpleType0, (Class<?>) class1, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0);
      JavaType javaType0 = typeFactory0.constructParametricType(class0, classArray0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      Class<SimpleType> class1 = SimpleType.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) referenceType0, (Class<?>) class1, false);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType((Enum<?>) accessPattern0);
      assertEquals(16385, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals("class java.lang.Object", class1.toString());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      Constructor<MapType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertEquals(0, annotationArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      Class<?> class0 = ClassUtil.classOf(enumSet0);
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Short> class0 = Short.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, (Object) null, "yvxfI5[/_'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("8,,/;BH&xf7c", "YFEe'f.[`EJ=Q^}UHO");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("YFEe'f.[`EJ=Q^}UHO", "SD(E\"vmD,sh\"n", sQLTransientException0);
      sQLTransientException0.initCause(sQLInvalidAuthorizationSpecException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientException0, "'null', 'true' or 'false'");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[8];
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("7t3sr\"z'nYJc7.noWH", (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jacks", "com.fasterxml.jacks", (-2971), mockRuntimeException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("net.sf.cglib.proxy.java.lang.RuntimeException", sQLNonTransientConnectionException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jacks", "com.fasterxml.jacks", (-638502591), intArray0, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, " is not a primitive type");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockError mockError0 = new MockError("G<!l0X");
      int[] intArray0 = new int[1];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("G<!l0X", "ojMM)|\"nk%3[QGT/", intArray0, mockError0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0, "?*YEP>t^F+wJ\"^");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "float", "Cannot resolve ObjectId forward reference using property '%s' (of type %s): Bean not yet resolved");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLNonTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not resolve type id 'float' as a subtype of null: Cannot resolve ObjectId forward reference using property '%s' (of type %s): Bean not yet resolved
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[1];
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("unknown", "unknown");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("unknown", intArray0, sQLSyntaxErrorException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(batchUpdateException0);
      sQLSyntaxErrorException0.initCause(sQLNonTransientException0);
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(sQLNonTransientException0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("3_9@)sd.0");
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigDecimal bigDecimal0 = new BigDecimal((-1654975209));
      Class<ReferenceType> class0 = ReferenceType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "U1d");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ReferenceType` from number -1654975209: U1d
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ClassUtil.createInstance(class0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class1 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(object0, class1);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected IOException (of type com.fasterxml.jackson.databind.exc.InvalidFormatException): Cannot deserialize value of type `java.lang.String` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `java.lang.Object`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("`org.hibernate.proxy.java.lang.Float`");
      SQLDataException sQLDataException0 = new SQLDataException("PFQ(?5Bo}nHG", mockRuntimeException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "PFQ(?5Bo}nHG", (Throwable) sQLDataException0);
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PFQ(?5Bo}nHG
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MapType> class0 = MapType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "gAxJ36]AIshYC\"{oh", "gAxJ36]AIshYC\"{oh");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.MapType` from String \"gAxJ36]AIshYC\"{oh\": gAxJ36]AIshYC\"{oh
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) charArrayReader0);
      Class<Double> class0 = Double.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_ARRAY: JSON
         //  at [Source: (CharArrayReader); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("entrySet", "com.fasterxml.jackson.databind.util.ClassUtil$Ctor", 0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLNonTransientConnectionException0, "java.lang.Float@0000000001");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.lang.Float@0000000001
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "-Y/~g");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("entrySet", "j", (-639));
      MockException mockException0 = new MockException("entrySet", sQLInvalidAuthorizationSpecException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("entrySet", "entrySet", 0, mockException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLIntegrityConstraintViolationException0);
      Character character0 = new Character('P');
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) character0, "entrySet");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) jsonMappingException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // java.sql.SQLIntegrityConstraintViolationException: entrySet (through reference chain: java.lang.Character[\"entrySet\"])
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MockException mockException0 = new MockException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockException0, (Object) mockException0, 1067);
      mockException0.initCause(jsonMappingException0);
      // Undeclared exception!
      ClassUtil.getRootCause(mockException0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getGenericSuperclass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      Class<MapLikeType> class1 = MapLikeType.class;
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class0, class1, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<RuntimeException>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Error> class0 = Error.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Error is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, mockFileOutputStream0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Dw");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLSyntaxErrorException0);
      SQLDataException sQLDataException0 = new SQLDataException("``", "org.hibernate.proxy.float", 1311, mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Exception) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0, jsonEncoding0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JSON", "l@");
      MockIOException mockIOException0 = new MockIOException("JSON", sQLInvalidAuthorizationSpecException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException(javaType0, "c[W}N");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockError mockError0 = new MockError();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockError0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockFile mockFile0 = new MockFile("e5r-Q", "e5r-Q");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, objectMapper0, mockPrintWriter0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0, false);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: c[W}N
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("local/anonymous", (Throwable) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) null, (Exception) sQLWarning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(defaultPrettyPrinter0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 31, objectReader0, mockPrintStream0);
      MockIOException mockIOException0 = new MockIOException("");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) mockPrintStream0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      assertEquals("class org.evosuite.shaded.org.mockito.codegen.Enum$MockitoMock$809239558", class0.toString());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = ClassUtil.backticked("");
      assertEquals("``", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`com.fasterxml.jackson.databind.util.AccessPattern`", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockError mockError0 = new MockError("G<!l0X");
      SQLException sQLException0 = new SQLException("G<!l0X", "G<!l0X", mockError0);
      Throwable throwable0 = ClassUtil.getRootCause(sQLException0);
      assertSame(mockError0, throwable0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfIOE((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("Default constructor for ");
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfRTE((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Throwable throwable0 = ClassUtil.throwIfError((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<NullNode> class1 = NullNode.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class1, class0, true);
      assertEquals(8, list0.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Long> class1 = Long.TYPE;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Short> class0 = Short.TYPE;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLClientInfoException0, "8wrk%/z`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8wrk%/z`
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Annotation[] annotationArray0 = classUtil_Ctor0.getDeclaredAnnotations();
      assertTrue(constructor0.isAccessible());
      assertNotNull(annotationArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(0, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class0);
      assertEquals(0, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.getPackageName(class1);
      assertEquals("boolean", class1.toString());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) "``");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) resolvedRecursiveType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(class0);
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, MapLikeType> enumMap0 = new EnumMap<AccessPattern, MapLikeType>(class0);
      AccessPattern accessPattern0 = AccessPattern.ALWAYS_NULL;
      enumMap0.put(accessPattern0, (MapLikeType) null);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertEquals("class com.fasterxml.jackson.databind.util.AccessPattern", class1.toString());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumMap<AccessPattern, MapLikeType> enumMap0 = new EnumMap<AccessPattern, MapLikeType>(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumMap0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet0);
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertEquals(3, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.DYNAMIC;
      AccessPattern accessPattern1 = AccessPattern.CONSTANT;
      AccessPattern accessPattern2 = AccessPattern.ALWAYS_NULL;
      EnumSet<AccessPattern> enumSet0 = EnumSet.of(accessPattern0, accessPattern0, accessPattern1, accessPattern2, accessPattern1);
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enumSet1);
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertFalse(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
      assertTrue(constructor0.isAccessible());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("char", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("short", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<CollectionType> class0 = CollectionType.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("float", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("double", class1.toString());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertEquals("byte", class1.toString());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertEquals("long", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("class java.lang.Byte", class1.toString());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals(17, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("class java.lang.Double", class1.toString());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      Class<?> class2 = ClassUtil.wrapperType(class1);
      assertEquals("class java.lang.Boolean", class2.toString());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.Ctor[] classUtil_CtorArray0 = ClassUtil.getConstructors(class1);
      assertEquals(2, classUtil_CtorArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = ClassUtil.wrapperType(class0);
      assertEquals("class java.lang.Character", class1.toString());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals((short)0, object0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals((byte)0, object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals('\u0000', object0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0L, object0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Object object0 = ClassUtil.defaultValue(class0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      
      Object object0 = ClassUtil.defaultValue(class1);
      assertEquals("boolean", class1.toString());
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = ClassUtil.backticked((String) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = ClassUtil.nameOf((Named) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-393805500));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        ClassUtil.nameOf((Named) beanProperty_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanProperty$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      String string0 = ClassUtil.nameOf(class0);
      assertEquals("`double`", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = ClassUtil.nameOf((Class<?>) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = ClassUtil.classNameOf((Object) null);
      assertEquals("[null]", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Boolean boolean0 = new Boolean("local/anonymous");
      String string0 = ClassUtil.getClassDescription(boolean0);
      assertEquals("`java.lang.Boolean`", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = ClassUtil.getClassDescription((Object) null);
      assertEquals("unknown", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      String string0 = ClassUtil.getClassDescription(class0);
      assertEquals("`java.lang.Integer`", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = ClassUtil.quotedOr((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, false);
      String string0 = ClassUtil.quotedOr(constructor0, "keyType");
      assertFalse(constructor0.isAccessible());
      assertEquals("\"public java.lang.Error()\"", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = ClassUtil.nonNullString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      String string0 = ClassUtil.nullOrToString(class0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Error error0 = ClassUtil.nonNull((Error) null, (Error) null);
      assertNull(error0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("non-static member class", "com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition", (Throwable) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("IGNORE_UNKNOWN", sQLNonTransientException0);
      Object object0 = ClassUtil.nonNull((Object) mockRuntimeException0, (Object) "non-static member class");
      assertSame(mockRuntimeException0, object0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "Kw;m", "");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'Kw;m' as a subtype of null: 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Class<?> class1 = ClassUtil.rawClass(resolvedRecursiveType0);
      assertFalse(class1.isArray());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<?> class0 = ClassUtil.classOf((Object) null);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      AccessPattern accessPattern0 = AccessPattern.CONSTANT;
      Class<?> class0 = ClassUtil.classOf(accessPattern0);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      RuntimeException runtimeException0 = ClassUtil.createInstance(class0, false);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) runtimeException0, "9+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) filterOutputStream0, jsonEncoding0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      MockIOException mockIOException0 = new MockIOException("Unrecognized mutator type for any setter: %s");
      SQLWarning sQLWarning0 = new SQLWarning("local/anonymous", "O9u\"an@_,NUg@iwz- _", mockIOException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Closeable) jsonGenerator0, (Exception) sQLWarning0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLWarning: local/anonymous
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      StringReader stringReader0 = new StringReader("JSON");
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) stringReader0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "4#Z#pCe_R,[]|0#");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 4#Z#pCe_R,[]|0#
         //  at [Source: (StringReader); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("uLWz}m5O&h");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.databind.ObjectWriter");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.ObjectWriter
         //  at [Source: (String)\"uLWz}m5O&h\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext_Impl0, (IOException) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.initCause(mockRuntimeException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MockError mockError0 = new MockError("mDvu6Y&}q |XM_0UDZ");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Iterator<Character> iterator0 = ClassUtil.emptyIterator();
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, iterator0, "sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl@0000000002");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.util.Collections$EmptyIterator (of class java.lang.Float) must override method 'sun.reflect.annotation.AnnotatedTypeFactory$AnnotatedTypeBaseImpl@0000000002'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ClassUtil.createInstance(class0, true);
      ClassUtil.verifyMustOverride(class0, object0, "~:]0M>XxR6,^cFj7i");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<NullNode> class0 = NullNode.class;
      NullNode nullNode0 = NullNode.getInstance();
      boolean boolean0 = ClassUtil.hasClass(nullNode0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<Annotation> class1 = Annotation.class;
      boolean boolean0 = ClassUtil.hasClass(class0, class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = ClassUtil.hasClass((Object) null, (Class<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) resolvedRecursiveType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<Void> class0 = Void.class;
      boolean boolean0 = ClassUtil.isBogusClass(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Module> class0 = Module.class;
      boolean boolean0 = ClassUtil.isCollectionMapOrArray(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<String> class0 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      
      boolean boolean0 = ClassUtil.isConcrete((Member) constructor0);
      assertTrue(constructor0.isAccessible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      String string0 = ClassUtil.isLocalType(class0, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("primitive", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      String string0 = ClassUtil.canBeABeanType(class0);
      assertEquals("enum", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Class<Short> class1 = Short.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class0, class1);
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperTypes(class2, class1, list0);
      assertEquals(7, list0.size());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      Class<NoClass> class1 = NoClass.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, true);
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Double> class0 = Double.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<ArrayType> class0 = ArrayType.class;
      Class<Object> class1 = Object.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class1, false);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses((Class<?>) null, class0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<Character> class0 = Character.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes((Class<?>) null, class0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<Error> class0 = Error.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedList> class1 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
      Class<SimpleType> class2 = SimpleType.class;
      JavaType javaType0 = typeFactory0.constructReferenceType(class2, collectionType0);
      List<JavaType> list0 = ClassUtil.findSuperTypes(javaType0, class2, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      Throwable throwable0 = ClassUtil.throwRootCauseIfIOE(sQLException0);
      assertNull(throwable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ClassUtil classUtil0 = new ClassUtil();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("entrySet", "entrySet");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("x_Aq");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "JSON", (Throwable) sQLTransactionRollbackException0);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertEquals(52, methodArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertEquals(0, fieldArray0.length);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Class<InputStream> class0 = InputStream.class;
      try { 
        ClassUtil.createInstance(class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class java.io.InputStream, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }
}
