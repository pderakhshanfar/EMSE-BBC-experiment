/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:21:03 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.NoClass;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ClassUtil;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.Named;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.NotActiveException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Member;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ClassUtil_ESTest extends ClassUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ClassUtil.rawClass(arrayType0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getDeclaringClass(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockIOException mockIOException0 = new MockIOException();
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper1.reader((FormatSchema) null);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectReader0, byteArrayBuilder0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.enable(jsonGenerator_Feature0);
      MockIOException mockIOException0 = new MockIOException("JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class0);
      Class<? extends Enum<?>> class1 = ClassUtil.findEnumType(enumSet0);
      ClassUtil.classOf(enumSet0);
      ClassUtil.isJacksonStdImpl(class1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      ClassUtil.isBogusClass(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Module> class0 = Module.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperTypes(class0, class1);
      ClassUtil.quotedOr((Object) null, "");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isConcrete(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("org.hibernate.proxy.java.lang.RuntimeException");
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "org.hibernate.proxy.java.lang.RuntimeException");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_FALSE: org.hibernate.proxy.java.lang.RuntimeException
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.isConcrete(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("java.lang.Boolean", class0, "java.lang.Boolean");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Short` from String \"java.lang.Boolean\": java.lang.Boolean
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<Byte> class1 = Byte.TYPE;
      ClassUtil.wrapperType(class1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.defaultValue(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAdditionalDeserializers((Deserializers) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null Deserializers
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      Class<? extends Enum<?>> class0 = ClassUtil.findEnumType(enum0);
      Class<Boolean> class1 = Boolean.TYPE;
      ClassUtil.defaultValue(class1);
      Class<Double> class2 = Double.class;
      ClassUtil.getGenericInterfaces(class2);
      ClassUtil.findRawSuperTypes(class1, class0, true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findClassAnnotations(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.primitiveType(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.isNonStaticInnerClass(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("lFj|0i*!H?${(}", class0, "Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)");
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Short` from String \"lFj|0i*!H?${(}\": Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<ArrayType> class1 = ArrayType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 1145);
      AccessPattern accessPattern0 = coreXMLDeserializers_Std0.getNullAccessPattern();
      ClassUtil.classOf(accessPattern0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
      Class<Long> class2 = Long.class;
      ClassUtil.isConcrete(class2);
      ClassUtil.getDeclaringClass(class0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, false);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("S= OY", hashMap0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) filteringGeneratorDelegate0, (Closeable) filteringGeneratorDelegate0, (Exception) sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getDeclaringClass(class0);
      SQLWarning sQLWarning0 = new SQLWarning("tW|_VlQ");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("tW|_VlQ", "tW|_VlQ", "tW|_VlQ", 0);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("tW|_VlQ", "qP280%B^PS", "qP280%B^PS", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("org.hibernate.proxy.java.lang.Integer", "qP280%B^PS", "r#yDbav", 2310);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("p8W%`{^wsa~", "H\"~", "H\"~", 428);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("H\"~", "com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer", "p8W%`{^wsa~", (-2859));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("tW|_VlQ", "/pom.properties", "H\"~", 0);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("r#yDbav", "org.hibernate.proxy.java.lang.Integer", "java.lang.Integer", (-2859));
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("P5R]/cP", "tW|_VlQ", "com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer", 2);
      stackTraceElementArray0[7] = stackTraceElement7;
      sQLWarning0.setStackTrace(stackTraceElementArray0);
      sQLWarning0.fillInStackTrace();
      ClassUtil.throwRootCauseIfIOE(sQLWarning0);
      List<Class<?>> list0 = ClassUtil.findSuperTypes((Class<?>) null, (Class<?>) null);
      ClassUtil.isBogusClass(class0);
      ClassUtil.nonNullString("not a valid number");
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.findSuperTypes(class1, class1, list0);
      ClassUtil.quotedOr("tW|_VlQ", "Rvt");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isCollectionMapOrArray(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-455));
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      Class<AccessPattern> class2 = AccessPattern.class;
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) placeholderForType0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ObjectReader objectReader1 = objectReader0.without(jsonParser_Feature0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectReader objectReader2 = objectReader1.with(jsonFactory0);
      TypeReference<AccessibleObject> typeReference0 = (TypeReference<AccessibleObject>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectReader2.forType(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Float> class1 = Float.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "u!C[c]jGbB");
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class1, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapType0, javaTypeArray0, (JavaType) mapType0);
      CollectionType collectionType1 = collectionType0.withValueHandler(javaType0);
      collectionType1.withHandlersFrom(javaType0);
      collectionType1.getTypeName();
      CollectionType collectionType2 = collectionType1.withTypeHandler(javaTypeArray0[0]);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      CollectionType collectionType3 = collectionType2.withContentValueHandler(class0);
      collectionType3.hasGenericTypes();
      ClassUtil.quotedOr(collectionType3, "FULL_MATCH");
      Class<Long> class2 = Long.class;
      ClassUtil.isProxyType(class2);
      ClassUtil.backticked("g6vH#H}kY'us<$]>I");
      Class<Error> class3 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class3, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.canBeABeanType(class0);
      Class<InputStream> class1 = InputStream.class;
      ClassUtil.findClassAnnotations(class1);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      Class<SimpleModule> class2 = SimpleModule.class;
      ObjectReader objectReader1 = objectReader0.forType(class2);
      File file0 = MockFile.createTempFile("Rld~Z%TJ=)M", "JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, (-461), objectReader1, mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<Error> class1 = Error.class;
      ClassUtil.findSuperTypes(class1, class0);
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      SimpleType simpleType1 = simpleType0.withValueHandler(class1);
      ClassUtil.rawClass(simpleType1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
      ClassUtil.quotedOr((Object) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findConstructor((Class<AccessibleObject>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.defaultValue(class0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.getDeclaringClass(class0);
      ClassUtil.classNameOf((Object) null);
      ClassUtil.isLocalType((Class<?>) null, false);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class1);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType");
      MockException mockException0 = new MockException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.CollectionLikeType", sQLNonTransientException0);
      String string0 = "net.sf.cglib.proxy.java.lang.String";
      sQLNonTransientException0.getLocalizedMessage();
      sQLNonTransientException0.initCause(mockException0);
      sQLNonTransientException0.getLocalizedMessage();
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) mockException0, "net.sf.cglib.proxy.java.lang.String");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      MockIOException mockIOException0 = new MockIOException(sQLRecoverableException0);
      sQLRecoverableException0.initCause(mockIOException0);
      // Undeclared exception!
      ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Class<Module> class1 = Module.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass");
      try { 
        ClassUtil.throwRootCauseIfIOE(mockIOException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<SimpleModule> class0 = SimpleModule.class;
      Class<AccessPattern> class1 = AccessPattern.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ClassUtil.rawClass(simpleType0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLTimeoutException0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2, (ObjectCodec) null, byteArrayOutputStream0, byteArray0, 1886, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((-2574), 3);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("ad", "ad", 2, hashMap0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLClientInfoException: ad
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      boolean boolean0 = false;
      ClassUtil.findRawSuperTypes(class0, class0, false);
      MockError mockError0 = new MockError("net.sf.cglib.proxy.com.fasterxml.jackson.databind.Module");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0, "net.sf.cglib.proxy.com.fasterxml.jackson.databind.Module");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isConcrete((Member) constructor0);
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      SimpleType simpleType1 = simpleType0.withTypeHandler(constructor0);
      ClassUtil.findSuperTypes((JavaType) simpleType1, (Class<?>) class1, true);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.findConstructor(class0, true);
      Class<Error> class1 = Error.class;
      ClassUtil.isConcrete(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.getDeclaredMethods(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.findEnumType(class3);
      // Undeclared exception!
      try { 
        ClassUtil.getGenericInterfaces((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-69);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0, (-2773), (-5273));
      Class<AccessPattern> class0 = AccessPattern.class;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected FIELD_NAME: JSON
         //  at [Source: (byte[])\"b\uFFFD\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.hasEnclosingMethod(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isCollectionMapOrArray(class1);
      ClassUtil.getClassDescription(class0);
      Class<Character> class2 = Character.class;
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      Class<Object> class4 = Object.class;
      ClassUtil.createInstance(class4, true);
      ClassUtil.nullOrToString((Object) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("`com.fasterxml.jackson.databind.type.MapType`", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", (-1246572939), sQLFeatureNotSupportedException0);
      sQLFeatureNotSupportedException0.initCause(sQLIntegrityConstraintViolationException0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[]");
      sQLFeatureNotSupportedException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      // Undeclared exception!
      ClassUtil.getRootCause(sQLFeatureNotSupportedException0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ClassUtil.wrapperType(class0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.checkAndFixAccess((Member) constructor0, false);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      EnumSet.noneOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.nameOf((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.findClassAnnotations((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, JsonMappingException> enumMap0 = new EnumMap<ClientInfoStatus, JsonMappingException>(class0);
      ClassUtil.findEnumType(enumMap0);
      Class<AccessPattern> class1 = AccessPattern.class;
      EnumSet<AccessPattern> enumSet0 = EnumSet.noneOf(class1);
      EnumSet<AccessPattern> enumSet1 = EnumSet.complementOf(enumSet0);
      ClassUtil.findEnumType(enumSet1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.isConcrete(class0);
      Class<Module> class1 = Module.class;
      try { 
        ClassUtil.createInstance(class1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate class com.fasterxml.jackson.databind.Module, problem: null
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Long> class0 = Long.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-J_T9Dz");
      Class<?> class1 = ClassUtil.primitiveType(class0);
      ClassUtil.defaultValue(class1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-65);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassUtil.backticked("-J_T9Dz");
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.isCollectionMapOrArray(class2);
      ClassUtil.classNameOf(class2);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.hasEnclosingMethod(class3);
      ClassUtil.isLocalType(class3, false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isNonStaticInnerClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(iOContext1);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      objectReader0.withHandler(deserializationProblemHandler0);
      ClassUtil.findEnumType((Enum<?>) jsonEncoding0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getOuterClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.findSuperClasses((Class<?>) null, class1, false);
      Class<RuntimeException> class2 = RuntimeException.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, "com.fasterxml.jackso");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.canBeABeanType(class0);
      Class<AccessibleObject> class1 = AccessibleObject.class;
      ClassUtil.nameOf(class1);
      MockError mockError0 = new MockError("p7Kdr-XAw");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isNonStaticInnerClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerForUpdating(iOContext1);
      Class<Object> class1 = Object.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Double> class0 = Double.class;
      ClassUtil.isNonStaticInnerClass(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(iOContext1);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      objectReader0.withHandler(deserializationProblemHandler0);
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      ClassUtil.checkAndFixAccess((Member) classUtil_Ctor0._ctor, false);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Enum<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      ClassUtil.findConstructor(class0, false);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      EnumMap<ClientInfoStatus, JsonMappingException> enumMap0 = new EnumMap<ClientInfoStatus, JsonMappingException>(class1);
      enumMap0.values();
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory2 = typeFactory1.withClassLoader(classLoader0);
      Class<IOException> class1 = IOException.class;
      Class<Object> class2 = Object.class;
      // Undeclared exception!
      try { 
        typeFactory2.constructMapLikeType(class0, class1, class2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier Mock for TypeModifier, hashCode: 1818903513 (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1860374848) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<JsonMappingException> class1 = JsonMappingException.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.emptyIterator();
      ClassUtil.nameOf(class1);
      Class<Long> class2 = Long.class;
      ClassUtil.primitiveType(class2);
      Class<Byte> class3 = Byte.class;
      ClassUtil.isCollectionMapOrArray(class3);
      Class<ArrayType> class4 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class4, class1);
      ClassUtil.nonNullString("`com.fasterxml.jackson.databind.JsonMappingException`");
      Class<ReferenceType> class5 = ReferenceType.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class5, list0, "java.lang.RuntimeExc");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.util.ArrayList (of class com.fasterxml.jackson.databind.type.ReferenceType) must override method 'java.lang.RuntimeExc'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("+$/lM{+yL");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockRuntimeException0, "+$/lM{+yL");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockRuntimeException0, jsonMappingException_Reference0);
      HashMap<ClientInfoStatus, JsonMappingException> hashMap0 = new HashMap<ClientInfoStatus, JsonMappingException>();
      mockRuntimeException0.toString();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put(clientInfoStatus0, jsonMappingException0);
      EnumMap<ClientInfoStatus, JsonMappingException> enumMap0 = new EnumMap<ClientInfoStatus, JsonMappingException>(hashMap0);
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((EnumMap<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getDeclaredFields(class0);
      ClassUtil.isConcrete(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getOuterClass(class1);
      Class<SimpleModule> class2 = SimpleModule.class;
      ClassUtil.primitiveType(class2);
      MockException mockException0 = new MockException((String) null);
      int[] intArray0 = new int[4];
      intArray0[0] = 48;
      intArray0[1] = 48;
      intArray0[2] = 48;
      intArray0[3] = 48;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 48, intArray0, mockException0);
      mockException0.initCause(batchUpdateException0);
      mockException0.getStackTrace();
      // Undeclared exception!
      ClassUtil.throwRootCauseIfIOE(mockException0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getDeclaredFields(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.isJacksonStdImpl(class1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1241, 1241);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory2 = typeFactory1.withClassLoader(classLoader0);
      ArrayType arrayType0 = typeFactory2.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      arrayType1.withHandlersFrom(arrayType0);
      lRUMap0.get(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.findSuperTypes((JavaType) arrayType1, (Class<?>) class2, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      classLoader0.setClassAssertionStatus("3Y+Cd", false);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, (String) null, arrayType0);
      virtualAnnotatedMember0.toString();
      virtualAnnotatedMember0.getAnnotated();
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory1);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.createInstance(class0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      JsonLocation jsonLocation0 = new JsonLocation(mockFileWriter0, 241L, (-614630275), (-614630275));
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileWriter0, "Failed to find default constructor of class ", jsonLocation0);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "unknown");
      Float float0 = new Float(1796.662793643);
      ClassUtil.quotedOr(float0, "");
      ClassUtil.backticked("\"1796.6628\"");
      MockError mockError0 = new MockError();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("wIEXgSmu3ZF8", "com.fasterxml.jackson.core.JsonGenerator", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.ResolvedRecursiveType", (-1513967666));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("com.fasterxml.jackson.core.JsonGenerator", "", "org.hibernate.proxy.", (-520));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("No serializer found for class %s and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)", "wIEXgSmu3ZF8", "CQ/Lf", (-1513967666));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("com.fasterxml.jackson.core.JsonGenerator", "com.fasterxml.jackson.core.JsonGenerator", "\"1796.6628\"", 179);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("dB3^D)~f7)Ad:ml-", "com.fasterxml.jackson.core.JsonGenerator", "unknown", 769);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("wIEXgSmu3ZF8", "ALLOW_YAML_COMMENTS", "dB3^D)~f7)Ad:ml-", 107);
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("*Ll7pcEk6,<K?-#=", "hpA)7c", "A1q)(XMJ=QU^(QGDn", (-480));
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("No serializer found for class %s and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)", "ALLOW_YAML_COMMENTS", "", 769);
      stackTraceElementArray0[7] = stackTraceElement7;
      mockError0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wIEXgSmu3ZF8", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      ClassUtil.primitiveType(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.emptyIterator();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Class<Short> class0 = Short.TYPE;
      ClassUtil.isJacksonStdImpl((Object) class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.canBeABeanType(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, (String) null, (String) null);
      try { 
        ClassUtil.throwRootCauseIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `short` from String [N/A]: null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      ClassUtil.findConstructor(class0, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      Class<Annotation> class1 = Annotation.class;
      ClassUtil.getConstructors(class1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ClassUtil.wrapperType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.backticked("pHYp");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      mockRuntimeException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockRuntimeException0, "Cannot access ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.wrapperType(class0);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.String is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.isBogusClass(class0);
      HashMap<ClientInfoStatus, JsonMappingException> hashMap0 = new HashMap<ClientInfoStatus, JsonMappingException>();
      HashMap<ClientInfoStatus, JsonMappingException> hashMap1 = new HashMap<ClientInfoStatus, JsonMappingException>(hashMap0);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      SQLTransientException sQLTransientException0 = new SQLTransientException(")f:rH+OgZ/.RK7TO^{M");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "+$/lM{+yL");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      hashMap1.put(clientInfoStatus0, jsonMappingException0);
      EnumMap<ClientInfoStatus, JsonMappingException> enumMap0 = new EnumMap<ClientInfoStatus, JsonMappingException>(hashMap1);
      ClassUtil.findEnumType(enumMap0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isConcrete(class0);
      Enum<ClientInfoStatus> enum0 = (Enum<ClientInfoStatus>) mock(Enum.class, new ViolatedAssumptionAnswer());
      ClassUtil.findEnumType(enum0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) mockPrintStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "6>U,9'9t*\"Ct)!^#Pk");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, "JSON");
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) jsonMappingException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 6>U,9'9t*\"Ct)!^#Pk (through reference chain: UNKNOWN[\"JSON\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, classUtil_Ctor0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule("com.fasterxml.jackson.databind.util.ClassUtil", version0);
      ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("com.fasterxml.jackson.databind.util.ClassUtil");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte) (-1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 706, objectMapper1, mockPrintStream0, byteArray0, (byte)116, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures((byte)91, (byte)21);
      SQLDataException sQLDataException0 = new SQLDataException("[no message for ");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLDataException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) uTF8JsonGenerator0, (Exception) sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLTransactionRollbackException: java.sql.SQLDataException: [no message for 
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Iterator<PlaceholderForType> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.isJacksonStdImpl((Object) iterator0);
      ClassUtil.getClassDescription(iterator0);
      Class<Float> class0 = Float.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.primitiveType(class0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Byte byte0 = new Byte((byte)63);
      ClassUtil.isJacksonStdImpl((Object) byte0);
      ClassUtil.nonNullString("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType");
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)63;
      intArray0[1] = (int) (byte)63;
      intArray0[2] = (int) (byte)63;
      intArray0[3] = (int) (byte)63;
      intArray0[4] = (int) (byte)63;
      intArray0[5] = (int) (byte)63;
      intArray0[6] = (int) (byte)63;
      intArray0[7] = (int) (byte)63;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", intArray0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Q]", "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType", batchUpdateException0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0, "org.hibernate.proxy.com.fasterxml.jackson.databind.type.MapType");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<ShortNode> class0 = ShortNode.class;
      ClassUtil.canBeABeanType(class0);
      Class<CollectionType> class1 = CollectionType.class;
      ClassUtil.getEnclosingClass(class1);
      ClassUtil.backticked((String) null);
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfError(mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getOuterClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassUtil.emptyIterator();
      Class<ArrayType> class0 = ArrayType.class;
      List<Class<?>> list0 = ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.findSuperTypes(class0, class0, list0);
      ClassUtil.isLocalType(class0, false);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<SimpleType> class0 = SimpleType.class;
      ClassUtil.isBogusClass(class0);
      Class<ShortNode> class1 = ShortNode.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Double> class2 = Double.class;
      ClassUtil.findRawSuperTypes(class1, class2, true);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.classNameOf(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ClassUtil.nameOf((Named) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.getStackTrace();
      Throwable throwable0 = ClassUtil.throwIfError(mockThrowable0);
      Class<Double> class0 = Double.class;
      Class<Object> class1 = Object.class;
      ClassUtil.findRawSuperTypes(class1, class0, false);
      ClassUtil.getClassMethods(class0);
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class0 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      PropertyName propertyName0 = new PropertyName("jFK&", "jFK&");
      ObjectReader objectReader1 = objectReader0.withRootName(propertyName0);
      objectReader1.withoutAttribute(propertyName0);
      HashMap<Float, NoClass> hashMap0 = new HashMap<Float, NoClass>();
      ObjectReader objectReader2 = objectReader1.withAttributes(hashMap0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1826, objectReader2, byteArrayOutputStream0);
      uTF8JsonGenerator0.overrideStdFeatures((-2586), 126);
      MockFile mockFile0 = new MockFile("jFK&");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintStream0, "java.lang.Number", (Throwable) null);
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) uTF8JsonGenerator0, (Closeable) byteArrayOutputStream0, (Exception) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isConcrete(class0);
      ClassUtil.nameOf((Named) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      ClassUtil.primitiveType(class0);
      ClassUtil.emptyIterator();
      Class<String> class1 = String.class;
      String string0 = "PL{\\<GZ&J*";
      ClassUtil.verifyMustOverride(class1, "PL{<GZ&J*", "Q");
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.getOuterClass(class0);
      Class<Long> class1 = Long.class;
      ClassUtil.isConcrete(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.classOf(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, 426);
      MockIOException mockIOException0 = new MockIOException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", sQLDataException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD", "net.sf.cglib.proxy.com.fasterxml.jackson.databind.JsonMappingException", mockIOException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientException0);
      MockIOException mockIOException1 = new MockIOException(sQLFeatureNotSupportedException0);
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) mockIOException1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.sql.SQLFeatureNotSupportedException: java.sql.SQLNonTransientException: com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockError mockError0 = new MockError("_AuNE9qR4n{6~h<Ls", mockRuntimeException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.findEnumType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.findEnumType(class0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Constructor<Error> constructor0 = ClassUtil.findConstructor(class0, true);
      ClassUtil.isConcrete((Member) constructor0);
      Class<Short> class1 = Short.TYPE;
      ClassUtil.getEnclosingClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isProxyType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.classOf(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.getClassMethods(class0);
      ClassUtil.backticked("%M-R8W9GDh+!.7");
      Class<?> class1 = ClassUtil.wrapperType(class0);
      ClassUtil.getClassMethods(class1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Unexpected JSON value(s); expected at most %d properties (in JSON Array)", "?S`\"C$>wgR=R", 1801);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = new Long(0L);
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 642);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(0, 2);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Closeable) jsonGenerator0, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException: Unexpected JSON value(s); expected at most %d properties (in JSON Array)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.getConstructors((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getPackageName(class1);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("com.fasterxml.jackson.databind.type", (String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.io.IOException", sQLInvalidAuthorizationSpecException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException("primitive", sQLIntegrityConstraintViolationException0);
      ClassUtil.throwRootCauseIfIOE(sQLInvalidAuthorizationSpecException1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.hibernate.proxy.java.lang.Character", (String) null, (-6));
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) null, (Closeable) null, (Exception) sQLRecoverableException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLRecoverableException: org.hibernate.proxy.java.lang.Character
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.isProxyType(class0);
      ClassUtil.findEnumType(class0);
      Class<NoClass> class1 = NoClass.class;
      ClassUtil.isBogusClass(class1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("J8u39#@TPPSW0Xnc\"|", "XP~#B(F56");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.type.MapLikeType", sQLNonTransientConnectionException0);
      mockRuntimeException0.getStackTrace();
      // Undeclared exception!
      try { 
        ClassUtil.throwIfRTE(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.isNonStaticInnerClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getGenericInterfaces(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.getPackageName(class1);
      Class<IOException> class2 = IOException.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes(class2, class0);
      Class<IOException> class3 = IOException.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Sub-class %s (of class %s) must override method '%s'");
      ClassUtil.isLocalType(class3, false);
      Class<ArrayType> class4 = ArrayType.class;
      Class<Integer> class5 = Integer.class;
      ClassUtil.findRawSuperTypes(class4, class5, false);
      Class<MapType> class6 = MapType.class;
      ClassUtil.findSuperTypes(class6, class2, list0);
      ClassUtil.getOuterClass(class2);
      Class<AccessPattern> class7 = AccessPattern.class;
      ClassUtil.findSuperTypes(class1, class7);
      ClassUtil.isBogusClass(class5);
      // Undeclared exception!
      try { 
        ClassUtil.getClassMethods((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.canBeABeanType(class0);
      Class<Object> class1 = Object.class;
      ClassUtil.primitiveType(class1);
      Class<Void> class2 = Void.class;
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("\n");
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParamCount();
      classUtil_Ctor0.getParameterAnnotations();
      classUtil_Ctor0.getParameterAnnotations();
      Class<MapLikeType> class1 = MapLikeType.class;
      ClassUtil.getOuterClass(class1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      ClassUtil.findSuperClasses(class0, class0, false);
      ClassUtil.getOuterClass(class0);
      ClassUtil.findEnumType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.findConstructor(class1, false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Class<Object> class1 = Object.class;
      ClassUtil.hasEnclosingMethod(class1);
      ClassUtil.isNonStaticInnerClass(class0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findSuperClasses(class0, class0, false);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.getOuterClass(class1);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaringClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class0);
      ClassUtil.getPackageName(class0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<MapType> class0 = MapType.class;
      ClassUtil.getConstructors(class0);
      System.setCurrentTimeMillis((-4068L));
      Class<Short> class1 = Short.class;
      ClassUtil.findSuperTypes(class1, class0);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.nameOf(class2);
      ClassUtil.nonNull((Enum<AccessPattern>) null, (Enum<AccessPattern>) null);
      SQLWarning sQLWarning0 = new SQLWarning("+Si{bIo|g", "`com.fasterxml.jackson.databind.type.MapLikeType`");
      ClassUtil.throwRootCauseIfIOE(sQLWarning0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("e");
      sQLTransientConnectionException0.spliterator();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // e
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.backticked((String) null);
      ClassUtil.isJacksonStdImpl(class0);
      Class<MapType> class1 = MapType.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.MapType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.isLocalType(class0, false);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      ClassUtil.isConcrete(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigInteger bigInteger0 = BigInteger.TEN;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "<}[MKf[@-ySZua7-");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) null, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.annotation.NoClass` from number 10: <}[MKf[@-ySZua7-
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<String> class0 = String.class;
      Character character0 = Character.valueOf('G');
      Character character1 = Character.valueOf('d');
      ClassUtil.nonNull((Character) null, character1);
      ClassUtil.hasClass(character0, class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.isCollectionMapOrArray(class0);
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.nameOf(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getDeclaredFields((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.findConstructor(class0, false);
      Character character0 = new Character('X');
      ClassUtil.hasClass(character0, class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("net.sf.cglib.proxy.com.fasterxml.jackson.databind.annotation.NoClass", "No fallback setter/field defined for creator property '");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type", "cO_b4{2e8xVZ%8", (-1499), sQLTransientConnectionException0);
      ClassUtil.getRootCause(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getEnclosingClass((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.hasEnclosingMethod(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      JsonGenerator jsonGenerator0 = jsonFactory2.createGenerator((OutputStream) mockFileOutputStream0);
      SQLWarning sQLWarning0 = new SQLWarning("FAIL_ON_IGNORED_PROPERTIES", " is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
      Throwable throwable0 = ClassUtil.getRootCause(sQLWarning0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("org.hibernate.proxy.double", "|,R^[L+R7X{FRO\"nw", throwable0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JSON", sQLRecoverableException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("zi:E", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE(jsonGenerator0, (Exception) sQLNonTransientException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.sql.SQLNonTransientException: zi:E
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isJacksonStdImpl(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "java.lang.Void");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl1);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray1 = new JsonGenerator.Feature[8];
      jsonGenerator_FeatureArray1[0] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray1[1] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray1[2] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray1[3] = jsonGenerator_Feature1;
      jsonGenerator_FeatureArray1[4] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray1[5] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray1[6] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray1[7] = jsonGenerator_Feature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonGenerator_FeatureArray1);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 3237);
      Boolean boolean0 = coreXMLDeserializers_Std0.supportsUpdate((DeserializationConfig) null);
      ObjectMapper objectMapper4 = objectMapper3.setDefaultMergeable(boolean0);
      SerializerProvider serializerProvider0 = objectMapper4.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "<rf0");
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_OBJECT: java.lang.Void
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<String> class0 = String.class;
      ClassUtil.isNonStaticInnerClass(class0);
      ClassUtil.canBeABeanType(class0);
      Class<IOException> class1 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class1, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1, false);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.findClassAnnotations(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JSON", "JSON");
      ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      MapType mapType1 = mapType0.withTypeHandler(typeFactory0);
      MapLikeType mapLikeType0 = mapType1.withContentValueHandler((Object) null);
      Class<Double> class1 = Double.class;
      mapType0.withKeyValueHandler(typeFactory1);
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class1, false);
      ClassUtil.rawClass(mapType0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      MapType mapType1 = mapType0.withTypeHandler(typeFactory0);
      MapLikeType mapLikeType0 = mapType1.withContentValueHandler((Object) null);
      Class<Double> class1 = Double.class;
      ClassUtil.findSuperTypes((JavaType) mapLikeType0, (Class<?>) class1, false);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassUtil.emptyIterator();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("?==2VpIirYasr?j{iy", "-.C'lU|&=xfEu (H");
      TypeBindings.emptyBindings();
      Class<Character> class0 = Character.class;
      ClassUtil.getConstructors(class0);
      Class<Double> class1 = Double.TYPE;
      ClassUtil.defaultValue(class1);
      ClassUtil.backticked("org.hibernate.proxy.java.lang.Short");
      Class<JsonMappingException> class2 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class2, (Object) null, "?==2VpIirYasr?j{iy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.getPackageName((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassUtil.throwIfIOE((Throwable) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.nonNullString("com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer");
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.getEnclosingClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null, "org.hibernate.proxy.java.lang.Double");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class0);
      Class<Double> class1 = Double.class;
      ClassUtil.primitiveType(class1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.primitiveType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isCollectionMapOrArray((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.findClassAnnotations(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.primitiveType(class1);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.isCollectionMapOrArray(class2);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class0);
      // Undeclared exception!
      try { 
        ClassUtil.canBeABeanType((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ClassUtil.classOf((Object) null);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.findRawSuperTypes((Class<?>) null, class0, false);
      ClassUtil.throwIfError((Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      try { 
        objectOutputStream0.defaultWriteObject();
        fail("Expecting exception: NotActiveException");
      
      } catch(NotActiveException e) {
         //
         // not in call to writeObject
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Character character0 = new Character('c');
      Character.valueOf('c');
      ClassUtil.nonNull(character0, character0);
      ClassUtil.hasClass(character0, class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasGetterSignature((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.isConcrete(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      int[] intArray0 = new int[8];
      intArray0[0] = (-6);
      intArray0[1] = (-6);
      intArray0[2] = (-6);
      intArray0[3] = (-6);
      intArray0[4] = (-6);
      intArray0[5] = (-6);
      intArray0[6] = 2766;
      intArray0[7] = (-1345);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, intArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(batchUpdateException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, (String) null, (-6), sQLIntegrityConstraintViolationException0);
      sQLTransientException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0, sQLTransientException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, sQLClientInfoException0);
      sQLDataException0.setNextException(sQLClientInfoException0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      ClassUtil.classOf((Object) null);
      ClassUtil.getConstructors(class0);
      // Undeclared exception!
      try { 
        ClassUtil.hasEnclosingMethod((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Boolean> class0 = Boolean.class;
      Class<MapType> class1 = MapType.class;
      Class<JsonMappingException> class2 = JsonMappingException.class;
      typeFactory0.constructMapLikeType(class1, class2, class0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<String> class3 = String.class;
      Constructor<String> constructor0 = ClassUtil.findConstructor(class3, true);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap[] annotationMapArray0 = new AnnotationMap[1];
      annotationMapArray0[0] = annotationMap0;
      AnnotatedConstructor annotatedConstructor0 = new AnnotatedConstructor(typeResolutionContext_Basic0, constructor0, annotationMap0, annotationMapArray0);
      typeResolutionContext_Basic0.resolveType(class0);
      AnnotatedConstructor annotatedConstructor1 = annotatedConstructor0.withAnnotations(annotationMap0);
      Member member0 = annotatedConstructor1.getMember();
      ClassUtil.isConcrete(member0);
      Class<PlaceholderForType> class4 = PlaceholderForType.class;
      ClassUtil.getConstructors(class4);
      Class<AccessPattern> class5 = AccessPattern.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.util.AccessPattern is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getConstructors(class0);
      Class<String> class1 = String.class;
      ClassUtil.isLocalType(class1, true);
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) mockError0, (String) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ClassUtil.classNameOf((Object) null);
      JavaType javaType0 = null;
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.type.ResolvedRecursiveType with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Character> class1 = Character.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getDeclaredMethods(class0);
      Class<Object> class2 = Object.class;
      // Undeclared exception!
      try { 
        ClassUtil.createInstance((Class<Object>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      String string0 = ClassUtil.getClassDescription(class0);
      assertNotNull(string0);
      assertEquals("`java.lang.Error`", string0);
      
      Class<Integer> class1 = Integer.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      assertNotNull(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("int", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertNotNull(jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Class<ArrayType> class3 = ArrayType.class;
      Class<?> class4 = ClassUtil.primitiveType(class3);
      assertNull(class4);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class2);
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1041, class2.getModifiers());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("int", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertTrue(boolean0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class5 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class5);
      MapType mapType1 = mapType0.withTypeHandler("`java.lang.Error`");
      MapType mapType2 = (MapType)mapType1.withContentValueHandler(jsonGenerator_Feature0);
      MapType mapType3 = (MapType)mapType2.withStaticTyping();
      ClassUtil.nonNull((MapLikeType) mapType3, (MapLikeType) mapType3);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ClassUtil.primitiveType(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.primitiveType(class2);
      ClassUtil.isObjectOrPrimitive(class1);
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      ClassUtil.getClassMethods(class0);
      ClassUtil.nonNullString("s:pt]'T~c");
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class0, false);
      ClassUtil.primitiveType(class0);
      Class<ReferenceType> class1 = ReferenceType.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ClassUtil.findSuperTypes(class1, (Class<?>) null, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.hasEnclosingMethod(class0);
      String string0 = "Failed to narrow value type of %s with concrete-type annotation (value %s), from '%s': %s";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Failed to narrow value type of %s with concrete-type annotation (value %s), from '%s': %s");
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.classOf(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.throwIfError((Throwable) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("/8++LmI0`C6lV88", "YA<", 670);
      sQLSyntaxErrorException0.getStackTrace();
      ClassUtil.throwIfRTE((Throwable) null);
      ClassUtil.classOf("YA<");
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.nameOf(class2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      Class<NoClass> class1 = NoClass.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findRawSuperTypes(class1, class2, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "LH[A>%2Gm");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      ClassUtil.throwIfError(jsonMappingException1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("LH[A>%2Gm", "LH[A>%2Gm", jsonMappingException0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      try { 
        objectOutputStream0.defaultWriteObject();
        fail("Expecting exception: NotActiveException");
      
      } catch(NotActiveException e) {
         //
         // not in call to writeObject
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.canBeABeanType(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      ClassUtil.primitiveType(class2);
      // Undeclared exception!
      try { 
        ClassUtil.isObjectOrPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-76);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Object> class0 = Object.class;
      ClassUtil.primitiveType(class0);
      // Undeclared exception!
      try { 
        ClassUtil.isJacksonStdImpl((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getOuterClass(class0);
      Class<SimpleType> class1 = SimpleType.class;
      ClassUtil.canBeABeanType(class1);
      Character character0 = new Character('=');
      Character character1 = Character.valueOf('=');
      Character character2 = ClassUtil.nonNull(character0, character1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.hasClass(character2, class2);
      // Undeclared exception!
      try { 
        ClassUtil.throwRootCauseIfIOE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.hasClass("java.lang.Class@0000000001", class0);
      ClassUtil.findRawSuperTypes(class0, class0, false);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getPackageName(class1);
      Object object0 = new Object();
      Class<Byte> class2 = Byte.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class3 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class3);
      ClassUtil.getClassDescription(mapType0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("De", "com.fasterxml.jackson.databind.type", (-605166913));
      ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<MapLikeType> class0 = MapLikeType.class;
      ClassUtil.getDeclaredFields(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Failed to narrow value type of %s with concrete-type annotation (value %s), from '%s': %s");
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      // Undeclared exception!
      try { 
        ClassUtil.checkAndFixAccess((Member) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Class<Character> class1 = Character.class;
      ClassUtil.isConcrete(class1);
      ClassUtil.getDeclaredMethods(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.createInstance(class2, false);
      ClassUtil.isBogusClass(class2);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Class<Float> class0 = Float.class;
      ClassUtil.isConcrete(class0);
      Class<Character> class1 = Character.TYPE;
      ClassUtil.isConcrete(class1);
      ClassUtil.getDeclaredMethods(class0);
      Class<Object> class2 = Object.class;
      ClassUtil.createInstance(class2, false);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, "?NC'qFREX\"O");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Double> class0 = Double.class;
      ClassUtil.isLocalType(class0, false);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      ClassUtil.canBeABeanType(class0);
      ClassUtil.hasClass((Object) null, class0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassUtil.backticked("Y(<&xhqi9bcCx&");
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ClassUtil.findSuperClasses(class0, class0, true);
      ClassUtil.nonNullString("`Y(<&xhqi9bcCx&`");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("`Y(<&xhqi9bcCx&`", "Y(<&xhqi9bcCx&", (-3093));
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "]u9PF'BON");
      sQLRecoverableException0.initCause(jsonMappingException0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("`Y(<&xhqi9bcCx&`", "CF&2Ge%dPJ@ eP>k*h");
      sQLRecoverableException0.setNextException(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) sQLRecoverableException0, "com.fasterxml.jackson.databind.util.ClassUtil$Ctor");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.util.ClassUtil$Ctor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isJacksonStdImpl(class0);
      ClassUtil.canBeABeanType(class0);
      ClassUtil.getPackageName(class0);
      Object object0 = new Object();
      Class<Byte> class1 = Byte.class;
      Class<Object> class2 = Object.class;
      ClassUtil.findSuperClasses(class2, class1, false);
      ClassUtil.getGenericSuperclass(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.createInstance(class3, true);
      Class<ResolvedRecursiveType> class4 = ResolvedRecursiveType.class;
      ClassUtil.getEnclosingClass(class4);
      ClassUtil classUtil0 = new ClassUtil();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLException sQLException0 = new SQLException("keyUniverse", "1QTWs7^dFa,:+ywG", 1979);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "keyUniverse", 1979, sQLException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, sQLInvalidAuthorizationSpecException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) sQLSyntaxErrorException0);
      Throwable throwable0 = ClassUtil.throwIfRTE(jsonMappingException0);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE(throwable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // keyUniverse
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<Error> class0 = Error.class;
      ClassUtil.findClassAnnotations(class0);
      ClassUtil.getClassDescription((Object) null);
      Class<Integer> class1 = Integer.class;
      Class<?> class2 = ClassUtil.primitiveType(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ClassUtil.defaultValue(class2);
      ClassUtil.findEnumType(class1);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", "Z.5u4w3hE>7");
      ClassUtil.isNonStaticInnerClass(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.findBoundType("-.C'lU|&=xfEu (H");
      ClassUtil.rawClass((JavaType) null);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getPackageName(class1);
      Object object0 = new Object();
      Class<Byte> class2 = Byte.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.getGenericSuperclass(class3);
      Class<Object> class4 = Object.class;
      Object object1 = new Object();
      ClassUtil.getEnclosingClass(class4);
      Class<AccessPattern> class5 = AccessPattern.class;
      ClassUtil classUtil0 = new ClassUtil();
      Class<MapLikeType> class6 = MapLikeType.class;
      ClassUtil.hasEnclosingMethod(class6);
      Class<NoClass> class7 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class7, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getConstructor();
      ClassUtil.primitiveType(class5);
      Class<PlaceholderForType> class8 = PlaceholderForType.class;
      try { 
        ClassUtil.createInstance(class8, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.PlaceholderForType has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getGenericInterfaces(class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ZERO_LENGTH_ENUM_ARRAY", "[Property '", (-965));
      sQLTransientConnectionException0.spliterator();
      sQLTransientConnectionException0.getLocalizedMessage();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("ZERO_LENGTH_ENUM_ARRAY", "E(\"2", "serialVersionUID", 1818);
      stackTraceElementArray0[0] = stackTraceElement0;
      Class<Byte> class1 = Byte.class;
      Class<Integer> class2 = Integer.class;
      Class<AccessPattern> class3 = AccessPattern.class;
      ClassUtil.findSuperClasses(class2, class3, true);
      ClassUtil.getGenericSuperclass(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.createInstance(class4, true);
      ClassUtil.getEnclosingClass(class1);
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class5 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class5, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getConstructor();
      Class<Object> class6 = Object.class;
      ClassUtil.primitiveType(class6);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.findEnumType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getGenericInterfaces(class1);
      ClassUtil.primitiveType(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "sLVODdk%wHqnnRF9$");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLDataException0);
      sQLDataException0.addSuppressed(sQLSyntaxErrorException0);
      ClassUtil.throwRootCauseIfIOE(sQLDataException0);
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.nonNullString((String) null);
      Object object0 = new Object();
      Class<Byte> class2 = Byte.class;
      Class<Boolean> class3 = Boolean.class;
      ClassUtil.findSuperClasses(class2, class3, false);
      Class<Object> class4 = Object.class;
      ClassUtil.getGenericSuperclass(class4);
      Class<Object> class5 = Object.class;
      ClassUtil.createInstance(class5, false);
      ClassUtil.getEnclosingClass(class1);
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class6 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class6, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.getClassMethods(class1);
      ClassUtil.getClassMethods(class1);
      ClassUtil.getClassDescription(class1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, "De", (-605166913));
      ClassUtil.throwIfRTE(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8kgGg");
      ClassUtil.findConstructor(class0, true);
      Class<Float> class1 = Float.class;
      ClassUtil.getClassMethods(class1);
      Class<Short> class2 = Short.class;
      ClassUtil.getClassMethods(class2);
      ClassUtil.getClassDescription(class1);
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Float is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<Character> class0 = Character.class;
      ClassUtil.getDeclaredFields(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<IOException> class1 = IOException.class;
      ClassUtil.getDeclaredFields(class1);
      Class<ArrayType> class2 = ArrayType.class;
      ClassUtil.isObjectOrPrimitive(class2);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.nameOf(class0);
      ClassUtil.getOuterClass(class0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`java.lang.Short`");
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        ClassUtil.getRootCause((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Iterator<PlaceholderForType> iterator0 = ClassUtil.emptyIterator();
      ClassUtil.classNameOf(iterator0);
      Class<CollectionType> class0 = CollectionType.class;
      ClassUtil.getPackageName(class0);
      Object object0 = new Object();
      Class<MapLikeType> class1 = MapLikeType.class;
      boolean boolean0 = true;
      ClassUtil.findSuperClasses(class1, class1, true);
      Class<SimpleType> class2 = SimpleType.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.createInstance(class3, true);
      ClassUtil.getEnclosingClass(class2);
      Class<Object> class4 = Object.class;
      ClassUtil.getDeclaringClass(class4);
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class5 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class5, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isLocalType(class1, false);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      Class<JsonMappingException> class2 = JsonMappingException.class;
      ClassUtil.findConstructor(class2, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getConstructor();
      Class<Character> class3 = Character.class;
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassUtil.primitiveType(class0);
      Class<IOException> class1 = IOException.class;
      ClassUtil.canBeABeanType(class1);
      Class<Character> class2 = Character.class;
      ClassUtil.primitiveType(class2);
      Class<IOException> class3 = IOException.class;
      ClassUtil.isObjectOrPrimitive(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.createInstance(class4, false);
      MockException mockException0 = new MockException("~3f`&>E");
      ClassUtil.getRootCause(mockException0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.hasEnclosingMethod(class0);
      ClassUtil.isLocalType(class0, false);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      Class<Void> class1 = Void.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class1, class0);
      MapType mapType1 = mapType0.withTypeHandler(collectionLikeType0);
      mapType1.withContentValueHandler(collectionLikeType0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "org.hibernate.proxy.java.io.IOException", (Throwable) null);
      jsonMappingException0.clearLocation();
      try { 
        ClassUtil.throwIfIOE(jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // org.hibernate.proxy.java.io.IOException
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<Short> class0 = Short.class;
      ClassUtil.getConstructors(class0);
      ClassUtil.emptyIterator();
      ClassUtil.rawClass((JavaType) null);
      int[] intArray0 = new int[7];
      intArray0[0] = 65535;
      intArray0[1] = (-3);
      intArray0[2] = (-3712);
      intArray0[3] = (-1);
      intArray0[4] = (-2965);
      intArray0[5] = (-2688);
      intArray0[6] = (-2);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ClassUtil.throwIfIOE(batchUpdateException0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isLocalType(class1, false);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.findEnumType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<?> class2 = ClassUtil.primitiveType(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonFactory0.configure(jsonGenerator_Feature0, true);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      Constructor<AccessibleObject> constructor0 = ClassUtil.findConstructor(class3, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getConstructor();
      ClassUtil.primitiveType(class2);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "elementType");
      String string0 = "?==2VpIirYasr?j{iy";
      ClassUtil.emptyIterator();
      Class<Float> class0 = Float.class;
      ClassUtil.isObjectOrPrimitive(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ClassUtil.isNonStaticInnerClass(class1);
      Class<MapLikeType> class2 = MapLikeType.class;
      ClassUtil.isProxyType(class2);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      typeFactory0.withClassLoader(classLoader0);
      Class<LinkedList> class3 = LinkedList.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.util.LinkedList is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, "?NC'qFREX\"O");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<Double> class0 = Double.class;
      ClassUtil.isLocalType(class0, false);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      ClassUtil.throwIfIOE((Throwable) null);
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<Boolean> class0 = Boolean.class;
      ClassUtil.getEnclosingClass(class0);
      ClassUtil.quotedOr(class0, "Sub-class %s (of class %s) must override method '%s'");
      Class<Integer> class1 = Integer.class;
      try { 
        ClassUtil.createInstance(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ClassUtil.quotedOr((Object) null, "?NC'qFREX\"O");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "?NC'qFREX\"O", false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      TypeReference<String> typeReference0 = (TypeReference<String>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(typeReference0).getType();
      // Undeclared exception!
      try { 
        objectMapper0.readerFor(typeReference0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.canBeABeanType(class0);
      String string0 = ";ej_]ezIK";
      ClassUtil.nonNullString(";ej_]ezIK");
      long long0 = (-1285L);
      System.setCurrentTimeMillis((-1285L));
      Class<Object> class1 = Object.class;
      ClassUtil.findSuperClasses(class0, class1, false);
      ClassUtil.isConcrete(class1);
      int int0 = 127;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(127);
      Class<Byte> class2 = Byte.class;
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class2, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Byte with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Float float0 = new Float(0.0F);
      ClassUtil.isJacksonStdImpl((Object) float0);
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      Class<Annotation> class1 = Annotation.class;
      constructor0.getDeclaredAnnotationsByType(class1);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      classUtil_Ctor0.getDeclaredAnnotations();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializerFactory0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ClassUtil.Ctor classUtil_Ctor1 = new ClassUtil.Ctor((Constructor<?>) null);
      classUtil_Ctor0.getParamCount();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      ClassUtil.classOf(class0);
      Class<Error> class1 = Error.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.throwIfError((Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      try { 
        objectOutputStream0.defaultWriteObject();
        fail("Expecting exception: NotActiveException");
      
      } catch(NotActiveException e) {
         //
         // not in call to writeObject
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ClassUtil.isJacksonStdImpl(class0);
      Class<ArrayType> class1 = ArrayType.class;
      ClassUtil.canBeABeanType(class1);
      ClassUtil.getPackageName(class1);
      Object object0 = new Object();
      Class<Byte> class2 = Byte.class;
      ClassUtil.findSuperClasses(class1, class2, false);
      Class<SimpleType> class3 = SimpleType.class;
      ClassUtil.getGenericSuperclass(class3);
      Class<Object> class4 = Object.class;
      ClassUtil.createInstance(class4, true);
      ClassUtil.getEnclosingClass(class4);
      Class<AccessPattern> class5 = AccessPattern.class;
      ClassUtil.getDeclaringClass(class5);
      ClassUtil classUtil0 = new ClassUtil();
      Class<NoClass> class6 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class6, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      Class<Void> class7 = Void.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<AccessPattern> class0 = AccessPattern.class;
      ClassUtil.canBeABeanType(class0);
      Class<AccessPattern> class1 = AccessPattern.class;
      ClassUtil.getOuterClass(class1);
      Class<RuntimeException> class2 = RuntimeException.class;
      ClassUtil.canBeABeanType(class2);
      Class<Annotation> class3 = Annotation.class;
      ClassUtil.hasClass(class0, class3);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ClassUtil.findEnumType(class0);
      Class<Integer> class1 = Integer.class;
      ClassUtil.getGenericInterfaces(class1);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      ClassUtil.findClassAnnotations(class2);
      ClassUtil.primitiveType(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      boolean boolean0 = true;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      MockFile mockFile0 = new MockFile("sLVODdk%wHqnnRF9$", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      String string0 = "NULL";
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("JSON", "unknown", sQLTransientConnectionException0);
      MockException mockException0 = new MockException("NULL", sQLRecoverableException0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("JSON", "qF<BQ@6;?bjmAxf*x%");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // qF<BQ@6;?bjmAxf*x%
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.nonNullString("keyType");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Float> class0 = Float.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "\"%s\"", "i{_]");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<Integer> class2 = Integer.class;
      ClassUtil.getGenericSuperclass(class2);
      Class<Object> class3 = Object.class;
      ClassUtil.createInstance(class3, false);
      ClassUtil.getEnclosingClass(class3);
      ClassUtil.getDeclaringClass(class1);
      Class<NoClass> class4 = NoClass.class;
      Constructor<NoClass> constructor0 = ClassUtil.findConstructor(class4, true);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getDeclaredAnnotations();
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ClassUtil.isNonStaticInnerClass(class0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(612);
      placeholderForType0.getGenericSignature();
      placeholderForType0.toCanonical();
      placeholderForType0.findSuperType(class0);
      ClassUtil.isJacksonStdImpl((Object) "$613");
      ClassUtil.primitiveType(class0);
      Class<String> class1 = String.class;
      ClassUtil.isJacksonStdImpl(class1);
      ClassUtil.isLocalType(class0, false);
      Class<ReferenceType> class2 = ReferenceType.class;
      ClassUtil.getGenericInterfaces(class2);
      Class<RuntimeException> class3 = RuntimeException.class;
      ClassUtil.primitiveType(class3);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, false);
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      classUtil_Ctor0.getParameterAnnotations();
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      ClassUtil.checkAndFixAccess((Member) constructor1);
      Class<Void> class1 = Void.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class1, (JavaType) referenceType0, (JavaType) referenceType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Void with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ClassUtil.throwIfError((Throwable) null);
      Class<Object> class0 = Object.class;
      ClassUtil.getConstructors(class0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ClassUtil.getClassDescription((Object) null);
      ClassUtil.nonNullString("keyType");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Float> class0 = Float.TYPE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "7;/n<K+ed1", "i{_]");
      // Undeclared exception!
      try { 
        ClassUtil.closeOnFailAndThrowAsIOE((JsonGenerator) jsonGeneratorDelegate0, (Exception) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getGenericInterfaces(class0);
      ClassUtil.getConstructors(class0);
      ClassUtil.isLocalType(class0, false);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      ClassUtil.isConcrete(class0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      ClassUtil.getConstructors(class0);
      Class<Short> class1 = Short.class;
      ClassUtil.isLocalType(class1, false);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class2, "?mIH", (String) null);
      Throwable throwable0 = ClassUtil.throwIfError(jsonMappingException0);
      ClassUtil.isConcrete(class0);
      Class<AccessibleObject> class3 = AccessibleObject.class;
      ClassUtil.hasClass(throwable0, class3);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = true;
      ClassUtil.isLocalType(class0, true);
      ClassUtil.classOf(class0);
      ClassUtil.nonNullString((String) null);
      Class<Error> class1 = Error.class;
      ClassUtil.findRawSuperTypes(class0, class1, false);
      ClassUtil.throwIfError((Throwable) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      try { 
        objectOutputStream0.defaultWriteObject();
        fail("Expecting exception: NotActiveException");
      
      } catch(NotActiveException e) {
         //
         // not in call to writeObject
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ClassUtil.getDeclaredMethods(class0);
      ClassUtil.nullOrToString(class0);
      ClassUtil.isJacksonStdImpl(class0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("NULL", "NULL");
      Class<Integer> class1 = Integer.class;
      ClassUtil.isNonStaticInnerClass(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.findBoundType("NULL");
      ClassUtil.rawClass((JavaType) null);
      ClassUtil.findSuperTypes(class0, (Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<String> class1 = String.class;
      ClassUtil.findSuperTypes(class0, class1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Class<ReferenceType>[] classArray0 = (Class<ReferenceType>[]) Array.newInstance(Class.class, 5);
      Class<ReferenceType> class2 = ReferenceType.class;
      classArray0[0] = class2;
      Class<ReferenceType> class3 = ReferenceType.class;
      classArray0[1] = class3;
      Class<ReferenceType> class4 = ReferenceType.class;
      classArray0[2] = class4;
      Class<ReferenceType> class5 = ReferenceType.class;
      classArray0[3] = class5;
      Class<ReferenceType> class6 = ReferenceType.class;
      classArray0[4] = class6;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findSingleArgConstructor(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<NoClass> class0 = NoClass.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("ZERO_LENGTH_ENUM_ARRAY", "[Property '", (-965));
      assertNotNull(sQLTransientConnectionException0);
      assertEquals((-965), sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ZERO_LENGTH_ENUM_ARRAY", sQLTransientConnectionException0.toString());
      assertEquals("[Property '", sQLTransientConnectionException0.getSQLState());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLTransientConnectionException0.getMessage());
      
      Spliterator<Throwable> spliterator0 = sQLTransientConnectionException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals((-965), sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ZERO_LENGTH_ENUM_ARRAY", sQLTransientConnectionException0.toString());
      assertEquals("[Property '", sQLTransientConnectionException0.getSQLState());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLTransientConnectionException0.getMessage());
      
      String string0 = sQLTransientConnectionException0.getLocalizedMessage();
      assertNotNull(string0);
      assertEquals((-965), sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ZERO_LENGTH_ENUM_ARRAY", sQLTransientConnectionException0.toString());
      assertEquals("[Property '", sQLTransientConnectionException0.getSQLState());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLTransientConnectionException0.getMessage());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", string0);
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement("ZERO_LENGTH_ENUM_ARRAY", "E(\"2", "serialVersionUID", 1818);
      assertNotNull(stackTraceElement0);
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", stackTraceElement0.getClassName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals(1818, stackTraceElement0.getLineNumber());
      assertEquals("serialVersionUID", stackTraceElement0.getFileName());
      assertEquals("E(\"2", stackTraceElement0.getMethodName());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY.E(\"2(serialVersionUID:1818)", stackTraceElement0.toString());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("ZERO_LENGTH_ENUM_ARRAY", "^w I#~4a,", "jyz~?", 1307);
      assertNotNull(stackTraceElement1);
      assertEquals("jyz~?", stackTraceElement1.getFileName());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY.^w I#~4a,(jyz~?:1307)", stackTraceElement1.toString());
      assertEquals("^w I#~4a,", stackTraceElement1.getMethodName());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", stackTraceElement1.getClassName());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertEquals(1307, stackTraceElement1.getLineNumber());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Olt.", "^w I#~4a,", "T=}d.*6[%%vd", 1927);
      assertNotNull(stackTraceElement2);
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("T=}d.*6[%%vd", stackTraceElement2.getFileName());
      assertEquals(1927, stackTraceElement2.getLineNumber());
      assertEquals("Olt.", stackTraceElement2.getClassName());
      assertEquals("^w I#~4a,", stackTraceElement2.getMethodName());
      assertEquals("Olt..^w I#~4a,(T=}d.*6[%%vd:1927)", stackTraceElement2.toString());
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("Unexpected tokens after complete type", "jyz~?", "&o}!/:BB_VL]v,", 0);
      assertNotNull(stackTraceElement3);
      assertEquals("Unexpected tokens after complete type.jyz~?(&o}!/:BB_VL]v,:0)", stackTraceElement3.toString());
      assertEquals("Unexpected tokens after complete type", stackTraceElement3.getClassName());
      assertEquals(0, stackTraceElement3.getLineNumber());
      assertEquals("&o}!/:BB_VL]v,", stackTraceElement3.getFileName());
      assertEquals("jyz~?", stackTraceElement3.getMethodName());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("unknown", "com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer", "Dh829NInD b?tN4;]K", (-5125));
      assertNotNull(stackTraceElement4);
      assertEquals("Dh829NInD b?tN4;]K", stackTraceElement4.getFileName());
      assertEquals("unknown", stackTraceElement4.getClassName());
      assertFalse(stackTraceElement4.isNativeMethod());
      assertEquals((-5125), stackTraceElement4.getLineNumber());
      assertEquals("unknown.com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer(Dh829NInD b?tN4;]K)", stackTraceElement4.toString());
      assertEquals("com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer", stackTraceElement4.getMethodName());
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("", "A)sS(tgH,r0N", "E(\"2", 96);
      assertNotNull(stackTraceElement5);
      assertEquals("A)sS(tgH,r0N", stackTraceElement5.getMethodName());
      assertEquals(".A)sS(tgH,r0N(E(\"2:96)", stackTraceElement5.toString());
      assertEquals("", stackTraceElement5.getClassName());
      assertFalse(stackTraceElement5.isNativeMethod());
      assertEquals(96, stackTraceElement5.getLineNumber());
      assertEquals("E(\"2", stackTraceElement5.getFileName());
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement4));
      
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("serialVersionUID", "entrySet", "size", 0);
      assertNotNull(stackTraceElement6);
      assertEquals("serialVersionUID", stackTraceElement6.getClassName());
      assertEquals("size", stackTraceElement6.getFileName());
      assertEquals("entrySet", stackTraceElement6.getMethodName());
      assertFalse(stackTraceElement6.isNativeMethod());
      assertEquals(0, stackTraceElement6.getLineNumber());
      assertEquals("serialVersionUID.entrySet(size:0)", stackTraceElement6.toString());
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement5));
      assertFalse(stackTraceElement6.equals((Object)stackTraceElement4));
      
      stackTraceElementArray0[6] = stackTraceElement6;
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      assertEquals((-965), sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ZERO_LENGTH_ENUM_ARRAY", sQLTransientConnectionException0.toString());
      assertEquals("[Property '", sQLTransientConnectionException0.getSQLState());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLTransientConnectionException0.getMessage());
      assertEquals(7, stackTraceElementArray0.length);
      
      String string1 = sQLTransientConnectionException0.getLocalizedMessage();
      assertNotNull(string1);
      assertEquals((-965), sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ZERO_LENGTH_ENUM_ARRAY", sQLTransientConnectionException0.toString());
      assertEquals("[Property '", sQLTransientConnectionException0.getSQLState());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLTransientConnectionException0.getMessage());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", string1);
      
      SQLTransientConnectionException sQLTransientConnectionException1 = (SQLTransientConnectionException)ClassUtil.getRootCause(sQLTransientConnectionException0);
      assertNotNull(sQLTransientConnectionException1);
      assertEquals((-965), sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: ZERO_LENGTH_ENUM_ARRAY", sQLTransientConnectionException0.toString());
      assertEquals("[Property '", sQLTransientConnectionException0.getSQLState());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLTransientConnectionException0.getMessage());
      assertEquals("[Property '", sQLTransientConnectionException1.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: ZERO_LENGTH_ENUM_ARRAY", sQLTransientConnectionException1.toString());
      assertEquals("ZERO_LENGTH_ENUM_ARRAY", sQLTransientConnectionException1.getMessage());
      assertEquals((-965), sQLTransientConnectionException1.getErrorCode());
      assertSame(sQLTransientConnectionException0, sQLTransientConnectionException1);
      assertSame(sQLTransientConnectionException1, sQLTransientConnectionException0);
      
      Class<?> class1 = ClassUtil.getDeclaringClass(class0);
      assertNull(class1);
      
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      boolean boolean0 = ClassUtil.isBogusClass(class2);
      assertFalse(boolean0);
      
      Class<ReferenceType> class3 = ReferenceType.class;
      String string2 = ClassUtil.canBeABeanType(class3);
      assertNull(string2);
      
      Class<Short> class4 = Short.class;
      boolean boolean1 = ClassUtil.isConcrete(class4);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Iterator<PlaceholderForType> iterator0 = ClassUtil.emptyIterator();
      assertNotNull(iterator0);
      
      String string0 = ClassUtil.classNameOf(iterator0);
      assertNotNull(string0);
      assertEquals("`java.util.Collections$EmptyIterator`", string0);
      
      Class<JsonMappingException> class0 = JsonMappingException.class;
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<IOException> class0 = IOException.class;
      List<JavaType> list0 = ClassUtil.findSuperTypes((JavaType) null, class0, true);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.io.IOException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException1 = new SQLFeatureNotSupportedException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLFeatureNotSupportedException0);
      assertNotNull(sQLFeatureNotSupportedException1);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLFeatureNotSupportedException1.toString());
      assertEquals("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLFeatureNotSupportedException1.getSQLState());
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLFeatureNotSupportedException1);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLFeatureNotSupportedException1.toString());
      assertEquals("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      Spliterator<Throwable> spliterator0 = sQLSyntaxErrorException0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLFeatureNotSupportedException1.toString());
      assertEquals("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = (SQLSyntaxErrorException)ClassUtil.throwIfError(sQLSyntaxErrorException0);
      assertNotNull(sQLSyntaxErrorException1);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLFeatureNotSupportedException1.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLFeatureNotSupportedException1.toString());
      assertEquals("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLFeatureNotSupportedException1.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLSyntaxErrorException1.getMessage());
      assertNull(sQLSyntaxErrorException1.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLFeatureNotSupportedException: com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", sQLSyntaxErrorException1.toString());
      assertNotSame(sQLFeatureNotSupportedException0, sQLFeatureNotSupportedException1);
      assertNotSame(sQLFeatureNotSupportedException1, sQLFeatureNotSupportedException0);
      assertSame(sQLSyntaxErrorException0, sQLSyntaxErrorException1);
      assertSame(sQLSyntaxErrorException1, sQLSyntaxErrorException0);
      assertFalse(sQLFeatureNotSupportedException0.equals((Object)sQLFeatureNotSupportedException1));
      assertFalse(sQLFeatureNotSupportedException1.equals((Object)sQLFeatureNotSupportedException0));
      
      HashMap<AccessPattern, Long> hashMap0 = new HashMap<AccessPattern, Long>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      EnumMap<AccessPattern, Long> enumMap0 = null;
      try {
        enumMap0 = new EnumMap<AccessPattern, Long>(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified map is empty
         //
         verifyException("java.util.EnumMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("elementType", "?==2VpIirYasr?j{iy", intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("elementType", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.BatchUpdateException: elementType", batchUpdateException0.toString());
      assertEquals("?==2VpIirYasr?j{iy", batchUpdateException0.getSQLState());
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.unwrapAndThrowAsIAE((Throwable) batchUpdateException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // elementType
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) float0);
      assertFalse(boolean0);
      
      Class<IOException> class0 = IOException.class;
      Constructor<IOException> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNotNull(constructor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      
      Class<Annotation> class1 = Annotation.class;
      Annotation[] annotationArray0 = constructor0.getDeclaredAnnotationsByType(class1);
      assertNotNull(annotationArray0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertEquals(0, annotationArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      
      Annotation[] annotationArray1 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray1);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertNotSame(annotationArray1, annotationArray0);
      assertFalse(annotationArray1.equals((Object)annotationArray0));
      assertEquals(0, annotationArray1.length);
      
      Annotation[] annotationArray2 = classUtil_Ctor0.getDeclaredAnnotations();
      assertNotNull(annotationArray2);
      assertEquals("public java.io.IOException()", constructor0.toString());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isVarArgs());
      assertTrue(constructor0.isAccessible());
      assertSame(annotationArray2, annotationArray1);
      assertNotSame(annotationArray2, annotationArray0);
      assertFalse(annotationArray2.equals((Object)annotationArray0));
      assertEquals(0, annotationArray2.length);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      assertNotNull(deserializerFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializerFactory0, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, byteArrayOutputStream0, byteArray0, 0, false);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(uTF8JsonGenerator0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, byteArray0.length);
      
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.useDefaultPrettyPrinter();
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(uTF8JsonGenerator1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, byteArray0.length);
      
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator1, "ZERO_LENGTH_ENUM_ARRAY");
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(jsonMappingException0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator1.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator1.getFormatFeatures());
      assertTrue(uTF8JsonGenerator1.canOmitFields());
      assertFalse(uTF8JsonGenerator1.isClosed());
      assertFalse(uTF8JsonGenerator1.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator1.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator1.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator1.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator1.getFeatureMask());
      assertFalse(uTF8JsonGenerator1.canWriteBinaryNatively());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertSame(uTF8JsonGenerator0, uTF8JsonGenerator1);
      assertSame(uTF8JsonGenerator1, uTF8JsonGenerator0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, byteArray0.length);
      
      try { 
        ClassUtil.throwAsMappingException((DeserializationContext) defaultDeserializationContext0, (IOException) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ZERO_LENGTH_ENUM_ARRAY
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<RuntimeException> class1 = RuntimeException.class;
      Constructor<RuntimeException> constructor0 = ClassUtil.findConstructor(class1, false);
      assertNotNull(constructor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor(constructor0);
      assertNotNull(classUtil_Ctor0);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      
      Constructor<?> constructor1 = classUtil_Ctor0.getConstructor();
      assertNotNull(constructor1);
      assertEquals("public java.lang.RuntimeException()", constructor0.toString());
      assertFalse(constructor0.isVarArgs());
      assertEquals(1, constructor0.getModifiers());
      assertFalse(constructor0.isSynthetic());
      assertFalse(constructor0.isAccessible());
      assertFalse(constructor1.isAccessible());
      assertEquals(1, constructor1.getModifiers());
      assertFalse(constructor1.isVarArgs());
      assertEquals("public java.lang.RuntimeException()", constructor1.toString());
      assertFalse(constructor1.isSynthetic());
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, constructor1, "+:~N61=kSB2,x");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.reflect.Constructor (of class java.lang.Float) must override method '+:~N61=kSB2,x'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Constructor<CollectionLikeType> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaringClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("|91'hie/8", "0", "|'T|/", 2724);
      assertNotNull(stackTraceElement0);
      assertEquals("|91'hie/8", stackTraceElement0.getClassName());
      assertEquals(2724, stackTraceElement0.getLineNumber());
      assertEquals("|'T|/", stackTraceElement0.getFileName());
      assertFalse(stackTraceElement0.isNativeMethod());
      assertEquals("|91'hie/8.0(|'T|/:2724)", stackTraceElement0.toString());
      assertEquals("0", stackTraceElement0.getMethodName());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("}g)EN^yWR1", "|'T|/", "|91'hie/8", 44);
      assertNotNull(stackTraceElement1);
      assertEquals(44, stackTraceElement1.getLineNumber());
      assertEquals("|'T|/", stackTraceElement1.getMethodName());
      assertEquals("}g)EN^yWR1", stackTraceElement1.getClassName());
      assertEquals("|91'hie/8", stackTraceElement1.getFileName());
      assertEquals("}g)EN^yWR1.|'T|/(|91'hie/8:44)", stackTraceElement1.toString());
      assertFalse(stackTraceElement1.isNativeMethod());
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("|'T|/", "vals", "vals", 2724);
      assertNotNull(stackTraceElement2);
      assertEquals("|'T|/", stackTraceElement2.getClassName());
      assertEquals(2724, stackTraceElement2.getLineNumber());
      assertEquals("vals", stackTraceElement2.getMethodName());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("|'T|/.vals(vals:2724)", stackTraceElement2.toString());
      assertEquals("vals", stackTraceElement2.getFileName());
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("", "rixz<I#AO", "u4;SuFQ<&hQo<it$:1'", 2724);
      assertNotNull(stackTraceElement3);
      assertEquals(".rixz<I#AO(u4;SuFQ<&hQo<it$:1':2724)", stackTraceElement3.toString());
      assertEquals("u4;SuFQ<&hQo<it$:1'", stackTraceElement3.getFileName());
      assertEquals("rixz<I#AO", stackTraceElement3.getMethodName());
      assertEquals("", stackTraceElement3.getClassName());
      assertEquals(2724, stackTraceElement3.getLineNumber());
      assertFalse(stackTraceElement3.isNativeMethod());
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement3.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("p-", "vals", "vals", (-1368));
      assertNotNull(stackTraceElement4);
      assertEquals("p-", stackTraceElement4.getClassName());
      assertEquals("p-.vals(vals)", stackTraceElement4.toString());
      assertEquals("vals", stackTraceElement4.getMethodName());
      assertFalse(stackTraceElement4.isNativeMethod());
      assertEquals("vals", stackTraceElement4.getFileName());
      assertEquals((-1368), stackTraceElement4.getLineNumber());
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement4.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("", "vals", "9+Kc[,#G!?5h`c.", (-3546));
      assertNotNull(stackTraceElement5);
      assertEquals("", stackTraceElement5.getClassName());
      assertEquals("vals", stackTraceElement5.getMethodName());
      assertEquals((-3546), stackTraceElement5.getLineNumber());
      assertFalse(stackTraceElement5.isNativeMethod());
      assertEquals(".vals(9+Kc[,#G!?5h`c.)", stackTraceElement5.toString());
      assertEquals("9+Kc[,#G!?5h`c.", stackTraceElement5.getFileName());
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement4));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement2));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement3));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement0));
      assertFalse(stackTraceElement5.equals((Object)stackTraceElement1));
      
      stackTraceElementArray0[5] = stackTraceElement5;
      sQLClientInfoException0.setStackTrace(stackTraceElementArray0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(6, stackTraceElementArray0.length);
      
      String string0 = sQLClientInfoException0.getLocalizedMessage();
      assertNull(string0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      String string1 = "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator";
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLClientInfoException0, "com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) "[]", "vals");
      assertNotNull(jsonMappingException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("[]", "[]", 96, jsonMappingException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(96, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: []", sQLTimeoutException0.toString());
      assertEquals("[]", sQLTimeoutException0.getMessage());
      assertEquals("[]", sQLTimeoutException0.getSQLState());
      
      // Undeclared exception!
      try { 
        ClassUtil.throwAsIAE((Throwable) sQLTimeoutException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // []
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Constructor<Double> constructor0 = ClassUtil.findConstructor(class0, false);
      assertNull(constructor0);
      
      Class<String> class1 = String.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class1);
      assertNotNull(typeArray0);
      assertEquals(3, typeArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.isConcrete((Member) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<Short> class0 = Short.class;
      boolean boolean0 = ClassUtil.hasEnclosingMethod(class0);
      assertFalse(boolean0);
      
      Class<SimpleType> class1 = SimpleType.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.type.SimpleType is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<Error> class0 = Error.class;
      Annotation[] annotationArray0 = ClassUtil.findClassAnnotations(class0);
      assertNotNull(annotationArray0);
      assertEquals(0, annotationArray0.length);
      
      // Undeclared exception!
      try { 
        ClassUtil.verifyMustOverride(class0, class0, " CgbaE{y<?@");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Sub-class java.lang.Class (of class java.lang.Error) must override method ' CgbaE{y<?@'
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<AccessibleObject> class0 = AccessibleObject.class;
      AccessibleObject accessibleObject0 = ClassUtil.createInstance(class0, true);
      assertNotNull(accessibleObject0);
      assertFalse(accessibleObject0.isAccessible());
      
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        accessibleObject0.isAnnotationPresent(class1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // All subclasses should override this method
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<String> class0 = String.class;
      Class class1 = (Class)ClassUtil.getGenericSuperclass(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      String string0 = ClassUtil.backticked("9$a5n%9rM%+} ");
      assertNotNull(string0);
      assertEquals("`9$a5n%9rM%+} `", string0);
      
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      Class class3 = (Class)ClassUtil.getGenericSuperclass(class2);
      assertNotNull(class3);
      assertFalse(class3.isAnnotation());
      assertEquals("class com.fasterxml.jackson.databind.type.TypeBase", class3.toString());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isPrimitive());
      assertEquals(1025, class3.getModifiers());
      assertNotSame(class3, class1);
      assertFalse(class3.equals((Object)class1));
      
      Class<Object> class4 = Object.class;
      Object object0 = ClassUtil.createInstance(class4, false);
      assertNotNull(object0);
      
      Class<?> class5 = ClassUtil.getEnclosingClass(class2);
      assertNull(class5);
      
      Class<?> class6 = ClassUtil.getDeclaringClass(class0);
      assertNull(class6);
      
      ClassUtil classUtil0 = new ClassUtil();
      assertNotNull(classUtil0);
      
      Class<NoClass> class7 = NoClass.class;
      try { 
        ClassUtil.findConstructor(class7, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for com.fasterxml.jackson.databind.annotation.NoClass is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(0, fieldArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Field[] fieldArray1 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray1);
      assertNotSame(fieldArray1, fieldArray0);
      assertFalse(fieldArray1.equals((Object)fieldArray0));
      assertEquals(0, fieldArray1.length);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(0, fieldArray0.length);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Q<pv|vS0c,f79G", "com.fasterxml.jackson.databind.util.ClassUtil", 1803, sQLClientInfoException0);
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("Q<pv|vS0c,f79G", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: Q<pv|vS0c,f79G", sQLTimeoutException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLTimeoutException0.getSQLState());
      assertEquals(1803, sQLTimeoutException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Q<pv|vS0c,f79G", sQLTimeoutException0);
      assertNotNull(sQLTimeoutException1);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("Q<pv|vS0c,f79G", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: Q<pv|vS0c,f79G", sQLTimeoutException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLTimeoutException0.getSQLState());
      assertEquals(1803, sQLTimeoutException0.getErrorCode());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Q<pv|vS0c,f79G", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("Q<pv|vS0c,f79G", sQLTimeoutException1.getMessage());
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      
      MockThrowable mockThrowable0 = new MockThrowable(sQLTimeoutException1);
      assertNotNull(mockThrowable0);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      
      Throwable throwable0 = ClassUtil.throwIfError(mockThrowable0);
      assertNotNull(throwable0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("Q<pv|vS0c,f79G", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: Q<pv|vS0c,f79G", sQLTimeoutException0.toString());
      assertEquals("com.fasterxml.jackson.databind.util.ClassUtil", sQLTimeoutException0.getSQLState());
      assertEquals(1803, sQLTimeoutException0.getErrorCode());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: Q<pv|vS0c,f79G", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("Q<pv|vS0c,f79G", sQLTimeoutException1.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLTimeoutException: Q<pv|vS0c,f79G", mockThrowable0.toString());
      assertEquals("java.sql.SQLTimeoutException: Q<pv|vS0c,f79G", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLTimeoutException: Q<pv|vS0c,f79G", throwable0.toString());
      assertEquals("java.sql.SQLTimeoutException: Q<pv|vS0c,f79G", throwable0.getMessage());
      assertNotSame(sQLTimeoutException0, sQLTimeoutException1);
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      assertSame(mockThrowable0, throwable0);
      assertSame(throwable0, mockThrowable0);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1803);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      
      Class<Integer> class1 = Integer.class;
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[0], javaType0);
      assertNotNull(referenceType0);
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      assertEquals(6, javaTypeArray0.length);
      
      Class<Long> class2 = Long.class;
      CollectionType collectionType0 = CollectionType.construct(class2, (TypeBindings) null, javaTypeArray0[0], (JavaType[]) null, javaType0);
      assertNotNull(collectionType0);
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isArrayType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertEquals(6, javaTypeArray0.length);
      
      Character character0 = new Character('I');
      assertNotNull(character0);
      assertEquals('I', (char)character0);
      
      CollectionType collectionType1 = collectionType0.withTypeHandler(character0);
      assertNotNull(collectionType1);
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(0, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isFinal());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isConcrete());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isArrayType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType0, collectionType1);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertEquals(6, javaTypeArray0.length);
      
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(collectionType1);
      assertNotNull(referenceType1);
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(0, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isFinal());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isConcrete());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isEnumType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isArrayType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(collectionType0, collectionType1);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertEquals(6, javaTypeArray0.length);
      
      ReferenceType referenceType2 = referenceType1.withContentTypeHandler((Object) null);
      assertNotNull(referenceType2);
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(0, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isFinal());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isConcrete());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isEnumType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isFinal());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.hasHandlers());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isEnumType());
      assertFalse(referenceType2.isAbstract());
      assertTrue(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.useStaticType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isArrayType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertNotSame(collectionType1, collectionType0);
      assertSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertSame(referenceType2, referenceType1);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(collectionType0, collectionType1);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertEquals(6, javaTypeArray0.length);
      
      ReferenceType referenceType3 = (ReferenceType)referenceType2.withContentValueHandler(character0);
      assertNotNull(referenceType3);
      assertTrue(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertEquals(0, collectionType1.containedTypeCount());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isFinal());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isConcrete());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isEnumType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isFinal());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.hasHandlers());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isEnumType());
      assertFalse(referenceType2.isAbstract());
      assertTrue(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.useStaticType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType3.isFinal());
      assertTrue(referenceType3.isReferenceType());
      assertFalse(referenceType3.isArrayType());
      assertFalse(referenceType3.isInterface());
      assertFalse(referenceType3.hasHandlers());
      assertFalse(referenceType3.isCollectionLikeType());
      assertFalse(referenceType3.useStaticType());
      assertFalse(referenceType3.isAnchorType());
      assertFalse(referenceType3.isContainerType());
      assertFalse(referenceType3.isMapLikeType());
      assertFalse(referenceType3.hasValueHandler());
      assertFalse(referenceType3.isPrimitive());
      assertTrue(referenceType3.isJavaLangObject());
      assertEquals(0, referenceType3.containedTypeCount());
      assertFalse(referenceType3.isEnumType());
      assertFalse(referenceType3.isAbstract());
      assertTrue(referenceType3.isConcrete());
      assertTrue(referenceType3.hasContentType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isJavaLangObject());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.hasContentType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isFinal());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isArrayType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.useStaticType());
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(referenceType1, referenceType3);
      assertSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType2, referenceType3);
      assertSame(referenceType2, referenceType1);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType3, referenceType2);
      assertNotSame(referenceType3, referenceType1);
      assertNotSame(referenceType3, referenceType0);
      assertNotSame(referenceType0, referenceType3);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(collectionType0, collectionType1);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType3.equals((Object)referenceType0));
      assertTrue(referenceType3.equals((Object)referenceType1));
      assertTrue(referenceType3.equals((Object)referenceType2));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertEquals(6, javaTypeArray0.length);
      
      javaTypeArray0[1] = (JavaType) referenceType3;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[1]);
      assertNotNull(collectionLikeType0);
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertEquals(6, javaTypeArray0.length);
      
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      assertNotNull(collectionLikeType1);
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType1.isInterface());
      assertTrue(collectionLikeType1.isConcrete());
      assertFalse(collectionLikeType1.isPrimitive());
      assertFalse(collectionLikeType1.isArrayType());
      assertFalse(collectionLikeType1.hasValueHandler());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertEquals(0, collectionLikeType1.containedTypeCount());
      assertTrue(collectionLikeType1.useStaticType());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertFalse(collectionLikeType1.isAbstract());
      assertFalse(collectionLikeType1.isEnumType());
      assertFalse(collectionLikeType1.hasHandlers());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertTrue(collectionLikeType1.hasContentType());
      assertTrue(collectionLikeType1.isFinal());
      assertTrue(collectionLikeType1.isContainerType());
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
      assertEquals(6, javaTypeArray0.length);
      
      CollectionLikeType collectionLikeType2 = collectionLikeType1.withContentTypeHandler(collectionLikeType0);
      assertNotNull(collectionLikeType2);
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType1.isInterface());
      assertTrue(collectionLikeType1.isConcrete());
      assertFalse(collectionLikeType1.isPrimitive());
      assertFalse(collectionLikeType1.isArrayType());
      assertFalse(collectionLikeType1.hasValueHandler());
      assertFalse(collectionLikeType1.isJavaLangObject());
      assertEquals(0, collectionLikeType1.containedTypeCount());
      assertTrue(collectionLikeType1.useStaticType());
      assertFalse(collectionLikeType1.isMapLikeType());
      assertFalse(collectionLikeType1.isAbstract());
      assertFalse(collectionLikeType1.isEnumType());
      assertFalse(collectionLikeType1.hasHandlers());
      assertTrue(collectionLikeType1.isCollectionLikeType());
      assertTrue(collectionLikeType1.hasContentType());
      assertTrue(collectionLikeType1.isFinal());
      assertTrue(collectionLikeType1.isContainerType());
      assertTrue(collectionLikeType2.hasHandlers());
      assertFalse(collectionLikeType2.isInterface());
      assertTrue(collectionLikeType2.isConcrete());
      assertFalse(collectionLikeType2.isEnumType());
      assertTrue(collectionLikeType2.hasContentType());
      assertTrue(collectionLikeType2.isContainerType());
      assertTrue(collectionLikeType2.isFinal());
      assertTrue(collectionLikeType2.isCollectionLikeType());
      assertFalse(collectionLikeType2.hasValueHandler());
      assertFalse(collectionLikeType2.isJavaLangObject());
      assertFalse(collectionLikeType2.isPrimitive());
      assertFalse(collectionLikeType2.isMapLikeType());
      assertFalse(collectionLikeType2.isArrayType());
      assertFalse(collectionLikeType2.isAbstract());
      assertTrue(collectionLikeType2.useStaticType());
      assertEquals(0, collectionLikeType2.containedTypeCount());
      assertNotSame(collectionLikeType0, collectionLikeType2);
      assertNotSame(collectionLikeType0, collectionLikeType1);
      assertNotSame(collectionLikeType1, collectionLikeType0);
      assertNotSame(collectionLikeType1, collectionLikeType2);
      assertNotSame(collectionLikeType2, collectionLikeType0);
      assertNotSame(collectionLikeType2, collectionLikeType1);
      assertTrue(collectionLikeType0.equals((Object)collectionLikeType1));
      assertTrue(collectionLikeType1.equals((Object)collectionLikeType0));
      assertTrue(collectionLikeType2.equals((Object)collectionLikeType1));
      assertTrue(collectionLikeType2.equals((Object)collectionLikeType0));
      assertEquals(6, javaTypeArray0.length);
      
      // Undeclared exception!
      try { 
        placeholderForType0.withContentType(collectionLikeType2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Field[] fieldArray0 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray0);
      assertEquals(0, fieldArray0.length);
      
      Field[] fieldArray1 = ClassUtil.getDeclaredFields(class0);
      assertNotNull(fieldArray1);
      assertNotSame(fieldArray1, fieldArray0);
      assertFalse(fieldArray1.equals((Object)fieldArray0));
      assertEquals(0, fieldArray1.length);
      
      boolean boolean0 = ClassUtil.isObjectOrPrimitive(class0);
      assertTrue(boolean0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getParamCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = ClassUtil.getEnclosingClass(class0);
      assertNull(class1);
      
      String string0 = "/&h^$b";
      String string1 = "*4;:FM3Jky";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("xxt,sa53I{-X3a", "*4;:FM3Jky", 0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: xxt,sa53I{-X3a", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("*4;:FM3Jky", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("xxt,sa53I{-X3a", sQLNonTransientConnectionException0.getMessage());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("/&h^$b", sQLNonTransientConnectionException0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: xxt,sa53I{-X3a", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("*4;:FM3Jky", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("xxt,sa53I{-X3a", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("/&h^$b", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: /&h^$b", sQLFeatureNotSupportedException0.toString());
      
      MockThrowable mockThrowable0 = new MockThrowable(sQLFeatureNotSupportedException0);
      assertNotNull(mockThrowable0);
      
      Throwable throwable0 = mockThrowable0.fillInStackTrace();
      assertNotNull(throwable0);
      assertEquals("java.sql.SQLNonTransientConnectionException: xxt,sa53I{-X3a", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("*4;:FM3Jky", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("xxt,sa53I{-X3a", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("/&h^$b", sQLFeatureNotSupportedException0.getMessage());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: /&h^$b", sQLFeatureNotSupportedException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: /&h^$b", mockThrowable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLFeatureNotSupportedException: /&h^$b", mockThrowable0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: /&h^$b", throwable0.getMessage());
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: java.sql.SQLFeatureNotSupportedException: /&h^$b", throwable0.toString());
      assertSame(mockThrowable0, throwable0);
      assertSame(throwable0, mockThrowable0);
      
      String string2 = "entrySet";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("8]u[E/$*,2{q'80(j", "entrySet");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // entrySet
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = ClassUtil.isNonStaticInnerClass(class0);
      assertFalse(boolean0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("2J,PCZ2!L", hashMap0, batchUpdateException0);
      assertNotNull(sQLClientInfoException0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: 2J,PCZ2!L", sQLClientInfoException0.toString());
      assertEquals("2J,PCZ2!L", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotNull(map0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: 2J,PCZ2!L", sQLClientInfoException0.toString());
      assertEquals("2J,PCZ2!L", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        sQLClientInfoException0.forEach((Consumer<? super Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Class<SimpleType> class1 = SimpleType.class;
      List<Class<?>> list0 = ClassUtil.findRawSuperTypes(class0, class1, false);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(612);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      
      String string0 = placeholderForType0.getGenericSignature();
      assertNotNull(string0);
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals("$613", string0);
      
      String string1 = placeholderForType0.toCanonical();
      assertNotNull(string1);
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(string1.equals((Object)string0));
      assertEquals("$613", string1);
      
      JavaType javaType0 = placeholderForType0.findSuperType(class0);
      assertNull(javaType0);
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl((Object) placeholderForType0);
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(boolean0);
      
      Class<RuntimeException> class2 = RuntimeException.class;
      Class<?> class3 = ClassUtil.primitiveType(class2);
      assertNull(class3);
      assertSame(class2, class0);
      
      Class<RuntimeException> class4 = RuntimeException.class;
      boolean boolean1 = ClassUtil.isJacksonStdImpl(class4);
      assertSame(class4, class2);
      assertSame(class4, class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<Byte> class5 = Byte.class;
      String string2 = ClassUtil.isLocalType(class5, false);
      assertNull(string2);
      
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertSame(class0, class4);
      assertSame(class0, class2);
      assertEquals(0, typeArray0.length);
      
      Class<Object> class6 = Object.class;
      Class<?> class7 = ClassUtil.primitiveType(class6);
      assertNull(class7);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<JsonMappingException> class0 = JsonMappingException.class;
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Class<ArrayType> class1 = ArrayType.class;
      String string0 = ClassUtil.canBeABeanType(class1);
      assertNull(string0);
      
      String string1 = ClassUtil.getPackageName(class1);
      assertNotNull(string1);
      assertEquals("com.fasterxml.jackson.databind.type", string1);
      
      // Undeclared exception!
      try { 
        ClassUtil.defaultValue(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.JsonMappingException is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type[] typeArray0 = ClassUtil.getGenericInterfaces(class0);
      assertNotNull(typeArray0);
      assertEquals(1, typeArray0.length);
      
      Class<?> class1 = ClassUtil.primitiveType(class0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals("int", class1.toString());
      
      Class<Long> class2 = Long.class;
      Class<?> class3 = ClassUtil.getDeclaringClass(class2);
      assertNull(class3);
      
      Method[] methodArray0 = ClassUtil.getClassMethods(class2);
      assertNotNull(methodArray0);
      assertEquals(52, methodArray0.length);
      
      String string0 = ClassUtil.nullOrToString((Object) null);
      assertNull(string0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Constructor<Short> constructor0 = ClassUtil.findConstructor(class0, true);
      assertNull(constructor0);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      Method[] methodArray0 = ClassUtil.getClassMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(0, methodArray0.length);
      
      ClassUtil.Ctor classUtil_Ctor0 = new ClassUtil.Ctor((Constructor<?>) null);
      assertNotNull(classUtil_Ctor0);
      
      // Undeclared exception!
      try { 
        classUtil_Ctor0.getDeclaredAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil$Ctor", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(18, methodArray0.length);
      
      String string0 = ClassUtil.nullOrToString(class0);
      assertNotNull(string0);
      
      boolean boolean0 = ClassUtil.isJacksonStdImpl(class0);
      assertFalse(boolean0);
      
      Class<AccessibleObject> class1 = AccessibleObject.class;
      try { 
        ClassUtil.findConstructor(class1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.lang.reflect.AccessibleObject is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      assertNotNull(mockRuntimeException0);
      
      Throwable throwable0 = mockRuntimeException0.fillInStackTrace();
      assertNotNull(throwable0);
      assertSame(mockRuntimeException0, throwable0);
      assertSame(throwable0, mockRuntimeException0);
      
      String string0 = ClassUtil.nullOrToString(mockRuntimeException0);
      assertNotNull(string0);
      assertSame(mockRuntimeException0, throwable0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<Float> class0 = Float.class;
      boolean boolean0 = ClassUtil.isConcrete(class0);
      assertTrue(boolean0);
      
      Class<Character> class1 = Character.class;
      boolean boolean1 = ClassUtil.isConcrete(class1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Method[] methodArray0 = ClassUtil.getDeclaredMethods(class0);
      assertNotNull(methodArray0);
      assertEquals(29, methodArray0.length);
      
      Class<Object> class2 = Object.class;
      Object object0 = ClassUtil.createInstance(class2, false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        ClassUtil.wrapperType(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Short is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2393);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      
      Class<Long> class0 = Long.class;
      boolean boolean0 = ClassUtil.hasClass(placeholderForType0, class0);
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = ClassUtil.getOuterClass(class0);
      assertNull(class1);
      
      Class<Short> class2 = Short.class;
      List<Class<?>> list0 = ClassUtil.findSuperTypes((Class<?>) null, class2);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = "entrySet";
      String string1 = "UE%>,q_.y@T";
      int int0 = 27;
      int[] intArray0 = new int[6];
      intArray0[0] = 27;
      intArray0[1] = 27;
      intArray0[2] = 27;
      intArray0[3] = 27;
      intArray0[4] = 27;
      intArray0[5] = 27;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("keyUniverse", "UE%>,q_.y@T", intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {27, 27, 27, 27, 27, 27}, intArray0);
      assertEquals("UE%>,q_.y@T", batchUpdateException0.getSQLState());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("keyUniverse", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: keyUniverse", batchUpdateException0.toString());
      assertEquals(6, intArray0.length);
      
      OutputStream outputStream0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }
}
